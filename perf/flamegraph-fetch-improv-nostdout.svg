<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="1142" onload="init(evt)" viewBox="0 0 1200 1142" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="1142" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="1125.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="1125.00"> </text><svg id="frames" x="10" width="1180" total_samples="142915"><g><title>&lt;Q as hashbrown::Equivalent&lt;K&gt;&gt;::equivalent (44 samples, 0.03%)</title><rect x="0.0588%" y="1045" width="0.0308%" height="15" fill="rgb(227,0,7)" fg:x="84" fg:w="44"/><text x="0.3088%" y="1055.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (20 samples, 0.01%)</title><rect x="0.0756%" y="1029" width="0.0140%" height="15" fill="rgb(217,0,24)" fg:x="108" fg:w="20"/><text x="0.3256%" y="1039.50"></text></g><g><title>core::mem::maybe_uninit::MaybeUninit&lt;T&gt;::write (15 samples, 0.01%)</title><rect x="0.1008%" y="1029" width="0.0105%" height="15" fill="rgb(221,193,54)" fg:x="144" fg:w="15"/><text x="0.3508%" y="1039.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (49 samples, 0.03%)</title><rect x="0.0896%" y="1045" width="0.0343%" height="15" fill="rgb(248,212,6)" fg:x="128" fg:w="49"/><text x="0.3396%" y="1055.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (18 samples, 0.01%)</title><rect x="0.1113%" y="1029" width="0.0126%" height="15" fill="rgb(208,68,35)" fg:x="159" fg:w="18"/><text x="0.3613%" y="1039.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (18 samples, 0.01%)</title><rect x="0.1113%" y="1013" width="0.0126%" height="15" fill="rgb(232,128,0)" fg:x="159" fg:w="18"/><text x="0.3613%" y="1023.50"></text></g><g><title>&lt;T as core::borrow::Borrow&lt;T&gt;&gt;::borrow (19 samples, 0.01%)</title><rect x="0.1238%" y="1045" width="0.0133%" height="15" fill="rgb(207,160,47)" fg:x="177" fg:w="19"/><text x="0.3738%" y="1055.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (51 samples, 0.04%)</title><rect x="0.1518%" y="1045" width="0.0357%" height="15" fill="rgb(228,23,34)" fg:x="217" fg:w="51"/><text x="0.4018%" y="1055.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (23 samples, 0.02%)</title><rect x="0.1896%" y="1045" width="0.0161%" height="15" fill="rgb(218,30,26)" fg:x="271" fg:w="23"/><text x="0.4396%" y="1055.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::DerefMut&gt;::deref_mut (20 samples, 0.01%)</title><rect x="0.2106%" y="1045" width="0.0140%" height="15" fill="rgb(220,122,19)" fg:x="301" fg:w="20"/><text x="0.4606%" y="1055.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (35 samples, 0.02%)</title><rect x="0.2295%" y="1045" width="0.0245%" height="15" fill="rgb(250,228,42)" fg:x="328" fg:w="35"/><text x="0.4795%" y="1055.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (34 samples, 0.02%)</title><rect x="0.2302%" y="1029" width="0.0238%" height="15" fill="rgb(240,193,28)" fg:x="329" fg:w="34"/><text x="0.4802%" y="1039.50"></text></g><g><title>&lt;coldbrew::bytecode::OPCode as core::convert::From&lt;u8&gt;&gt;::from (24 samples, 0.02%)</title><rect x="0.2624%" y="1045" width="0.0168%" height="15" fill="rgb(216,20,37)" fg:x="375" fg:w="24"/><text x="0.5124%" y="1055.50"></text></g><g><title>&lt;coldbrew::runtime::Instruction as core::clone::Clone&gt;::clone (22 samples, 0.02%)</title><rect x="0.2862%" y="1045" width="0.0154%" height="15" fill="rgb(206,188,39)" fg:x="409" fg:w="22"/><text x="0.5362%" y="1055.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::clone::Clone&gt;::clone (29 samples, 0.02%)</title><rect x="0.3282%" y="1045" width="0.0203%" height="15" fill="rgb(217,207,13)" fg:x="469" fg:w="29"/><text x="0.5782%" y="1055.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (22 samples, 0.02%)</title><rect x="0.3555%" y="1045" width="0.0154%" height="15" fill="rgb(231,73,38)" fg:x="508" fg:w="22"/><text x="0.6055%" y="1055.50"></text></g><g><title>&lt;memmap2::Mmap as core::ops::deref::Deref&gt;::deref (21 samples, 0.01%)</title><rect x="0.3785%" y="1045" width="0.0147%" height="15" fill="rgb(225,20,46)" fg:x="541" fg:w="21"/><text x="0.6285%" y="1055.50"></text></g><g><title>__GI___libc_free (71 samples, 0.05%)</title><rect x="0.4240%" y="1045" width="0.0497%" height="15" fill="rgb(210,31,41)" fg:x="606" fg:w="71"/><text x="0.6740%" y="1055.50"></text></g><g><title>__GI___libc_malloc (45 samples, 0.03%)</title><rect x="0.4737%" y="1045" width="0.0315%" height="15" fill="rgb(221,200,47)" fg:x="677" fg:w="45"/><text x="0.7237%" y="1055.50"></text></g><g><title>__memcpy_avx_unaligned_erms (81 samples, 0.06%)</title><rect x="0.5073%" y="1045" width="0.0567%" height="15" fill="rgb(226,26,5)" fg:x="725" fg:w="81"/><text x="0.7573%" y="1055.50"></text></g><g><title>_int_free (20 samples, 0.01%)</title><rect x="0.5773%" y="1045" width="0.0140%" height="15" fill="rgb(249,33,26)" fg:x="825" fg:w="20"/><text x="0.8273%" y="1055.50"></text></g><g><title>alloc::alloc::exchange_malloc (16 samples, 0.01%)</title><rect x="0.5990%" y="1045" width="0.0112%" height="15" fill="rgb(235,183,28)" fg:x="856" fg:w="16"/><text x="0.8490%" y="1055.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (15 samples, 0.01%)</title><rect x="0.6185%" y="1045" width="0.0105%" height="15" fill="rgb(221,5,38)" fg:x="884" fg:w="15"/><text x="0.8685%" y="1055.50"></text></g><g><title>alloc::raw_vec::finish_grow (26 samples, 0.02%)</title><rect x="0.6395%" y="1045" width="0.0182%" height="15" fill="rgb(247,18,42)" fg:x="914" fg:w="26"/><text x="0.8895%" y="1055.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::into_vec (23 samples, 0.02%)</title><rect x="0.6577%" y="1045" width="0.0161%" height="15" fill="rgb(241,131,45)" fg:x="940" fg:w="23"/><text x="0.9077%" y="1055.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::pop (104 samples, 0.07%)</title><rect x="0.6878%" y="1045" width="0.0728%" height="15" fill="rgb(249,31,29)" fg:x="983" fg:w="104"/><text x="0.9378%" y="1055.50"></text></g><g><title>core::ptr::read (16 samples, 0.01%)</title><rect x="0.7494%" y="1029" width="0.0112%" height="15" fill="rgb(225,111,53)" fg:x="1071" fg:w="16"/><text x="0.9994%" y="1039.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (138 samples, 0.10%)</title><rect x="0.7606%" y="1045" width="0.0966%" height="15" fill="rgb(238,160,17)" fg:x="1087" fg:w="138"/><text x="1.0106%" y="1055.50"></text></g><g><title>core::ptr::write (55 samples, 0.04%)</title><rect x="0.8187%" y="1029" width="0.0385%" height="15" fill="rgb(214,148,48)" fg:x="1170" fg:w="55"/><text x="1.0687%" y="1039.50"></text></g><g><title>coldbrew::jit::JitCache::execute (45 samples, 0.03%)</title><rect x="0.8614%" y="1045" width="0.0315%" height="15" fill="rgb(232,36,49)" fg:x="1231" fg:w="45"/><text x="1.1114%" y="1055.50"></text></g><g><title>coldbrew::profiler::Profiler::count_entry (168 samples, 0.12%)</title><rect x="0.8928%" y="1045" width="0.1176%" height="15" fill="rgb(209,103,24)" fg:x="1276" fg:w="168"/><text x="1.1428%" y="1055.50"></text></g><g><title>coldbrew::program::Program::code (34 samples, 0.02%)</title><rect x="1.0132%" y="1045" width="0.0238%" height="15" fill="rgb(229,88,8)" fg:x="1448" fg:w="34"/><text x="1.2632%" y="1055.50"></text></g><g><title>coldbrew::runtime::Frame::instruction_index (23 samples, 0.02%)</title><rect x="1.0384%" y="1045" width="0.0161%" height="15" fill="rgb(213,181,19)" fg:x="1484" fg:w="23"/><text x="1.2884%" y="1055.50"></text></g><g><title>coldbrew::runtime::Frame::method_index (23 samples, 0.02%)</title><rect x="1.0545%" y="1045" width="0.0161%" height="15" fill="rgb(254,191,54)" fg:x="1507" fg:w="23"/><text x="1.3045%" y="1055.50"></text></g><g><title>coldbrew::runtime::Runtime::eval::{{closure}} (21 samples, 0.01%)</title><rect x="1.0867%" y="1045" width="0.0147%" height="15" fill="rgb(241,83,37)" fg:x="1553" fg:w="21"/><text x="1.3367%" y="1055.50"></text></g><g><title>coldbrew::runtime::Runtime::get_relative_offset (26 samples, 0.02%)</title><rect x="1.1014%" y="1045" width="0.0182%" height="15" fill="rgb(233,36,39)" fg:x="1574" fg:w="26"/><text x="1.3514%" y="1055.50"></text></g><g><title>coldbrew::runtime::Runtime::next (117 samples, 0.08%)</title><rect x="1.1286%" y="1045" width="0.0819%" height="15" fill="rgb(226,3,54)" fg:x="1613" fg:w="117"/><text x="1.3786%" y="1055.50"></text></g><g><title>coldbrew::runtime::Runtime::pop (58 samples, 0.04%)</title><rect x="1.2105%" y="1045" width="0.0406%" height="15" fill="rgb(245,192,40)" fg:x="1730" fg:w="58"/><text x="1.4605%" y="1055.50"></text></g><g><title>core::alloc::layout::Layout::array::inner (21 samples, 0.01%)</title><rect x="1.2616%" y="1045" width="0.0147%" height="15" fill="rgb(238,167,29)" fg:x="1803" fg:w="21"/><text x="1.5116%" y="1055.50"></text></g><g><title>core::cmp::max_by (28 samples, 0.02%)</title><rect x="1.2868%" y="1045" width="0.0196%" height="15" fill="rgb(232,182,51)" fg:x="1839" fg:w="28"/><text x="1.5368%" y="1055.50"></text></g><g><title>core::hash::BuildHasher::hash_one (27 samples, 0.02%)</title><rect x="1.3120%" y="1045" width="0.0189%" height="15" fill="rgb(231,60,39)" fg:x="1875" fg:w="27"/><text x="1.5620%" y="1055.50"></text></g><g><title>core::ptr::drop_in_place&lt;coldbrew::runtime::Instruction&gt; (24 samples, 0.02%)</title><rect x="1.3910%" y="1045" width="0.0168%" height="15" fill="rgb(208,69,12)" fg:x="1988" fg:w="24"/><text x="1.6410%" y="1055.50"></text></g><g><title>core::ptr::drop_in_place&lt;coldbrew::trace::RecordEntry&gt; (18 samples, 0.01%)</title><rect x="1.4078%" y="1045" width="0.0126%" height="15" fill="rgb(235,93,37)" fg:x="2012" fg:w="18"/><text x="1.6578%" y="1055.50"></text></g><g><title>hashbrown::map::equivalent_key::{{closure}} (28 samples, 0.02%)</title><rect x="1.4939%" y="1045" width="0.0196%" height="15" fill="rgb(213,116,39)" fg:x="2135" fg:w="28"/><text x="1.7439%" y="1055.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (33 samples, 0.02%)</title><rect x="1.5268%" y="1045" width="0.0231%" height="15" fill="rgb(222,207,29)" fg:x="2182" fg:w="33"/><text x="1.7768%" y="1055.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::find_inner (31 samples, 0.02%)</title><rect x="1.5282%" y="1029" width="0.0217%" height="15" fill="rgb(206,96,30)" fg:x="2184" fg:w="31"/><text x="1.7782%" y="1039.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::iter (17 samples, 0.01%)</title><rect x="1.5597%" y="1045" width="0.0119%" height="15" fill="rgb(218,138,4)" fg:x="2229" fg:w="17"/><text x="1.8097%" y="1055.50"></text></g><g><title>[[heap]] (2,227 samples, 1.56%)</title><rect x="0.0581%" y="1061" width="1.5583%" height="15" fill="rgb(250,191,14)" fg:x="83" fg:w="2227"/><text x="0.3081%" y="1071.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (19 samples, 0.01%)</title><rect x="1.6233%" y="1045" width="0.0133%" height="15" fill="rgb(239,60,40)" fg:x="2320" fg:w="19"/><text x="1.8733%" y="1055.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (27 samples, 0.02%)</title><rect x="1.6401%" y="1045" width="0.0189%" height="15" fill="rgb(206,27,48)" fg:x="2344" fg:w="27"/><text x="1.8901%" y="1055.50"></text></g><g><title>&lt;alloc::alloc::Global as core::clone::Clone&gt;::clone (27 samples, 0.02%)</title><rect x="1.6590%" y="1045" width="0.0189%" height="15" fill="rgb(225,35,8)" fg:x="2371" fg:w="27"/><text x="1.9090%" y="1055.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (48 samples, 0.03%)</title><rect x="1.6905%" y="1045" width="0.0336%" height="15" fill="rgb(250,213,24)" fg:x="2416" fg:w="48"/><text x="1.9405%" y="1055.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (25 samples, 0.02%)</title><rect x="1.7353%" y="1045" width="0.0175%" height="15" fill="rgb(247,123,22)" fg:x="2480" fg:w="25"/><text x="1.9853%" y="1055.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (46 samples, 0.03%)</title><rect x="1.7626%" y="1045" width="0.0322%" height="15" fill="rgb(231,138,38)" fg:x="2519" fg:w="46"/><text x="2.0126%" y="1055.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (27 samples, 0.02%)</title><rect x="1.7969%" y="1045" width="0.0189%" height="15" fill="rgb(231,145,46)" fg:x="2568" fg:w="27"/><text x="2.0469%" y="1055.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (80 samples, 0.06%)</title><rect x="1.8158%" y="1045" width="0.0560%" height="15" fill="rgb(251,118,11)" fg:x="2595" fg:w="80"/><text x="2.0658%" y="1055.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (33 samples, 0.02%)</title><rect x="1.8487%" y="1029" width="0.0231%" height="15" fill="rgb(217,147,25)" fg:x="2642" fg:w="33"/><text x="2.0987%" y="1039.50"></text></g><g><title>&lt;coldbrew::runtime::ProgramCounter as core::hash::Hash&gt;::hash (171 samples, 0.12%)</title><rect x="1.8962%" y="1045" width="0.1197%" height="15" fill="rgb(247,81,37)" fg:x="2710" fg:w="171"/><text x="2.1462%" y="1055.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (63 samples, 0.04%)</title><rect x="2.0194%" y="1045" width="0.0441%" height="15" fill="rgb(209,12,38)" fg:x="2886" fg:w="63"/><text x="2.2694%" y="1055.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (95 samples, 0.07%)</title><rect x="2.0635%" y="1045" width="0.0665%" height="15" fill="rgb(227,1,9)" fg:x="2949" fg:w="95"/><text x="2.3135%" y="1055.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (45 samples, 0.03%)</title><rect x="2.1299%" y="1045" width="0.0315%" height="15" fill="rgb(248,47,43)" fg:x="3044" fg:w="45"/><text x="2.3799%" y="1055.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (16 samples, 0.01%)</title><rect x="2.1642%" y="1045" width="0.0112%" height="15" fill="rgb(221,10,30)" fg:x="3093" fg:w="16"/><text x="2.4142%" y="1055.50"></text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::clone::Clone&gt;::clone (17 samples, 0.01%)</title><rect x="2.2027%" y="1045" width="0.0119%" height="15" fill="rgb(210,229,1)" fg:x="3148" fg:w="17"/><text x="2.4527%" y="1055.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (31 samples, 0.02%)</title><rect x="2.2265%" y="1045" width="0.0217%" height="15" fill="rgb(222,148,37)" fg:x="3182" fg:w="31"/><text x="2.4765%" y="1055.50"></text></g><g><title>&lt;memmap2::os::MmapInner as core::ops::drop::Drop&gt;::drop (76 samples, 0.05%)</title><rect x="2.2832%" y="1045" width="0.0532%" height="15" fill="rgb(234,67,33)" fg:x="3263" fg:w="76"/><text x="2.5332%" y="1055.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::finish (95 samples, 0.07%)</title><rect x="2.3364%" y="1045" width="0.0665%" height="15" fill="rgb(247,98,35)" fg:x="3339" fg:w="95"/><text x="2.5864%" y="1055.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (91 samples, 0.06%)</title><rect x="2.3392%" y="1029" width="0.0637%" height="15" fill="rgb(247,138,52)" fg:x="3343" fg:w="91"/><text x="2.5892%" y="1039.50"></text></g><g><title>&lt;std::collections::hash::set::HashSet&lt;T,S&gt; as core::clone::Clone&gt;::clone (27 samples, 0.02%)</title><rect x="2.4259%" y="1045" width="0.0189%" height="15" fill="rgb(213,79,30)" fg:x="3467" fg:w="27"/><text x="2.6759%" y="1055.50"></text></g><g><title>&lt;hashbrown::set::HashSet&lt;T,S,A&gt; as core::clone::Clone&gt;::clone (17 samples, 0.01%)</title><rect x="2.4329%" y="1029" width="0.0119%" height="15" fill="rgb(246,177,23)" fg:x="3477" fg:w="17"/><text x="2.6829%" y="1039.50"></text></g><g><title>__GI___libc_malloc (20 samples, 0.01%)</title><rect x="2.4518%" y="1045" width="0.0140%" height="15" fill="rgb(230,62,27)" fg:x="3504" fg:w="20"/><text x="2.7018%" y="1055.50"></text></g><g><title>__GI___munmap (104 samples, 0.07%)</title><rect x="2.4714%" y="1045" width="0.0728%" height="15" fill="rgb(216,154,8)" fg:x="3532" fg:w="104"/><text x="2.7214%" y="1055.50"></text></g><g><title>[unknown] (104 samples, 0.07%)</title><rect x="2.4714%" y="1029" width="0.0728%" height="15" fill="rgb(244,35,45)" fg:x="3532" fg:w="104"/><text x="2.7214%" y="1039.50"></text></g><g><title>__memcpy_avx_unaligned_erms (149 samples, 0.10%)</title><rect x="2.5442%" y="1045" width="0.1043%" height="15" fill="rgb(251,115,12)" fg:x="3636" fg:w="149"/><text x="2.7942%" y="1055.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (29 samples, 0.02%)</title><rect x="2.6617%" y="1045" width="0.0203%" height="15" fill="rgb(240,54,50)" fg:x="3804" fg:w="29"/><text x="2.9117%" y="1055.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (16 samples, 0.01%)</title><rect x="2.7044%" y="1045" width="0.0112%" height="15" fill="rgb(233,84,52)" fg:x="3865" fg:w="16"/><text x="2.9544%" y="1055.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::current_memory (16 samples, 0.01%)</title><rect x="2.7156%" y="1045" width="0.0112%" height="15" fill="rgb(207,117,47)" fg:x="3881" fg:w="16"/><text x="2.9656%" y="1055.50"></text></g><g><title>alloc::slice::hack::into_vec (18 samples, 0.01%)</title><rect x="2.7394%" y="1045" width="0.0126%" height="15" fill="rgb(249,43,39)" fg:x="3915" fg:w="18"/><text x="2.9894%" y="1055.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (18 samples, 0.01%)</title><rect x="2.7597%" y="1045" width="0.0126%" height="15" fill="rgb(209,38,44)" fg:x="3944" fg:w="18"/><text x="3.0097%" y="1055.50"></text></g><g><title>coldbrew::jit::JitCache::compile (42 samples, 0.03%)</title><rect x="2.7744%" y="1045" width="0.0294%" height="15" fill="rgb(236,212,23)" fg:x="3965" fg:w="42"/><text x="3.0244%" y="1055.50"></text></g><g><title>coldbrew::jit::JitCache::first_available_register (29 samples, 0.02%)</title><rect x="2.8038%" y="1045" width="0.0203%" height="15" fill="rgb(242,79,21)" fg:x="4007" fg:w="29"/><text x="3.0538%" y="1055.50"></text></g><g><title>coldbrew::jit::JitCache::has_native_trace (49 samples, 0.03%)</title><rect x="2.8241%" y="1045" width="0.0343%" height="15" fill="rgb(211,96,35)" fg:x="4036" fg:w="49"/><text x="3.0741%" y="1055.50"></text></g><g><title>coldbrew::profiler::Profiler::is_hot (35 samples, 0.02%)</title><rect x="2.8583%" y="1045" width="0.0245%" height="15" fill="rgb(253,215,40)" fg:x="4085" fg:w="35"/><text x="3.1083%" y="1055.50"></text></g><g><title>coldbrew::runtime::Frame::inc_instruction_index (47 samples, 0.03%)</title><rect x="2.8828%" y="1045" width="0.0329%" height="15" fill="rgb(211,81,21)" fg:x="4120" fg:w="47"/><text x="3.1328%" y="1055.50"></text></g><g><title>coldbrew::runtime::Instruction::nth (26 samples, 0.02%)</title><rect x="2.9157%" y="1045" width="0.0182%" height="15" fill="rgb(208,190,38)" fg:x="4167" fg:w="26"/><text x="3.1657%" y="1055.50"></text></g><g><title>coldbrew::runtime::ProgramCounter::get_instruction_index (42 samples, 0.03%)</title><rect x="2.9339%" y="1045" width="0.0294%" height="15" fill="rgb(235,213,38)" fg:x="4193" fg:w="42"/><text x="3.1839%" y="1055.50"></text></g><g><title>coldbrew::runtime::ProgramCounter::get_method_index (55 samples, 0.04%)</title><rect x="2.9633%" y="1045" width="0.0385%" height="15" fill="rgb(237,122,38)" fg:x="4235" fg:w="55"/><text x="3.2133%" y="1055.50"></text></g><g><title>coldbrew::runtime::Runtime::eval (222 samples, 0.16%)</title><rect x="3.0018%" y="1045" width="0.1553%" height="15" fill="rgb(244,218,35)" fg:x="4290" fg:w="222"/><text x="3.2518%" y="1055.50"></text></g><g><title>coldbrew::runtime::Runtime::eval::{{closure}} (20 samples, 0.01%)</title><rect x="3.1571%" y="1045" width="0.0140%" height="15" fill="rgb(240,68,47)" fg:x="4512" fg:w="20"/><text x="3.4071%" y="1055.50"></text></g><g><title>coldbrew::runtime::Runtime::fetch (169 samples, 0.12%)</title><rect x="3.1711%" y="1045" width="0.1183%" height="15" fill="rgb(210,16,53)" fg:x="4532" fg:w="169"/><text x="3.4211%" y="1055.50"></text></g><g><title>coldbrew::trace::Recorder::record (33 samples, 0.02%)</title><rect x="3.2957%" y="1045" width="0.0231%" height="15" fill="rgb(235,124,12)" fg:x="4710" fg:w="33"/><text x="3.5457%" y="1055.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::Ord for usize&gt;::cmp (31 samples, 0.02%)</title><rect x="3.3307%" y="1045" width="0.0217%" height="15" fill="rgb(224,169,11)" fg:x="4760" fg:w="31"/><text x="3.5807%" y="1055.50"></text></g><g><title>core::hash::BuildHasher::hash_one (183 samples, 0.13%)</title><rect x="3.3530%" y="1045" width="0.1280%" height="15" fill="rgb(250,166,2)" fg:x="4792" fg:w="183"/><text x="3.6030%" y="1055.50"></text></g><g><title>core::hash::Hasher::write_usize (89 samples, 0.06%)</title><rect x="3.4811%" y="1045" width="0.0623%" height="15" fill="rgb(242,216,29)" fg:x="4975" fg:w="89"/><text x="3.7311%" y="1055.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (62 samples, 0.04%)</title><rect x="3.5434%" y="1045" width="0.0434%" height="15" fill="rgb(230,116,27)" fg:x="5064" fg:w="62"/><text x="3.7934%" y="1055.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for usize&gt;::hash (248 samples, 0.17%)</title><rect x="3.5867%" y="1045" width="0.1735%" height="15" fill="rgb(228,99,48)" fg:x="5126" fg:w="248"/><text x="3.8367%" y="1055.50"></text></g><g><title>core::hash::sip::u8to64_le (53 samples, 0.04%)</title><rect x="3.7603%" y="1045" width="0.0371%" height="15" fill="rgb(253,11,6)" fg:x="5374" fg:w="53"/><text x="4.0103%" y="1055.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;coldbrew::runtime::Value&gt;&gt; (71 samples, 0.05%)</title><rect x="3.8491%" y="1045" width="0.0497%" height="15" fill="rgb(247,143,39)" fg:x="5501" fg:w="71"/><text x="4.0991%" y="1055.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;core::option::Option&lt;dynasmrt::AssemblyOffset&gt;&gt;&gt; (31 samples, 0.02%)</title><rect x="3.9030%" y="1045" width="0.0217%" height="15" fill="rgb(236,97,10)" fg:x="5578" fg:w="31"/><text x="4.1530%" y="1055.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;(dynasmrt::components::PatchLoc&lt;dynasmrt::x64::X64Relocation&gt;,dynasmrt::DynamicLabel)&gt;&gt; (18 samples, 0.01%)</title><rect x="3.9429%" y="1045" width="0.0126%" height="15" fill="rgb(233,208,19)" fg:x="5635" fg:w="18"/><text x="4.1929%" y="1055.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;coldbrew::runtime::Value&gt;&gt; (52 samples, 0.04%)</title><rect x="3.9639%" y="1045" width="0.0364%" height="15" fill="rgb(216,164,2)" fg:x="5665" fg:w="52"/><text x="4.2139%" y="1055.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;core::option::Option&lt;dynasmrt::AssemblyOffset&gt;&gt;&gt; (23 samples, 0.02%)</title><rect x="4.0003%" y="1045" width="0.0161%" height="15" fill="rgb(220,129,5)" fg:x="5717" fg:w="23"/><text x="4.2503%" y="1055.50"></text></g><g><title>core::ptr::drop_in_place&lt;coldbrew::runtime::Instruction&gt; (61 samples, 0.04%)</title><rect x="4.0339%" y="1045" width="0.0427%" height="15" fill="rgb(242,17,10)" fg:x="5765" fg:w="61"/><text x="4.2839%" y="1055.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;alloc::vec::Vec&lt;coldbrew::runtime::Value&gt;&gt;&gt; (55 samples, 0.04%)</title><rect x="4.0765%" y="1045" width="0.0385%" height="15" fill="rgb(242,107,0)" fg:x="5826" fg:w="55"/><text x="4.3265%" y="1055.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;memmap2::Mmap&gt;&gt; (20 samples, 0.01%)</title><rect x="4.1185%" y="1045" width="0.0140%" height="15" fill="rgb(251,28,31)" fg:x="5886" fg:w="20"/><text x="4.3685%" y="1055.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::raw::RawTable&lt;(coldbrew::runtime::ProgramCounter,())&gt;&gt; (18 samples, 0.01%)</title><rect x="4.1976%" y="1045" width="0.0126%" height="15" fill="rgb(233,223,10)" fg:x="5999" fg:w="18"/><text x="4.4476%" y="1055.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::raw::RawTable&lt;(dynasmrt::components::StaticLabel,dynasmrt::AssemblyOffset)&gt;&gt; (26 samples, 0.02%)</title><rect x="4.2102%" y="1045" width="0.0182%" height="15" fill="rgb(215,21,27)" fg:x="6017" fg:w="26"/><text x="4.4602%" y="1055.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::set::HashSet&lt;coldbrew::runtime::ProgramCounter,std::collections::hash::map::RandomState&gt;&gt; (17 samples, 0.01%)</title><rect x="4.2368%" y="1045" width="0.0119%" height="15" fill="rgb(232,23,21)" fg:x="6055" fg:w="17"/><text x="4.4868%" y="1055.50"></text></g><g><title>core::ptr::drop_in_place&lt;memmap2::os::MmapInner&gt; (25 samples, 0.02%)</title><rect x="4.2487%" y="1045" width="0.0175%" height="15" fill="rgb(244,5,23)" fg:x="6072" fg:w="25"/><text x="4.4987%" y="1055.50"></text></g><g><title>dynasmrt::Assembler&lt;R&gt;::commit (34 samples, 0.02%)</title><rect x="4.3235%" y="1045" width="0.0238%" height="15" fill="rgb(226,81,46)" fg:x="6179" fg:w="34"/><text x="4.5735%" y="1055.50"></text></g><g><title>dynasmrt::components::MemoryManager::finalize (25 samples, 0.02%)</title><rect x="4.3564%" y="1045" width="0.0175%" height="15" fill="rgb(247,70,30)" fg:x="6226" fg:w="25"/><text x="4.6064%" y="1055.50"></text></g><g><title>dynasmrt::components::MemoryManager::new (16 samples, 0.01%)</title><rect x="4.3739%" y="1045" width="0.0112%" height="15" fill="rgb(212,68,19)" fg:x="6251" fg:w="16"/><text x="4.6239%" y="1055.50"></text></g><g><title>dynasmrt::components::MemoryManager::write (19 samples, 0.01%)</title><rect x="4.3851%" y="1045" width="0.0133%" height="15" fill="rgb(240,187,13)" fg:x="6267" fg:w="19"/><text x="4.6351%" y="1055.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::contains_key (47 samples, 0.03%)</title><rect x="4.4040%" y="1045" width="0.0329%" height="15" fill="rgb(223,113,26)" fg:x="6294" fg:w="47"/><text x="4.6540%" y="1055.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (20 samples, 0.01%)</title><rect x="4.4229%" y="1029" width="0.0140%" height="15" fill="rgb(206,192,2)" fg:x="6321" fg:w="20"/><text x="4.6729%" y="1039.50"></text></g><g><title>hashbrown::map::make_hash (20 samples, 0.01%)</title><rect x="4.4229%" y="1013" width="0.0140%" height="15" fill="rgb(241,108,4)" fg:x="6321" fg:w="20"/><text x="4.6729%" y="1023.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (51 samples, 0.04%)</title><rect x="4.4369%" y="1045" width="0.0357%" height="15" fill="rgb(247,173,49)" fg:x="6341" fg:w="51"/><text x="4.6869%" y="1055.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (26 samples, 0.02%)</title><rect x="4.4544%" y="1029" width="0.0182%" height="15" fill="rgb(224,114,35)" fg:x="6366" fg:w="26"/><text x="4.7044%" y="1039.50"></text></g><g><title>hashbrown::map::make_hash (26 samples, 0.02%)</title><rect x="4.4544%" y="1013" width="0.0182%" height="15" fill="rgb(245,159,27)" fg:x="6366" fg:w="26"/><text x="4.7044%" y="1023.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (18 samples, 0.01%)</title><rect x="4.4726%" y="1045" width="0.0126%" height="15" fill="rgb(245,172,44)" fg:x="6392" fg:w="18"/><text x="4.7226%" y="1055.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (93 samples, 0.07%)</title><rect x="4.4936%" y="1045" width="0.0651%" height="15" fill="rgb(236,23,11)" fg:x="6422" fg:w="93"/><text x="4.7436%" y="1055.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::find_inner (23 samples, 0.02%)</title><rect x="4.5426%" y="1029" width="0.0161%" height="15" fill="rgb(205,117,38)" fg:x="6492" fg:w="23"/><text x="4.7926%" y="1039.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get (107 samples, 0.07%)</title><rect x="4.5657%" y="1045" width="0.0749%" height="15" fill="rgb(237,72,25)" fg:x="6525" fg:w="107"/><text x="4.8157%" y="1055.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::iter (30 samples, 0.02%)</title><rect x="4.6496%" y="1045" width="0.0210%" height="15" fill="rgb(244,70,9)" fg:x="6645" fg:w="30"/><text x="4.8996%" y="1055.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (516 samples, 0.36%)</title><rect x="4.6769%" y="1045" width="0.3611%" height="15" fill="rgb(217,125,39)" fg:x="6684" fg:w="516"/><text x="4.9269%" y="1055.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::contains_key (51 samples, 0.04%)</title><rect x="5.0799%" y="1045" width="0.0357%" height="15" fill="rgb(235,36,10)" fg:x="7260" fg:w="51"/><text x="5.3299%" y="1055.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (85 samples, 0.06%)</title><rect x="5.1156%" y="1045" width="0.0595%" height="15" fill="rgb(251,123,47)" fg:x="7311" fg:w="85"/><text x="5.3656%" y="1055.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::iter (17 samples, 0.01%)</title><rect x="5.1849%" y="1045" width="0.0119%" height="15" fill="rgb(221,13,13)" fg:x="7410" fg:w="17"/><text x="5.4349%" y="1055.50"></text></g><g><title>[[stack]] (5,142 samples, 3.60%)</title><rect x="1.6163%" y="1061" width="3.5979%" height="15" fill="rgb(238,131,9)" fg:x="2310" fg:w="5142"/><text x="1.8663%" y="1071.50">[[st..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (17 samples, 0.01%)</title><rect x="5.2143%" y="1045" width="0.0119%" height="15" fill="rgb(211,50,8)" fg:x="7452" fg:w="17"/><text x="5.4643%" y="1055.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (17 samples, 0.01%)</title><rect x="5.2143%" y="1029" width="0.0119%" height="15" fill="rgb(245,182,24)" fg:x="7452" fg:w="17"/><text x="5.4643%" y="1039.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::iter::traits::collect::Extend&lt;&amp;T&gt;&gt;::extend (45 samples, 0.03%)</title><rect x="5.2269%" y="1045" width="0.0315%" height="15" fill="rgb(242,14,37)" fg:x="7470" fg:w="45"/><text x="5.4769%" y="1055.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (30 samples, 0.02%)</title><rect x="5.2752%" y="1045" width="0.0210%" height="15" fill="rgb(246,228,12)" fg:x="7539" fg:w="30"/><text x="5.5252%" y="1055.50"></text></g><g><title>core::hash::BuildHasher::hash_one (15 samples, 0.01%)</title><rect x="5.2976%" y="1045" width="0.0105%" height="15" fill="rgb(213,55,15)" fg:x="7571" fg:w="15"/><text x="5.5476%" y="1055.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::raw::RawTable&lt;(dynasmrt::components::StaticLabel,dynasmrt::AssemblyOffset)&gt;&gt; (25 samples, 0.02%)</title><rect x="5.3171%" y="1045" width="0.0175%" height="15" fill="rgb(209,9,3)" fg:x="7599" fg:w="25"/><text x="5.5671%" y="1055.50"></text></g><g><title>dynasmrt::Assembler&lt;R&gt;::finalize (42 samples, 0.03%)</title><rect x="5.3346%" y="1045" width="0.0294%" height="15" fill="rgb(230,59,30)" fg:x="7624" fg:w="42"/><text x="5.5846%" y="1055.50"></text></g><g><title>[coldbrew] (235 samples, 0.16%)</title><rect x="5.2143%" y="1061" width="0.1644%" height="15" fill="rgb(209,121,21)" fg:x="7452" fg:w="235"/><text x="5.4643%" y="1071.50"></text></g><g><title>__GI___mprotect (19 samples, 0.01%)</title><rect x="5.3836%" y="1045" width="0.0133%" height="15" fill="rgb(220,109,13)" fg:x="7694" fg:w="19"/><text x="5.6336%" y="1055.50"></text></g><g><title>[ld-linux-x86-64.so.2] (88 samples, 0.06%)</title><rect x="5.3787%" y="1061" width="0.0616%" height="15" fill="rgb(232,18,1)" fg:x="7687" fg:w="88"/><text x="5.6287%" y="1071.50"></text></g><g><title>memmap2::os::MmapInner::new (29 samples, 0.02%)</title><rect x="5.4200%" y="1045" width="0.0203%" height="15" fill="rgb(215,41,42)" fg:x="7746" fg:w="29"/><text x="5.6700%" y="1055.50"></text></g><g><title>__GI___mmap64 (29 samples, 0.02%)</title><rect x="5.4200%" y="1029" width="0.0203%" height="15" fill="rgb(224,123,36)" fg:x="7746" fg:w="29"/><text x="5.6700%" y="1039.50"></text></g><g><title>__GI___mmap64 (29 samples, 0.02%)</title><rect x="5.4200%" y="1013" width="0.0203%" height="15" fill="rgb(240,125,3)" fg:x="7746" fg:w="29"/><text x="5.6700%" y="1023.50"></text></g><g><title>[unknown] (29 samples, 0.02%)</title><rect x="5.4200%" y="997" width="0.0203%" height="15" fill="rgb(205,98,50)" fg:x="7746" fg:w="29"/><text x="5.6700%" y="1007.50"></text></g><g><title>__GI___mprotect (21 samples, 0.01%)</title><rect x="5.5592%" y="1045" width="0.0147%" height="15" fill="rgb(205,185,37)" fg:x="7945" fg:w="21"/><text x="5.8092%" y="1055.50"></text></g><g><title>memmap2::os::MmapInner::new (37 samples, 0.03%)</title><rect x="5.5970%" y="1045" width="0.0259%" height="15" fill="rgb(238,207,15)" fg:x="7999" fg:w="37"/><text x="5.8470%" y="1055.50"></text></g><g><title>__GI___mmap64 (37 samples, 0.03%)</title><rect x="5.5970%" y="1029" width="0.0259%" height="15" fill="rgb(213,199,42)" fg:x="7999" fg:w="37"/><text x="5.8470%" y="1039.50"></text></g><g><title>__GI___mmap64 (37 samples, 0.03%)</title><rect x="5.5970%" y="1013" width="0.0259%" height="15" fill="rgb(235,201,11)" fg:x="7999" fg:w="37"/><text x="5.8470%" y="1023.50"></text></g><g><title>[unknown] (37 samples, 0.03%)</title><rect x="5.5970%" y="997" width="0.0259%" height="15" fill="rgb(207,46,11)" fg:x="7999" fg:w="37"/><text x="5.8470%" y="1007.50"></text></g><g><title>[perf-25697.map] (256 samples, 0.18%)</title><rect x="5.4445%" y="1061" width="0.1791%" height="15" fill="rgb(241,35,35)" fg:x="7781" fg:w="256"/><text x="5.6945%" y="1071.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (16 samples, 0.01%)</title><rect x="6.8194%" y="1045" width="0.0112%" height="15" fill="rgb(243,32,47)" fg:x="9746" fg:w="16"/><text x="7.0694%" y="1055.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (48 samples, 0.03%)</title><rect x="6.8376%" y="1045" width="0.0336%" height="15" fill="rgb(247,202,23)" fg:x="9772" fg:w="48"/><text x="7.0876%" y="1055.50"></text></g><g><title>alloc::alloc::dealloc (45 samples, 0.03%)</title><rect x="6.8397%" y="1029" width="0.0315%" height="15" fill="rgb(219,102,11)" fg:x="9775" fg:w="45"/><text x="7.0897%" y="1039.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (48 samples, 0.03%)</title><rect x="6.8838%" y="1045" width="0.0336%" height="15" fill="rgb(243,110,44)" fg:x="9838" fg:w="48"/><text x="7.1338%" y="1055.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (35 samples, 0.02%)</title><rect x="6.9321%" y="1045" width="0.0245%" height="15" fill="rgb(222,74,54)" fg:x="9907" fg:w="35"/><text x="7.1821%" y="1055.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::DerefMut&gt;::deref_mut (25 samples, 0.02%)</title><rect x="6.9566%" y="1045" width="0.0175%" height="15" fill="rgb(216,99,12)" fg:x="9942" fg:w="25"/><text x="7.2066%" y="1055.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (19 samples, 0.01%)</title><rect x="6.9741%" y="1045" width="0.0133%" height="15" fill="rgb(226,22,26)" fg:x="9967" fg:w="19"/><text x="7.2241%" y="1055.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (18 samples, 0.01%)</title><rect x="6.9874%" y="1045" width="0.0126%" height="15" fill="rgb(217,163,10)" fg:x="9986" fg:w="18"/><text x="7.2374%" y="1055.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (192 samples, 0.13%)</title><rect x="7.0070%" y="1045" width="0.1343%" height="15" fill="rgb(213,25,53)" fg:x="10014" fg:w="192"/><text x="7.2570%" y="1055.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (234 samples, 0.16%)</title><rect x="7.1413%" y="1045" width="0.1637%" height="15" fill="rgb(252,105,26)" fg:x="10206" fg:w="234"/><text x="7.3913%" y="1055.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (150 samples, 0.10%)</title><rect x="7.3050%" y="1045" width="0.1050%" height="15" fill="rgb(220,39,43)" fg:x="10440" fg:w="150"/><text x="7.5550%" y="1055.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (78 samples, 0.05%)</title><rect x="7.4100%" y="1045" width="0.0546%" height="15" fill="rgb(229,68,48)" fg:x="10590" fg:w="78"/><text x="7.6600%" y="1055.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (33 samples, 0.02%)</title><rect x="7.4849%" y="1045" width="0.0231%" height="15" fill="rgb(252,8,32)" fg:x="10697" fg:w="33"/><text x="7.7349%" y="1055.50"></text></g><g><title>&lt;dynasmrt::Assembler&lt;R&gt; as dynasmrt::DynasmApi&gt;::push (31 samples, 0.02%)</title><rect x="7.5192%" y="1045" width="0.0217%" height="15" fill="rgb(223,20,43)" fg:x="10746" fg:w="31"/><text x="7.7692%" y="1055.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (91 samples, 0.06%)</title><rect x="7.5562%" y="1045" width="0.0637%" height="15" fill="rgb(229,81,49)" fg:x="10799" fg:w="91"/><text x="7.8062%" y="1055.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::finish (62 samples, 0.04%)</title><rect x="7.6199%" y="1045" width="0.0434%" height="15" fill="rgb(236,28,36)" fg:x="10890" fg:w="62"/><text x="7.8699%" y="1055.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (210 samples, 0.15%)</title><rect x="7.6633%" y="1045" width="0.1469%" height="15" fill="rgb(249,185,26)" fg:x="10952" fg:w="210"/><text x="7.9133%" y="1055.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (107 samples, 0.07%)</title><rect x="7.7354%" y="1029" width="0.0749%" height="15" fill="rgb(249,174,33)" fg:x="11055" fg:w="107"/><text x="7.9854%" y="1039.50"></text></g><g><title>&lt;std::collections::hash::map::RandomState as core::hash::BuildHasher&gt;::build_hasher (379 samples, 0.27%)</title><rect x="7.8102%" y="1045" width="0.2652%" height="15" fill="rgb(233,201,37)" fg:x="11162" fg:w="379"/><text x="8.0602%" y="1055.50"></text></g><g><title>core::hash::sip::SipHasher13::new_with_keys (204 samples, 0.14%)</title><rect x="7.9327%" y="1029" width="0.1427%" height="15" fill="rgb(221,78,26)" fg:x="11337" fg:w="204"/><text x="8.1827%" y="1039.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::new_with_keys (72 samples, 0.05%)</title><rect x="8.0250%" y="1013" width="0.0504%" height="15" fill="rgb(250,127,30)" fg:x="11469" fg:w="72"/><text x="8.2750%" y="1023.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (62 samples, 0.04%)</title><rect x="8.0768%" y="1045" width="0.0434%" height="15" fill="rgb(230,49,44)" fg:x="11543" fg:w="62"/><text x="8.3268%" y="1055.50"></text></g><g><title>__GI___libc_free (51 samples, 0.04%)</title><rect x="8.1230%" y="1045" width="0.0357%" height="15" fill="rgb(229,67,23)" fg:x="11609" fg:w="51"/><text x="8.3730%" y="1055.50"></text></g><g><title>__GI___mprotect (115 samples, 0.08%)</title><rect x="8.1776%" y="1045" width="0.0805%" height="15" fill="rgb(249,83,47)" fg:x="11687" fg:w="115"/><text x="8.4276%" y="1055.50"></text></g><g><title>[unknown] (115 samples, 0.08%)</title><rect x="8.1776%" y="1029" width="0.0805%" height="15" fill="rgb(215,43,3)" fg:x="11687" fg:w="115"/><text x="8.4276%" y="1039.50"></text></g><g><title>__GI___munmap (23 samples, 0.02%)</title><rect x="8.2581%" y="1045" width="0.0161%" height="15" fill="rgb(238,154,13)" fg:x="11802" fg:w="23"/><text x="8.5081%" y="1055.50"></text></g><g><title>__memcpy_avx_unaligned_erms (158 samples, 0.11%)</title><rect x="8.2790%" y="1045" width="0.1106%" height="15" fill="rgb(219,56,2)" fg:x="11832" fg:w="158"/><text x="8.5290%" y="1055.50"></text></g><g><title>_int_free (113 samples, 0.08%)</title><rect x="8.3903%" y="1045" width="0.0791%" height="15" fill="rgb(233,0,4)" fg:x="11991" fg:w="113"/><text x="8.6403%" y="1055.50"></text></g><g><title>_int_malloc (16 samples, 0.01%)</title><rect x="8.4694%" y="1045" width="0.0112%" height="15" fill="rgb(235,30,7)" fg:x="12104" fg:w="16"/><text x="8.7194%" y="1055.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (23 samples, 0.02%)</title><rect x="8.4897%" y="1045" width="0.0161%" height="15" fill="rgb(250,79,13)" fg:x="12133" fg:w="23"/><text x="8.7397%" y="1055.50"></text></g><g><title>alloc::alloc::exchange_malloc (41 samples, 0.03%)</title><rect x="8.5107%" y="1045" width="0.0287%" height="15" fill="rgb(211,146,34)" fg:x="12163" fg:w="41"/><text x="8.7607%" y="1055.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (40 samples, 0.03%)</title><rect x="8.5114%" y="1029" width="0.0280%" height="15" fill="rgb(228,22,38)" fg:x="12164" fg:w="40"/><text x="8.7614%" y="1039.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (34 samples, 0.02%)</title><rect x="8.5477%" y="1045" width="0.0238%" height="15" fill="rgb(235,168,5)" fg:x="12216" fg:w="34"/><text x="8.7977%" y="1055.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::current_memory (16 samples, 0.01%)</title><rect x="8.5715%" y="1045" width="0.0112%" height="15" fill="rgb(221,155,16)" fg:x="12250" fg:w="16"/><text x="8.8215%" y="1055.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (79 samples, 0.06%)</title><rect x="8.5827%" y="1045" width="0.0553%" height="15" fill="rgb(215,215,53)" fg:x="12266" fg:w="79"/><text x="8.8327%" y="1055.50"></text></g><g><title>core::cmp::max (23 samples, 0.02%)</title><rect x="8.6219%" y="1029" width="0.0161%" height="15" fill="rgb(223,4,10)" fg:x="12322" fg:w="23"/><text x="8.8719%" y="1039.50"></text></g><g><title>core::cmp::Ord::max (23 samples, 0.02%)</title><rect x="8.6219%" y="1013" width="0.0161%" height="15" fill="rgb(234,103,6)" fg:x="12322" fg:w="23"/><text x="8.8719%" y="1023.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (27 samples, 0.02%)</title><rect x="8.6380%" y="1045" width="0.0189%" height="15" fill="rgb(227,97,0)" fg:x="12345" fg:w="27"/><text x="8.8880%" y="1055.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (28 samples, 0.02%)</title><rect x="8.7073%" y="1045" width="0.0196%" height="15" fill="rgb(234,150,53)" fg:x="12444" fg:w="28"/><text x="8.9573%" y="1055.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (19 samples, 0.01%)</title><rect x="8.7136%" y="1029" width="0.0133%" height="15" fill="rgb(228,201,54)" fg:x="12453" fg:w="19"/><text x="8.9636%" y="1039.50"></text></g><g><title>coldbrew::jit::JitCache::compile (76 samples, 0.05%)</title><rect x="8.7367%" y="1045" width="0.0532%" height="15" fill="rgb(222,22,37)" fg:x="12486" fg:w="76"/><text x="8.9867%" y="1055.50"></text></g><g><title>coldbrew::jit::JitCache::has_native_trace (24 samples, 0.02%)</title><rect x="8.7947%" y="1045" width="0.0168%" height="15" fill="rgb(237,53,32)" fg:x="12569" fg:w="24"/><text x="9.0447%" y="1055.50"></text></g><g><title>coldbrew::jit::JitCache::reset (26 samples, 0.02%)</title><rect x="8.8115%" y="1045" width="0.0182%" height="15" fill="rgb(233,25,53)" fg:x="12593" fg:w="26"/><text x="9.0615%" y="1055.50"></text></g><g><title>coldbrew::profiler::Profiler::count_entry (27 samples, 0.02%)</title><rect x="8.8297%" y="1045" width="0.0189%" height="15" fill="rgb(210,40,34)" fg:x="12619" fg:w="27"/><text x="9.0797%" y="1055.50"></text></g><g><title>coldbrew::profiler::Profiler::is_hot (23 samples, 0.02%)</title><rect x="8.8486%" y="1045" width="0.0161%" height="15" fill="rgb(241,220,44)" fg:x="12646" fg:w="23"/><text x="9.0986%" y="1055.50"></text></g><g><title>coldbrew::program::Program::code (179 samples, 0.13%)</title><rect x="8.8647%" y="1045" width="0.1252%" height="15" fill="rgb(235,28,35)" fg:x="12669" fg:w="179"/><text x="9.1147%" y="1055.50"></text></g><g><title>coldbrew::runtime::Frame::inc_instruction_index (53 samples, 0.04%)</title><rect x="8.9914%" y="1045" width="0.0371%" height="15" fill="rgb(210,56,17)" fg:x="12850" fg:w="53"/><text x="9.2414%" y="1055.50"></text></g><g><title>coldbrew::runtime::Frame::instruction_index (30 samples, 0.02%)</title><rect x="9.0284%" y="1045" width="0.0210%" height="15" fill="rgb(224,130,29)" fg:x="12903" fg:w="30"/><text x="9.2784%" y="1055.50"></text></g><g><title>coldbrew::runtime::Frame::method_index (20 samples, 0.01%)</title><rect x="9.0494%" y="1045" width="0.0140%" height="15" fill="rgb(235,212,8)" fg:x="12933" fg:w="20"/><text x="9.2994%" y="1055.50"></text></g><g><title>coldbrew::runtime::Instruction::get_mnemonic (15 samples, 0.01%)</title><rect x="9.0634%" y="1045" width="0.0105%" height="15" fill="rgb(223,33,50)" fg:x="12953" fg:w="15"/><text x="9.3134%" y="1055.50"></text></g><g><title>coldbrew::runtime::Runtime::eval (17 samples, 0.01%)</title><rect x="9.0788%" y="1045" width="0.0119%" height="15" fill="rgb(219,149,13)" fg:x="12975" fg:w="17"/><text x="9.3288%" y="1055.50"></text></g><g><title>coldbrew::runtime::Runtime::fetch (54 samples, 0.04%)</title><rect x="9.0963%" y="1045" width="0.0378%" height="15" fill="rgb(250,156,29)" fg:x="13000" fg:w="54"/><text x="9.3463%" y="1055.50"></text></g><g><title>coldbrew::runtime::Runtime::next (167 samples, 0.12%)</title><rect x="9.1411%" y="1045" width="0.1169%" height="15" fill="rgb(216,193,19)" fg:x="13064" fg:w="167"/><text x="9.3911%" y="1055.50"></text></g><g><title>coldbrew::runtime::Runtime::run (442 samples, 0.31%)</title><rect x="9.2698%" y="1045" width="0.3093%" height="15" fill="rgb(216,135,14)" fg:x="13248" fg:w="442"/><text x="9.5198%" y="1055.50"></text></g><g><title>coldbrew::trace::Recorder::is_recording (20 samples, 0.01%)</title><rect x="9.5959%" y="1045" width="0.0140%" height="15" fill="rgb(241,47,5)" fg:x="13714" fg:w="20"/><text x="9.8459%" y="1055.50"></text></g><g><title>core::cmp::max_by (23 samples, 0.02%)</title><rect x="9.6288%" y="1045" width="0.0161%" height="15" fill="rgb(233,42,35)" fg:x="13761" fg:w="23"/><text x="9.8788%" y="1055.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_cmpeq_epi8 (125 samples, 0.09%)</title><rect x="9.6449%" y="1045" width="0.0875%" height="15" fill="rgb(231,13,6)" fg:x="13784" fg:w="125"/><text x="9.8949%" y="1055.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (78 samples, 0.05%)</title><rect x="9.7324%" y="1045" width="0.0546%" height="15" fill="rgb(207,181,40)" fg:x="13909" fg:w="78"/><text x="9.9824%" y="1055.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (110 samples, 0.08%)</title><rect x="9.7869%" y="1045" width="0.0770%" height="15" fill="rgb(254,173,49)" fg:x="13987" fg:w="110"/><text x="10.0369%" y="1055.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_set1_epi8 (105 samples, 0.07%)</title><rect x="9.8639%" y="1045" width="0.0735%" height="15" fill="rgb(221,1,38)" fg:x="14097" fg:w="105"/><text x="10.1139%" y="1055.50"></text></g><g><title>core::hash::BuildHasher::hash_one (137 samples, 0.10%)</title><rect x="9.9374%" y="1045" width="0.0959%" height="15" fill="rgb(206,124,46)" fg:x="14202" fg:w="137"/><text x="10.1874%" y="1055.50"></text></g><g><title>core::hash::Hasher::write_usize (111 samples, 0.08%)</title><rect x="10.0332%" y="1045" width="0.0777%" height="15" fill="rgb(249,21,11)" fg:x="14339" fg:w="111"/><text x="10.2832%" y="1055.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (49 samples, 0.03%)</title><rect x="10.1109%" y="1045" width="0.0343%" height="15" fill="rgb(222,201,40)" fg:x="14450" fg:w="49"/><text x="10.3609%" y="1055.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for usize&gt;::hash (112 samples, 0.08%)</title><rect x="10.1452%" y="1045" width="0.0784%" height="15" fill="rgb(235,61,29)" fg:x="14499" fg:w="112"/><text x="10.3952%" y="1055.50"></text></g><g><title>core::hash::sip::u8to64_le (73 samples, 0.05%)</title><rect x="10.2236%" y="1045" width="0.0511%" height="15" fill="rgb(219,207,3)" fg:x="14611" fg:w="73"/><text x="10.4736%" y="1055.50"></text></g><g><title>core::ops::function::FnOnce::call_once (30 samples, 0.02%)</title><rect x="10.2767%" y="1045" width="0.0210%" height="15" fill="rgb(222,56,46)" fg:x="14687" fg:w="30"/><text x="10.5267%" y="1055.50"></text></g><g><title>core::option::Option&lt;T&gt;::unwrap (37 samples, 0.03%)</title><rect x="10.3082%" y="1045" width="0.0259%" height="15" fill="rgb(239,76,54)" fg:x="14732" fg:w="37"/><text x="10.5582%" y="1055.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;coldbrew::runtime::Value&gt;&gt; (28 samples, 0.02%)</title><rect x="10.3607%" y="1045" width="0.0196%" height="15" fill="rgb(231,124,27)" fg:x="14807" fg:w="28"/><text x="10.6107%" y="1055.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;i32&gt;&gt; (31 samples, 0.02%)</title><rect x="10.3866%" y="1045" width="0.0217%" height="15" fill="rgb(249,195,6)" fg:x="14844" fg:w="31"/><text x="10.6366%" y="1055.50"></text></g><g><title>core::ptr::drop_in_place&lt;coldbrew::runtime::Instruction&gt; (20 samples, 0.01%)</title><rect x="10.4118%" y="1045" width="0.0140%" height="15" fill="rgb(237,174,47)" fg:x="14880" fg:w="20"/><text x="10.6618%" y="1055.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get (21 samples, 0.01%)</title><rect x="10.4657%" y="1045" width="0.0147%" height="15" fill="rgb(206,201,31)" fg:x="14957" fg:w="21"/><text x="10.7157%" y="1055.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::last (28 samples, 0.02%)</title><rect x="10.4804%" y="1045" width="0.0196%" height="15" fill="rgb(231,57,52)" fg:x="14978" fg:w="28"/><text x="10.7304%" y="1055.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::last_mut (25 samples, 0.02%)</title><rect x="10.4999%" y="1045" width="0.0175%" height="15" fill="rgb(248,177,22)" fg:x="15006" fg:w="25"/><text x="10.7499%" y="1055.50"></text></g><g><title>core::slice::index::range (40 samples, 0.03%)</title><rect x="10.5244%" y="1045" width="0.0280%" height="15" fill="rgb(215,211,37)" fg:x="15041" fg:w="40"/><text x="10.7744%" y="1055.50"></text></g><g><title>dynasmrt::Assembler&lt;R&gt;::encode_relocs (58 samples, 0.04%)</title><rect x="10.5636%" y="1045" width="0.0406%" height="15" fill="rgb(241,128,51)" fg:x="15097" fg:w="58"/><text x="10.8136%" y="1055.50"></text></g><g><title>dynasmrt::Assembler&lt;R&gt;::new (35 samples, 0.02%)</title><rect x="10.6049%" y="1045" width="0.0245%" height="15" fill="rgb(227,165,31)" fg:x="15156" fg:w="35"/><text x="10.8549%" y="1055.50"></text></g><g><title>dynasmrt::components::MemoryManager::commit (128 samples, 0.09%)</title><rect x="10.6483%" y="1045" width="0.0896%" height="15" fill="rgb(228,167,24)" fg:x="15218" fg:w="128"/><text x="10.8983%" y="1055.50"></text></g><g><title>dynasmrt::mmap::MutableBuffer::make_exec (75 samples, 0.05%)</title><rect x="10.6854%" y="1029" width="0.0525%" height="15" fill="rgb(228,143,12)" fg:x="15271" fg:w="75"/><text x="10.9354%" y="1039.50"></text></g><g><title>memmap2::MmapMut::make_exec (75 samples, 0.05%)</title><rect x="10.6854%" y="1013" width="0.0525%" height="15" fill="rgb(249,149,8)" fg:x="15271" fg:w="75"/><text x="10.9354%" y="1023.50"></text></g><g><title>memmap2::os::MmapInner::make_exec (75 samples, 0.05%)</title><rect x="10.6854%" y="997" width="0.0525%" height="15" fill="rgb(243,35,44)" fg:x="15271" fg:w="75"/><text x="10.9354%" y="1007.50"></text></g><g><title>memmap2::os::MmapInner::mprotect (75 samples, 0.05%)</title><rect x="10.6854%" y="981" width="0.0525%" height="15" fill="rgb(246,89,9)" fg:x="15271" fg:w="75"/><text x="10.9354%" y="991.50"></text></g><g><title>__GI___mprotect (75 samples, 0.05%)</title><rect x="10.6854%" y="965" width="0.0525%" height="15" fill="rgb(233,213,13)" fg:x="15271" fg:w="75"/><text x="10.9354%" y="975.50"></text></g><g><title>[unknown] (75 samples, 0.05%)</title><rect x="10.6854%" y="949" width="0.0525%" height="15" fill="rgb(233,141,41)" fg:x="15271" fg:w="75"/><text x="10.9354%" y="959.50"></text></g><g><title>dynasmrt::mmap::ExecutableBuffer::new (26 samples, 0.02%)</title><rect x="10.7525%" y="1045" width="0.0182%" height="15" fill="rgb(239,167,4)" fg:x="15367" fg:w="26"/><text x="11.0025%" y="1055.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::contains_key (63 samples, 0.04%)</title><rect x="10.7798%" y="1045" width="0.0441%" height="15" fill="rgb(209,217,16)" fg:x="15406" fg:w="63"/><text x="11.0298%" y="1055.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (59 samples, 0.04%)</title><rect x="10.7826%" y="1029" width="0.0413%" height="15" fill="rgb(219,88,35)" fg:x="15410" fg:w="59"/><text x="11.0326%" y="1039.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (67 samples, 0.05%)</title><rect x="10.8239%" y="1045" width="0.0469%" height="15" fill="rgb(220,193,23)" fg:x="15469" fg:w="67"/><text x="11.0739%" y="1055.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (62 samples, 0.04%)</title><rect x="10.8274%" y="1029" width="0.0434%" height="15" fill="rgb(230,90,52)" fg:x="15474" fg:w="62"/><text x="11.0774%" y="1039.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_mut (21 samples, 0.01%)</title><rect x="10.8708%" y="1045" width="0.0147%" height="15" fill="rgb(252,106,19)" fg:x="15536" fg:w="21"/><text x="11.1208%" y="1055.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner_mut (20 samples, 0.01%)</title><rect x="10.8715%" y="1029" width="0.0140%" height="15" fill="rgb(206,74,20)" fg:x="15537" fg:w="20"/><text x="11.1215%" y="1039.50"></text></g><g><title>hashbrown::map::equivalent_key::{{closure}} (18 samples, 0.01%)</title><rect x="10.8855%" y="1045" width="0.0126%" height="15" fill="rgb(230,138,44)" fg:x="15557" fg:w="18"/><text x="11.1355%" y="1055.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::from_base_index (66 samples, 0.05%)</title><rect x="10.8981%" y="1045" width="0.0462%" height="15" fill="rgb(235,182,43)" fg:x="15575" fg:w="66"/><text x="11.1481%" y="1055.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::{{closure}} (107 samples, 0.07%)</title><rect x="10.9576%" y="1045" width="0.0749%" height="15" fill="rgb(242,16,51)" fg:x="15660" fg:w="107"/><text x="11.2076%" y="1055.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::bucket (56 samples, 0.04%)</title><rect x="10.9932%" y="1029" width="0.0392%" height="15" fill="rgb(248,9,4)" fg:x="15711" fg:w="56"/><text x="11.2432%" y="1039.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::bucket (27 samples, 0.02%)</title><rect x="11.0324%" y="1029" width="0.0189%" height="15" fill="rgb(210,31,22)" fg:x="15767" fg:w="27"/><text x="11.2824%" y="1039.50"></text></g><g><title>hashbrown::raw::sse2::Group::load (61 samples, 0.04%)</title><rect x="11.1297%" y="1013" width="0.0427%" height="15" fill="rgb(239,54,39)" fg:x="15906" fg:w="61"/><text x="11.3797%" y="1023.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (253 samples, 0.18%)</title><rect x="11.0324%" y="1045" width="0.1770%" height="15" fill="rgb(230,99,41)" fg:x="15767" fg:w="253"/><text x="11.2824%" y="1055.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::find_inner (226 samples, 0.16%)</title><rect x="11.0513%" y="1029" width="0.1581%" height="15" fill="rgb(253,106,12)" fg:x="15794" fg:w="226"/><text x="11.3013%" y="1039.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_empty (53 samples, 0.04%)</title><rect x="11.1724%" y="1013" width="0.0371%" height="15" fill="rgb(213,46,41)" fg:x="15967" fg:w="53"/><text x="11.4224%" y="1023.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get (54 samples, 0.04%)</title><rect x="11.2235%" y="1045" width="0.0378%" height="15" fill="rgb(215,133,35)" fg:x="16040" fg:w="54"/><text x="11.4735%" y="1055.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::find_or_find_insert_slot_inner (16 samples, 0.01%)</title><rect x="11.2661%" y="1045" width="0.0112%" height="15" fill="rgb(213,28,5)" fg:x="16101" fg:w="16"/><text x="11.5161%" y="1055.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (109 samples, 0.08%)</title><rect x="11.2850%" y="1045" width="0.0763%" height="15" fill="rgb(215,77,49)" fg:x="16128" fg:w="109"/><text x="11.5350%" y="1055.50"></text></g><g><title>memmap2::MmapMut::map_anon (17 samples, 0.01%)</title><rect x="11.3928%" y="1045" width="0.0119%" height="15" fill="rgb(248,100,22)" fg:x="16282" fg:w="17"/><text x="11.6428%" y="1055.50"></text></g><g><title>memmap2::MmapOptions::map_anon (37 samples, 0.03%)</title><rect x="11.4054%" y="1045" width="0.0259%" height="15" fill="rgb(208,67,9)" fg:x="16300" fg:w="37"/><text x="11.6554%" y="1055.50"></text></g><g><title>memmap2::os::MmapInner::make_mut (169 samples, 0.12%)</title><rect x="11.4327%" y="1045" width="0.1183%" height="15" fill="rgb(219,133,21)" fg:x="16339" fg:w="169"/><text x="11.6827%" y="1055.50"></text></g><g><title>memmap2::os::MmapInner::mprotect (169 samples, 0.12%)</title><rect x="11.4327%" y="1029" width="0.1183%" height="15" fill="rgb(246,46,29)" fg:x="16339" fg:w="169"/><text x="11.6827%" y="1039.50"></text></g><g><title>__GI___mprotect (169 samples, 0.12%)</title><rect x="11.4327%" y="1013" width="0.1183%" height="15" fill="rgb(246,185,52)" fg:x="16339" fg:w="169"/><text x="11.6827%" y="1023.50"></text></g><g><title>[unknown] (169 samples, 0.12%)</title><rect x="11.4327%" y="997" width="0.1183%" height="15" fill="rgb(252,136,11)" fg:x="16339" fg:w="169"/><text x="11.6827%" y="1007.50"></text></g><g><title>memmap2::os::MmapInner::mprotect (30 samples, 0.02%)</title><rect x="11.5530%" y="1045" width="0.0210%" height="15" fill="rgb(219,138,53)" fg:x="16511" fg:w="30"/><text x="11.8030%" y="1055.50"></text></g><g><title>memmap2::os::page_size (16 samples, 0.01%)</title><rect x="11.5775%" y="1045" width="0.0112%" height="15" fill="rgb(211,51,23)" fg:x="16546" fg:w="16"/><text x="11.8275%" y="1055.50"></text></g><g><title>std::collections::hash::map::Entry&lt;K,V&gt;::or_insert (15 samples, 0.01%)</title><rect x="11.6048%" y="1045" width="0.0105%" height="15" fill="rgb(247,221,28)" fg:x="16585" fg:w="15"/><text x="11.8548%" y="1055.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::contains_key (22 samples, 0.02%)</title><rect x="11.6153%" y="1045" width="0.0154%" height="15" fill="rgb(251,222,45)" fg:x="16600" fg:w="22"/><text x="11.8653%" y="1055.50"></text></g><g><title>[unknown] (8,623 samples, 6.03%)</title><rect x="5.6236%" y="1061" width="6.0337%" height="15" fill="rgb(217,162,53)" fg:x="8037" fg:w="8623"/><text x="5.8736%" y="1071.50">[unknown]</text></g><g><title>__GI___mmap64 (20 samples, 0.01%)</title><rect x="11.6573%" y="1061" width="0.0140%" height="15" fill="rgb(229,93,14)" fg:x="16660" fg:w="20"/><text x="11.9073%" y="1071.50"></text></g><g><title>&lt;T as alloc::vec::spec_from_elem::SpecFromElem&gt;::from_elem (15 samples, 0.01%)</title><rect x="11.6713%" y="1045" width="0.0105%" height="15" fill="rgb(209,67,49)" fg:x="16680" fg:w="15"/><text x="11.9213%" y="1055.50"></text></g><g><title>__do_global_dtors_aux_fini_array_entry (26 samples, 0.02%)</title><rect x="11.6713%" y="1061" width="0.0182%" height="15" fill="rgb(213,87,29)" fg:x="16680" fg:w="26"/><text x="11.9213%" y="1071.50"></text></g><g><title>_int_free (27 samples, 0.02%)</title><rect x="11.6909%" y="1061" width="0.0189%" height="15" fill="rgb(205,151,52)" fg:x="16708" fg:w="27"/><text x="11.9409%" y="1071.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_ptr (30 samples, 0.02%)</title><rect x="12.1464%" y="741" width="0.0210%" height="15" fill="rgb(253,215,39)" fg:x="17359" fg:w="30"/><text x="12.3964%" y="751.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (98 samples, 0.07%)</title><rect x="12.1408%" y="757" width="0.0686%" height="15" fill="rgb(221,220,41)" fg:x="17351" fg:w="98"/><text x="12.3908%" y="767.50"></text></g><g><title>core::slice::raw::from_raw_parts (60 samples, 0.04%)</title><rect x="12.1674%" y="741" width="0.0420%" height="15" fill="rgb(218,133,21)" fg:x="17389" fg:w="60"/><text x="12.4174%" y="751.50"></text></g><g><title>core::ptr::slice_from_raw_parts (60 samples, 0.04%)</title><rect x="12.1674%" y="725" width="0.0420%" height="15" fill="rgb(221,193,43)" fg:x="17389" fg:w="60"/><text x="12.4174%" y="735.50"></text></g><g><title>core::ptr::metadata::from_raw_parts (60 samples, 0.04%)</title><rect x="12.1674%" y="709" width="0.0420%" height="15" fill="rgb(240,128,52)" fg:x="17389" fg:w="60"/><text x="12.4174%" y="719.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (27 samples, 0.02%)</title><rect x="12.2345%" y="677" width="0.0189%" height="15" fill="rgb(253,114,12)" fg:x="17485" fg:w="27"/><text x="12.4845%" y="687.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (27 samples, 0.02%)</title><rect x="12.2345%" y="661" width="0.0189%" height="15" fill="rgb(215,223,47)" fg:x="17485" fg:w="27"/><text x="12.4845%" y="671.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (23 samples, 0.02%)</title><rect x="12.2373%" y="645" width="0.0161%" height="15" fill="rgb(248,225,23)" fg:x="17489" fg:w="23"/><text x="12.4873%" y="655.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (49 samples, 0.03%)</title><rect x="12.2240%" y="741" width="0.0343%" height="15" fill="rgb(250,108,0)" fg:x="17470" fg:w="49"/><text x="12.4740%" y="751.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (43 samples, 0.03%)</title><rect x="12.2282%" y="725" width="0.0301%" height="15" fill="rgb(228,208,7)" fg:x="17476" fg:w="43"/><text x="12.4782%" y="735.50"></text></g><g><title>alloc::slice::hack::to_vec (43 samples, 0.03%)</title><rect x="12.2282%" y="709" width="0.0301%" height="15" fill="rgb(244,45,10)" fg:x="17476" fg:w="43"/><text x="12.4782%" y="719.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (40 samples, 0.03%)</title><rect x="12.2303%" y="693" width="0.0280%" height="15" fill="rgb(207,125,25)" fg:x="17479" fg:w="40"/><text x="12.4803%" y="703.50"></text></g><g><title>__memcpy_avx_unaligned_erms (60 samples, 0.04%)</title><rect x="12.3521%" y="645" width="0.0420%" height="15" fill="rgb(210,195,18)" fg:x="17653" fg:w="60"/><text x="12.6021%" y="655.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::copy_to_nonoverlapping (64 samples, 0.04%)</title><rect x="12.3521%" y="677" width="0.0448%" height="15" fill="rgb(249,80,12)" fg:x="17653" fg:w="64"/><text x="12.6021%" y="687.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (64 samples, 0.04%)</title><rect x="12.3521%" y="661" width="0.0448%" height="15" fill="rgb(221,65,9)" fg:x="17653" fg:w="64"/><text x="12.6021%" y="671.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::wrapping_sub (26 samples, 0.02%)</title><rect x="12.4046%" y="661" width="0.0182%" height="15" fill="rgb(235,49,36)" fg:x="17728" fg:w="26"/><text x="12.6546%" y="671.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::data_start (53 samples, 0.04%)</title><rect x="12.4046%" y="677" width="0.0371%" height="15" fill="rgb(225,32,20)" fg:x="17728" fg:w="53"/><text x="12.6546%" y="687.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as hashbrown::raw::RawTableClone&gt;::clone_from_spec (134 samples, 0.09%)</title><rect x="12.3500%" y="693" width="0.0938%" height="15" fill="rgb(215,141,46)" fg:x="17650" fg:w="134"/><text x="12.6000%" y="703.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (19 samples, 0.01%)</title><rect x="12.4871%" y="677" width="0.0133%" height="15" fill="rgb(250,160,47)" fg:x="17846" fg:w="19"/><text x="12.7371%" y="687.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::ops::try_trait::Try&gt;::branch (18 samples, 0.01%)</title><rect x="12.6131%" y="645" width="0.0126%" height="15" fill="rgb(216,222,40)" fg:x="18026" fg:w="18"/><text x="12.8631%" y="655.50"></text></g><g><title>core::num::&lt;impl usize&gt;::checked_add (41 samples, 0.03%)</title><rect x="12.6285%" y="645" width="0.0287%" height="15" fill="rgb(234,217,39)" fg:x="18048" fg:w="41"/><text x="12.8785%" y="655.50"></text></g><g><title>hashbrown::raw::TableLayout::calculate_layout_for (148 samples, 0.10%)</title><rect x="12.5606%" y="661" width="0.1036%" height="15" fill="rgb(207,178,40)" fg:x="17951" fg:w="148"/><text x="12.8106%" y="671.50"></text></g><g><title>__GI___libc_malloc (64 samples, 0.04%)</title><rect x="12.7334%" y="597" width="0.0448%" height="15" fill="rgb(221,136,13)" fg:x="18198" fg:w="64"/><text x="12.9834%" y="607.50"></text></g><g><title>tcache_get (49 samples, 0.03%)</title><rect x="12.7439%" y="581" width="0.0343%" height="15" fill="rgb(249,199,10)" fg:x="18213" fg:w="49"/><text x="12.9939%" y="591.50"></text></g><g><title>alloc::alloc::alloc (72 samples, 0.05%)</title><rect x="12.7334%" y="613" width="0.0504%" height="15" fill="rgb(249,222,13)" fg:x="18198" fg:w="72"/><text x="12.9834%" y="623.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (183 samples, 0.13%)</title><rect x="12.6873%" y="645" width="0.1280%" height="15" fill="rgb(244,185,38)" fg:x="18132" fg:w="183"/><text x="12.9373%" y="655.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (178 samples, 0.12%)</title><rect x="12.6908%" y="629" width="0.1245%" height="15" fill="rgb(236,202,9)" fg:x="18137" fg:w="178"/><text x="12.9408%" y="639.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;[T]&gt;::slice_from_raw_parts (26 samples, 0.02%)</title><rect x="12.7971%" y="613" width="0.0182%" height="15" fill="rgb(250,229,37)" fg:x="18289" fg:w="26"/><text x="13.0471%" y="623.50"></text></g><g><title>core::ptr::slice_from_raw_parts_mut (20 samples, 0.01%)</title><rect x="12.8013%" y="597" width="0.0140%" height="15" fill="rgb(206,174,23)" fg:x="18295" fg:w="20"/><text x="13.0513%" y="607.50"></text></g><g><title>core::ptr::metadata::from_raw_parts_mut (20 samples, 0.01%)</title><rect x="12.8013%" y="581" width="0.0140%" height="15" fill="rgb(211,33,43)" fg:x="18295" fg:w="20"/><text x="13.0513%" y="591.50"></text></g><g><title>hashbrown::raw::alloc::inner::do_alloc (219 samples, 0.15%)</title><rect x="12.6642%" y="661" width="0.1532%" height="15" fill="rgb(245,58,50)" fg:x="18099" fg:w="219"/><text x="12.9142%" y="671.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::new_uninitialized (517 samples, 0.36%)</title><rect x="12.4585%" y="693" width="0.3618%" height="15" fill="rgb(244,68,36)" fg:x="17805" fg:w="517"/><text x="12.7085%" y="703.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::new_uninitialized (456 samples, 0.32%)</title><rect x="12.5011%" y="677" width="0.3191%" height="15" fill="rgb(232,229,15)" fg:x="17866" fg:w="456"/><text x="12.7511%" y="687.50"></text></g><g><title>core::mem::manually_drop::ManuallyDrop&lt;T&gt;::new (15 samples, 0.01%)</title><rect x="12.8202%" y="677" width="0.0105%" height="15" fill="rgb(254,30,23)" fg:x="18322" fg:w="15"/><text x="13.0702%" y="687.50"></text></g><g><title>hashbrown::scopeguard::ScopeGuard&lt;T,F&gt;::into_inner (25 samples, 0.02%)</title><rect x="12.8202%" y="693" width="0.0175%" height="15" fill="rgb(235,160,14)" fg:x="18322" fg:w="25"/><text x="13.0702%" y="703.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (813 samples, 0.57%)</title><rect x="12.2772%" y="709" width="0.5689%" height="15" fill="rgb(212,155,44)" fg:x="17546" fg:w="813"/><text x="12.5272%" y="719.50"></text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::clone::Clone&gt;::clone (843 samples, 0.59%)</title><rect x="12.2611%" y="725" width="0.5899%" height="15" fill="rgb(226,2,50)" fg:x="17523" fg:w="843"/><text x="12.5111%" y="735.50"></text></g><g><title>__memcpy_avx_unaligned_erms (55 samples, 0.04%)</title><rect x="12.8510%" y="725" width="0.0385%" height="15" fill="rgb(234,177,6)" fg:x="18366" fg:w="55"/><text x="13.1010%" y="735.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::clone::Clone&gt;::clone (904 samples, 0.63%)</title><rect x="12.2583%" y="741" width="0.6325%" height="15" fill="rgb(217,24,9)" fg:x="17519" fg:w="904"/><text x="12.5083%" y="751.50"></text></g><g><title>__memcpy_avx_unaligned_erms (20 samples, 0.01%)</title><rect x="12.8909%" y="741" width="0.0140%" height="15" fill="rgb(220,13,46)" fg:x="18423" fg:w="20"/><text x="13.1409%" y="751.50"></text></g><g><title>&lt;coldbrew::runtime::Frame as core::clone::Clone&gt;::clone (997 samples, 0.70%)</title><rect x="12.2094%" y="757" width="0.6976%" height="15" fill="rgb(239,221,27)" fg:x="17449" fg:w="997"/><text x="12.4594%" y="767.50"></text></g><g><title>&lt;coldbrew::runtime::Instruction as core::clone::Clone&gt;::clone (18 samples, 0.01%)</title><rect x="12.9070%" y="757" width="0.0126%" height="15" fill="rgb(222,198,25)" fg:x="18446" fg:w="18"/><text x="13.1570%" y="767.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (69 samples, 0.05%)</title><rect x="12.9196%" y="757" width="0.0483%" height="15" fill="rgb(211,99,13)" fg:x="18464" fg:w="69"/><text x="13.1696%" y="767.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::is_empty (23 samples, 0.02%)</title><rect x="12.9678%" y="757" width="0.0161%" height="15" fill="rgb(232,111,31)" fg:x="18533" fg:w="23"/><text x="13.2178%" y="767.50"></text></g><g><title>&lt;&amp;alloc::vec::Vec&lt;T,A&gt; as core::iter::traits::collect::IntoIterator&gt;::into_iter (34 samples, 0.02%)</title><rect x="13.1799%" y="741" width="0.0238%" height="15" fill="rgb(245,82,37)" fg:x="18836" fg:w="34"/><text x="13.4299%" y="751.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::iter (16 samples, 0.01%)</title><rect x="13.1925%" y="725" width="0.0112%" height="15" fill="rgb(227,149,46)" fg:x="18854" fg:w="16"/><text x="13.4425%" y="735.50"></text></g><g><title>core::slice::iter::Iter&lt;T&gt;::new (15 samples, 0.01%)</title><rect x="13.1932%" y="709" width="0.0105%" height="15" fill="rgb(218,36,50)" fg:x="18855" fg:w="15"/><text x="13.4432%" y="719.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (55 samples, 0.04%)</title><rect x="13.2037%" y="741" width="0.0385%" height="15" fill="rgb(226,80,48)" fg:x="18870" fg:w="55"/><text x="13.4537%" y="751.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::needs_to_grow (24 samples, 0.02%)</title><rect x="13.2974%" y="645" width="0.0168%" height="15" fill="rgb(238,224,15)" fg:x="19004" fg:w="24"/><text x="13.5474%" y="655.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (37 samples, 0.03%)</title><rect x="13.3618%" y="613" width="0.0259%" height="15" fill="rgb(241,136,10)" fg:x="19096" fg:w="37"/><text x="13.6118%" y="623.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::current_memory (61 samples, 0.04%)</title><rect x="13.3877%" y="613" width="0.0427%" height="15" fill="rgb(208,32,45)" fg:x="19133" fg:w="61"/><text x="13.6377%" y="623.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::as_ptr (18 samples, 0.01%)</title><rect x="13.4590%" y="597" width="0.0126%" height="15" fill="rgb(207,135,9)" fg:x="19235" fg:w="18"/><text x="13.7090%" y="607.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::set_ptr_and_cap (93 samples, 0.07%)</title><rect x="13.4304%" y="613" width="0.0651%" height="15" fill="rgb(206,86,44)" fg:x="19194" fg:w="93"/><text x="13.6804%" y="623.50"></text></g><g><title>core::ptr::unique::Unique&lt;T&gt;::new_unchecked (34 samples, 0.02%)</title><rect x="13.4716%" y="597" width="0.0238%" height="15" fill="rgb(245,177,15)" fg:x="19253" fg:w="34"/><text x="13.7216%" y="607.50"></text></g><g><title>__GI___libc_malloc (56 samples, 0.04%)</title><rect x="13.6053%" y="549" width="0.0392%" height="15" fill="rgb(206,64,50)" fg:x="19444" fg:w="56"/><text x="13.8553%" y="559.50"></text></g><g><title>tcache_get (34 samples, 0.02%)</title><rect x="13.6207%" y="533" width="0.0238%" height="15" fill="rgb(234,36,40)" fg:x="19466" fg:w="34"/><text x="13.8707%" y="543.50"></text></g><g><title>alloc::alloc::alloc (76 samples, 0.05%)</title><rect x="13.6053%" y="565" width="0.0532%" height="15" fill="rgb(213,64,8)" fg:x="19444" fg:w="76"/><text x="13.8553%" y="575.50"></text></g><g><title>core::option::Option&lt;T&gt;::ok_or (19 samples, 0.01%)</title><rect x="13.6606%" y="565" width="0.0133%" height="15" fill="rgb(210,75,36)" fg:x="19523" fg:w="19"/><text x="13.9106%" y="575.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (230 samples, 0.16%)</title><rect x="13.5563%" y="597" width="0.1609%" height="15" fill="rgb(229,88,21)" fg:x="19374" fg:w="230"/><text x="13.8063%" y="607.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (228 samples, 0.16%)</title><rect x="13.5577%" y="581" width="0.1595%" height="15" fill="rgb(252,204,47)" fg:x="19376" fg:w="228"/><text x="13.8077%" y="591.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;[T]&gt;::slice_from_raw_parts (53 samples, 0.04%)</title><rect x="13.6802%" y="565" width="0.0371%" height="15" fill="rgb(208,77,27)" fg:x="19551" fg:w="53"/><text x="13.9302%" y="575.50"></text></g><g><title>core::ptr::slice_from_raw_parts_mut (46 samples, 0.03%)</title><rect x="13.6851%" y="549" width="0.0322%" height="15" fill="rgb(221,76,26)" fg:x="19558" fg:w="46"/><text x="13.9351%" y="559.50"></text></g><g><title>core::ptr::metadata::from_raw_parts_mut (42 samples, 0.03%)</title><rect x="13.6879%" y="533" width="0.0294%" height="15" fill="rgb(225,139,18)" fg:x="19562" fg:w="42"/><text x="13.9379%" y="543.50"></text></g><g><title>_int_realloc (26 samples, 0.02%)</title><rect x="13.7893%" y="533" width="0.0182%" height="15" fill="rgb(230,137,11)" fg:x="19707" fg:w="26"/><text x="14.0393%" y="543.50"></text></g><g><title>__GI___libc_realloc (61 samples, 0.04%)</title><rect x="13.7739%" y="549" width="0.0427%" height="15" fill="rgb(212,28,1)" fg:x="19685" fg:w="61"/><text x="14.0239%" y="559.50"></text></g><g><title>alloc::alloc::realloc (75 samples, 0.05%)</title><rect x="13.7739%" y="565" width="0.0525%" height="15" fill="rgb(248,164,17)" fg:x="19685" fg:w="75"/><text x="14.0239%" y="575.50"></text></g><g><title>core::ptr::metadata::from_raw_parts_mut (21 samples, 0.01%)</title><rect x="13.8460%" y="533" width="0.0147%" height="15" fill="rgb(222,171,42)" fg:x="19788" fg:w="21"/><text x="14.0960%" y="543.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (207 samples, 0.14%)</title><rect x="13.7172%" y="597" width="0.1448%" height="15" fill="rgb(243,84,45)" fg:x="19604" fg:w="207"/><text x="13.9672%" y="607.50"></text></g><g><title>alloc::alloc::Global::grow_impl (205 samples, 0.14%)</title><rect x="13.7186%" y="581" width="0.1434%" height="15" fill="rgb(252,49,23)" fg:x="19606" fg:w="205"/><text x="13.9686%" y="591.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;[T]&gt;::slice_from_raw_parts (26 samples, 0.02%)</title><rect x="13.8439%" y="565" width="0.0182%" height="15" fill="rgb(215,19,7)" fg:x="19785" fg:w="26"/><text x="14.0939%" y="575.50"></text></g><g><title>core::ptr::slice_from_raw_parts_mut (23 samples, 0.02%)</title><rect x="13.8460%" y="549" width="0.0161%" height="15" fill="rgb(238,81,41)" fg:x="19788" fg:w="23"/><text x="14.0960%" y="559.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (36 samples, 0.03%)</title><rect x="13.8621%" y="597" width="0.0252%" height="15" fill="rgb(210,199,37)" fg:x="19811" fg:w="36"/><text x="14.1121%" y="607.50"></text></g><g><title>alloc::raw_vec::finish_grow (677 samples, 0.47%)</title><rect x="13.4954%" y="613" width="0.4737%" height="15" fill="rgb(244,192,49)" fg:x="19287" fg:w="677"/><text x="13.7454%" y="623.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map_err (116 samples, 0.08%)</title><rect x="13.8880%" y="597" width="0.0812%" height="15" fill="rgb(226,211,11)" fg:x="19848" fg:w="116"/><text x="14.1380%" y="607.50"></text></g><g><title>core::alloc::layout::Layout::max_size_for_align (36 samples, 0.03%)</title><rect x="14.1462%" y="581" width="0.0252%" height="15" fill="rgb(236,162,54)" fg:x="20217" fg:w="36"/><text x="14.3962%" y="591.50"></text></g><g><title>core::ptr::alignment::Alignment::as_usize (20 samples, 0.01%)</title><rect x="14.1574%" y="565" width="0.0140%" height="15" fill="rgb(220,229,9)" fg:x="20233" fg:w="20"/><text x="14.4074%" y="575.50"></text></g><g><title>core::alloc::layout::Layout::array (292 samples, 0.20%)</title><rect x="13.9691%" y="613" width="0.2043%" height="15" fill="rgb(250,87,22)" fg:x="19964" fg:w="292"/><text x="14.2191%" y="623.50"></text></g><g><title>core::alloc::layout::Layout::array::inner (280 samples, 0.20%)</title><rect x="13.9775%" y="597" width="0.1959%" height="15" fill="rgb(239,43,17)" fg:x="19976" fg:w="280"/><text x="14.2275%" y="607.50"></text></g><g><title>core::cmp::max (405 samples, 0.28%)</title><rect x="14.1735%" y="613" width="0.2834%" height="15" fill="rgb(231,177,25)" fg:x="20256" fg:w="405"/><text x="14.4235%" y="623.50"></text></g><g><title>core::cmp::Ord::max (405 samples, 0.28%)</title><rect x="14.1735%" y="597" width="0.2834%" height="15" fill="rgb(219,179,1)" fg:x="20256" fg:w="405"/><text x="14.4235%" y="607.50"></text></g><g><title>core::cmp::max_by (323 samples, 0.23%)</title><rect x="14.2308%" y="581" width="0.2260%" height="15" fill="rgb(238,219,53)" fg:x="20338" fg:w="323"/><text x="14.4808%" y="591.50"></text></g><g><title>core::ops::function::FnOnce::call_once (95 samples, 0.07%)</title><rect x="14.3904%" y="565" width="0.0665%" height="15" fill="rgb(232,167,36)" fg:x="20566" fg:w="95"/><text x="14.6404%" y="575.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::Ord for usize&gt;::cmp (65 samples, 0.05%)</title><rect x="14.4114%" y="549" width="0.0455%" height="15" fill="rgb(244,19,51)" fg:x="20596" fg:w="65"/><text x="14.6614%" y="559.50"></text></g><g><title>core::num::&lt;impl usize&gt;::checked_add (47 samples, 0.03%)</title><rect x="14.4568%" y="613" width="0.0329%" height="15" fill="rgb(224,6,22)" fg:x="20661" fg:w="47"/><text x="14.7068%" y="623.50"></text></g><g><title>core::num::&lt;impl usize&gt;::overflowing_add (24 samples, 0.02%)</title><rect x="14.4729%" y="597" width="0.0168%" height="15" fill="rgb(224,145,5)" fg:x="20684" fg:w="24"/><text x="14.7229%" y="607.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (1,690 samples, 1.18%)</title><rect x="13.3191%" y="629" width="1.1825%" height="15" fill="rgb(234,130,49)" fg:x="19035" fg:w="1690"/><text x="13.5691%" y="639.50"></text></g><g><title>core::option::Option&lt;T&gt;::ok_or (17 samples, 0.01%)</title><rect x="14.4897%" y="613" width="0.0119%" height="15" fill="rgb(254,6,2)" fg:x="20708" fg:w="17"/><text x="14.7397%" y="623.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1,742 samples, 1.22%)</title><rect x="13.3142%" y="645" width="1.2189%" height="15" fill="rgb(208,96,46)" fg:x="19028" fg:w="1742"/><text x="13.5642%" y="655.50"></text></g><g><title>alloc::raw_vec::handle_reserve (45 samples, 0.03%)</title><rect x="14.5016%" y="629" width="0.0315%" height="15" fill="rgb(239,3,39)" fg:x="20725" fg:w="45"/><text x="14.7516%" y="639.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map_err (32 samples, 0.02%)</title><rect x="14.5107%" y="613" width="0.0224%" height="15" fill="rgb(233,210,1)" fg:x="20738" fg:w="32"/><text x="14.7607%" y="623.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (1,787 samples, 1.25%)</title><rect x="13.2841%" y="677" width="1.2504%" height="15" fill="rgb(244,137,37)" fg:x="18985" fg:w="1787"/><text x="13.5341%" y="687.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (1,775 samples, 1.24%)</title><rect x="13.2925%" y="661" width="1.2420%" height="15" fill="rgb(240,136,2)" fg:x="18997" fg:w="1775"/><text x="13.5425%" y="671.50"></text></g><g><title>__memcpy_avx_unaligned_erms (32 samples, 0.02%)</title><rect x="14.5408%" y="661" width="0.0224%" height="15" fill="rgb(239,18,37)" fg:x="20781" fg:w="32"/><text x="14.7908%" y="671.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1,859 samples, 1.30%)</title><rect x="13.2659%" y="693" width="1.3008%" height="15" fill="rgb(218,185,22)" fg:x="18959" fg:w="1859"/><text x="13.5159%" y="703.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (46 samples, 0.03%)</title><rect x="14.5345%" y="677" width="0.0322%" height="15" fill="rgb(225,218,4)" fg:x="20772" fg:w="46"/><text x="14.7845%" y="687.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::sub_ptr (48 samples, 0.03%)</title><rect x="14.5912%" y="661" width="0.0336%" height="15" fill="rgb(230,182,32)" fg:x="20853" fg:w="48"/><text x="14.8412%" y="671.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::sub_ptr (25 samples, 0.02%)</title><rect x="14.6073%" y="645" width="0.0175%" height="15" fill="rgb(242,56,43)" fg:x="20876" fg:w="25"/><text x="14.8573%" y="655.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (2,041 samples, 1.43%)</title><rect x="13.2547%" y="709" width="1.4281%" height="15" fill="rgb(233,99,24)" fg:x="18943" fg:w="2041"/><text x="13.5047%" y="719.50"></text></g><g><title>core::slice::iter::Iter&lt;T&gt;::as_slice (166 samples, 0.12%)</title><rect x="14.5667%" y="693" width="0.1162%" height="15" fill="rgb(234,209,42)" fg:x="20818" fg:w="166"/><text x="14.8167%" y="703.50"></text></g><g><title>core::slice::iter::Iter&lt;T&gt;::make_slice (158 samples, 0.11%)</title><rect x="14.5723%" y="677" width="0.1106%" height="15" fill="rgb(227,7,12)" fg:x="20826" fg:w="158"/><text x="14.8223%" y="687.50"></text></g><g><title>core::slice::raw::from_raw_parts (83 samples, 0.06%)</title><rect x="14.6248%" y="661" width="0.0581%" height="15" fill="rgb(245,203,43)" fg:x="20901" fg:w="83"/><text x="14.8748%" y="671.50"></text></g><g><title>core::ptr::slice_from_raw_parts (83 samples, 0.06%)</title><rect x="14.6248%" y="645" width="0.0581%" height="15" fill="rgb(238,205,33)" fg:x="20901" fg:w="83"/><text x="14.8748%" y="655.50"></text></g><g><title>core::ptr::metadata::from_raw_parts (83 samples, 0.06%)</title><rect x="14.6248%" y="629" width="0.0581%" height="15" fill="rgb(231,56,7)" fg:x="20901" fg:w="83"/><text x="14.8748%" y="639.50"></text></g><g><title>&lt;dynasmrt::Assembler&lt;R&gt; as core::iter::traits::collect::Extend&lt;&amp;u8&gt;&gt;::extend (2,145 samples, 1.50%)</title><rect x="13.2421%" y="741" width="1.5009%" height="15" fill="rgb(244,186,29)" fg:x="18925" fg:w="2145"/><text x="13.4921%" y="751.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::iter::traits::collect::Extend&lt;&amp;T&gt;&gt;::extend (2,136 samples, 1.49%)</title><rect x="13.2484%" y="725" width="1.4946%" height="15" fill="rgb(234,111,31)" fg:x="18934" fg:w="2136"/><text x="13.4984%" y="735.50"></text></g><g><title>core::array::&lt;impl core::iter::traits::collect::IntoIterator for &amp;[T: N]&gt;::into_iter (86 samples, 0.06%)</title><rect x="14.6829%" y="709" width="0.0602%" height="15" fill="rgb(241,149,10)" fg:x="20984" fg:w="86"/><text x="14.9329%" y="719.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::iter (56 samples, 0.04%)</title><rect x="14.7038%" y="693" width="0.0392%" height="15" fill="rgb(249,206,44)" fg:x="21014" fg:w="56"/><text x="14.9538%" y="703.50"></text></g><g><title>core::slice::iter::Iter&lt;T&gt;::new (43 samples, 0.03%)</title><rect x="14.7129%" y="677" width="0.0301%" height="15" fill="rgb(251,153,30)" fg:x="21027" fg:w="43"/><text x="14.9629%" y="687.50"></text></g><g><title>&lt;dynasmrt::Assembler&lt;R&gt; as dynasmrt::DynasmApi&gt;::push (41 samples, 0.03%)</title><rect x="14.7507%" y="741" width="0.0287%" height="15" fill="rgb(239,152,38)" fg:x="21081" fg:w="41"/><text x="15.0007%" y="751.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (36 samples, 0.03%)</title><rect x="14.7542%" y="725" width="0.0252%" height="15" fill="rgb(249,139,47)" fg:x="21086" fg:w="36"/><text x="15.0042%" y="735.50"></text></g><g><title>__memcpy_avx_unaligned_erms (120 samples, 0.08%)</title><rect x="14.7794%" y="741" width="0.0840%" height="15" fill="rgb(244,64,35)" fg:x="21122" fg:w="120"/><text x="15.0294%" y="751.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (63 samples, 0.04%)</title><rect x="14.8634%" y="741" width="0.0441%" height="15" fill="rgb(216,46,15)" fg:x="21242" fg:w="63"/><text x="15.1134%" y="751.50"></text></g><g><title>core::ptr::write (30 samples, 0.02%)</title><rect x="14.8865%" y="725" width="0.0210%" height="15" fill="rgb(250,74,19)" fg:x="21275" fg:w="30"/><text x="15.1365%" y="735.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::buffer_read (17 samples, 0.01%)</title><rect x="14.9487%" y="709" width="0.0119%" height="15" fill="rgb(249,42,33)" fg:x="21364" fg:w="17"/><text x="15.1987%" y="719.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::pop_front (69 samples, 0.05%)</title><rect x="14.9264%" y="725" width="0.0483%" height="15" fill="rgb(242,149,17)" fg:x="21332" fg:w="69"/><text x="15.1764%" y="735.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::to_physical_idx (20 samples, 0.01%)</title><rect x="14.9606%" y="709" width="0.0140%" height="15" fill="rgb(244,29,21)" fg:x="21381" fg:w="20"/><text x="15.2106%" y="719.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::wrap_add (15 samples, 0.01%)</title><rect x="14.9641%" y="693" width="0.0105%" height="15" fill="rgb(220,130,37)" fg:x="21386" fg:w="15"/><text x="15.2141%" y="703.50"></text></g><g><title>coldbrew::jit::JitCache::first_available_register (110 samples, 0.08%)</title><rect x="14.9075%" y="741" width="0.0770%" height="15" fill="rgb(211,67,2)" fg:x="21305" fg:w="110"/><text x="15.1575%" y="751.50"></text></g><g><title>&lt;alloc::collections::vec_deque::VecDeque&lt;T,A&gt; as core::convert::From&lt;alloc::vec::Vec&lt;T,A&gt;&gt;&gt;::from (42 samples, 0.03%)</title><rect x="15.0082%" y="725" width="0.0294%" height="15" fill="rgb(235,68,52)" fg:x="21449" fg:w="42"/><text x="15.2582%" y="735.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::into_raw_parts_with_alloc (19 samples, 0.01%)</title><rect x="15.0243%" y="709" width="0.0133%" height="15" fill="rgb(246,142,3)" fg:x="21472" fg:w="19"/><text x="15.2743%" y="719.50"></text></g><g><title>__GI___libc_malloc (17 samples, 0.01%)</title><rect x="15.0726%" y="661" width="0.0119%" height="15" fill="rgb(241,25,7)" fg:x="21541" fg:w="17"/><text x="15.3226%" y="671.50"></text></g><g><title>alloc::alloc::alloc (33 samples, 0.02%)</title><rect x="15.0726%" y="677" width="0.0231%" height="15" fill="rgb(242,119,39)" fg:x="21541" fg:w="33"/><text x="15.3226%" y="687.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (103 samples, 0.07%)</title><rect x="15.0453%" y="709" width="0.0721%" height="15" fill="rgb(241,98,45)" fg:x="21502" fg:w="103"/><text x="15.2953%" y="719.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (100 samples, 0.07%)</title><rect x="15.0474%" y="693" width="0.0700%" height="15" fill="rgb(254,28,30)" fg:x="21505" fg:w="100"/><text x="15.2974%" y="703.50"></text></g><g><title>alloc::alloc::exchange_malloc (117 samples, 0.08%)</title><rect x="15.0376%" y="725" width="0.0819%" height="15" fill="rgb(241,142,54)" fg:x="21491" fg:w="117"/><text x="15.2876%" y="735.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::as_mut_slices (92 samples, 0.06%)</title><rect x="15.1349%" y="693" width="0.0644%" height="15" fill="rgb(222,85,15)" fg:x="21630" fg:w="92"/><text x="15.3849%" y="703.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::slice_ranges (73 samples, 0.05%)</title><rect x="15.1482%" y="677" width="0.0511%" height="15" fill="rgb(210,85,47)" fg:x="21649" fg:w="73"/><text x="15.3982%" y="687.50"></text></g><g><title>core::slice::index::range (40 samples, 0.03%)</title><rect x="15.1713%" y="661" width="0.0280%" height="15" fill="rgb(224,206,25)" fg:x="21682" fg:w="40"/><text x="15.4213%" y="671.50"></text></g><g><title>core::ptr::metadata::from_raw_parts_mut (18 samples, 0.01%)</title><rect x="15.1999%" y="629" width="0.0126%" height="15" fill="rgb(243,201,19)" fg:x="21723" fg:w="18"/><text x="15.4499%" y="639.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked_mut (19 samples, 0.01%)</title><rect x="15.1999%" y="661" width="0.0133%" height="15" fill="rgb(236,59,4)" fg:x="21723" fg:w="19"/><text x="15.4499%" y="671.50"></text></g><g><title>core::ptr::slice_from_raw_parts_mut (19 samples, 0.01%)</title><rect x="15.1999%" y="645" width="0.0133%" height="15" fill="rgb(254,179,45)" fg:x="21723" fg:w="19"/><text x="15.4499%" y="655.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::clear (148 samples, 0.10%)</title><rect x="15.1195%" y="725" width="0.1036%" height="15" fill="rgb(226,14,10)" fg:x="21608" fg:w="148"/><text x="15.3695%" y="735.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::truncate (146 samples, 0.10%)</title><rect x="15.1209%" y="709" width="0.1022%" height="15" fill="rgb(244,27,41)" fg:x="21610" fg:w="146"/><text x="15.3709%" y="719.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get_unchecked_mut (34 samples, 0.02%)</title><rect x="15.1992%" y="693" width="0.0238%" height="15" fill="rgb(235,35,32)" fg:x="21722" fg:w="34"/><text x="15.4492%" y="703.50"></text></g><g><title>&lt;core::ops::range::RangeFrom&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked_mut (33 samples, 0.02%)</title><rect x="15.1999%" y="677" width="0.0231%" height="15" fill="rgb(218,68,31)" fg:x="21723" fg:w="33"/><text x="15.4499%" y="687.50"></text></g><g><title>alloc::boxed::Box&lt;T,A&gt;::into_raw_with_allocator (15 samples, 0.01%)</title><rect x="15.2286%" y="693" width="0.0105%" height="15" fill="rgb(207,120,37)" fg:x="21764" fg:w="15"/><text x="15.4786%" y="703.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::into_vec (27 samples, 0.02%)</title><rect x="15.2230%" y="725" width="0.0189%" height="15" fill="rgb(227,98,0)" fg:x="21756" fg:w="27"/><text x="15.4730%" y="735.50"></text></g><g><title>alloc::slice::hack::into_vec (25 samples, 0.02%)</title><rect x="15.2244%" y="709" width="0.0175%" height="15" fill="rgb(207,7,3)" fg:x="21758" fg:w="25"/><text x="15.4744%" y="719.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::clear (17 samples, 0.01%)</title><rect x="15.2419%" y="725" width="0.0119%" height="15" fill="rgb(206,98,19)" fg:x="21783" fg:w="17"/><text x="15.4919%" y="735.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::buffer_range (18 samples, 0.01%)</title><rect x="15.2734%" y="677" width="0.0126%" height="15" fill="rgb(217,5,26)" fg:x="21828" fg:w="18"/><text x="15.5234%" y="687.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::as_mut_slices (99 samples, 0.07%)</title><rect x="15.2643%" y="693" width="0.0693%" height="15" fill="rgb(235,190,38)" fg:x="21815" fg:w="99"/><text x="15.5143%" y="703.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::slice_ranges (68 samples, 0.05%)</title><rect x="15.2860%" y="677" width="0.0476%" height="15" fill="rgb(247,86,24)" fg:x="21846" fg:w="68"/><text x="15.5360%" y="687.50"></text></g><g><title>core::slice::index::range (55 samples, 0.04%)</title><rect x="15.2951%" y="661" width="0.0385%" height="15" fill="rgb(205,101,16)" fg:x="21859" fg:w="55"/><text x="15.5451%" y="671.50"></text></g><g><title>&lt;alloc::collections::vec_deque::VecDeque&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (110 samples, 0.08%)</title><rect x="15.2573%" y="709" width="0.0770%" height="15" fill="rgb(246,168,33)" fg:x="21805" fg:w="110"/><text x="15.5073%" y="719.50"></text></g><g><title>_int_free (34 samples, 0.02%)</title><rect x="15.3574%" y="629" width="0.0238%" height="15" fill="rgb(231,114,1)" fg:x="21948" fg:w="34"/><text x="15.6074%" y="639.50"></text></g><g><title>__GI___libc_free (58 samples, 0.04%)</title><rect x="15.3448%" y="645" width="0.0406%" height="15" fill="rgb(207,184,53)" fg:x="21930" fg:w="58"/><text x="15.5948%" y="655.50"></text></g><g><title>alloc::alloc::dealloc (66 samples, 0.05%)</title><rect x="15.3448%" y="661" width="0.0462%" height="15" fill="rgb(224,95,51)" fg:x="21930" fg:w="66"/><text x="15.5948%" y="671.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (71 samples, 0.05%)</title><rect x="15.3434%" y="677" width="0.0497%" height="15" fill="rgb(212,188,45)" fg:x="21928" fg:w="71"/><text x="15.5934%" y="687.50"></text></g><g><title>coldbrew::jit::JitCache::reset (627 samples, 0.44%)</title><rect x="14.9844%" y="741" width="0.4387%" height="15" fill="rgb(223,154,38)" fg:x="21415" fg:w="627"/><text x="15.2344%" y="751.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::vec_deque::VecDeque&lt;coldbrew::jit::Register&gt;&gt; (242 samples, 0.17%)</title><rect x="15.2538%" y="725" width="0.1693%" height="15" fill="rgb(251,22,52)" fg:x="21800" fg:w="242"/><text x="15.5038%" y="735.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;coldbrew::jit::Register&gt;&gt; (127 samples, 0.09%)</title><rect x="15.3343%" y="709" width="0.0889%" height="15" fill="rgb(229,209,22)" fg:x="21915" fg:w="127"/><text x="15.5843%" y="719.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (127 samples, 0.09%)</title><rect x="15.3343%" y="693" width="0.0889%" height="15" fill="rgb(234,138,34)" fg:x="21915" fg:w="127"/><text x="15.5843%" y="703.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::current_memory (43 samples, 0.03%)</title><rect x="15.3931%" y="677" width="0.0301%" height="15" fill="rgb(212,95,11)" fg:x="21999" fg:w="43"/><text x="15.6431%" y="687.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (30 samples, 0.02%)</title><rect x="15.4483%" y="725" width="0.0210%" height="15" fill="rgb(240,179,47)" fg:x="22078" fg:w="30"/><text x="15.6983%" y="735.50"></text></g><g><title>coldbrew::runtime::Instruction::nth (83 samples, 0.06%)</title><rect x="15.4232%" y="741" width="0.0581%" height="15" fill="rgb(240,163,11)" fg:x="22042" fg:w="83"/><text x="15.6732%" y="751.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get (17 samples, 0.01%)</title><rect x="15.4693%" y="725" width="0.0119%" height="15" fill="rgb(236,37,12)" fg:x="22108" fg:w="17"/><text x="15.7193%" y="735.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (33 samples, 0.02%)</title><rect x="15.5624%" y="677" width="0.0231%" height="15" fill="rgb(232,164,16)" fg:x="22241" fg:w="33"/><text x="15.8124%" y="687.50"></text></g><g><title>core::slice::raw::from_raw_parts (29 samples, 0.02%)</title><rect x="15.5652%" y="661" width="0.0203%" height="15" fill="rgb(244,205,15)" fg:x="22245" fg:w="29"/><text x="15.8152%" y="671.50"></text></g><g><title>core::ptr::slice_from_raw_parts (29 samples, 0.02%)</title><rect x="15.5652%" y="645" width="0.0203%" height="15" fill="rgb(223,117,47)" fg:x="22245" fg:w="29"/><text x="15.8152%" y="655.50"></text></g><g><title>core::ptr::metadata::from_raw_parts (26 samples, 0.02%)</title><rect x="15.5673%" y="629" width="0.0182%" height="15" fill="rgb(244,107,35)" fg:x="22248" fg:w="26"/><text x="15.8173%" y="639.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_mut_ptr (29 samples, 0.02%)</title><rect x="15.6296%" y="629" width="0.0203%" height="15" fill="rgb(205,140,8)" fg:x="22337" fg:w="29"/><text x="15.8796%" y="639.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (29 samples, 0.02%)</title><rect x="15.6296%" y="613" width="0.0203%" height="15" fill="rgb(228,84,46)" fg:x="22337" fg:w="29"/><text x="15.8796%" y="623.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (26 samples, 0.02%)</title><rect x="15.8724%" y="549" width="0.0182%" height="15" fill="rgb(254,188,9)" fg:x="22684" fg:w="26"/><text x="16.1224%" y="559.50"></text></g><g><title>checked_request2size (17 samples, 0.01%)</title><rect x="15.9137%" y="517" width="0.0119%" height="15" fill="rgb(206,112,54)" fg:x="22743" fg:w="17"/><text x="16.1637%" y="527.50"></text></g><g><title>__GI___libc_malloc (122 samples, 0.09%)</title><rect x="15.8948%" y="533" width="0.0854%" height="15" fill="rgb(216,84,49)" fg:x="22716" fg:w="122"/><text x="16.1448%" y="543.50"></text></g><g><title>tcache_get (78 samples, 0.05%)</title><rect x="15.9256%" y="517" width="0.0546%" height="15" fill="rgb(214,194,35)" fg:x="22760" fg:w="78"/><text x="16.1756%" y="527.50"></text></g><g><title>alloc::alloc::alloc (147 samples, 0.10%)</title><rect x="15.8948%" y="549" width="0.1029%" height="15" fill="rgb(249,28,3)" fg:x="22716" fg:w="147"/><text x="16.1448%" y="559.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (314 samples, 0.22%)</title><rect x="15.8206%" y="581" width="0.2197%" height="15" fill="rgb(222,56,52)" fg:x="22610" fg:w="314"/><text x="16.0706%" y="591.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (308 samples, 0.22%)</title><rect x="15.8248%" y="565" width="0.2155%" height="15" fill="rgb(245,217,50)" fg:x="22616" fg:w="308"/><text x="16.0748%" y="575.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;[T]&gt;::slice_from_raw_parts (32 samples, 0.02%)</title><rect x="16.0179%" y="549" width="0.0224%" height="15" fill="rgb(213,201,24)" fg:x="22892" fg:w="32"/><text x="16.2679%" y="559.50"></text></g><g><title>core::ptr::slice_from_raw_parts_mut (28 samples, 0.02%)</title><rect x="16.0207%" y="533" width="0.0196%" height="15" fill="rgb(248,116,28)" fg:x="22896" fg:w="28"/><text x="16.2707%" y="543.50"></text></g><g><title>core::ptr::metadata::from_raw_parts_mut (28 samples, 0.02%)</title><rect x="16.0207%" y="517" width="0.0196%" height="15" fill="rgb(219,72,43)" fg:x="22896" fg:w="28"/><text x="16.2707%" y="527.50"></text></g><g><title>core::alloc::layout::Layout::array::inner (55 samples, 0.04%)</title><rect x="16.0452%" y="565" width="0.0385%" height="15" fill="rgb(209,138,14)" fg:x="22931" fg:w="55"/><text x="16.2952%" y="575.50"></text></g><g><title>core::alloc::layout::Layout::array (69 samples, 0.05%)</title><rect x="16.0403%" y="581" width="0.0483%" height="15" fill="rgb(222,18,33)" fg:x="22924" fg:w="69"/><text x="16.2903%" y="591.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::as_ptr (20 samples, 0.01%)</title><rect x="16.0886%" y="581" width="0.0140%" height="15" fill="rgb(213,199,7)" fg:x="22993" fg:w="20"/><text x="16.3386%" y="591.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (671 samples, 0.47%)</title><rect x="15.6499%" y="629" width="0.4695%" height="15" fill="rgb(250,110,10)" fg:x="22366" fg:w="671"/><text x="15.8999%" y="639.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (662 samples, 0.46%)</title><rect x="15.6562%" y="613" width="0.4632%" height="15" fill="rgb(248,123,6)" fg:x="22375" fg:w="662"/><text x="15.9062%" y="623.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (644 samples, 0.45%)</title><rect x="15.6688%" y="597" width="0.4506%" height="15" fill="rgb(206,91,31)" fg:x="22393" fg:w="644"/><text x="15.9188%" y="607.50"></text></g><g><title>core::ptr::unique::Unique&lt;T&gt;::new_unchecked (24 samples, 0.02%)</title><rect x="16.1026%" y="581" width="0.0168%" height="15" fill="rgb(211,154,13)" fg:x="23013" fg:w="24"/><text x="16.3526%" y="591.50"></text></g><g><title>coldbrew::trace::RecordEntry::instruction (926 samples, 0.65%)</title><rect x="15.4812%" y="741" width="0.6479%" height="15" fill="rgb(225,148,7)" fg:x="22125" fg:w="926"/><text x="15.7312%" y="751.50"></text></g><g><title>&lt;coldbrew::runtime::Instruction as core::clone::Clone&gt;::clone (920 samples, 0.64%)</title><rect x="15.4854%" y="725" width="0.6437%" height="15" fill="rgb(220,160,43)" fg:x="22131" fg:w="920"/><text x="15.7354%" y="735.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::clone::Clone&gt;::clone (856 samples, 0.60%)</title><rect x="15.5302%" y="709" width="0.5990%" height="15" fill="rgb(213,52,39)" fg:x="22195" fg:w="856"/><text x="15.7802%" y="719.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (814 samples, 0.57%)</title><rect x="15.5596%" y="693" width="0.5696%" height="15" fill="rgb(243,137,7)" fg:x="22237" fg:w="814"/><text x="15.8096%" y="703.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (777 samples, 0.54%)</title><rect x="15.5855%" y="677" width="0.5437%" height="15" fill="rgb(230,79,13)" fg:x="22274" fg:w="777"/><text x="15.8355%" y="687.50"></text></g><g><title>alloc::slice::hack::to_vec (777 samples, 0.54%)</title><rect x="15.5855%" y="661" width="0.5437%" height="15" fill="rgb(247,105,23)" fg:x="22274" fg:w="777"/><text x="15.8355%" y="671.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (771 samples, 0.54%)</title><rect x="15.5897%" y="645" width="0.5395%" height="15" fill="rgb(223,179,41)" fg:x="22280" fg:w="771"/><text x="15.8397%" y="655.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (21 samples, 0.01%)</title><rect x="16.1446%" y="693" width="0.0147%" height="15" fill="rgb(218,9,34)" fg:x="23073" fg:w="21"/><text x="16.3946%" y="703.50"></text></g><g><title>core::ptr::slice_from_raw_parts_mut (16 samples, 0.01%)</title><rect x="16.1481%" y="677" width="0.0112%" height="15" fill="rgb(222,106,8)" fg:x="23078" fg:w="16"/><text x="16.3981%" y="687.50"></text></g><g><title>core::ptr::metadata::from_raw_parts_mut (16 samples, 0.01%)</title><rect x="16.1481%" y="661" width="0.0112%" height="15" fill="rgb(211,220,0)" fg:x="23078" fg:w="16"/><text x="16.3981%" y="671.50"></text></g><g><title>_int_free (62 samples, 0.04%)</title><rect x="16.2131%" y="613" width="0.0434%" height="15" fill="rgb(229,52,16)" fg:x="23171" fg:w="62"/><text x="16.4631%" y="623.50"></text></g><g><title>__GI___libc_free (95 samples, 0.07%)</title><rect x="16.1914%" y="629" width="0.0665%" height="15" fill="rgb(212,155,18)" fg:x="23140" fg:w="95"/><text x="16.4414%" y="639.50"></text></g><g><title>alloc::alloc::dealloc (114 samples, 0.08%)</title><rect x="16.1914%" y="645" width="0.0798%" height="15" fill="rgb(242,21,14)" fg:x="23140" fg:w="114"/><text x="16.4414%" y="655.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (138 samples, 0.10%)</title><rect x="16.1788%" y="661" width="0.0966%" height="15" fill="rgb(222,19,48)" fg:x="23122" fg:w="138"/><text x="16.4288%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;coldbrew::runtime::Instruction&gt; (298 samples, 0.21%)</title><rect x="16.1292%" y="741" width="0.2085%" height="15" fill="rgb(232,45,27)" fg:x="23051" fg:w="298"/><text x="16.3792%" y="751.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;alloc::vec::Vec&lt;coldbrew::runtime::Value&gt;&gt;&gt; (298 samples, 0.21%)</title><rect x="16.1292%" y="725" width="0.2085%" height="15" fill="rgb(249,103,42)" fg:x="23051" fg:w="298"/><text x="16.3792%" y="735.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;coldbrew::runtime::Value&gt;&gt; (279 samples, 0.20%)</title><rect x="16.1425%" y="709" width="0.1952%" height="15" fill="rgb(246,81,33)" fg:x="23070" fg:w="279"/><text x="16.3925%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;coldbrew::runtime::Value&gt;&gt; (255 samples, 0.18%)</title><rect x="16.1593%" y="693" width="0.1784%" height="15" fill="rgb(252,33,42)" fg:x="23094" fg:w="255"/><text x="16.4093%" y="703.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (255 samples, 0.18%)</title><rect x="16.1593%" y="677" width="0.1784%" height="15" fill="rgb(209,212,41)" fg:x="23094" fg:w="255"/><text x="16.4093%" y="687.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::current_memory (89 samples, 0.06%)</title><rect x="16.2754%" y="661" width="0.0623%" height="15" fill="rgb(207,154,6)" fg:x="23260" fg:w="89"/><text x="16.5254%" y="671.50"></text></g><g><title>__GI___munmap (13,318 samples, 9.32%)</title><rect x="16.3643%" y="629" width="9.3188%" height="15" fill="rgb(223,64,47)" fg:x="23387" fg:w="13318"/><text x="16.6143%" y="639.50">__GI___munmap</text></g><g><title>[unknown] (13,226 samples, 9.25%)</title><rect x="16.4286%" y="613" width="9.2545%" height="15" fill="rgb(211,161,38)" fg:x="23479" fg:w="13226"/><text x="16.6786%" y="623.50">[unknown]</text></g><g><title>[unknown] (13,112 samples, 9.17%)</title><rect x="16.5084%" y="597" width="9.1747%" height="15" fill="rgb(219,138,40)" fg:x="23593" fg:w="13112"/><text x="16.7584%" y="607.50">[unknown]</text></g><g><title>[unknown] (13,078 samples, 9.15%)</title><rect x="16.5322%" y="581" width="9.1509%" height="15" fill="rgb(241,228,46)" fg:x="23627" fg:w="13078"/><text x="16.7822%" y="591.50">[unknown]</text></g><g><title>[unknown] (13,024 samples, 9.11%)</title><rect x="16.5700%" y="565" width="9.1131%" height="15" fill="rgb(223,209,38)" fg:x="23681" fg:w="13024"/><text x="16.8200%" y="575.50">[unknown]</text></g><g><title>[unknown] (12,893 samples, 9.02%)</title><rect x="16.6617%" y="549" width="9.0214%" height="15" fill="rgb(236,164,45)" fg:x="23812" fg:w="12893"/><text x="16.9117%" y="559.50">[unknown]</text></g><g><title>[unknown] (12,683 samples, 8.87%)</title><rect x="16.8086%" y="533" width="8.8745%" height="15" fill="rgb(231,15,5)" fg:x="24022" fg:w="12683"/><text x="17.0586%" y="543.50">[unknown]</text></g><g><title>[unknown] (12,353 samples, 8.64%)</title><rect x="17.0395%" y="517" width="8.6436%" height="15" fill="rgb(252,35,15)" fg:x="24352" fg:w="12353"/><text x="17.2895%" y="527.50">[unknown]</text></g><g><title>[unknown] (11,763 samples, 8.23%)</title><rect x="17.4523%" y="501" width="8.2308%" height="15" fill="rgb(248,181,18)" fg:x="24942" fg:w="11763"/><text x="17.7023%" y="511.50">[unknown]</text></g><g><title>[unknown] (10,469 samples, 7.33%)</title><rect x="18.3578%" y="485" width="7.3253%" height="15" fill="rgb(233,39,42)" fg:x="26236" fg:w="10469"/><text x="18.6078%" y="495.50">[unknown]</text></g><g><title>[unknown] (8,454 samples, 5.92%)</title><rect x="19.7677%" y="469" width="5.9154%" height="15" fill="rgb(238,110,33)" fg:x="28251" fg:w="8454"/><text x="20.0177%" y="479.50">[unknown]</text></g><g><title>[unknown] (6,228 samples, 4.36%)</title><rect x="21.3253%" y="453" width="4.3578%" height="15" fill="rgb(233,195,10)" fg:x="30477" fg:w="6228"/><text x="21.5753%" y="463.50">[unkn..</text></g><g><title>[unknown] (3,300 samples, 2.31%)</title><rect x="23.3740%" y="437" width="2.3091%" height="15" fill="rgb(254,105,3)" fg:x="33405" fg:w="3300"/><text x="23.6240%" y="447.50">[..</text></g><g><title>[unknown] (1,984 samples, 1.39%)</title><rect x="24.2949%" y="421" width="1.3882%" height="15" fill="rgb(221,225,9)" fg:x="34721" fg:w="1984"/><text x="24.5449%" y="431.50"></text></g><g><title>[unknown] (1,155 samples, 0.81%)</title><rect x="24.8749%" y="405" width="0.8082%" height="15" fill="rgb(224,227,45)" fg:x="35550" fg:w="1155"/><text x="25.1249%" y="415.50"></text></g><g><title>[unknown] (711 samples, 0.50%)</title><rect x="25.1856%" y="389" width="0.4975%" height="15" fill="rgb(229,198,43)" fg:x="35994" fg:w="711"/><text x="25.4356%" y="399.50"></text></g><g><title>[unknown] (152 samples, 0.11%)</title><rect x="25.5767%" y="373" width="0.1064%" height="15" fill="rgb(206,209,35)" fg:x="36553" fg:w="152"/><text x="25.8267%" y="383.50"></text></g><g><title>[unknown] (27 samples, 0.02%)</title><rect x="25.6642%" y="357" width="0.0189%" height="15" fill="rgb(245,195,53)" fg:x="36678" fg:w="27"/><text x="25.9142%" y="367.50"></text></g><g><title>[unknown] (17 samples, 0.01%)</title><rect x="25.6712%" y="341" width="0.0119%" height="15" fill="rgb(240,92,26)" fg:x="36688" fg:w="17"/><text x="25.9212%" y="351.50"></text></g><g><title>core::cmp::Ord::max (38 samples, 0.03%)</title><rect x="25.6831%" y="629" width="0.0266%" height="15" fill="rgb(207,40,23)" fg:x="36705" fg:w="38"/><text x="25.9331%" y="639.50"></text></g><g><title>core::cmp::max_by (38 samples, 0.03%)</title><rect x="25.6831%" y="613" width="0.0266%" height="15" fill="rgb(223,111,35)" fg:x="36705" fg:w="38"/><text x="25.9331%" y="623.50"></text></g><g><title>core::ops::function::FnOnce::call_once (17 samples, 0.01%)</title><rect x="25.6978%" y="597" width="0.0119%" height="15" fill="rgb(229,147,28)" fg:x="36726" fg:w="17"/><text x="25.9478%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;coldbrew::jit::NativeTrace&gt;&gt; (13,416 samples, 9.39%)</title><rect x="16.3377%" y="741" width="9.3874%" height="15" fill="rgb(211,29,28)" fg:x="23349" fg:w="13416"/><text x="16.5877%" y="751.50">core::ptr::dr..</text></g><g><title>core::ptr::drop_in_place&lt;coldbrew::jit::NativeTrace&gt; (13,410 samples, 9.38%)</title><rect x="16.3419%" y="725" width="9.3832%" height="15" fill="rgb(228,72,33)" fg:x="23355" fg:w="13410"/><text x="16.5919%" y="735.50">core::ptr::dr..</text></g><g><title>core::ptr::drop_in_place&lt;dynasmrt::mmap::ExecutableBuffer&gt; (13,410 samples, 9.38%)</title><rect x="16.3419%" y="709" width="9.3832%" height="15" fill="rgb(205,214,31)" fg:x="23355" fg:w="13410"/><text x="16.5919%" y="719.50">core::ptr::dr..</text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;memmap2::Mmap&gt;&gt; (13,410 samples, 9.38%)</title><rect x="16.3419%" y="693" width="9.3832%" height="15" fill="rgb(224,111,15)" fg:x="23355" fg:w="13410"/><text x="16.5919%" y="703.50">core::ptr::dr..</text></g><g><title>core::ptr::drop_in_place&lt;memmap2::Mmap&gt; (13,405 samples, 9.38%)</title><rect x="16.3454%" y="677" width="9.3797%" height="15" fill="rgb(253,21,26)" fg:x="23360" fg:w="13405"/><text x="16.5954%" y="687.50">core::ptr::dr..</text></g><g><title>core::ptr::drop_in_place&lt;memmap2::os::MmapInner&gt; (13,405 samples, 9.38%)</title><rect x="16.3454%" y="661" width="9.3797%" height="15" fill="rgb(245,139,43)" fg:x="23360" fg:w="13405"/><text x="16.5954%" y="671.50">core::ptr::dr..</text></g><g><title>&lt;memmap2::os::MmapInner as core::ops::drop::Drop&gt;::drop (13,405 samples, 9.38%)</title><rect x="16.3454%" y="645" width="9.3797%" height="15" fill="rgb(252,170,7)" fg:x="23360" fg:w="13405"/><text x="16.5954%" y="655.50">&lt;memmap2::os:..</text></g><g><title>memmap2::os::page_size (21 samples, 0.01%)</title><rect x="25.7104%" y="629" width="0.0147%" height="15" fill="rgb(231,118,14)" fg:x="36744" fg:w="21"/><text x="25.9604%" y="639.50"></text></g><g><title>__memcpy_avx_unaligned_erms (52 samples, 0.04%)</title><rect x="25.7412%" y="725" width="0.0364%" height="15" fill="rgb(238,83,0)" fg:x="36788" fg:w="52"/><text x="25.9912%" y="735.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::unwrap (78 samples, 0.05%)</title><rect x="25.7251%" y="741" width="0.0546%" height="15" fill="rgb(221,39,39)" fg:x="36765" fg:w="78"/><text x="25.9751%" y="751.50"></text></g><g><title>_int_free (36 samples, 0.03%)</title><rect x="25.8489%" y="629" width="0.0252%" height="15" fill="rgb(222,119,46)" fg:x="36942" fg:w="36"/><text x="26.0989%" y="639.50"></text></g><g><title>__GI___libc_free (45 samples, 0.03%)</title><rect x="25.8433%" y="645" width="0.0315%" height="15" fill="rgb(222,165,49)" fg:x="36934" fg:w="45"/><text x="26.0933%" y="655.50"></text></g><g><title>alloc::alloc::dealloc (49 samples, 0.03%)</title><rect x="25.8433%" y="661" width="0.0343%" height="15" fill="rgb(219,113,52)" fg:x="36934" fg:w="49"/><text x="26.0933%" y="671.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (66 samples, 0.05%)</title><rect x="25.8377%" y="677" width="0.0462%" height="15" fill="rgb(214,7,15)" fg:x="36926" fg:w="66"/><text x="26.0877%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (119 samples, 0.08%)</title><rect x="25.8251%" y="725" width="0.0833%" height="15" fill="rgb(235,32,4)" fg:x="36908" fg:w="119"/><text x="26.0751%" y="735.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (105 samples, 0.07%)</title><rect x="25.8349%" y="709" width="0.0735%" height="15" fill="rgb(238,90,54)" fg:x="36922" fg:w="105"/><text x="26.0849%" y="719.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (105 samples, 0.07%)</title><rect x="25.8349%" y="693" width="0.0735%" height="15" fill="rgb(213,208,19)" fg:x="36922" fg:w="105"/><text x="26.0849%" y="703.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::current_memory (30 samples, 0.02%)</title><rect x="25.8874%" y="677" width="0.0210%" height="15" fill="rgb(233,156,4)" fg:x="36997" fg:w="30"/><text x="26.1374%" y="687.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (28 samples, 0.02%)</title><rect x="25.9399%" y="693" width="0.0196%" height="15" fill="rgb(207,194,5)" fg:x="37072" fg:w="28"/><text x="26.1899%" y="703.50"></text></g><g><title>core::ptr::slice_from_raw_parts_mut (17 samples, 0.01%)</title><rect x="25.9476%" y="677" width="0.0119%" height="15" fill="rgb(206,111,30)" fg:x="37083" fg:w="17"/><text x="26.1976%" y="687.50"></text></g><g><title>core::ptr::metadata::from_raw_parts_mut (17 samples, 0.01%)</title><rect x="25.9476%" y="661" width="0.0119%" height="15" fill="rgb(243,70,54)" fg:x="37083" fg:w="17"/><text x="26.1976%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;core::option::Option&lt;dynasmrt::AssemblyOffset&gt;&gt;&gt; (81 samples, 0.06%)</title><rect x="25.9350%" y="709" width="0.0567%" height="15" fill="rgb(242,28,8)" fg:x="37065" fg:w="81"/><text x="26.1850%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;core::option::Option&lt;dynasmrt::AssemblyOffset&gt;&gt;&gt; (46 samples, 0.03%)</title><rect x="25.9595%" y="693" width="0.0322%" height="15" fill="rgb(219,106,18)" fg:x="37100" fg:w="46"/><text x="26.2095%" y="703.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (46 samples, 0.03%)</title><rect x="25.9595%" y="677" width="0.0322%" height="15" fill="rgb(244,222,10)" fg:x="37100" fg:w="46"/><text x="26.2095%" y="687.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::current_memory (37 samples, 0.03%)</title><rect x="25.9658%" y="661" width="0.0259%" height="15" fill="rgb(236,179,52)" fg:x="37109" fg:w="37"/><text x="26.2158%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;dynasmrt::components::LabelRegistry&gt; (133 samples, 0.09%)</title><rect x="25.9084%" y="725" width="0.0931%" height="15" fill="rgb(213,23,39)" fg:x="37027" fg:w="133"/><text x="26.1584%" y="735.50"></text></g><g><title>__memcpy_avx_unaligned_erms (53 samples, 0.04%)</title><rect x="26.0071%" y="661" width="0.0371%" height="15" fill="rgb(238,48,10)" fg:x="37168" fg:w="53"/><text x="26.2571%" y="671.50"></text></g><g><title>alloc::collections::btree::navigate::LazyLeafRange&lt;BorrowType,K,V&gt;::none (17 samples, 0.01%)</title><rect x="26.0456%" y="661" width="0.0119%" height="15" fill="rgb(251,196,23)" fg:x="37223" fg:w="17"/><text x="26.2956%" y="671.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::iter::traits::collect::IntoIterator&gt;::into_iter (103 samples, 0.07%)</title><rect x="26.0015%" y="677" width="0.0721%" height="15" fill="rgb(250,152,24)" fg:x="37160" fg:w="103"/><text x="26.2515%" y="687.50"></text></g><g><title>core::option::Option&lt;T&gt;::take (15 samples, 0.01%)</title><rect x="26.0630%" y="661" width="0.0105%" height="15" fill="rgb(209,150,17)" fg:x="37248" fg:w="15"/><text x="26.3130%" y="671.50"></text></g><g><title>core::mem::replace (15 samples, 0.01%)</title><rect x="26.0630%" y="645" width="0.0105%" height="15" fill="rgb(234,202,34)" fg:x="37248" fg:w="15"/><text x="26.3130%" y="655.50"></text></g><g><title>core::mem::drop (51 samples, 0.04%)</title><rect x="26.0735%" y="677" width="0.0357%" height="15" fill="rgb(253,148,53)" fg:x="37263" fg:w="51"/><text x="26.3235%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;usize,dynasmrt::components::PatchLoc&lt;dynasmrt::x64::X64Relocation&gt;&gt;&gt; (51 samples, 0.04%)</title><rect x="26.0735%" y="661" width="0.0357%" height="15" fill="rgb(218,129,16)" fg:x="37263" fg:w="51"/><text x="26.3235%" y="671.50"></text></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (51 samples, 0.04%)</title><rect x="26.0735%" y="645" width="0.0357%" height="15" fill="rgb(216,85,19)" fg:x="37263" fg:w="51"/><text x="26.3235%" y="655.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (40 samples, 0.03%)</title><rect x="26.0812%" y="629" width="0.0280%" height="15" fill="rgb(235,228,7)" fg:x="37274" fg:w="40"/><text x="26.3312%" y="639.50"></text></g><g><title>alloc::collections::btree::navigate::LazyLeafRange&lt;alloc::collections::btree::node::marker::Dying,K,V&gt;::deallocating_end (31 samples, 0.02%)</title><rect x="26.0875%" y="613" width="0.0217%" height="15" fill="rgb(245,175,0)" fg:x="37283" fg:w="31"/><text x="26.3375%" y="623.50"></text></g><g><title>alloc::collections::btree::navigate::LazyLeafRange&lt;alloc::collections::btree::node::marker::Dying,K,V&gt;::take_front (22 samples, 0.02%)</title><rect x="26.0938%" y="597" width="0.0154%" height="15" fill="rgb(208,168,36)" fg:x="37292" fg:w="22"/><text x="26.3438%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;dynasmrt::components::ManagedRelocs&lt;dynasmrt::x64::X64Relocation&gt;&gt; (162 samples, 0.11%)</title><rect x="26.0015%" y="725" width="0.1134%" height="15" fill="rgb(246,171,24)" fg:x="37160" fg:w="162"/><text x="26.2515%" y="735.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::BTreeMap&lt;usize,dynasmrt::components::PatchLoc&lt;dynasmrt::x64::X64Relocation&gt;&gt;&gt; (162 samples, 0.11%)</title><rect x="26.0015%" y="709" width="0.1134%" height="15" fill="rgb(215,142,24)" fg:x="37160" fg:w="162"/><text x="26.2515%" y="719.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (162 samples, 0.11%)</title><rect x="26.0015%" y="693" width="0.1134%" height="15" fill="rgb(250,187,7)" fg:x="37160" fg:w="162"/><text x="26.2515%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;(dynasmrt::components::PatchLoc&lt;dynasmrt::x64::X64Relocation&gt;,dynasmrt::DynamicLabel)&gt;&gt; (31 samples, 0.02%)</title><rect x="26.1162%" y="709" width="0.0217%" height="15" fill="rgb(228,66,33)" fg:x="37324" fg:w="31"/><text x="26.3662%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;(dynasmrt::components::PatchLoc&lt;dynasmrt::x64::X64Relocation&gt;,dynasmrt::DynamicLabel)&gt;&gt; (23 samples, 0.02%)</title><rect x="26.1218%" y="693" width="0.0161%" height="15" fill="rgb(234,215,21)" fg:x="37332" fg:w="23"/><text x="26.3718%" y="703.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (23 samples, 0.02%)</title><rect x="26.1218%" y="677" width="0.0161%" height="15" fill="rgb(222,191,20)" fg:x="37332" fg:w="23"/><text x="26.3718%" y="687.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::current_memory (16 samples, 0.01%)</title><rect x="26.1267%" y="661" width="0.0112%" height="15" fill="rgb(245,79,54)" fg:x="37339" fg:w="16"/><text x="26.3767%" y="671.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (37 samples, 0.03%)</title><rect x="26.1428%" y="693" width="0.0259%" height="15" fill="rgb(240,10,37)" fg:x="37362" fg:w="37"/><text x="26.3928%" y="703.50"></text></g><g><title>core::ptr::slice_from_raw_parts_mut (16 samples, 0.01%)</title><rect x="26.1575%" y="677" width="0.0112%" height="15" fill="rgb(214,192,32)" fg:x="37383" fg:w="16"/><text x="26.4075%" y="687.50"></text></g><g><title>core::ptr::metadata::from_raw_parts_mut (16 samples, 0.01%)</title><rect x="26.1575%" y="661" width="0.0112%" height="15" fill="rgb(209,36,54)" fg:x="37383" fg:w="16"/><text x="26.4075%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;dynasmrt::components::RelocRegistry&lt;dynasmrt::x64::X64Relocation&gt;&gt; (108 samples, 0.08%)</title><rect x="26.1148%" y="725" width="0.0756%" height="15" fill="rgb(220,10,11)" fg:x="37322" fg:w="108"/><text x="26.3648%" y="735.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;(dynasmrt::components::PatchLoc&lt;dynasmrt::x64::X64Relocation&gt;,dynasmrt::components::StaticLabel)&gt;&gt; (75 samples, 0.05%)</title><rect x="26.1379%" y="709" width="0.0525%" height="15" fill="rgb(221,106,17)" fg:x="37355" fg:w="75"/><text x="26.3879%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;(dynasmrt::components::PatchLoc&lt;dynasmrt::x64::X64Relocation&gt;,dynasmrt::components::StaticLabel)&gt;&gt; (31 samples, 0.02%)</title><rect x="26.1687%" y="693" width="0.0217%" height="15" fill="rgb(251,142,44)" fg:x="37399" fg:w="31"/><text x="26.4187%" y="703.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (31 samples, 0.02%)</title><rect x="26.1687%" y="677" width="0.0217%" height="15" fill="rgb(238,13,15)" fg:x="37399" fg:w="31"/><text x="26.4187%" y="687.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::current_memory (23 samples, 0.02%)</title><rect x="26.1743%" y="661" width="0.0161%" height="15" fill="rgb(208,107,27)" fg:x="37407" fg:w="23"/><text x="26.4243%" y="671.50"></text></g><g><title>__memcpy_avx_unaligned_erms (247 samples, 0.17%)</title><rect x="26.2576%" y="677" width="0.1728%" height="15" fill="rgb(205,136,37)" fg:x="37526" fg:w="247"/><text x="26.5076%" y="687.50"></text></g><g><title>&lt;I as core::iter::traits::collect::IntoIterator&gt;::into_iter (260 samples, 0.18%)</title><rect x="26.2520%" y="693" width="0.1819%" height="15" fill="rgb(250,205,27)" fg:x="37518" fg:w="260"/><text x="26.5020%" y="703.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (48 samples, 0.03%)</title><rect x="26.4402%" y="677" width="0.0336%" height="15" fill="rgb(210,80,43)" fg:x="37787" fg:w="48"/><text x="26.6902%" y="687.50"></text></g><g><title>&lt;alloc::vec::drain::Drain&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (63 samples, 0.04%)</title><rect x="26.4339%" y="693" width="0.0441%" height="15" fill="rgb(247,160,36)" fg:x="37778" fg:w="63"/><text x="26.6839%" y="703.50"></text></g><g><title>__memcpy_avx_unaligned_erms (85 samples, 0.06%)</title><rect x="26.4780%" y="693" width="0.0595%" height="15" fill="rgb(234,13,49)" fg:x="37841" fg:w="85"/><text x="26.7280%" y="703.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::default::Default&gt;::default (20 samples, 0.01%)</title><rect x="26.5619%" y="645" width="0.0140%" height="15" fill="rgb(234,122,0)" fg:x="37961" fg:w="20"/><text x="26.8119%" y="655.50"></text></g><g><title>core::array::&lt;impl core::iter::traits::collect::IntoIterator for &amp;[T: N]&gt;::into_iter (17 samples, 0.01%)</title><rect x="26.5640%" y="629" width="0.0119%" height="15" fill="rgb(207,146,38)" fg:x="37964" fg:w="17"/><text x="26.8140%" y="639.50"></text></g><g><title>core::mem::take (26 samples, 0.02%)</title><rect x="26.5619%" y="661" width="0.0182%" height="15" fill="rgb(207,177,25)" fg:x="37961" fg:w="26"/><text x="26.8119%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::drain::Drain&lt;(dynasmrt::components::PatchLoc&lt;dynasmrt::x64::X64Relocation&gt;,dynasmrt::DynamicLabel)&gt;&gt; (45 samples, 0.03%)</title><rect x="26.5493%" y="693" width="0.0315%" height="15" fill="rgb(211,178,42)" fg:x="37943" fg:w="45"/><text x="26.7993%" y="703.50"></text></g><g><title>&lt;alloc::vec::drain::Drain&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (45 samples, 0.03%)</title><rect x="26.5493%" y="677" width="0.0315%" height="15" fill="rgb(230,69,54)" fg:x="37943" fg:w="45"/><text x="26.7993%" y="687.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::exact_size::ExactSizeIterator&gt;::len (20 samples, 0.01%)</title><rect x="26.5927%" y="661" width="0.0140%" height="15" fill="rgb(214,135,41)" fg:x="38005" fg:w="20"/><text x="26.8427%" y="671.50"></text></g><g><title>core::mem::take (16 samples, 0.01%)</title><rect x="26.6067%" y="661" width="0.0112%" height="15" fill="rgb(237,67,25)" fg:x="38025" fg:w="16"/><text x="26.8567%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::drain::Drain&lt;(dynasmrt::components::PatchLoc&lt;dynasmrt::x64::X64Relocation&gt;,dynasmrt::components::StaticLabel)&gt;&gt; (56 samples, 0.04%)</title><rect x="26.5808%" y="693" width="0.0392%" height="15" fill="rgb(222,189,50)" fg:x="37988" fg:w="56"/><text x="26.8308%" y="703.50"></text></g><g><title>&lt;alloc::vec::drain::Drain&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (56 samples, 0.04%)</title><rect x="26.5808%" y="677" width="0.0392%" height="15" fill="rgb(245,148,34)" fg:x="37988" fg:w="56"/><text x="26.8308%" y="687.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::iter (18 samples, 0.01%)</title><rect x="26.6389%" y="661" width="0.0126%" height="15" fill="rgb(222,29,6)" fg:x="38071" fg:w="18"/><text x="26.8889%" y="671.50"></text></g><g><title>core::slice::index::range (39 samples, 0.03%)</title><rect x="26.6515%" y="661" width="0.0273%" height="15" fill="rgb(221,189,43)" fg:x="38089" fg:w="39"/><text x="26.9015%" y="671.50"></text></g><g><title>dynasmrt::components::RelocRegistry&lt;R&gt;::take_dynamics (88 samples, 0.06%)</title><rect x="26.6200%" y="693" width="0.0616%" height="15" fill="rgb(207,36,27)" fg:x="38044" fg:w="88"/><text x="26.8700%" y="703.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::drain (85 samples, 0.06%)</title><rect x="26.6221%" y="677" width="0.0595%" height="15" fill="rgb(217,90,24)" fg:x="38047" fg:w="85"/><text x="26.8721%" y="687.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::iter (17 samples, 0.01%)</title><rect x="26.6991%" y="661" width="0.0119%" height="15" fill="rgb(224,66,35)" fg:x="38157" fg:w="17"/><text x="26.9491%" y="671.50"></text></g><g><title>core::slice::index::range (48 samples, 0.03%)</title><rect x="26.7110%" y="661" width="0.0336%" height="15" fill="rgb(221,13,50)" fg:x="38174" fg:w="48"/><text x="26.9610%" y="671.50"></text></g><g><title>dynasmrt::Assembler&lt;R&gt;::encode_relocs (748 samples, 0.52%)</title><rect x="26.2268%" y="709" width="0.5234%" height="15" fill="rgb(236,68,49)" fg:x="37482" fg:w="748"/><text x="26.4768%" y="719.50"></text></g><g><title>dynasmrt::components::RelocRegistry&lt;R&gt;::take_statics (98 samples, 0.07%)</title><rect x="26.6816%" y="693" width="0.0686%" height="15" fill="rgb(229,146,28)" fg:x="38132" fg:w="98"/><text x="26.9316%" y="703.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::drain (95 samples, 0.07%)</title><rect x="26.6837%" y="677" width="0.0665%" height="15" fill="rgb(225,31,38)" fg:x="38135" fg:w="95"/><text x="26.9337%" y="687.50"></text></g><g><title>&lt;dynasmrt::mmap::MutableBuffer as core::ops::deref::DerefMut&gt;::deref_mut (53 samples, 0.04%)</title><rect x="26.9237%" y="693" width="0.0371%" height="15" fill="rgb(250,208,3)" fg:x="38478" fg:w="53"/><text x="27.1737%" y="703.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::IndexMut&lt;I&gt; for [T]&gt;::index_mut (38 samples, 0.03%)</title><rect x="26.9342%" y="677" width="0.0266%" height="15" fill="rgb(246,54,23)" fg:x="38493" fg:w="38"/><text x="27.1842%" y="687.50"></text></g><g><title>&lt;core::ops::range::RangeTo&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (33 samples, 0.02%)</title><rect x="26.9377%" y="661" width="0.0231%" height="15" fill="rgb(243,76,11)" fg:x="38498" fg:w="33"/><text x="27.1877%" y="671.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (28 samples, 0.02%)</title><rect x="26.9412%" y="645" width="0.0196%" height="15" fill="rgb(245,21,50)" fg:x="38503" fg:w="28"/><text x="27.1912%" y="655.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::clear (37 samples, 0.03%)</title><rect x="26.9608%" y="693" width="0.0259%" height="15" fill="rgb(228,9,43)" fg:x="38531" fg:w="37"/><text x="27.2108%" y="703.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_mut_slice (32 samples, 0.02%)</title><rect x="26.9643%" y="677" width="0.0224%" height="15" fill="rgb(208,100,47)" fg:x="38536" fg:w="32"/><text x="27.2143%" y="687.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::DerefMut&gt;::deref_mut (32 samples, 0.02%)</title><rect x="26.9643%" y="661" width="0.0224%" height="15" fill="rgb(232,26,8)" fg:x="38536" fg:w="32"/><text x="27.2143%" y="671.50"></text></g><g><title>core::slice::raw::from_raw_parts_mut (25 samples, 0.02%)</title><rect x="26.9692%" y="645" width="0.0175%" height="15" fill="rgb(216,166,38)" fg:x="38543" fg:w="25"/><text x="27.2192%" y="655.50"></text></g><g><title>core::ptr::slice_from_raw_parts_mut (25 samples, 0.02%)</title><rect x="26.9692%" y="629" width="0.0175%" height="15" fill="rgb(251,202,51)" fg:x="38543" fg:w="25"/><text x="27.2192%" y="639.50"></text></g><g><title>core::ptr::metadata::from_raw_parts_mut (25 samples, 0.02%)</title><rect x="26.9692%" y="613" width="0.0175%" height="15" fill="rgb(254,216,34)" fg:x="38543" fg:w="25"/><text x="27.2192%" y="623.50"></text></g><g><title>std::sync::poison::Flag::done (43 samples, 0.03%)</title><rect x="26.9972%" y="661" width="0.0301%" height="15" fill="rgb(251,32,27)" fg:x="38583" fg:w="43"/><text x="27.2472%" y="671.50"></text></g><g><title>std::thread::panicking (27 samples, 0.02%)</title><rect x="27.0084%" y="645" width="0.0189%" height="15" fill="rgb(208,127,28)" fg:x="38599" fg:w="27"/><text x="27.2584%" y="655.50"></text></g><g><title>std::panicking::panicking (27 samples, 0.02%)</title><rect x="27.0084%" y="629" width="0.0189%" height="15" fill="rgb(224,137,22)" fg:x="38599" fg:w="27"/><text x="27.2584%" y="639.50"></text></g><g><title>std::panicking::panic_count::count_is_zero (23 samples, 0.02%)</title><rect x="27.0112%" y="613" width="0.0161%" height="15" fill="rgb(254,70,32)" fg:x="38603" fg:w="23"/><text x="27.2612%" y="623.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (16 samples, 0.01%)</title><rect x="27.0161%" y="597" width="0.0112%" height="15" fill="rgb(229,75,37)" fg:x="38610" fg:w="16"/><text x="27.2661%" y="607.50"></text></g><g><title>core::sync::atomic::AtomicU32::fetch_sub (74 samples, 0.05%)</title><rect x="27.0454%" y="645" width="0.0518%" height="15" fill="rgb(252,64,23)" fg:x="38652" fg:w="74"/><text x="27.2954%" y="655.50"></text></g><g><title>core::sync::atomic::atomic_sub (68 samples, 0.05%)</title><rect x="27.0496%" y="629" width="0.0476%" height="15" fill="rgb(232,162,48)" fg:x="38658" fg:w="68"/><text x="27.2996%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::rwlock::RwLockWriteGuard&lt;dynasmrt::mmap::ExecutableBuffer&gt;&gt; (154 samples, 0.11%)</title><rect x="26.9951%" y="693" width="0.1078%" height="15" fill="rgb(246,160,12)" fg:x="38580" fg:w="154"/><text x="27.2451%" y="703.50"></text></g><g><title>&lt;std::sync::rwlock::RwLockWriteGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (154 samples, 0.11%)</title><rect x="26.9951%" y="677" width="0.1078%" height="15" fill="rgb(247,166,0)" fg:x="38580" fg:w="154"/><text x="27.2451%" y="687.50"></text></g><g><title>std::sys::unix::locks::futex_rwlock::RwLock::write_unlock (108 samples, 0.08%)</title><rect x="27.0273%" y="661" width="0.0756%" height="15" fill="rgb(249,219,21)" fg:x="38626" fg:w="108"/><text x="27.2773%" y="671.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::expect (26 samples, 0.02%)</title><rect x="27.1028%" y="693" width="0.0182%" height="15" fill="rgb(205,209,3)" fg:x="38734" fg:w="26"/><text x="27.3528%" y="703.50"></text></g><g><title>__memcpy_avx_unaligned_erms (6,653 samples, 4.66%)</title><rect x="27.1280%" y="661" width="4.6552%" height="15" fill="rgb(243,44,1)" fg:x="38770" fg:w="6653"/><text x="27.3780%" y="671.50">__mem..</text></g><g><title>[unknown] (5,588 samples, 3.91%)</title><rect x="27.8732%" y="645" width="3.9100%" height="15" fill="rgb(206,159,16)" fg:x="39835" fg:w="5588"/><text x="28.1232%" y="655.50">[unk..</text></g><g><title>[unknown] (4,586 samples, 3.21%)</title><rect x="28.5743%" y="629" width="3.2089%" height="15" fill="rgb(244,77,30)" fg:x="40837" fg:w="4586"/><text x="28.8243%" y="639.50">[un..</text></g><g><title>[unknown] (4,546 samples, 3.18%)</title><rect x="28.6023%" y="613" width="3.1809%" height="15" fill="rgb(218,69,12)" fg:x="40877" fg:w="4546"/><text x="28.8523%" y="623.50">[un..</text></g><g><title>[unknown] (4,442 samples, 3.11%)</title><rect x="28.6751%" y="597" width="3.1081%" height="15" fill="rgb(212,87,7)" fg:x="40981" fg:w="4442"/><text x="28.9251%" y="607.50">[un..</text></g><g><title>[unknown] (4,110 samples, 2.88%)</title><rect x="28.9074%" y="581" width="2.8758%" height="15" fill="rgb(245,114,25)" fg:x="41313" fg:w="4110"/><text x="29.1574%" y="591.50">[u..</text></g><g><title>[unknown] (3,748 samples, 2.62%)</title><rect x="29.1607%" y="565" width="2.6225%" height="15" fill="rgb(210,61,42)" fg:x="41675" fg:w="3748"/><text x="29.4107%" y="575.50">[u..</text></g><g><title>[unknown] (3,551 samples, 2.48%)</title><rect x="29.2985%" y="549" width="2.4847%" height="15" fill="rgb(211,52,33)" fg:x="41872" fg:w="3551"/><text x="29.5485%" y="559.50">[u..</text></g><g><title>[unknown] (3,150 samples, 2.20%)</title><rect x="29.5791%" y="533" width="2.2041%" height="15" fill="rgb(234,58,33)" fg:x="42273" fg:w="3150"/><text x="29.8291%" y="543.50">[..</text></g><g><title>[unknown] (2,711 samples, 1.90%)</title><rect x="29.8863%" y="517" width="1.8969%" height="15" fill="rgb(220,115,36)" fg:x="42712" fg:w="2711"/><text x="30.1363%" y="527.50">[..</text></g><g><title>[unknown] (1,732 samples, 1.21%)</title><rect x="30.5713%" y="501" width="1.2119%" height="15" fill="rgb(243,153,54)" fg:x="43691" fg:w="1732"/><text x="30.8213%" y="511.50"></text></g><g><title>[unknown] (1,030 samples, 0.72%)</title><rect x="31.0625%" y="485" width="0.7207%" height="15" fill="rgb(251,47,18)" fg:x="44393" fg:w="1030"/><text x="31.3125%" y="495.50"></text></g><g><title>[unknown] (310 samples, 0.22%)</title><rect x="31.5663%" y="469" width="0.2169%" height="15" fill="rgb(242,102,42)" fg:x="45113" fg:w="310"/><text x="31.8163%" y="479.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (6,657 samples, 4.66%)</title><rect x="27.1280%" y="677" width="4.6580%" height="15" fill="rgb(234,31,38)" fg:x="38770" fg:w="6657"/><text x="27.3780%" y="687.50">core:..</text></g><g><title>core::slice::&lt;impl [T]&gt;::copy_from_slice (6,668 samples, 4.67%)</title><rect x="27.1210%" y="693" width="4.6657%" height="15" fill="rgb(221,117,51)" fg:x="38760" fg:w="6668"/><text x="27.3710%" y="703.50">core:..</text></g><g><title>core::ptr::metadata::from_raw_parts_mut (33 samples, 0.02%)</title><rect x="31.7965%" y="613" width="0.0231%" height="15" fill="rgb(212,20,18)" fg:x="45442" fg:w="33"/><text x="32.0465%" y="623.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked_mut (37 samples, 0.03%)</title><rect x="31.7965%" y="645" width="0.0259%" height="15" fill="rgb(245,133,36)" fg:x="45442" fg:w="37"/><text x="32.0465%" y="655.50"></text></g><g><title>core::ptr::slice_from_raw_parts_mut (37 samples, 0.03%)</title><rect x="31.7965%" y="629" width="0.0259%" height="15" fill="rgb(212,6,19)" fg:x="45442" fg:w="37"/><text x="32.0465%" y="639.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::IndexMut&lt;I&gt; for [T]&gt;::index_mut (59 samples, 0.04%)</title><rect x="31.7867%" y="693" width="0.0413%" height="15" fill="rgb(218,1,36)" fg:x="45428" fg:w="59"/><text x="32.0367%" y="703.50"></text></g><g><title>&lt;core::ops::range::RangeFrom&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (55 samples, 0.04%)</title><rect x="31.7895%" y="677" width="0.0385%" height="15" fill="rgb(246,84,54)" fg:x="45432" fg:w="55"/><text x="32.0395%" y="687.50"></text></g><g><title>&lt;core::ops::range::RangeFrom&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked_mut (45 samples, 0.03%)</title><rect x="31.7965%" y="661" width="0.0315%" height="15" fill="rgb(242,110,6)" fg:x="45442" fg:w="45"/><text x="32.0465%" y="671.50"></text></g><g><title>std::sync::poison::Flag::get (20 samples, 0.01%)</title><rect x="31.8518%" y="629" width="0.0140%" height="15" fill="rgb(214,47,5)" fg:x="45521" fg:w="20"/><text x="32.1018%" y="639.50"></text></g><g><title>core::sync::atomic::AtomicBool::load (20 samples, 0.01%)</title><rect x="31.8518%" y="613" width="0.0140%" height="15" fill="rgb(218,159,25)" fg:x="45521" fg:w="20"/><text x="32.1018%" y="623.50"></text></g><g><title>std::sync::poison::Flag::guard (47 samples, 0.03%)</title><rect x="31.8483%" y="645" width="0.0329%" height="15" fill="rgb(215,211,28)" fg:x="45516" fg:w="47"/><text x="32.0983%" y="655.50"></text></g><g><title>std::thread::panicking (22 samples, 0.02%)</title><rect x="31.8658%" y="629" width="0.0154%" height="15" fill="rgb(238,59,32)" fg:x="45541" fg:w="22"/><text x="32.1158%" y="639.50"></text></g><g><title>std::panicking::panicking (22 samples, 0.02%)</title><rect x="31.8658%" y="613" width="0.0154%" height="15" fill="rgb(226,82,3)" fg:x="45541" fg:w="22"/><text x="32.1158%" y="623.50"></text></g><g><title>std::panicking::panic_count::count_is_zero (19 samples, 0.01%)</title><rect x="31.8679%" y="597" width="0.0133%" height="15" fill="rgb(240,164,32)" fg:x="45544" fg:w="19"/><text x="32.1179%" y="607.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (16 samples, 0.01%)</title><rect x="31.8700%" y="581" width="0.0112%" height="15" fill="rgb(232,46,7)" fg:x="45547" fg:w="16"/><text x="32.1200%" y="591.50"></text></g><g><title>core::sync::atomic::atomic_load (15 samples, 0.01%)</title><rect x="31.8707%" y="565" width="0.0105%" height="15" fill="rgb(229,129,53)" fg:x="45548" fg:w="15"/><text x="32.1207%" y="575.50"></text></g><g><title>std::sync::rwlock::RwLockWriteGuard&lt;T&gt;::new (84 samples, 0.06%)</title><rect x="31.8399%" y="661" width="0.0588%" height="15" fill="rgb(234,188,29)" fg:x="45504" fg:w="84"/><text x="32.0899%" y="671.50"></text></g><g><title>std::sync::poison::map_result (25 samples, 0.02%)</title><rect x="31.8812%" y="645" width="0.0175%" height="15" fill="rgb(246,141,4)" fg:x="45563" fg:w="25"/><text x="32.1312%" y="655.50"></text></g><g><title>dynasmrt::components::MemoryManager::write (251 samples, 0.18%)</title><rect x="31.8280%" y="693" width="0.1756%" height="15" fill="rgb(229,23,39)" fg:x="45487" fg:w="251"/><text x="32.0780%" y="703.50"></text></g><g><title>std::sync::rwlock::RwLock&lt;T&gt;::write (243 samples, 0.17%)</title><rect x="31.8336%" y="677" width="0.1700%" height="15" fill="rgb(206,12,3)" fg:x="45495" fg:w="243"/><text x="32.0836%" y="687.50"></text></g><g><title>std::sys::unix::locks::futex_rwlock::RwLock::write (150 samples, 0.10%)</title><rect x="31.8987%" y="661" width="0.1050%" height="15" fill="rgb(252,226,20)" fg:x="45588" fg:w="150"/><text x="32.1487%" y="671.50"></text></g><g><title>core::sync::atomic::AtomicU32::compare_exchange_weak (149 samples, 0.10%)</title><rect x="31.8994%" y="645" width="0.1043%" height="15" fill="rgb(216,123,35)" fg:x="45589" fg:w="149"/><text x="32.1494%" y="655.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (141 samples, 0.10%)</title><rect x="31.9050%" y="629" width="0.0987%" height="15" fill="rgb(212,68,40)" fg:x="45597" fg:w="141"/><text x="32.1550%" y="639.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (18 samples, 0.01%)</title><rect x="32.0981%" y="661" width="0.0126%" height="15" fill="rgb(254,125,32)" fg:x="45873" fg:w="18"/><text x="32.3481%" y="671.50"></text></g><g><title>__GI___mprotect (5,808 samples, 4.06%)</title><rect x="32.2080%" y="629" width="4.0640%" height="15" fill="rgb(253,97,22)" fg:x="46030" fg:w="5808"/><text x="32.4580%" y="639.50">__GI..</text></g><g><title>[unknown] (5,706 samples, 3.99%)</title><rect x="32.2793%" y="613" width="3.9926%" height="15" fill="rgb(241,101,14)" fg:x="46132" fg:w="5706"/><text x="32.5293%" y="623.50">[unk..</text></g><g><title>[unknown] (5,529 samples, 3.87%)</title><rect x="32.4032%" y="597" width="3.8687%" height="15" fill="rgb(238,103,29)" fg:x="46309" fg:w="5529"/><text x="32.6532%" y="607.50">[unk..</text></g><g><title>[unknown] (5,504 samples, 3.85%)</title><rect x="32.4207%" y="581" width="3.8512%" height="15" fill="rgb(233,195,47)" fg:x="46334" fg:w="5504"/><text x="32.6707%" y="591.50">[unk..</text></g><g><title>[unknown] (5,471 samples, 3.83%)</title><rect x="32.4438%" y="565" width="3.8281%" height="15" fill="rgb(246,218,30)" fg:x="46367" fg:w="5471"/><text x="32.6938%" y="575.50">[unk..</text></g><g><title>[unknown] (5,185 samples, 3.63%)</title><rect x="32.6439%" y="549" width="3.6280%" height="15" fill="rgb(219,145,47)" fg:x="46653" fg:w="5185"/><text x="32.8939%" y="559.50">[unk..</text></g><g><title>[unknown] (4,705 samples, 3.29%)</title><rect x="32.9797%" y="533" width="3.2922%" height="15" fill="rgb(243,12,26)" fg:x="47133" fg:w="4705"/><text x="33.2297%" y="543.50">[un..</text></g><g><title>[unknown] (4,334 samples, 3.03%)</title><rect x="33.2393%" y="517" width="3.0326%" height="15" fill="rgb(214,87,16)" fg:x="47504" fg:w="4334"/><text x="33.4893%" y="527.50">[un..</text></g><g><title>[unknown] (3,727 samples, 2.61%)</title><rect x="33.6641%" y="501" width="2.6078%" height="15" fill="rgb(208,99,42)" fg:x="48111" fg:w="3727"/><text x="33.9141%" y="511.50">[u..</text></g><g><title>[unknown] (3,217 samples, 2.25%)</title><rect x="34.0209%" y="485" width="2.2510%" height="15" fill="rgb(253,99,2)" fg:x="48621" fg:w="3217"/><text x="34.2709%" y="495.50">[..</text></g><g><title>[unknown] (2,197 samples, 1.54%)</title><rect x="34.7346%" y="469" width="1.5373%" height="15" fill="rgb(220,168,23)" fg:x="49641" fg:w="2197"/><text x="34.9846%" y="479.50"></text></g><g><title>[unknown] (1,999 samples, 1.40%)</title><rect x="34.8732%" y="453" width="1.3987%" height="15" fill="rgb(242,38,24)" fg:x="49839" fg:w="1999"/><text x="35.1232%" y="463.50"></text></g><g><title>[unknown] (1,606 samples, 1.12%)</title><rect x="35.1482%" y="437" width="1.1237%" height="15" fill="rgb(225,182,9)" fg:x="50232" fg:w="1606"/><text x="35.3982%" y="447.50"></text></g><g><title>[unknown] (1,212 samples, 0.85%)</title><rect x="35.4239%" y="421" width="0.8481%" height="15" fill="rgb(243,178,37)" fg:x="50626" fg:w="1212"/><text x="35.6739%" y="431.50"></text></g><g><title>[unknown] (963 samples, 0.67%)</title><rect x="35.5981%" y="405" width="0.6738%" height="15" fill="rgb(232,139,19)" fg:x="50875" fg:w="963"/><text x="35.8481%" y="415.50"></text></g><g><title>[unknown] (931 samples, 0.65%)</title><rect x="35.6205%" y="389" width="0.6514%" height="15" fill="rgb(225,201,24)" fg:x="50907" fg:w="931"/><text x="35.8705%" y="399.50"></text></g><g><title>[unknown] (859 samples, 0.60%)</title><rect x="35.6709%" y="373" width="0.6011%" height="15" fill="rgb(221,47,46)" fg:x="50979" fg:w="859"/><text x="35.9209%" y="383.50"></text></g><g><title>[unknown] (856 samples, 0.60%)</title><rect x="35.6730%" y="357" width="0.5990%" height="15" fill="rgb(249,23,13)" fg:x="50982" fg:w="856"/><text x="35.9230%" y="367.50"></text></g><g><title>[unknown] (441 samples, 0.31%)</title><rect x="35.9633%" y="341" width="0.3086%" height="15" fill="rgb(219,9,5)" fg:x="51397" fg:w="441"/><text x="36.2133%" y="351.50"></text></g><g><title>[unknown] (441 samples, 0.31%)</title><rect x="35.9633%" y="325" width="0.3086%" height="15" fill="rgb(254,171,16)" fg:x="51397" fg:w="441"/><text x="36.2133%" y="335.50"></text></g><g><title>[unknown] (429 samples, 0.30%)</title><rect x="35.9717%" y="309" width="0.3002%" height="15" fill="rgb(230,171,20)" fg:x="51409" fg:w="429"/><text x="36.2217%" y="319.50"></text></g><g><title>[unknown] (331 samples, 0.23%)</title><rect x="36.0403%" y="293" width="0.2316%" height="15" fill="rgb(210,71,41)" fg:x="51507" fg:w="331"/><text x="36.2903%" y="303.50"></text></g><g><title>[unknown] (326 samples, 0.23%)</title><rect x="36.0438%" y="277" width="0.2281%" height="15" fill="rgb(206,173,20)" fg:x="51512" fg:w="326"/><text x="36.2938%" y="287.50"></text></g><g><title>[unknown] (281 samples, 0.20%)</title><rect x="36.0753%" y="261" width="0.1966%" height="15" fill="rgb(233,88,34)" fg:x="51557" fg:w="281"/><text x="36.3253%" y="271.50"></text></g><g><title>[unknown] (253 samples, 0.18%)</title><rect x="36.0949%" y="245" width="0.1770%" height="15" fill="rgb(223,209,46)" fg:x="51585" fg:w="253"/><text x="36.3449%" y="255.50"></text></g><g><title>[unknown] (244 samples, 0.17%)</title><rect x="36.1012%" y="229" width="0.1707%" height="15" fill="rgb(250,43,18)" fg:x="51594" fg:w="244"/><text x="36.3512%" y="239.50"></text></g><g><title>[unknown] (202 samples, 0.14%)</title><rect x="36.1306%" y="213" width="0.1413%" height="15" fill="rgb(208,13,10)" fg:x="51636" fg:w="202"/><text x="36.3806%" y="223.50"></text></g><g><title>[unknown] (196 samples, 0.14%)</title><rect x="36.1348%" y="197" width="0.1371%" height="15" fill="rgb(212,200,36)" fg:x="51642" fg:w="196"/><text x="36.3848%" y="207.50"></text></g><g><title>[unknown] (175 samples, 0.12%)</title><rect x="36.1495%" y="181" width="0.1225%" height="15" fill="rgb(225,90,30)" fg:x="51663" fg:w="175"/><text x="36.3995%" y="191.50"></text></g><g><title>[unknown] (150 samples, 0.10%)</title><rect x="36.1670%" y="165" width="0.1050%" height="15" fill="rgb(236,182,39)" fg:x="51688" fg:w="150"/><text x="36.4170%" y="175.50"></text></g><g><title>[unknown] (17 samples, 0.01%)</title><rect x="36.2600%" y="149" width="0.0119%" height="15" fill="rgb(212,144,35)" fg:x="51821" fg:w="17"/><text x="36.5100%" y="159.50"></text></g><g><title>core::cmp::Ord::max (25 samples, 0.02%)</title><rect x="36.2719%" y="629" width="0.0175%" height="15" fill="rgb(228,63,44)" fg:x="51838" fg:w="25"/><text x="36.5219%" y="639.50"></text></g><g><title>core::cmp::max_by (25 samples, 0.02%)</title><rect x="36.2719%" y="613" width="0.0175%" height="15" fill="rgb(228,109,6)" fg:x="51838" fg:w="25"/><text x="36.5219%" y="623.50"></text></g><g><title>dynasmrt::mmap::ExecutableBuffer::make_mut (6,163 samples, 4.31%)</title><rect x="32.0036%" y="693" width="4.3124%" height="15" fill="rgb(238,117,24)" fg:x="45738" fg:w="6163"/><text x="32.2536%" y="703.50">dynas..</text></g><g><title>memmap2::Mmap::make_mut (6,072 samples, 4.25%)</title><rect x="32.0673%" y="677" width="4.2487%" height="15" fill="rgb(242,26,26)" fg:x="45829" fg:w="6072"/><text x="32.3173%" y="687.50">memma..</text></g><g><title>memmap2::os::MmapInner::make_mut (6,010 samples, 4.21%)</title><rect x="32.1107%" y="661" width="4.2053%" height="15" fill="rgb(221,92,48)" fg:x="45891" fg:w="6010"/><text x="32.3607%" y="671.50">memma..</text></g><g><title>memmap2::os::MmapInner::mprotect (6,010 samples, 4.21%)</title><rect x="32.1107%" y="645" width="4.2053%" height="15" fill="rgb(209,209,32)" fg:x="45891" fg:w="6010"/><text x="32.3607%" y="655.50">memma..</text></g><g><title>memmap2::os::page_size (37 samples, 0.03%)</title><rect x="36.2901%" y="629" width="0.0259%" height="15" fill="rgb(221,70,22)" fg:x="51864" fg:w="37"/><text x="36.5401%" y="639.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (31 samples, 0.02%)</title><rect x="36.2943%" y="613" width="0.0217%" height="15" fill="rgb(248,145,5)" fg:x="51870" fg:w="31"/><text x="36.5443%" y="623.50"></text></g><g><title>core::sync::atomic::atomic_load (27 samples, 0.02%)</title><rect x="36.2971%" y="597" width="0.0189%" height="15" fill="rgb(226,116,26)" fg:x="51874" fg:w="27"/><text x="36.5471%" y="607.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (23 samples, 0.02%)</title><rect x="36.4070%" y="661" width="0.0161%" height="15" fill="rgb(244,5,17)" fg:x="52031" fg:w="23"/><text x="36.6570%" y="671.50"></text></g><g><title>__GI___mprotect (7,157 samples, 5.01%)</title><rect x="36.5301%" y="629" width="5.0079%" height="15" fill="rgb(252,159,33)" fg:x="52207" fg:w="7157"/><text x="36.7801%" y="639.50">__GI__..</text></g><g><title>[unknown] (7,048 samples, 4.93%)</title><rect x="36.6064%" y="613" width="4.9316%" height="15" fill="rgb(206,71,0)" fg:x="52316" fg:w="7048"/><text x="36.8564%" y="623.50">[unkno..</text></g><g><title>[unknown] (6,894 samples, 4.82%)</title><rect x="36.7141%" y="597" width="4.8238%" height="15" fill="rgb(233,118,54)" fg:x="52470" fg:w="6894"/><text x="36.9641%" y="607.50">[unkno..</text></g><g><title>[unknown] (6,859 samples, 4.80%)</title><rect x="36.7386%" y="581" width="4.7994%" height="15" fill="rgb(234,83,48)" fg:x="52505" fg:w="6859"/><text x="36.9886%" y="591.50">[unkno..</text></g><g><title>[unknown] (6,811 samples, 4.77%)</title><rect x="36.7722%" y="565" width="4.7658%" height="15" fill="rgb(228,3,54)" fg:x="52553" fg:w="6811"/><text x="37.0222%" y="575.50">[unkno..</text></g><g><title>[unknown] (6,543 samples, 4.58%)</title><rect x="36.9597%" y="549" width="4.5782%" height="15" fill="rgb(226,155,13)" fg:x="52821" fg:w="6543"/><text x="37.2097%" y="559.50">[unkn..</text></g><g><title>[unknown] (5,946 samples, 4.16%)</title><rect x="37.3775%" y="533" width="4.1605%" height="15" fill="rgb(241,28,37)" fg:x="53418" fg:w="5946"/><text x="37.6275%" y="543.50">[unkn..</text></g><g><title>[unknown] (5,328 samples, 3.73%)</title><rect x="37.8099%" y="517" width="3.7281%" height="15" fill="rgb(233,93,10)" fg:x="54036" fg:w="5328"/><text x="38.0599%" y="527.50">[unk..</text></g><g><title>[unknown] (4,237 samples, 2.96%)</title><rect x="38.5733%" y="501" width="2.9647%" height="15" fill="rgb(225,113,19)" fg:x="55127" fg:w="4237"/><text x="38.8233%" y="511.50">[un..</text></g><g><title>[unknown] (2,877 samples, 2.01%)</title><rect x="39.5249%" y="485" width="2.0131%" height="15" fill="rgb(241,2,18)" fg:x="56487" fg:w="2877"/><text x="39.7749%" y="495.50">[..</text></g><g><title>[unknown] (2,094 samples, 1.47%)</title><rect x="40.0728%" y="469" width="1.4652%" height="15" fill="rgb(228,207,21)" fg:x="57270" fg:w="2094"/><text x="40.3228%" y="479.50"></text></g><g><title>[unknown] (1,886 samples, 1.32%)</title><rect x="40.2183%" y="453" width="1.3197%" height="15" fill="rgb(213,211,35)" fg:x="57478" fg:w="1886"/><text x="40.4683%" y="463.50"></text></g><g><title>[unknown] (1,458 samples, 1.02%)</title><rect x="40.5178%" y="437" width="1.0202%" height="15" fill="rgb(209,83,10)" fg:x="57906" fg:w="1458"/><text x="40.7678%" y="447.50"></text></g><g><title>[unknown] (1,007 samples, 0.70%)</title><rect x="40.8334%" y="421" width="0.7046%" height="15" fill="rgb(209,164,1)" fg:x="58357" fg:w="1007"/><text x="41.0834%" y="431.50"></text></g><g><title>[unknown] (820 samples, 0.57%)</title><rect x="40.9642%" y="405" width="0.5738%" height="15" fill="rgb(213,184,43)" fg:x="58544" fg:w="820"/><text x="41.2142%" y="415.50"></text></g><g><title>[unknown] (791 samples, 0.55%)</title><rect x="40.9845%" y="389" width="0.5535%" height="15" fill="rgb(231,61,34)" fg:x="58573" fg:w="791"/><text x="41.2345%" y="399.50"></text></g><g><title>[unknown] (733 samples, 0.51%)</title><rect x="41.0251%" y="373" width="0.5129%" height="15" fill="rgb(235,75,3)" fg:x="58631" fg:w="733"/><text x="41.2751%" y="383.50"></text></g><g><title>[unknown] (722 samples, 0.51%)</title><rect x="41.0328%" y="357" width="0.5052%" height="15" fill="rgb(220,106,47)" fg:x="58642" fg:w="722"/><text x="41.2828%" y="367.50"></text></g><g><title>[unknown] (301 samples, 0.21%)</title><rect x="41.3274%" y="341" width="0.2106%" height="15" fill="rgb(210,196,33)" fg:x="59063" fg:w="301"/><text x="41.5774%" y="351.50"></text></g><g><title>[unknown] (299 samples, 0.21%)</title><rect x="41.3288%" y="325" width="0.2092%" height="15" fill="rgb(229,154,42)" fg:x="59065" fg:w="299"/><text x="41.5788%" y="335.50"></text></g><g><title>[unknown] (290 samples, 0.20%)</title><rect x="41.3351%" y="309" width="0.2029%" height="15" fill="rgb(228,114,26)" fg:x="59074" fg:w="290"/><text x="41.5851%" y="319.50"></text></g><g><title>[unknown] (195 samples, 0.14%)</title><rect x="41.4015%" y="293" width="0.1364%" height="15" fill="rgb(208,144,1)" fg:x="59169" fg:w="195"/><text x="41.6515%" y="303.50"></text></g><g><title>[unknown] (182 samples, 0.13%)</title><rect x="41.4106%" y="277" width="0.1273%" height="15" fill="rgb(239,112,37)" fg:x="59182" fg:w="182"/><text x="41.6606%" y="287.50"></text></g><g><title>[unknown] (148 samples, 0.10%)</title><rect x="41.4344%" y="261" width="0.1036%" height="15" fill="rgb(210,96,50)" fg:x="59216" fg:w="148"/><text x="41.6844%" y="271.50"></text></g><g><title>[unknown] (121 samples, 0.08%)</title><rect x="41.4533%" y="245" width="0.0847%" height="15" fill="rgb(222,178,2)" fg:x="59243" fg:w="121"/><text x="41.7033%" y="255.50"></text></g><g><title>[unknown] (109 samples, 0.08%)</title><rect x="41.4617%" y="229" width="0.0763%" height="15" fill="rgb(226,74,18)" fg:x="59255" fg:w="109"/><text x="41.7117%" y="239.50"></text></g><g><title>[unknown] (94 samples, 0.07%)</title><rect x="41.4722%" y="213" width="0.0658%" height="15" fill="rgb(225,67,54)" fg:x="59270" fg:w="94"/><text x="41.7222%" y="223.50"></text></g><g><title>[unknown] (88 samples, 0.06%)</title><rect x="41.4764%" y="197" width="0.0616%" height="15" fill="rgb(251,92,32)" fg:x="59276" fg:w="88"/><text x="41.7264%" y="207.50"></text></g><g><title>[unknown] (58 samples, 0.04%)</title><rect x="41.4974%" y="181" width="0.0406%" height="15" fill="rgb(228,149,22)" fg:x="59306" fg:w="58"/><text x="41.7474%" y="191.50"></text></g><g><title>[unknown] (46 samples, 0.03%)</title><rect x="41.5058%" y="165" width="0.0322%" height="15" fill="rgb(243,54,13)" fg:x="59318" fg:w="46"/><text x="41.7558%" y="175.50"></text></g><g><title>core::cmp::Ord::max (38 samples, 0.03%)</title><rect x="41.5380%" y="629" width="0.0266%" height="15" fill="rgb(243,180,28)" fg:x="59364" fg:w="38"/><text x="41.7880%" y="639.50"></text></g><g><title>core::cmp::max_by (38 samples, 0.03%)</title><rect x="41.5380%" y="613" width="0.0266%" height="15" fill="rgb(208,167,24)" fg:x="59364" fg:w="38"/><text x="41.7880%" y="623.50"></text></g><g><title>core::ops::function::FnOnce::call_once (17 samples, 0.01%)</title><rect x="41.5527%" y="597" width="0.0119%" height="15" fill="rgb(245,73,45)" fg:x="59385" fg:w="17"/><text x="41.8027%" y="607.50"></text></g><g><title>dynasmrt::Assembler&lt;R&gt;::commit (21,982 samples, 15.38%)</title><rect x="26.1967%" y="725" width="15.3812%" height="15" fill="rgb(237,203,48)" fg:x="37439" fg:w="21982"/><text x="26.4467%" y="735.50">dynasmrt::Assembler&lt;R&gt;::..</text></g><g><title>dynasmrt::components::MemoryManager::commit (21,191 samples, 14.83%)</title><rect x="26.7502%" y="709" width="14.8277%" height="15" fill="rgb(211,197,16)" fg:x="38230" fg:w="21191"/><text x="27.0002%" y="719.50">dynasmrt::components::M..</text></g><g><title>dynasmrt::mmap::MutableBuffer::make_exec (7,520 samples, 5.26%)</title><rect x="36.3160%" y="693" width="5.2619%" height="15" fill="rgb(243,99,51)" fg:x="51901" fg:w="7520"/><text x="36.5660%" y="703.50">dynasm..</text></g><g><title>memmap2::MmapMut::make_exec (7,418 samples, 5.19%)</title><rect x="36.3874%" y="677" width="5.1905%" height="15" fill="rgb(215,123,29)" fg:x="52003" fg:w="7418"/><text x="36.6374%" y="687.50">memmap..</text></g><g><title>memmap2::os::MmapInner::make_exec (7,367 samples, 5.15%)</title><rect x="36.4230%" y="661" width="5.1548%" height="15" fill="rgb(239,186,37)" fg:x="52054" fg:w="7367"/><text x="36.6730%" y="671.50">memmap..</text></g><g><title>memmap2::os::MmapInner::mprotect (7,367 samples, 5.15%)</title><rect x="36.4230%" y="645" width="5.1548%" height="15" fill="rgb(252,136,39)" fg:x="52054" fg:w="7367"/><text x="36.6730%" y="655.50">memmap..</text></g><g><title>memmap2::os::page_size (16 samples, 0.01%)</title><rect x="41.5667%" y="629" width="0.0112%" height="15" fill="rgb(223,213,32)" fg:x="59405" fg:w="16"/><text x="41.8167%" y="639.50"></text></g><g><title>_int_free (31 samples, 0.02%)</title><rect x="41.6324%" y="613" width="0.0217%" height="15" fill="rgb(233,115,5)" fg:x="59499" fg:w="31"/><text x="41.8824%" y="623.50"></text></g><g><title>__GI___libc_free (40 samples, 0.03%)</title><rect x="41.6282%" y="629" width="0.0280%" height="15" fill="rgb(207,226,44)" fg:x="59493" fg:w="40"/><text x="41.8782%" y="639.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (49 samples, 0.03%)</title><rect x="41.6254%" y="661" width="0.0343%" height="15" fill="rgb(208,126,0)" fg:x="59489" fg:w="49"/><text x="41.8754%" y="671.50"></text></g><g><title>alloc::alloc::dealloc (45 samples, 0.03%)</title><rect x="41.6282%" y="645" width="0.0315%" height="15" fill="rgb(244,66,21)" fg:x="59493" fg:w="45"/><text x="41.8782%" y="655.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (86 samples, 0.06%)</title><rect x="41.6709%" y="661" width="0.0602%" height="15" fill="rgb(222,97,12)" fg:x="59554" fg:w="86"/><text x="41.9209%" y="671.50"></text></g><g><title>core::sync::atomic::atomic_sub (82 samples, 0.06%)</title><rect x="41.6737%" y="645" width="0.0574%" height="15" fill="rgb(219,213,19)" fg:x="59558" fg:w="82"/><text x="41.9237%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Weak&lt;std::sync::rwlock::RwLock&lt;dynasmrt::mmap::ExecutableBuffer&gt;&gt;&gt; (171 samples, 0.12%)</title><rect x="41.6128%" y="693" width="0.1197%" height="15" fill="rgb(252,169,30)" fg:x="59471" fg:w="171"/><text x="41.8628%" y="703.50"></text></g><g><title>&lt;alloc::sync::Weak&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (171 samples, 0.12%)</title><rect x="41.6128%" y="677" width="0.1197%" height="15" fill="rgb(206,32,51)" fg:x="59471" fg:w="171"/><text x="41.8628%" y="687.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (163 samples, 0.11%)</title><rect x="41.7346%" y="693" width="0.1141%" height="15" fill="rgb(250,172,42)" fg:x="59645" fg:w="163"/><text x="41.9846%" y="703.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (141 samples, 0.10%)</title><rect x="41.7500%" y="677" width="0.0987%" height="15" fill="rgb(209,34,43)" fg:x="59667" fg:w="141"/><text x="42.0000%" y="687.50"></text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::try_unwrap (366 samples, 0.26%)</title><rect x="41.5933%" y="709" width="0.2561%" height="15" fill="rgb(223,11,35)" fg:x="59443" fg:w="366"/><text x="41.8433%" y="719.50"></text></g><g><title>dynasmrt::Assembler&lt;R&gt;::finalize (23,024 samples, 16.11%)</title><rect x="25.7797%" y="741" width="16.1103%" height="15" fill="rgb(251,219,26)" fg:x="36843" fg:w="23024"/><text x="26.0297%" y="751.50">dynasmrt::Assembler&lt;R&gt;::f..</text></g><g><title>dynasmrt::components::MemoryManager::finalize (446 samples, 0.31%)</title><rect x="41.5779%" y="725" width="0.3121%" height="15" fill="rgb(231,119,3)" fg:x="59421" fg:w="446"/><text x="41.8279%" y="735.50"></text></g><g><title>std::sync::rwlock::RwLock&lt;T&gt;::into_inner (48 samples, 0.03%)</title><rect x="41.8563%" y="709" width="0.0336%" height="15" fill="rgb(216,97,11)" fg:x="59819" fg:w="48"/><text x="42.1063%" y="719.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (36 samples, 0.03%)</title><rect x="41.9753%" y="725" width="0.0252%" height="15" fill="rgb(223,59,9)" fg:x="59989" fg:w="36"/><text x="42.2253%" y="735.50"></text></g><g><title>__memcpy_avx_unaligned_erms (82 samples, 0.06%)</title><rect x="42.0005%" y="725" width="0.0574%" height="15" fill="rgb(233,93,31)" fg:x="60025" fg:w="82"/><text x="42.2505%" y="735.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::default::Default&gt;::default (46 samples, 0.03%)</title><rect x="42.0691%" y="709" width="0.0322%" height="15" fill="rgb(239,81,33)" fg:x="60123" fg:w="46"/><text x="42.3191%" y="719.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::with_hasher (45 samples, 0.03%)</title><rect x="42.0698%" y="693" width="0.0315%" height="15" fill="rgb(213,120,34)" fg:x="60124" fg:w="45"/><text x="42.3198%" y="703.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S&gt;::with_hasher (35 samples, 0.02%)</title><rect x="42.0768%" y="677" width="0.0245%" height="15" fill="rgb(243,49,53)" fg:x="60134" fg:w="35"/><text x="42.3268%" y="687.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T&gt;::new (27 samples, 0.02%)</title><rect x="42.0824%" y="661" width="0.0189%" height="15" fill="rgb(247,216,33)" fg:x="60142" fg:w="27"/><text x="42.3324%" y="671.50"></text></g><g><title>dynasmrt::components::LabelRegistry::new (60 samples, 0.04%)</title><rect x="42.0621%" y="725" width="0.0420%" height="15" fill="rgb(226,26,14)" fg:x="60113" fg:w="60"/><text x="42.3121%" y="735.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (23 samples, 0.02%)</title><rect x="42.1922%" y="709" width="0.0161%" height="15" fill="rgb(215,49,53)" fg:x="60299" fg:w="23"/><text x="42.4422%" y="719.50"></text></g><g><title>&lt;dynasmrt::mmap::ExecutableBuffer as core::ops::deref::Deref&gt;::deref (78 samples, 0.05%)</title><rect x="42.2083%" y="709" width="0.0546%" height="15" fill="rgb(245,162,40)" fg:x="60322" fg:w="78"/><text x="42.4583%" y="719.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (52 samples, 0.04%)</title><rect x="42.2265%" y="693" width="0.0364%" height="15" fill="rgb(229,68,17)" fg:x="60348" fg:w="52"/><text x="42.4765%" y="703.50"></text></g><g><title>&lt;core::ops::range::RangeTo&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (46 samples, 0.03%)</title><rect x="42.2307%" y="677" width="0.0322%" height="15" fill="rgb(213,182,10)" fg:x="60354" fg:w="46"/><text x="42.4807%" y="687.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (41 samples, 0.03%)</title><rect x="42.2342%" y="661" width="0.0287%" height="15" fill="rgb(245,125,30)" fg:x="60359" fg:w="41"/><text x="42.4842%" y="671.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (15 samples, 0.01%)</title><rect x="42.2524%" y="645" width="0.0105%" height="15" fill="rgb(232,202,2)" fg:x="60385" fg:w="15"/><text x="42.5024%" y="655.50"></text></g><g><title>__GI___libc_malloc (44 samples, 0.03%)</title><rect x="42.3608%" y="613" width="0.0308%" height="15" fill="rgb(237,140,51)" fg:x="60540" fg:w="44"/><text x="42.6108%" y="623.50"></text></g><g><title>tcache_get (21 samples, 0.01%)</title><rect x="42.3769%" y="597" width="0.0147%" height="15" fill="rgb(236,157,25)" fg:x="60563" fg:w="21"/><text x="42.6269%" y="607.50"></text></g><g><title>alloc::alloc::alloc (58 samples, 0.04%)</title><rect x="42.3608%" y="629" width="0.0406%" height="15" fill="rgb(219,209,0)" fg:x="60540" fg:w="58"/><text x="42.6108%" y="639.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (156 samples, 0.11%)</title><rect x="42.3175%" y="661" width="0.1092%" height="15" fill="rgb(240,116,54)" fg:x="60478" fg:w="156"/><text x="42.5675%" y="671.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (145 samples, 0.10%)</title><rect x="42.3252%" y="645" width="0.1015%" height="15" fill="rgb(216,10,36)" fg:x="60489" fg:w="145"/><text x="42.5752%" y="655.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;[T]&gt;::slice_from_raw_parts (18 samples, 0.01%)</title><rect x="42.4140%" y="629" width="0.0126%" height="15" fill="rgb(222,72,44)" fg:x="60616" fg:w="18"/><text x="42.6640%" y="639.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (191 samples, 0.13%)</title><rect x="42.2965%" y="693" width="0.1336%" height="15" fill="rgb(232,159,9)" fg:x="60448" fg:w="191"/><text x="42.5465%" y="703.50"></text></g><g><title>alloc::alloc::exchange_malloc (177 samples, 0.12%)</title><rect x="42.3063%" y="677" width="0.1238%" height="15" fill="rgb(210,39,32)" fg:x="60462" fg:w="177"/><text x="42.5563%" y="687.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::new (260 samples, 0.18%)</title><rect x="42.2629%" y="709" width="0.1819%" height="15" fill="rgb(216,194,45)" fg:x="60400" fg:w="260"/><text x="42.5129%" y="719.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (19 samples, 0.01%)</title><rect x="42.5120%" y="693" width="0.0133%" height="15" fill="rgb(218,18,35)" fg:x="60756" fg:w="19"/><text x="42.7620%" y="703.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (18 samples, 0.01%)</title><rect x="42.5470%" y="677" width="0.0126%" height="15" fill="rgb(207,83,51)" fg:x="60806" fg:w="18"/><text x="42.7970%" y="687.50"></text></g><g><title>__GI___mprotect (6,588 samples, 4.61%)</title><rect x="42.7121%" y="645" width="4.6097%" height="15" fill="rgb(225,63,43)" fg:x="61042" fg:w="6588"/><text x="42.9621%" y="655.50">__GI_..</text></g><g><title>[unknown] (6,496 samples, 4.55%)</title><rect x="42.7765%" y="629" width="4.5454%" height="15" fill="rgb(207,57,36)" fg:x="61134" fg:w="6496"/><text x="43.0265%" y="639.50">[unkn..</text></g><g><title>[unknown] (6,332 samples, 4.43%)</title><rect x="42.8912%" y="613" width="4.4306%" height="15" fill="rgb(216,99,33)" fg:x="61298" fg:w="6332"/><text x="43.1412%" y="623.50">[unkn..</text></g><g><title>[unknown] (6,278 samples, 4.39%)</title><rect x="42.9290%" y="597" width="4.3928%" height="15" fill="rgb(225,42,16)" fg:x="61352" fg:w="6278"/><text x="43.1790%" y="607.50">[unkn..</text></g><g><title>[unknown] (6,232 samples, 4.36%)</title><rect x="42.9612%" y="581" width="4.3606%" height="15" fill="rgb(220,201,45)" fg:x="61398" fg:w="6232"/><text x="43.2112%" y="591.50">[unkn..</text></g><g><title>[unknown] (5,957 samples, 4.17%)</title><rect x="43.1536%" y="565" width="4.1682%" height="15" fill="rgb(225,33,4)" fg:x="61673" fg:w="5957"/><text x="43.4036%" y="575.50">[unkn..</text></g><g><title>[unknown] (5,360 samples, 3.75%)</title><rect x="43.5714%" y="549" width="3.7505%" height="15" fill="rgb(224,33,50)" fg:x="62270" fg:w="5360"/><text x="43.8214%" y="559.50">[unk..</text></g><g><title>[unknown] (4,963 samples, 3.47%)</title><rect x="43.8491%" y="533" width="3.4727%" height="15" fill="rgb(246,198,51)" fg:x="62667" fg:w="4963"/><text x="44.0991%" y="543.50">[un..</text></g><g><title>[unknown] (3,941 samples, 2.76%)</title><rect x="44.5643%" y="517" width="2.7576%" height="15" fill="rgb(205,22,4)" fg:x="63689" fg:w="3941"/><text x="44.8143%" y="527.50">[u..</text></g><g><title>[unknown] (3,123 samples, 2.19%)</title><rect x="45.1366%" y="501" width="2.1852%" height="15" fill="rgb(206,3,8)" fg:x="64507" fg:w="3123"/><text x="45.3866%" y="511.50">[..</text></g><g><title>[unknown] (2,304 samples, 1.61%)</title><rect x="45.7097%" y="485" width="1.6121%" height="15" fill="rgb(251,23,15)" fg:x="65326" fg:w="2304"/><text x="45.9597%" y="495.50"></text></g><g><title>[unknown] (2,073 samples, 1.45%)</title><rect x="45.8713%" y="469" width="1.4505%" height="15" fill="rgb(252,88,28)" fg:x="65557" fg:w="2073"/><text x="46.1213%" y="479.50"></text></g><g><title>[unknown] (1,735 samples, 1.21%)</title><rect x="46.1078%" y="453" width="1.2140%" height="15" fill="rgb(212,127,14)" fg:x="65895" fg:w="1735"/><text x="46.3578%" y="463.50"></text></g><g><title>[unknown] (1,252 samples, 0.88%)</title><rect x="46.4458%" y="437" width="0.8760%" height="15" fill="rgb(247,145,37)" fg:x="66378" fg:w="1252"/><text x="46.6958%" y="447.50"></text></g><g><title>[unknown] (1,081 samples, 0.76%)</title><rect x="46.5654%" y="421" width="0.7564%" height="15" fill="rgb(209,117,53)" fg:x="66549" fg:w="1081"/><text x="46.8154%" y="431.50"></text></g><g><title>[unknown] (1,052 samples, 0.74%)</title><rect x="46.5857%" y="405" width="0.7361%" height="15" fill="rgb(212,90,42)" fg:x="66578" fg:w="1052"/><text x="46.8357%" y="415.50"></text></g><g><title>[unknown] (1,007 samples, 0.70%)</title><rect x="46.6172%" y="389" width="0.7046%" height="15" fill="rgb(218,164,37)" fg:x="66623" fg:w="1007"/><text x="46.8672%" y="399.50"></text></g><g><title>[unknown] (994 samples, 0.70%)</title><rect x="46.6263%" y="373" width="0.6955%" height="15" fill="rgb(246,65,34)" fg:x="66636" fg:w="994"/><text x="46.8763%" y="383.50"></text></g><g><title>[unknown] (590 samples, 0.41%)</title><rect x="46.9090%" y="357" width="0.4128%" height="15" fill="rgb(231,100,33)" fg:x="67040" fg:w="590"/><text x="47.1590%" y="367.50"></text></g><g><title>[unknown] (588 samples, 0.41%)</title><rect x="46.9104%" y="341" width="0.4114%" height="15" fill="rgb(228,126,14)" fg:x="67042" fg:w="588"/><text x="47.1604%" y="351.50"></text></g><g><title>[unknown] (585 samples, 0.41%)</title><rect x="46.9125%" y="325" width="0.4093%" height="15" fill="rgb(215,173,21)" fg:x="67045" fg:w="585"/><text x="47.1625%" y="335.50"></text></g><g><title>[unknown] (481 samples, 0.34%)</title><rect x="46.9853%" y="309" width="0.3366%" height="15" fill="rgb(210,6,40)" fg:x="67149" fg:w="481"/><text x="47.2353%" y="319.50"></text></g><g><title>[unknown] (474 samples, 0.33%)</title><rect x="46.9902%" y="293" width="0.3317%" height="15" fill="rgb(212,48,18)" fg:x="67156" fg:w="474"/><text x="47.2402%" y="303.50"></text></g><g><title>[unknown] (442 samples, 0.31%)</title><rect x="47.0126%" y="277" width="0.3093%" height="15" fill="rgb(230,214,11)" fg:x="67188" fg:w="442"/><text x="47.2626%" y="287.50"></text></g><g><title>[unknown] (406 samples, 0.28%)</title><rect x="47.0377%" y="261" width="0.2841%" height="15" fill="rgb(254,105,39)" fg:x="67224" fg:w="406"/><text x="47.2877%" y="271.50"></text></g><g><title>[unknown] (391 samples, 0.27%)</title><rect x="47.0482%" y="245" width="0.2736%" height="15" fill="rgb(245,158,5)" fg:x="67239" fg:w="391"/><text x="47.2982%" y="255.50"></text></g><g><title>[unknown] (354 samples, 0.25%)</title><rect x="47.0741%" y="229" width="0.2477%" height="15" fill="rgb(249,208,11)" fg:x="67276" fg:w="354"/><text x="47.3241%" y="239.50"></text></g><g><title>[unknown] (347 samples, 0.24%)</title><rect x="47.0790%" y="213" width="0.2428%" height="15" fill="rgb(210,39,28)" fg:x="67283" fg:w="347"/><text x="47.3290%" y="223.50"></text></g><g><title>[unknown] (321 samples, 0.22%)</title><rect x="47.0972%" y="197" width="0.2246%" height="15" fill="rgb(211,56,53)" fg:x="67309" fg:w="321"/><text x="47.3472%" y="207.50"></text></g><g><title>[unknown] (266 samples, 0.19%)</title><rect x="47.1357%" y="181" width="0.1861%" height="15" fill="rgb(226,201,30)" fg:x="67364" fg:w="266"/><text x="47.3857%" y="191.50"></text></g><g><title>[unknown] (144 samples, 0.10%)</title><rect x="47.2211%" y="165" width="0.1008%" height="15" fill="rgb(239,101,34)" fg:x="67486" fg:w="144"/><text x="47.4711%" y="175.50"></text></g><g><title>[unknown] (139 samples, 0.10%)</title><rect x="47.2246%" y="149" width="0.0973%" height="15" fill="rgb(226,209,5)" fg:x="67491" fg:w="139"/><text x="47.4746%" y="159.50"></text></g><g><title>[unknown] (54 samples, 0.04%)</title><rect x="47.2840%" y="133" width="0.0378%" height="15" fill="rgb(250,105,47)" fg:x="67576" fg:w="54"/><text x="47.5340%" y="143.50"></text></g><g><title>[unknown] (44 samples, 0.03%)</title><rect x="47.2910%" y="117" width="0.0308%" height="15" fill="rgb(230,72,3)" fg:x="67586" fg:w="44"/><text x="47.5410%" y="127.50"></text></g><g><title>core::cmp::Ord::max (42 samples, 0.03%)</title><rect x="47.3218%" y="645" width="0.0294%" height="15" fill="rgb(232,218,39)" fg:x="67630" fg:w="42"/><text x="47.5718%" y="655.50"></text></g><g><title>core::cmp::max_by (42 samples, 0.03%)</title><rect x="47.3218%" y="629" width="0.0294%" height="15" fill="rgb(248,166,6)" fg:x="67630" fg:w="42"/><text x="47.5718%" y="639.50"></text></g><g><title>core::ops::function::FnOnce::call_once (17 samples, 0.01%)</title><rect x="47.3393%" y="613" width="0.0119%" height="15" fill="rgb(247,89,20)" fg:x="67655" fg:w="17"/><text x="47.5893%" y="623.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::Ord for usize&gt;::cmp (15 samples, 0.01%)</title><rect x="47.3407%" y="597" width="0.0105%" height="15" fill="rgb(248,130,54)" fg:x="67657" fg:w="15"/><text x="47.5907%" y="607.50"></text></g><g><title>memmap2::MmapMut::make_exec (6,968 samples, 4.88%)</title><rect x="42.5253%" y="693" width="4.8756%" height="15" fill="rgb(234,196,4)" fg:x="60775" fg:w="6968"/><text x="42.7753%" y="703.50">memmap..</text></g><g><title>memmap2::os::MmapInner::make_exec (6,919 samples, 4.84%)</title><rect x="42.5596%" y="677" width="4.8413%" height="15" fill="rgb(250,143,31)" fg:x="60824" fg:w="6919"/><text x="42.8096%" y="687.50">memmap..</text></g><g><title>memmap2::os::MmapInner::mprotect (6,919 samples, 4.84%)</title><rect x="42.5596%" y="661" width="4.8413%" height="15" fill="rgb(211,110,34)" fg:x="60824" fg:w="6919"/><text x="42.8096%" y="671.50">memmap..</text></g><g><title>memmap2::os::page_size (69 samples, 0.05%)</title><rect x="47.3526%" y="645" width="0.0483%" height="15" fill="rgb(215,124,48)" fg:x="67674" fg:w="69"/><text x="47.6026%" y="655.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (55 samples, 0.04%)</title><rect x="47.3624%" y="629" width="0.0385%" height="15" fill="rgb(216,46,13)" fg:x="67688" fg:w="55"/><text x="47.6124%" y="639.50"></text></g><g><title>core::sync::atomic::atomic_load (52 samples, 0.04%)</title><rect x="47.3645%" y="613" width="0.0364%" height="15" fill="rgb(205,184,25)" fg:x="67691" fg:w="52"/><text x="47.6145%" y="623.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map (48 samples, 0.03%)</title><rect x="47.4303%" y="661" width="0.0336%" height="15" fill="rgb(228,1,10)" fg:x="67785" fg:w="48"/><text x="47.6803%" y="671.50"></text></g><g><title>memmap2::MmapOptions::map_anon::{{closure}} (20 samples, 0.01%)</title><rect x="47.4499%" y="645" width="0.0140%" height="15" fill="rgb(213,116,27)" fg:x="67813" fg:w="20"/><text x="47.6999%" y="655.50"></text></g><g><title>__GI___mmap64 (12,474 samples, 8.73%)</title><rect x="47.6192%" y="629" width="8.7283%" height="15" fill="rgb(241,95,50)" fg:x="68055" fg:w="12474"/><text x="47.8692%" y="639.50">__GI___mmap64</text></g><g><title>__GI___mmap64 (12,474 samples, 8.73%)</title><rect x="47.6192%" y="613" width="8.7283%" height="15" fill="rgb(238,48,32)" fg:x="68055" fg:w="12474"/><text x="47.8692%" y="623.50">__GI___mmap64</text></g><g><title>[unknown] (12,368 samples, 8.65%)</title><rect x="47.6934%" y="597" width="8.6541%" height="15" fill="rgb(235,113,49)" fg:x="68161" fg:w="12368"/><text x="47.9434%" y="607.50">[unknown]</text></g><g><title>[unknown] (12,196 samples, 8.53%)</title><rect x="47.8137%" y="581" width="8.5337%" height="15" fill="rgb(205,127,43)" fg:x="68333" fg:w="12196"/><text x="48.0637%" y="591.50">[unknown]</text></g><g><title>[unknown] (12,161 samples, 8.51%)</title><rect x="47.8382%" y="565" width="8.5093%" height="15" fill="rgb(250,162,2)" fg:x="68368" fg:w="12161"/><text x="48.0882%" y="575.50">[unknown]</text></g><g><title>[unknown] (12,115 samples, 8.48%)</title><rect x="47.8704%" y="549" width="8.4771%" height="15" fill="rgb(220,13,41)" fg:x="68414" fg:w="12115"/><text x="48.1204%" y="559.50">[unknown]</text></g><g><title>[unknown] (12,059 samples, 8.44%)</title><rect x="47.9096%" y="533" width="8.4379%" height="15" fill="rgb(249,221,25)" fg:x="68470" fg:w="12059"/><text x="48.1596%" y="543.50">[unknown]</text></g><g><title>[unknown] (11,983 samples, 8.38%)</title><rect x="47.9628%" y="517" width="8.3847%" height="15" fill="rgb(215,208,19)" fg:x="68546" fg:w="11983"/><text x="48.2128%" y="527.50">[unknown]</text></g><g><title>[unknown] (11,644 samples, 8.15%)</title><rect x="48.2000%" y="501" width="8.1475%" height="15" fill="rgb(236,175,2)" fg:x="68885" fg:w="11644"/><text x="48.4500%" y="511.50">[unknown]</text></g><g><title>[unknown] (11,279 samples, 7.89%)</title><rect x="48.4554%" y="485" width="7.8921%" height="15" fill="rgb(241,52,2)" fg:x="69250" fg:w="11279"/><text x="48.7054%" y="495.50">[unknown]</text></g><g><title>[unknown] (10,725 samples, 7.50%)</title><rect x="48.8430%" y="469" width="7.5045%" height="15" fill="rgb(248,140,14)" fg:x="69804" fg:w="10725"/><text x="49.0930%" y="479.50">[unknown]</text></g><g><title>[unknown] (9,847 samples, 6.89%)</title><rect x="49.4574%" y="453" width="6.8901%" height="15" fill="rgb(253,22,42)" fg:x="70682" fg:w="9847"/><text x="49.7074%" y="463.50">[unknown]</text></g><g><title>[unknown] (8,346 samples, 5.84%)</title><rect x="50.5076%" y="437" width="5.8398%" height="15" fill="rgb(234,61,47)" fg:x="72183" fg:w="8346"/><text x="50.7576%" y="447.50">[unknow..</text></g><g><title>[unknown] (4,886 samples, 3.42%)</title><rect x="52.9287%" y="421" width="3.4188%" height="15" fill="rgb(208,226,15)" fg:x="75643" fg:w="4886"/><text x="53.1787%" y="431.50">[un..</text></g><g><title>[unknown] (3,554 samples, 2.49%)</title><rect x="53.8607%" y="405" width="2.4868%" height="15" fill="rgb(217,221,4)" fg:x="76975" fg:w="3554"/><text x="54.1107%" y="415.50">[u..</text></g><g><title>[unknown] (2,508 samples, 1.75%)</title><rect x="54.5926%" y="389" width="1.7549%" height="15" fill="rgb(212,174,34)" fg:x="78021" fg:w="2508"/><text x="54.8426%" y="399.50"></text></g><g><title>[unknown] (1,959 samples, 1.37%)</title><rect x="54.9767%" y="373" width="1.3707%" height="15" fill="rgb(253,83,4)" fg:x="78570" fg:w="1959"/><text x="55.2267%" y="383.50"></text></g><g><title>[unknown] (1,688 samples, 1.18%)</title><rect x="55.1664%" y="357" width="1.1811%" height="15" fill="rgb(250,195,49)" fg:x="78841" fg:w="1688"/><text x="55.4164%" y="367.50"></text></g><g><title>[unknown] (1,593 samples, 1.11%)</title><rect x="55.2328%" y="341" width="1.1146%" height="15" fill="rgb(241,192,25)" fg:x="78936" fg:w="1593"/><text x="55.4828%" y="351.50"></text></g><g><title>[unknown] (1,527 samples, 1.07%)</title><rect x="55.2790%" y="325" width="1.0685%" height="15" fill="rgb(208,124,10)" fg:x="79002" fg:w="1527"/><text x="55.5290%" y="335.50"></text></g><g><title>[unknown] (1,523 samples, 1.07%)</title><rect x="55.2818%" y="309" width="1.0657%" height="15" fill="rgb(222,33,0)" fg:x="79006" fg:w="1523"/><text x="55.5318%" y="319.50"></text></g><g><title>[unknown] (1,024 samples, 0.72%)</title><rect x="55.6310%" y="293" width="0.7165%" height="15" fill="rgb(234,209,28)" fg:x="79505" fg:w="1024"/><text x="55.8810%" y="303.50"></text></g><g><title>[unknown] (1,024 samples, 0.72%)</title><rect x="55.6310%" y="277" width="0.7165%" height="15" fill="rgb(224,11,23)" fg:x="79505" fg:w="1024"/><text x="55.8810%" y="287.50"></text></g><g><title>[unknown] (1,011 samples, 0.71%)</title><rect x="55.6401%" y="261" width="0.7074%" height="15" fill="rgb(232,99,1)" fg:x="79518" fg:w="1011"/><text x="55.8901%" y="271.50"></text></g><g><title>[unknown] (912 samples, 0.64%)</title><rect x="55.7093%" y="245" width="0.6381%" height="15" fill="rgb(237,95,45)" fg:x="79617" fg:w="912"/><text x="55.9593%" y="255.50"></text></g><g><title>[unknown] (902 samples, 0.63%)</title><rect x="55.7163%" y="229" width="0.6311%" height="15" fill="rgb(208,109,11)" fg:x="79627" fg:w="902"/><text x="55.9663%" y="239.50"></text></g><g><title>[unknown] (871 samples, 0.61%)</title><rect x="55.7380%" y="213" width="0.6095%" height="15" fill="rgb(216,190,48)" fg:x="79658" fg:w="871"/><text x="55.9880%" y="223.50"></text></g><g><title>[unknown] (847 samples, 0.59%)</title><rect x="55.7548%" y="197" width="0.5927%" height="15" fill="rgb(251,171,36)" fg:x="79682" fg:w="847"/><text x="56.0048%" y="207.50"></text></g><g><title>[unknown] (836 samples, 0.58%)</title><rect x="55.7625%" y="181" width="0.5850%" height="15" fill="rgb(230,62,22)" fg:x="79693" fg:w="836"/><text x="56.0125%" y="191.50"></text></g><g><title>[unknown] (786 samples, 0.55%)</title><rect x="55.7975%" y="165" width="0.5500%" height="15" fill="rgb(225,114,35)" fg:x="79743" fg:w="786"/><text x="56.0475%" y="175.50"></text></g><g><title>[unknown] (784 samples, 0.55%)</title><rect x="55.7989%" y="149" width="0.5486%" height="15" fill="rgb(215,118,42)" fg:x="79745" fg:w="784"/><text x="56.0489%" y="159.50"></text></g><g><title>[unknown] (757 samples, 0.53%)</title><rect x="55.8178%" y="133" width="0.5297%" height="15" fill="rgb(243,119,21)" fg:x="79772" fg:w="757"/><text x="56.0678%" y="143.50"></text></g><g><title>[unknown] (596 samples, 0.42%)</title><rect x="55.9304%" y="117" width="0.4170%" height="15" fill="rgb(252,177,53)" fg:x="79933" fg:w="596"/><text x="56.1804%" y="127.50"></text></g><g><title>[unknown] (469 samples, 0.33%)</title><rect x="56.0193%" y="101" width="0.3282%" height="15" fill="rgb(237,209,29)" fg:x="80060" fg:w="469"/><text x="56.2693%" y="111.50"></text></g><g><title>[unknown] (462 samples, 0.32%)</title><rect x="56.0242%" y="85" width="0.3233%" height="15" fill="rgb(212,65,23)" fg:x="80067" fg:w="462"/><text x="56.2742%" y="95.50"></text></g><g><title>[unknown] (254 samples, 0.18%)</title><rect x="56.1698%" y="69" width="0.1777%" height="15" fill="rgb(230,222,46)" fg:x="80275" fg:w="254"/><text x="56.4198%" y="79.50"></text></g><g><title>[unknown] (199 samples, 0.14%)</title><rect x="56.2082%" y="53" width="0.1392%" height="15" fill="rgb(215,135,32)" fg:x="80330" fg:w="199"/><text x="56.4582%" y="63.50"></text></g><g><title>[unknown] (138 samples, 0.10%)</title><rect x="56.2509%" y="37" width="0.0966%" height="15" fill="rgb(246,101,22)" fg:x="80391" fg:w="138"/><text x="56.5009%" y="47.50"></text></g><g><title>core::cmp::Ord::max (46 samples, 0.03%)</title><rect x="56.3475%" y="629" width="0.0322%" height="15" fill="rgb(206,107,13)" fg:x="80529" fg:w="46"/><text x="56.5975%" y="639.50"></text></g><g><title>core::cmp::max_by (46 samples, 0.03%)</title><rect x="56.3475%" y="613" width="0.0322%" height="15" fill="rgb(250,100,44)" fg:x="80529" fg:w="46"/><text x="56.5975%" y="623.50"></text></g><g><title>core::ops::function::FnOnce::call_once (21 samples, 0.01%)</title><rect x="56.3650%" y="597" width="0.0147%" height="15" fill="rgb(231,147,38)" fg:x="80554" fg:w="21"/><text x="56.6150%" y="607.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::Ord for usize&gt;::cmp (18 samples, 0.01%)</title><rect x="56.3671%" y="581" width="0.0126%" height="15" fill="rgb(229,8,40)" fg:x="80557" fg:w="18"/><text x="56.6171%" y="591.50"></text></g><g><title>memmap2::MmapOptions::map_anon (12,872 samples, 9.01%)</title><rect x="47.4065%" y="677" width="9.0068%" height="15" fill="rgb(221,135,30)" fg:x="67751" fg:w="12872"/><text x="47.6565%" y="687.50">memmap2::Mmap..</text></g><g><title>memmap2::os::MmapInner::map_anon (12,790 samples, 8.95%)</title><rect x="47.4639%" y="661" width="8.9494%" height="15" fill="rgb(249,193,18)" fg:x="67833" fg:w="12790"/><text x="47.7139%" y="671.50">memmap2::os::..</text></g><g><title>memmap2::os::MmapInner::new (12,764 samples, 8.93%)</title><rect x="47.4821%" y="645" width="8.9312%" height="15" fill="rgb(209,133,39)" fg:x="67859" fg:w="12764"/><text x="47.7321%" y="655.50">memmap2::os::..</text></g><g><title>memmap2::os::page_size (43 samples, 0.03%)</title><rect x="56.3832%" y="629" width="0.0301%" height="15" fill="rgb(232,100,14)" fg:x="80580" fg:w="43"/><text x="56.6332%" y="639.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (34 samples, 0.02%)</title><rect x="56.3895%" y="613" width="0.0238%" height="15" fill="rgb(224,185,1)" fg:x="80589" fg:w="34"/><text x="56.6395%" y="623.50"></text></g><g><title>core::sync::atomic::atomic_load (32 samples, 0.02%)</title><rect x="56.3909%" y="597" width="0.0224%" height="15" fill="rgb(223,139,8)" fg:x="80591" fg:w="32"/><text x="56.6409%" y="607.50"></text></g><g><title>dynasmrt::mmap::ExecutableBuffer::new (19,971 samples, 13.97%)</title><rect x="42.4448%" y="709" width="13.9740%" height="15" fill="rgb(232,213,38)" fg:x="60660" fg:w="19971"/><text x="42.6948%" y="719.50">dynasmrt::mmap::Execu..</text></g><g><title>memmap2::MmapMut::map_anon (12,888 samples, 9.02%)</title><rect x="47.4009%" y="693" width="9.0179%" height="15" fill="rgb(207,94,22)" fg:x="67743" fg:w="12888"/><text x="47.6509%" y="703.50">memmap2::Mmap..</text></g><g><title>dynasmrt::components::MemoryManager::new (20,532 samples, 14.37%)</title><rect x="42.1138%" y="725" width="14.3666%" height="15" fill="rgb(219,183,54)" fg:x="60187" fg:w="20532"/><text x="42.3638%" y="735.50">dynasmrt::components::..</text></g><g><title>std::sync::rwlock::RwLock&lt;T&gt;::new (88 samples, 0.06%)</title><rect x="56.4189%" y="709" width="0.0616%" height="15" fill="rgb(216,185,54)" fg:x="80631" fg:w="88"/><text x="56.6689%" y="719.50"></text></g><g><title>dynasmrt::Assembler&lt;R&gt;::new (20,864 samples, 14.60%)</title><rect x="41.8899%" y="741" width="14.5989%" height="15" fill="rgb(254,217,39)" fg:x="59867" fg:w="20864"/><text x="42.1399%" y="751.50">dynasmrt::Assembler&lt;R&gt;..</text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (20 samples, 0.01%)</title><rect x="56.5441%" y="597" width="0.0140%" height="15" fill="rgb(240,178,23)" fg:x="80810" fg:w="20"/><text x="56.7941%" y="607.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::current_memory (44 samples, 0.03%)</title><rect x="56.5581%" y="597" width="0.0308%" height="15" fill="rgb(218,11,47)" fg:x="80830" fg:w="44"/><text x="56.8081%" y="607.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::set_ptr_and_cap (29 samples, 0.02%)</title><rect x="56.5889%" y="597" width="0.0203%" height="15" fill="rgb(218,51,51)" fg:x="80874" fg:w="29"/><text x="56.8389%" y="607.50"></text></g><g><title>_int_free (30 samples, 0.02%)</title><rect x="56.7092%" y="501" width="0.0210%" height="15" fill="rgb(238,126,27)" fg:x="81046" fg:w="30"/><text x="56.9592%" y="511.50"></text></g><g><title>_int_realloc (139 samples, 0.10%)</title><rect x="56.6868%" y="517" width="0.0973%" height="15" fill="rgb(249,202,22)" fg:x="81014" fg:w="139"/><text x="56.9368%" y="527.50"></text></g><g><title>_int_malloc (77 samples, 0.05%)</title><rect x="56.7302%" y="501" width="0.0539%" height="15" fill="rgb(254,195,49)" fg:x="81076" fg:w="77"/><text x="56.9802%" y="511.50"></text></g><g><title>__GI___libc_realloc (166 samples, 0.12%)</title><rect x="56.6742%" y="533" width="0.1162%" height="15" fill="rgb(208,123,14)" fg:x="80996" fg:w="166"/><text x="56.9242%" y="543.50"></text></g><g><title>alloc::alloc::realloc (174 samples, 0.12%)</title><rect x="56.6742%" y="549" width="0.1218%" height="15" fill="rgb(224,200,8)" fg:x="80996" fg:w="174"/><text x="56.9242%" y="559.50"></text></g><g><title>core::ptr::metadata::from_raw_parts_mut (17 samples, 0.01%)</title><rect x="56.8121%" y="517" width="0.0119%" height="15" fill="rgb(217,61,36)" fg:x="81193" fg:w="17"/><text x="57.0621%" y="527.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (276 samples, 0.19%)</title><rect x="56.6323%" y="581" width="0.1931%" height="15" fill="rgb(206,35,45)" fg:x="80936" fg:w="276"/><text x="56.8823%" y="591.50"></text></g><g><title>alloc::alloc::Global::grow_impl (273 samples, 0.19%)</title><rect x="56.6344%" y="565" width="0.1910%" height="15" fill="rgb(217,65,33)" fg:x="80939" fg:w="273"/><text x="56.8844%" y="575.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;[T]&gt;::slice_from_raw_parts (21 samples, 0.01%)</title><rect x="56.8107%" y="549" width="0.0147%" height="15" fill="rgb(222,158,48)" fg:x="81191" fg:w="21"/><text x="57.0607%" y="559.50"></text></g><g><title>core::ptr::slice_from_raw_parts_mut (19 samples, 0.01%)</title><rect x="56.8121%" y="533" width="0.0133%" height="15" fill="rgb(254,2,54)" fg:x="81193" fg:w="19"/><text x="57.0621%" y="543.50"></text></g><g><title>alloc::raw_vec::finish_grow (366 samples, 0.26%)</title><rect x="56.6092%" y="597" width="0.2561%" height="15" fill="rgb(250,143,38)" fg:x="80903" fg:w="366"/><text x="56.8592%" y="607.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map_err (40 samples, 0.03%)</title><rect x="56.8373%" y="581" width="0.0280%" height="15" fill="rgb(248,25,0)" fg:x="81229" fg:w="40"/><text x="57.0873%" y="591.50"></text></g><g><title>core::alloc::layout::Layout::array (57 samples, 0.04%)</title><rect x="56.8653%" y="597" width="0.0399%" height="15" fill="rgb(206,152,27)" fg:x="81269" fg:w="57"/><text x="57.1153%" y="607.50"></text></g><g><title>core::alloc::layout::Layout::array::inner (55 samples, 0.04%)</title><rect x="56.8667%" y="581" width="0.0385%" height="15" fill="rgb(240,77,30)" fg:x="81271" fg:w="55"/><text x="57.1167%" y="591.50"></text></g><g><title>core::cmp::max (89 samples, 0.06%)</title><rect x="56.9052%" y="597" width="0.0623%" height="15" fill="rgb(231,5,3)" fg:x="81326" fg:w="89"/><text x="57.1552%" y="607.50"></text></g><g><title>core::cmp::Ord::max (89 samples, 0.06%)</title><rect x="56.9052%" y="581" width="0.0623%" height="15" fill="rgb(207,226,32)" fg:x="81326" fg:w="89"/><text x="57.1552%" y="591.50"></text></g><g><title>core::cmp::max_by (82 samples, 0.06%)</title><rect x="56.9101%" y="565" width="0.0574%" height="15" fill="rgb(222,207,47)" fg:x="81333" fg:w="82"/><text x="57.1601%" y="575.50"></text></g><g><title>core::ops::function::FnOnce::call_once (37 samples, 0.03%)</title><rect x="56.9415%" y="549" width="0.0259%" height="15" fill="rgb(229,115,45)" fg:x="81378" fg:w="37"/><text x="57.1915%" y="559.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::Ord for usize&gt;::cmp (25 samples, 0.02%)</title><rect x="56.9499%" y="533" width="0.0175%" height="15" fill="rgb(224,191,6)" fg:x="81390" fg:w="25"/><text x="57.1999%" y="543.50"></text></g><g><title>core::num::&lt;impl usize&gt;::checked_add (30 samples, 0.02%)</title><rect x="56.9674%" y="597" width="0.0210%" height="15" fill="rgb(230,227,24)" fg:x="81415" fg:w="30"/><text x="57.2174%" y="607.50"></text></g><g><title>core::num::&lt;impl usize&gt;::overflowing_add (16 samples, 0.01%)</title><rect x="56.9772%" y="581" width="0.0112%" height="15" fill="rgb(228,80,19)" fg:x="81429" fg:w="16"/><text x="57.2272%" y="591.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (670 samples, 0.47%)</title><rect x="56.5217%" y="613" width="0.4688%" height="15" fill="rgb(247,229,0)" fg:x="80778" fg:w="670"/><text x="56.7717%" y="623.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (697 samples, 0.49%)</title><rect x="56.5210%" y="629" width="0.4877%" height="15" fill="rgb(237,194,15)" fg:x="80777" fg:w="697"/><text x="56.7710%" y="639.50"></text></g><g><title>alloc::raw_vec::handle_reserve (26 samples, 0.02%)</title><rect x="56.9905%" y="613" width="0.0182%" height="15" fill="rgb(219,203,20)" fg:x="81448" fg:w="26"/><text x="57.2405%" y="623.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map_err (20 samples, 0.01%)</title><rect x="56.9947%" y="597" width="0.0140%" height="15" fill="rgb(234,128,8)" fg:x="81454" fg:w="20"/><text x="57.2447%" y="607.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (716 samples, 0.50%)</title><rect x="56.5084%" y="661" width="0.5010%" height="15" fill="rgb(248,202,8)" fg:x="80759" fg:w="716"/><text x="56.7584%" y="671.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (707 samples, 0.49%)</title><rect x="56.5147%" y="645" width="0.4947%" height="15" fill="rgb(206,104,37)" fg:x="80768" fg:w="707"/><text x="56.7647%" y="655.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (733 samples, 0.51%)</title><rect x="56.5042%" y="677" width="0.5129%" height="15" fill="rgb(223,8,27)" fg:x="80753" fg:w="733"/><text x="56.7542%" y="687.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (807 samples, 0.56%)</title><rect x="56.5007%" y="693" width="0.5647%" height="15" fill="rgb(216,217,28)" fg:x="80748" fg:w="807"/><text x="56.7507%" y="703.50"></text></g><g><title>core::slice::iter::Iter&lt;T&gt;::as_slice (69 samples, 0.05%)</title><rect x="57.0171%" y="677" width="0.0483%" height="15" fill="rgb(249,199,1)" fg:x="81486" fg:w="69"/><text x="57.2671%" y="687.50"></text></g><g><title>core::slice::iter::Iter&lt;T&gt;::make_slice (67 samples, 0.05%)</title><rect x="57.0185%" y="661" width="0.0469%" height="15" fill="rgb(240,85,17)" fg:x="81488" fg:w="67"/><text x="57.2685%" y="671.50"></text></g><g><title>core::slice::raw::from_raw_parts (42 samples, 0.03%)</title><rect x="57.0360%" y="645" width="0.0294%" height="15" fill="rgb(206,108,45)" fg:x="81513" fg:w="42"/><text x="57.2860%" y="655.50"></text></g><g><title>core::ptr::slice_from_raw_parts (42 samples, 0.03%)</title><rect x="57.0360%" y="629" width="0.0294%" height="15" fill="rgb(245,210,41)" fg:x="81513" fg:w="42"/><text x="57.2860%" y="639.50"></text></g><g><title>core::ptr::metadata::from_raw_parts (42 samples, 0.03%)</title><rect x="57.0360%" y="613" width="0.0294%" height="15" fill="rgb(206,13,37)" fg:x="81513" fg:w="42"/><text x="57.2860%" y="623.50"></text></g><g><title>&lt;dynasmrt::Assembler&lt;R&gt; as core::iter::traits::collect::Extend&lt;&amp;u8&gt;&gt;::extend (834 samples, 0.58%)</title><rect x="56.4986%" y="725" width="0.5836%" height="15" fill="rgb(250,61,18)" fg:x="80745" fg:w="834"/><text x="56.7486%" y="735.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::iter::traits::collect::Extend&lt;&amp;T&gt;&gt;::extend (833 samples, 0.58%)</title><rect x="56.4993%" y="709" width="0.5829%" height="15" fill="rgb(235,172,48)" fg:x="80746" fg:w="833"/><text x="56.7493%" y="719.50"></text></g><g><title>core::array::&lt;impl core::iter::traits::collect::IntoIterator for &amp;[T: N]&gt;::into_iter (24 samples, 0.02%)</title><rect x="57.0654%" y="693" width="0.0168%" height="15" fill="rgb(249,201,17)" fg:x="81555" fg:w="24"/><text x="57.3154%" y="703.50"></text></g><g><title>dynasmrt::DynasmApi::push_i32 (849 samples, 0.59%)</title><rect x="56.4888%" y="741" width="0.5941%" height="15" fill="rgb(219,208,6)" fg:x="80731" fg:w="849"/><text x="56.7388%" y="751.50"></text></g><g><title>dynasmrt::DynasmApi::push_i8 (50 samples, 0.03%)</title><rect x="57.0829%" y="741" width="0.0350%" height="15" fill="rgb(248,31,23)" fg:x="81580" fg:w="50"/><text x="57.3329%" y="751.50"></text></g><g><title>&lt;dynasmrt::Assembler&lt;R&gt; as dynasmrt::DynasmApi&gt;::push (44 samples, 0.03%)</title><rect x="57.0871%" y="725" width="0.0308%" height="15" fill="rgb(245,15,42)" fg:x="81586" fg:w="44"/><text x="57.3371%" y="735.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (37 samples, 0.03%)</title><rect x="57.0920%" y="709" width="0.0259%" height="15" fill="rgb(222,217,39)" fg:x="81593" fg:w="37"/><text x="57.3420%" y="719.50"></text></g><g><title>__memcpy_avx_unaligned_erms (26 samples, 0.02%)</title><rect x="57.1319%" y="709" width="0.0182%" height="15" fill="rgb(210,219,27)" fg:x="81650" fg:w="26"/><text x="57.3819%" y="719.50"></text></g><g><title>__memcpy_avx_unaligned_erms (19 samples, 0.01%)</title><rect x="57.1612%" y="677" width="0.0133%" height="15" fill="rgb(252,166,36)" fg:x="81692" fg:w="19"/><text x="57.4112%" y="687.50"></text></g><g><title>core::mem::replace (39 samples, 0.03%)</title><rect x="57.1543%" y="709" width="0.0273%" height="15" fill="rgb(245,132,34)" fg:x="81682" fg:w="39"/><text x="57.4043%" y="719.50"></text></g><g><title>core::ptr::write (30 samples, 0.02%)</title><rect x="57.1605%" y="693" width="0.0210%" height="15" fill="rgb(236,54,3)" fg:x="81691" fg:w="30"/><text x="57.4105%" y="703.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (75 samples, 0.05%)</title><rect x="57.2123%" y="629" width="0.0525%" height="15" fill="rgb(241,173,43)" fg:x="81765" fg:w="75"/><text x="57.4623%" y="639.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::finish (425 samples, 0.30%)</title><rect x="57.2032%" y="677" width="0.2974%" height="15" fill="rgb(215,190,9)" fg:x="81752" fg:w="425"/><text x="57.4532%" y="687.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (425 samples, 0.30%)</title><rect x="57.2032%" y="661" width="0.2974%" height="15" fill="rgb(242,101,16)" fg:x="81752" fg:w="425"/><text x="57.4532%" y="671.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (425 samples, 0.30%)</title><rect x="57.2032%" y="645" width="0.2974%" height="15" fill="rgb(223,190,21)" fg:x="81752" fg:w="425"/><text x="57.4532%" y="655.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (337 samples, 0.24%)</title><rect x="57.2648%" y="629" width="0.2358%" height="15" fill="rgb(215,228,25)" fg:x="81840" fg:w="337"/><text x="57.5148%" y="639.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (75 samples, 0.05%)</title><rect x="57.4481%" y="613" width="0.0525%" height="15" fill="rgb(225,36,22)" fg:x="82102" fg:w="75"/><text x="57.6981%" y="623.50"></text></g><g><title>__memcpy_avx_unaligned_erms (44 samples, 0.03%)</title><rect x="57.5055%" y="661" width="0.0308%" height="15" fill="rgb(251,106,46)" fg:x="82184" fg:w="44"/><text x="57.7555%" y="671.50"></text></g><g><title>__memcpy_avx_unaligned_erms (36 samples, 0.03%)</title><rect x="57.5391%" y="645" width="0.0252%" height="15" fill="rgb(208,90,1)" fg:x="82232" fg:w="36"/><text x="57.7891%" y="655.50"></text></g><g><title>__memcpy_avx_unaligned_erms (105 samples, 0.07%)</title><rect x="57.5741%" y="629" width="0.0735%" height="15" fill="rgb(243,10,4)" fg:x="82282" fg:w="105"/><text x="57.8241%" y="639.50"></text></g><g><title>&lt;std::collections::hash::map::RandomState as core::hash::BuildHasher&gt;::build_hasher (223 samples, 0.16%)</title><rect x="57.5006%" y="677" width="0.1560%" height="15" fill="rgb(212,137,27)" fg:x="82177" fg:w="223"/><text x="57.7506%" y="687.50"></text></g><g><title>core::hash::sip::SipHasher13::new_with_keys (168 samples, 0.12%)</title><rect x="57.5391%" y="661" width="0.1176%" height="15" fill="rgb(231,220,49)" fg:x="82232" fg:w="168"/><text x="57.7891%" y="671.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::new_with_keys (130 samples, 0.09%)</title><rect x="57.5657%" y="645" width="0.0910%" height="15" fill="rgb(237,96,20)" fg:x="82270" fg:w="130"/><text x="57.8157%" y="655.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (35 samples, 0.02%)</title><rect x="57.7728%" y="549" width="0.0245%" height="15" fill="rgb(239,229,30)" fg:x="82566" fg:w="35"/><text x="58.0228%" y="559.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (119 samples, 0.08%)</title><rect x="57.7168%" y="565" width="0.0833%" height="15" fill="rgb(219,65,33)" fg:x="82486" fg:w="119"/><text x="57.9668%" y="575.50"></text></g><g><title>core::hash::sip::u8to64_le (29 samples, 0.02%)</title><rect x="57.8001%" y="565" width="0.0203%" height="15" fill="rgb(243,134,7)" fg:x="82605" fg:w="29"/><text x="58.0501%" y="575.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (239 samples, 0.17%)</title><rect x="57.6643%" y="613" width="0.1672%" height="15" fill="rgb(216,177,54)" fg:x="82411" fg:w="239"/><text x="57.9143%" y="623.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (234 samples, 0.16%)</title><rect x="57.6678%" y="597" width="0.1637%" height="15" fill="rgb(211,160,20)" fg:x="82416" fg:w="234"/><text x="57.9178%" y="607.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (234 samples, 0.16%)</title><rect x="57.6678%" y="581" width="0.1637%" height="15" fill="rgb(239,85,39)" fg:x="82416" fg:w="234"/><text x="57.9178%" y="591.50"></text></g><g><title>hashbrown::map::make_hash (932 samples, 0.65%)</title><rect x="57.1829%" y="709" width="0.6521%" height="15" fill="rgb(232,125,22)" fg:x="81723" fg:w="932"/><text x="57.4329%" y="719.50"></text></g><g><title>core::hash::BuildHasher::hash_one (921 samples, 0.64%)</title><rect x="57.1906%" y="693" width="0.6444%" height="15" fill="rgb(244,57,34)" fg:x="81734" fg:w="921"/><text x="57.4406%" y="703.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (255 samples, 0.18%)</title><rect x="57.6566%" y="677" width="0.1784%" height="15" fill="rgb(214,203,32)" fg:x="82400" fg:w="255"/><text x="57.9066%" y="687.50"></text></g><g><title>&lt;coldbrew::runtime::ProgramCounter as core::hash::Hash&gt;::hash (252 samples, 0.18%)</title><rect x="57.6587%" y="661" width="0.1763%" height="15" fill="rgb(207,58,43)" fg:x="82403" fg:w="252"/><text x="57.9087%" y="671.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for usize&gt;::hash (249 samples, 0.17%)</title><rect x="57.6608%" y="645" width="0.1742%" height="15" fill="rgb(215,193,15)" fg:x="82406" fg:w="249"/><text x="57.9108%" y="655.50"></text></g><g><title>core::hash::Hasher::write_usize (244 samples, 0.17%)</title><rect x="57.6643%" y="629" width="0.1707%" height="15" fill="rgb(232,15,44)" fg:x="82411" fg:w="244"/><text x="57.9143%" y="639.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_mut (23 samples, 0.02%)</title><rect x="57.8379%" y="709" width="0.0161%" height="15" fill="rgb(212,3,48)" fg:x="82659" fg:w="23"/><text x="58.0879%" y="719.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ptr (23 samples, 0.02%)</title><rect x="57.8379%" y="693" width="0.0161%" height="15" fill="rgb(218,128,7)" fg:x="82659" fg:w="23"/><text x="58.0879%" y="703.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (19 samples, 0.01%)</title><rect x="57.8407%" y="677" width="0.0133%" height="15" fill="rgb(226,216,39)" fg:x="82663" fg:w="19"/><text x="58.0907%" y="687.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::from_base_index (22 samples, 0.02%)</title><rect x="57.8743%" y="677" width="0.0154%" height="15" fill="rgb(243,47,51)" fg:x="82711" fg:w="22"/><text x="58.1243%" y="687.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::bucket (34 samples, 0.02%)</title><rect x="57.8680%" y="693" width="0.0238%" height="15" fill="rgb(241,183,40)" fg:x="82702" fg:w="34"/><text x="58.1180%" y="703.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve (15 samples, 0.01%)</title><rect x="57.8918%" y="693" width="0.0105%" height="15" fill="rgb(231,217,32)" fg:x="82736" fg:w="15"/><text x="58.1418%" y="703.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMask as core::iter::traits::collect::IntoIterator&gt;::into_iter (21 samples, 0.01%)</title><rect x="57.9631%" y="677" width="0.0147%" height="15" fill="rgb(229,61,38)" fg:x="82838" fg:w="21"/><text x="58.2131%" y="687.50"></text></g><g><title>core::num::nonzero::NonZeroU16::new (22 samples, 0.02%)</title><rect x="58.0373%" y="645" width="0.0154%" height="15" fill="rgb(225,210,5)" fg:x="82944" fg:w="22"/><text x="58.2873%" y="655.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (135 samples, 0.09%)</title><rect x="57.9778%" y="677" width="0.0945%" height="15" fill="rgb(231,79,45)" fg:x="82859" fg:w="135"/><text x="58.2278%" y="687.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (85 samples, 0.06%)</title><rect x="58.0128%" y="661" width="0.0595%" height="15" fill="rgb(224,100,7)" fg:x="82909" fg:w="85"/><text x="58.2628%" y="671.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::nonzero_trailing_zeros (28 samples, 0.02%)</title><rect x="58.0527%" y="645" width="0.0196%" height="15" fill="rgb(241,198,18)" fg:x="82966" fg:w="28"/><text x="58.3027%" y="655.50"></text></g><g><title>core::num::nonzero::NonZeroU16::trailing_zeros (21 samples, 0.01%)</title><rect x="58.0576%" y="629" width="0.0147%" height="15" fill="rgb(252,97,53)" fg:x="82973" fg:w="21"/><text x="58.3076%" y="639.50"></text></g><g><title>hashbrown::map::equivalent_key::{{closure}} (78 samples, 0.05%)</title><rect x="58.0814%" y="661" width="0.0546%" height="15" fill="rgb(220,88,7)" fg:x="83007" fg:w="78"/><text x="58.3314%" y="671.50"></text></g><g><title>&lt;Q as hashbrown::Equivalent&lt;K&gt;&gt;::equivalent (74 samples, 0.05%)</title><rect x="58.0842%" y="645" width="0.0518%" height="15" fill="rgb(213,176,14)" fg:x="83011" fg:w="74"/><text x="58.3342%" y="655.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (62 samples, 0.04%)</title><rect x="58.0926%" y="629" width="0.0434%" height="15" fill="rgb(246,73,7)" fg:x="83023" fg:w="62"/><text x="58.3426%" y="639.50"></text></g><g><title>&lt;coldbrew::runtime::ProgramCounter as core::cmp::PartialEq&gt;::eq (60 samples, 0.04%)</title><rect x="58.0940%" y="613" width="0.0420%" height="15" fill="rgb(245,64,36)" fg:x="83025" fg:w="60"/><text x="58.3440%" y="623.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ptr (21 samples, 0.01%)</title><rect x="58.1367%" y="645" width="0.0147%" height="15" fill="rgb(245,80,10)" fg:x="83086" fg:w="21"/><text x="58.3867%" y="655.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ref (28 samples, 0.02%)</title><rect x="58.1360%" y="661" width="0.0196%" height="15" fill="rgb(232,107,50)" fg:x="83085" fg:w="28"/><text x="58.3860%" y="671.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::from_base_index (55 samples, 0.04%)</title><rect x="58.1583%" y="645" width="0.0385%" height="15" fill="rgb(253,3,0)" fg:x="83117" fg:w="55"/><text x="58.4083%" y="655.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find_or_find_insert_slot::{{closure}} (181 samples, 0.13%)</title><rect x="58.0723%" y="677" width="0.1266%" height="15" fill="rgb(212,99,53)" fg:x="82994" fg:w="181"/><text x="58.3223%" y="687.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::bucket (62 samples, 0.04%)</title><rect x="58.1555%" y="661" width="0.0434%" height="15" fill="rgb(249,111,54)" fg:x="83113" fg:w="62"/><text x="58.4055%" y="671.50"></text></g><g><title>hashbrown::raw::sse2::Group::load (80 samples, 0.06%)</title><rect x="58.2038%" y="677" width="0.0560%" height="15" fill="rgb(249,55,30)" fg:x="83182" fg:w="80"/><text x="58.4538%" y="687.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (66 samples, 0.05%)</title><rect x="58.2136%" y="661" width="0.0462%" height="15" fill="rgb(237,47,42)" fg:x="83196" fg:w="66"/><text x="58.4636%" y="671.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_cmpeq_epi8 (37 samples, 0.03%)</title><rect x="58.2969%" y="661" width="0.0259%" height="15" fill="rgb(211,20,18)" fg:x="83315" fg:w="37"/><text x="58.5469%" y="671.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (120 samples, 0.08%)</title><rect x="58.3228%" y="661" width="0.0840%" height="15" fill="rgb(231,203,46)" fg:x="83352" fg:w="120"/><text x="58.5728%" y="671.50"></text></g><g><title>coldbrew::jit::JitCache::compile (64,986 samples, 45.47%)</title><rect x="12.9839%" y="757" width="45.4718%" height="15" fill="rgb(237,142,3)" fg:x="18556" fg:w="64986"/><text x="13.2339%" y="767.50">coldbrew::jit::JitCache::compile</text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::insert (1,912 samples, 1.34%)</title><rect x="57.1179%" y="741" width="1.3379%" height="15" fill="rgb(241,107,1)" fg:x="81630" fg:w="1912"/><text x="57.3679%" y="751.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1,909 samples, 1.34%)</title><rect x="57.1200%" y="725" width="1.3358%" height="15" fill="rgb(229,83,13)" fg:x="81633" fg:w="1909"/><text x="57.3700%" y="735.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find_or_find_insert_slot (860 samples, 0.60%)</title><rect x="57.8540%" y="709" width="0.6018%" height="15" fill="rgb(241,91,40)" fg:x="82682" fg:w="860"/><text x="58.1040%" y="719.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::find_or_find_insert_slot_inner (791 samples, 0.55%)</title><rect x="57.9022%" y="693" width="0.5535%" height="15" fill="rgb(225,3,45)" fg:x="82751" fg:w="791"/><text x="58.1522%" y="703.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (280 samples, 0.20%)</title><rect x="58.2598%" y="677" width="0.1959%" height="15" fill="rgb(244,223,14)" fg:x="83262" fg:w="280"/><text x="58.5098%" y="687.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_set1_epi8 (70 samples, 0.05%)</title><rect x="58.4067%" y="661" width="0.0490%" height="15" fill="rgb(224,124,37)" fg:x="83472" fg:w="70"/><text x="58.6567%" y="671.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_set_epi8 (70 samples, 0.05%)</title><rect x="58.4067%" y="645" width="0.0490%" height="15" fill="rgb(251,171,30)" fg:x="83472" fg:w="70"/><text x="58.6567%" y="655.50"></text></g><g><title>core::core_arch::simd::i8x16::new (17 samples, 0.01%)</title><rect x="58.4438%" y="629" width="0.0119%" height="15" fill="rgb(236,46,54)" fg:x="83525" fg:w="17"/><text x="58.6938%" y="639.50"></text></g><g><title>__memcpy_avx_unaligned_erms (34 samples, 0.02%)</title><rect x="58.6684%" y="725" width="0.0238%" height="15" fill="rgb(245,213,5)" fg:x="83846" fg:w="34"/><text x="58.9184%" y="735.50"></text></g><g><title>&lt;I as core::iter::traits::collect::IntoIterator&gt;::into_iter (39 samples, 0.03%)</title><rect x="58.6656%" y="741" width="0.0273%" height="15" fill="rgb(230,144,27)" fg:x="83842" fg:w="39"/><text x="58.9156%" y="751.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::DerefMut&gt;::deref_mut (20 samples, 0.01%)</title><rect x="58.7006%" y="725" width="0.0140%" height="15" fill="rgb(220,86,6)" fg:x="83892" fg:w="20"/><text x="58.9506%" y="735.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::IndexMut&lt;I&gt;&gt;::index_mut (53 samples, 0.04%)</title><rect x="58.6929%" y="741" width="0.0371%" height="15" fill="rgb(240,20,13)" fg:x="83881" fg:w="53"/><text x="58.9429%" y="751.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::IndexMut&lt;I&gt; for [T]&gt;::index_mut (22 samples, 0.02%)</title><rect x="58.7146%" y="725" width="0.0154%" height="15" fill="rgb(217,89,34)" fg:x="83912" fg:w="22"/><text x="58.9646%" y="735.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (19 samples, 0.01%)</title><rect x="58.7167%" y="709" width="0.0133%" height="15" fill="rgb(229,13,5)" fg:x="83915" fg:w="19"/><text x="58.9667%" y="719.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::ops::try_trait::Try&gt;::branch (17 samples, 0.01%)</title><rect x="58.8770%" y="661" width="0.0119%" height="15" fill="rgb(244,67,35)" fg:x="84144" fg:w="17"/><text x="59.1270%" y="671.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (43 samples, 0.03%)</title><rect x="58.8889%" y="661" width="0.0301%" height="15" fill="rgb(221,40,2)" fg:x="84161" fg:w="43"/><text x="59.1389%" y="671.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (88 samples, 0.06%)</title><rect x="58.8616%" y="677" width="0.0616%" height="15" fill="rgb(237,157,21)" fg:x="84122" fg:w="88"/><text x="59.1116%" y="687.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::next_n (102 samples, 0.07%)</title><rect x="58.9231%" y="677" width="0.0714%" height="15" fill="rgb(222,94,11)" fg:x="84210" fg:w="102"/><text x="59.1731%" y="687.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (42 samples, 0.03%)</title><rect x="58.9651%" y="661" width="0.0294%" height="15" fill="rgb(249,113,6)" fg:x="84270" fg:w="42"/><text x="59.2151%" y="671.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (16 samples, 0.01%)</title><rect x="58.9833%" y="645" width="0.0112%" height="15" fill="rgb(238,137,36)" fg:x="84296" fg:w="16"/><text x="59.2333%" y="655.50"></text></g><g><title>&lt;hashbrown::raw::RawIter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (286 samples, 0.20%)</title><rect x="58.7972%" y="709" width="0.2001%" height="15" fill="rgb(210,102,26)" fg:x="84030" fg:w="286"/><text x="59.0472%" y="719.50"></text></g><g><title>hashbrown::raw::RawIterRange&lt;T&gt;::next_impl (252 samples, 0.18%)</title><rect x="58.8210%" y="693" width="0.1763%" height="15" fill="rgb(218,30,30)" fg:x="84064" fg:w="252"/><text x="59.0710%" y="703.50"></text></g><g><title>&lt;std::collections::hash::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (439 samples, 0.31%)</title><rect x="58.7300%" y="741" width="0.3072%" height="15" fill="rgb(214,67,26)" fg:x="83934" fg:w="439"/><text x="58.9800%" y="751.50"></text></g><g><title>&lt;hashbrown::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (439 samples, 0.31%)</title><rect x="58.7300%" y="725" width="0.3072%" height="15" fill="rgb(251,9,53)" fg:x="83934" fg:w="439"/><text x="58.9800%" y="735.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ref (57 samples, 0.04%)</title><rect x="58.9973%" y="709" width="0.0399%" height="15" fill="rgb(228,204,25)" fg:x="84316" fg:w="57"/><text x="59.2473%" y="719.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ptr (43 samples, 0.03%)</title><rect x="59.0071%" y="693" width="0.0301%" height="15" fill="rgb(207,153,8)" fg:x="84330" fg:w="43"/><text x="59.2571%" y="703.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (16 samples, 0.01%)</title><rect x="59.0260%" y="677" width="0.0112%" height="15" fill="rgb(242,9,16)" fg:x="84357" fg:w="16"/><text x="59.2760%" y="687.50"></text></g><g><title>__memcpy_avx_unaligned_erms (34 samples, 0.02%)</title><rect x="59.0386%" y="741" width="0.0238%" height="15" fill="rgb(217,211,10)" fg:x="84375" fg:w="34"/><text x="59.2886%" y="751.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (39 samples, 0.03%)</title><rect x="59.4108%" y="645" width="0.0273%" height="15" fill="rgb(219,228,52)" fg:x="84907" fg:w="39"/><text x="59.6608%" y="655.50"></text></g><g><title>malloc_consolidate (555 samples, 0.39%)</title><rect x="59.6466%" y="597" width="0.3883%" height="15" fill="rgb(231,92,29)" fg:x="85244" fg:w="555"/><text x="59.8966%" y="607.50"></text></g><g><title>_int_malloc (758 samples, 0.53%)</title><rect x="59.5074%" y="613" width="0.5304%" height="15" fill="rgb(232,8,23)" fg:x="85045" fg:w="758"/><text x="59.7574%" y="623.50"></text></g><g><title>__libc_calloc (827 samples, 0.58%)</title><rect x="59.4605%" y="629" width="0.5787%" height="15" fill="rgb(216,211,34)" fg:x="84978" fg:w="827"/><text x="59.7105%" y="639.50"></text></g><g><title>__memset_avx2_unaligned_erms (1,707 samples, 1.19%)</title><rect x="60.0392%" y="629" width="1.1944%" height="15" fill="rgb(236,151,0)" fg:x="85805" fg:w="1707"/><text x="60.2892%" y="639.50"></text></g><g><title>__rdl_alloc_zeroed (15 samples, 0.01%)</title><rect x="61.2336%" y="629" width="0.0105%" height="15" fill="rgb(209,168,3)" fg:x="87512" fg:w="15"/><text x="61.4836%" y="639.50"></text></g><g><title>alloc::alloc::alloc_zeroed (2,577 samples, 1.80%)</title><rect x="59.4542%" y="645" width="1.8032%" height="15" fill="rgb(208,129,28)" fg:x="84969" fg:w="2577"/><text x="59.7042%" y="655.50">a..</text></g><g><title>core::option::Option&lt;T&gt;::ok_or (47 samples, 0.03%)</title><rect x="61.2623%" y="645" width="0.0329%" height="15" fill="rgb(229,78,22)" fg:x="87553" fg:w="47"/><text x="61.5123%" y="655.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::new (51 samples, 0.04%)</title><rect x="61.2952%" y="645" width="0.0357%" height="15" fill="rgb(228,187,13)" fg:x="87600" fg:w="51"/><text x="61.5452%" y="655.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate_zeroed (3,039 samples, 2.13%)</title><rect x="59.2576%" y="677" width="2.1264%" height="15" fill="rgb(240,119,24)" fg:x="84688" fg:w="3039"/><text x="59.5076%" y="687.50">&lt;..</text></g><g><title>alloc::alloc::Global::alloc_impl (3,036 samples, 2.12%)</title><rect x="59.2597%" y="661" width="2.1243%" height="15" fill="rgb(209,194,42)" fg:x="84691" fg:w="3036"/><text x="59.5097%" y="671.50">a..</text></g><g><title>core::ptr::non_null::NonNull&lt;[T]&gt;::slice_from_raw_parts (76 samples, 0.05%)</title><rect x="61.3309%" y="645" width="0.0532%" height="15" fill="rgb(247,200,46)" fg:x="87651" fg:w="76"/><text x="61.5809%" y="655.50"></text></g><g><title>core::ptr::slice_from_raw_parts_mut (68 samples, 0.05%)</title><rect x="61.3365%" y="629" width="0.0476%" height="15" fill="rgb(218,76,16)" fg:x="87659" fg:w="68"/><text x="61.5865%" y="639.50"></text></g><g><title>core::ptr::metadata::from_raw_parts_mut (68 samples, 0.05%)</title><rect x="61.3365%" y="613" width="0.0476%" height="15" fill="rgb(225,21,48)" fg:x="87659" fg:w="68"/><text x="61.5865%" y="623.50"></text></g><g><title>core::alloc::layout::Layout::max_size_for_align (18 samples, 0.01%)</title><rect x="61.4750%" y="645" width="0.0126%" height="15" fill="rgb(239,223,50)" fg:x="87857" fg:w="18"/><text x="61.7250%" y="655.50"></text></g><g><title>core::alloc::layout::Layout::array::inner (139 samples, 0.10%)</title><rect x="61.3952%" y="661" width="0.0973%" height="15" fill="rgb(244,45,21)" fg:x="87743" fg:w="139"/><text x="61.6452%" y="671.50"></text></g><g><title>core::alloc::layout::Layout::array (159 samples, 0.11%)</title><rect x="61.3840%" y="677" width="0.1113%" height="15" fill="rgb(232,33,43)" fg:x="87727" fg:w="159"/><text x="61.6340%" y="687.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::as_ptr (22 samples, 0.02%)</title><rect x="61.4953%" y="677" width="0.0154%" height="15" fill="rgb(209,8,3)" fg:x="87886" fg:w="22"/><text x="61.7453%" y="687.50"></text></g><g><title>alloc::vec::from_elem (3,513 samples, 2.46%)</title><rect x="59.0659%" y="741" width="2.4581%" height="15" fill="rgb(214,25,53)" fg:x="84414" fg:w="3513"/><text x="59.3159%" y="751.50">al..</text></g><g><title>&lt;T as alloc::vec::spec_from_elem::SpecFromElem&gt;::from_elem (3,510 samples, 2.46%)</title><rect x="59.0680%" y="725" width="2.4560%" height="15" fill="rgb(254,186,54)" fg:x="84417" fg:w="3510"/><text x="59.3180%" y="735.50">&lt;T..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_zeroed_in (3,449 samples, 2.41%)</title><rect x="59.1107%" y="709" width="2.4133%" height="15" fill="rgb(208,174,49)" fg:x="84478" fg:w="3449"/><text x="59.3607%" y="719.50">al..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (3,429 samples, 2.40%)</title><rect x="59.1247%" y="693" width="2.3993%" height="15" fill="rgb(233,191,51)" fg:x="84498" fg:w="3429"/><text x="59.3747%" y="703.50">al..</text></g><g><title>core::ptr::unique::Unique&lt;T&gt;::new_unchecked (18 samples, 0.01%)</title><rect x="61.5114%" y="677" width="0.0126%" height="15" fill="rgb(222,134,10)" fg:x="87909" fg:w="18"/><text x="61.7614%" y="687.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (47 samples, 0.03%)</title><rect x="61.5366%" y="725" width="0.0329%" height="15" fill="rgb(230,226,20)" fg:x="87945" fg:w="47"/><text x="61.7866%" y="735.50"></text></g><g><title>core::ptr::slice_from_raw_parts_mut (28 samples, 0.02%)</title><rect x="61.5499%" y="709" width="0.0196%" height="15" fill="rgb(251,111,25)" fg:x="87964" fg:w="28"/><text x="61.7999%" y="719.50"></text></g><g><title>core::ptr::metadata::from_raw_parts_mut (28 samples, 0.02%)</title><rect x="61.5499%" y="693" width="0.0196%" height="15" fill="rgb(224,40,46)" fg:x="87964" fg:w="28"/><text x="61.7999%" y="703.50"></text></g><g><title>_int_free (108 samples, 0.08%)</title><rect x="61.6045%" y="645" width="0.0756%" height="15" fill="rgb(236,108,47)" fg:x="88042" fg:w="108"/><text x="61.8545%" y="655.50"></text></g><g><title>__GI___libc_free (129 samples, 0.09%)</title><rect x="61.5926%" y="661" width="0.0903%" height="15" fill="rgb(234,93,0)" fg:x="88025" fg:w="129"/><text x="61.8426%" y="671.50"></text></g><g><title>alloc::alloc::dealloc (141 samples, 0.10%)</title><rect x="61.5926%" y="677" width="0.0987%" height="15" fill="rgb(224,213,32)" fg:x="88025" fg:w="141"/><text x="61.8426%" y="687.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (169 samples, 0.12%)</title><rect x="61.5779%" y="693" width="0.1183%" height="15" fill="rgb(251,11,48)" fg:x="88004" fg:w="169"/><text x="61.8279%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;i32&gt;&gt; (368 samples, 0.26%)</title><rect x="61.5296%" y="741" width="0.2575%" height="15" fill="rgb(236,173,5)" fg:x="87935" fg:w="368"/><text x="61.7796%" y="751.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;i32&gt;&gt; (311 samples, 0.22%)</title><rect x="61.5695%" y="725" width="0.2176%" height="15" fill="rgb(230,95,12)" fg:x="87992" fg:w="311"/><text x="61.8195%" y="735.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (311 samples, 0.22%)</title><rect x="61.5695%" y="709" width="0.2176%" height="15" fill="rgb(232,209,1)" fg:x="87992" fg:w="311"/><text x="61.8195%" y="719.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::current_memory (130 samples, 0.09%)</title><rect x="61.6961%" y="693" width="0.0910%" height="15" fill="rgb(232,6,1)" fg:x="88173" fg:w="130"/><text x="61.9461%" y="703.50"></text></g><g><title>dynasmrt::mmap::ExecutableBuffer::ptr (73 samples, 0.05%)</title><rect x="61.7871%" y="741" width="0.0511%" height="15" fill="rgb(210,224,50)" fg:x="88303" fg:w="73"/><text x="62.0371%" y="751.50"></text></g><g><title>&lt;dynasmrt::mmap::ExecutableBuffer as core::ops::deref::Deref&gt;::deref (62 samples, 0.04%)</title><rect x="61.7948%" y="725" width="0.0434%" height="15" fill="rgb(228,127,35)" fg:x="88314" fg:w="62"/><text x="62.0448%" y="735.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (44 samples, 0.03%)</title><rect x="61.8074%" y="709" width="0.0308%" height="15" fill="rgb(245,102,45)" fg:x="88332" fg:w="44"/><text x="62.0574%" y="719.50"></text></g><g><title>&lt;core::ops::range::RangeTo&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (35 samples, 0.02%)</title><rect x="61.8137%" y="693" width="0.0245%" height="15" fill="rgb(214,1,49)" fg:x="88341" fg:w="35"/><text x="62.0637%" y="703.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (24 samples, 0.02%)</title><rect x="61.8214%" y="677" width="0.0168%" height="15" fill="rgb(226,163,40)" fg:x="88352" fg:w="24"/><text x="62.0714%" y="687.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (70 samples, 0.05%)</title><rect x="61.8668%" y="613" width="0.0490%" height="15" fill="rgb(239,212,28)" fg:x="88417" fg:w="70"/><text x="62.1168%" y="623.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (19 samples, 0.01%)</title><rect x="61.9025%" y="597" width="0.0133%" height="15" fill="rgb(220,20,13)" fg:x="88468" fg:w="19"/><text x="62.1525%" y="607.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (279 samples, 0.20%)</title><rect x="61.9158%" y="613" width="0.1952%" height="15" fill="rgb(210,164,35)" fg:x="88487" fg:w="279"/><text x="62.1658%" y="623.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (83 samples, 0.06%)</title><rect x="62.0530%" y="597" width="0.0581%" height="15" fill="rgb(248,109,41)" fg:x="88683" fg:w="83"/><text x="62.3030%" y="607.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::finish (367 samples, 0.26%)</title><rect x="61.8549%" y="661" width="0.2568%" height="15" fill="rgb(238,23,50)" fg:x="88400" fg:w="367"/><text x="62.1049%" y="671.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (367 samples, 0.26%)</title><rect x="61.8549%" y="645" width="0.2568%" height="15" fill="rgb(211,48,49)" fg:x="88400" fg:w="367"/><text x="62.1049%" y="655.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (367 samples, 0.26%)</title><rect x="61.8549%" y="629" width="0.2568%" height="15" fill="rgb(223,36,21)" fg:x="88400" fg:w="367"/><text x="62.1049%" y="639.50"></text></g><g><title>__memcpy_avx_unaligned_erms (46 samples, 0.03%)</title><rect x="62.1124%" y="645" width="0.0322%" height="15" fill="rgb(207,123,46)" fg:x="88768" fg:w="46"/><text x="62.3624%" y="655.50"></text></g><g><title>__memcpy_avx_unaligned_erms (42 samples, 0.03%)</title><rect x="62.1467%" y="629" width="0.0294%" height="15" fill="rgb(240,218,32)" fg:x="88817" fg:w="42"/><text x="62.3967%" y="639.50"></text></g><g><title>__memcpy_avx_unaligned_erms (80 samples, 0.06%)</title><rect x="62.1880%" y="613" width="0.0560%" height="15" fill="rgb(252,5,43)" fg:x="88876" fg:w="80"/><text x="62.4380%" y="623.50"></text></g><g><title>&lt;std::collections::hash::map::RandomState as core::hash::BuildHasher&gt;::build_hasher (199 samples, 0.14%)</title><rect x="62.1117%" y="661" width="0.1392%" height="15" fill="rgb(252,84,19)" fg:x="88767" fg:w="199"/><text x="62.3617%" y="671.50"></text></g><g><title>core::hash::sip::SipHasher13::new_with_keys (149 samples, 0.10%)</title><rect x="62.1467%" y="645" width="0.1043%" height="15" fill="rgb(243,152,39)" fg:x="88817" fg:w="149"/><text x="62.3967%" y="655.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::new_with_keys (103 samples, 0.07%)</title><rect x="62.1789%" y="629" width="0.0721%" height="15" fill="rgb(234,160,15)" fg:x="88863" fg:w="103"/><text x="62.4289%" y="639.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (28 samples, 0.02%)</title><rect x="62.3748%" y="533" width="0.0196%" height="15" fill="rgb(237,34,20)" fg:x="89143" fg:w="28"/><text x="62.6248%" y="543.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (117 samples, 0.08%)</title><rect x="62.3147%" y="549" width="0.0819%" height="15" fill="rgb(229,97,13)" fg:x="89057" fg:w="117"/><text x="62.5647%" y="559.50"></text></g><g><title>core::hash::sip::u8to64_le (32 samples, 0.02%)</title><rect x="62.3965%" y="549" width="0.0224%" height="15" fill="rgb(234,71,50)" fg:x="89174" fg:w="32"/><text x="62.6465%" y="559.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (254 samples, 0.18%)</title><rect x="62.2566%" y="597" width="0.1777%" height="15" fill="rgb(253,155,4)" fg:x="88974" fg:w="254"/><text x="62.5066%" y="607.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (246 samples, 0.17%)</title><rect x="62.2622%" y="581" width="0.1721%" height="15" fill="rgb(222,185,37)" fg:x="88982" fg:w="246"/><text x="62.5122%" y="591.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (246 samples, 0.17%)</title><rect x="62.2622%" y="565" width="0.1721%" height="15" fill="rgb(251,177,13)" fg:x="88982" fg:w="246"/><text x="62.5122%" y="575.50"></text></g><g><title>hashbrown::map::make_hash (851 samples, 0.60%)</title><rect x="61.8417%" y="693" width="0.5955%" height="15" fill="rgb(250,179,40)" fg:x="88381" fg:w="851"/><text x="62.0917%" y="703.50"></text></g><g><title>core::hash::BuildHasher::hash_one (848 samples, 0.59%)</title><rect x="61.8438%" y="677" width="0.5934%" height="15" fill="rgb(242,44,2)" fg:x="88384" fg:w="848"/><text x="62.0938%" y="687.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (266 samples, 0.19%)</title><rect x="62.2510%" y="661" width="0.1861%" height="15" fill="rgb(216,177,13)" fg:x="88966" fg:w="266"/><text x="62.5010%" y="671.50"></text></g><g><title>&lt;coldbrew::runtime::ProgramCounter as core::hash::Hash&gt;::hash (264 samples, 0.18%)</title><rect x="62.2524%" y="645" width="0.1847%" height="15" fill="rgb(216,106,43)" fg:x="88968" fg:w="264"/><text x="62.5024%" y="655.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for usize&gt;::hash (261 samples, 0.18%)</title><rect x="62.2545%" y="629" width="0.1826%" height="15" fill="rgb(216,183,2)" fg:x="88971" fg:w="261"/><text x="62.5045%" y="639.50"></text></g><g><title>core::hash::Hasher::write_usize (258 samples, 0.18%)</title><rect x="62.2566%" y="613" width="0.1805%" height="15" fill="rgb(249,75,3)" fg:x="88974" fg:w="258"/><text x="62.5066%" y="623.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ref (23 samples, 0.02%)</title><rect x="62.4420%" y="677" width="0.0161%" height="15" fill="rgb(219,67,39)" fg:x="89239" fg:w="23"/><text x="62.6920%" y="687.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ptr (23 samples, 0.02%)</title><rect x="62.4420%" y="661" width="0.0161%" height="15" fill="rgb(253,228,2)" fg:x="89239" fg:w="23"/><text x="62.6920%" y="671.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (16 samples, 0.01%)</title><rect x="62.4469%" y="645" width="0.0112%" height="15" fill="rgb(235,138,27)" fg:x="89246" fg:w="16"/><text x="62.6969%" y="655.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::from_base_index (28 samples, 0.02%)</title><rect x="62.4742%" y="645" width="0.0196%" height="15" fill="rgb(236,97,51)" fg:x="89285" fg:w="28"/><text x="62.7242%" y="655.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::bucket (35 samples, 0.02%)</title><rect x="62.4707%" y="661" width="0.0245%" height="15" fill="rgb(240,80,30)" fg:x="89280" fg:w="35"/><text x="62.7207%" y="671.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (18 samples, 0.01%)</title><rect x="62.4952%" y="661" width="0.0126%" height="15" fill="rgb(230,178,19)" fg:x="89315" fg:w="18"/><text x="62.7452%" y="671.50"></text></g><g><title>core::num::nonzero::NonZeroU16::new (26 samples, 0.02%)</title><rect x="62.6547%" y="613" width="0.0182%" height="15" fill="rgb(210,190,27)" fg:x="89543" fg:w="26"/><text x="62.9047%" y="623.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (86 samples, 0.06%)</title><rect x="62.6295%" y="629" width="0.0602%" height="15" fill="rgb(222,107,31)" fg:x="89507" fg:w="86"/><text x="62.8795%" y="639.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::nonzero_trailing_zeros (24 samples, 0.02%)</title><rect x="62.6729%" y="613" width="0.0168%" height="15" fill="rgb(216,127,34)" fg:x="89569" fg:w="24"/><text x="62.9229%" y="623.50"></text></g><g><title>core::num::nonzero::NonZeroU16::trailing_zeros (22 samples, 0.02%)</title><rect x="62.6743%" y="597" width="0.0154%" height="15" fill="rgb(234,116,52)" fg:x="89571" fg:w="22"/><text x="62.9243%" y="607.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (143 samples, 0.10%)</title><rect x="62.5931%" y="645" width="0.1001%" height="15" fill="rgb(222,124,15)" fg:x="89455" fg:w="143"/><text x="62.8431%" y="655.50"></text></g><g><title>hashbrown::map::equivalent_key::{{closure}} (81 samples, 0.06%)</title><rect x="62.7121%" y="629" width="0.0567%" height="15" fill="rgb(231,179,28)" fg:x="89625" fg:w="81"/><text x="62.9621%" y="639.50"></text></g><g><title>&lt;Q as hashbrown::Equivalent&lt;K&gt;&gt;::equivalent (70 samples, 0.05%)</title><rect x="62.7198%" y="613" width="0.0490%" height="15" fill="rgb(226,93,45)" fg:x="89636" fg:w="70"/><text x="62.9698%" y="623.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (57 samples, 0.04%)</title><rect x="62.7289%" y="597" width="0.0399%" height="15" fill="rgb(215,8,51)" fg:x="89649" fg:w="57"/><text x="62.9789%" y="607.50"></text></g><g><title>&lt;coldbrew::runtime::ProgramCounter as core::cmp::PartialEq&gt;::eq (54 samples, 0.04%)</title><rect x="62.7310%" y="581" width="0.0378%" height="15" fill="rgb(223,106,5)" fg:x="89652" fg:w="54"/><text x="62.9810%" y="591.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ptr (20 samples, 0.01%)</title><rect x="62.7688%" y="613" width="0.0140%" height="15" fill="rgb(250,191,5)" fg:x="89706" fg:w="20"/><text x="63.0188%" y="623.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ref (28 samples, 0.02%)</title><rect x="62.7688%" y="629" width="0.0196%" height="15" fill="rgb(242,132,44)" fg:x="89706" fg:w="28"/><text x="63.0188%" y="639.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::from_base_index (58 samples, 0.04%)</title><rect x="62.7926%" y="613" width="0.0406%" height="15" fill="rgb(251,152,29)" fg:x="89740" fg:w="58"/><text x="63.0426%" y="623.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::{{closure}} (206 samples, 0.14%)</title><rect x="62.6932%" y="645" width="0.1441%" height="15" fill="rgb(218,179,5)" fg:x="89598" fg:w="206"/><text x="62.9432%" y="655.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::bucket (70 samples, 0.05%)</title><rect x="62.7884%" y="629" width="0.0490%" height="15" fill="rgb(227,67,19)" fg:x="89734" fg:w="70"/><text x="63.0384%" y="639.50"></text></g><g><title>hashbrown::raw::sse2::Group::load (89 samples, 0.06%)</title><rect x="62.8395%" y="645" width="0.0623%" height="15" fill="rgb(233,119,31)" fg:x="89807" fg:w="89"/><text x="63.0895%" y="655.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (72 samples, 0.05%)</title><rect x="62.8513%" y="629" width="0.0504%" height="15" fill="rgb(241,120,22)" fg:x="89824" fg:w="72"/><text x="63.1013%" y="639.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_cmpeq_epi8 (35 samples, 0.02%)</title><rect x="62.9395%" y="629" width="0.0245%" height="15" fill="rgb(224,102,30)" fg:x="89950" fg:w="35"/><text x="63.1895%" y="639.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (91 samples, 0.06%)</title><rect x="62.9640%" y="629" width="0.0637%" height="15" fill="rgb(210,164,37)" fg:x="89985" fg:w="91"/><text x="63.2140%" y="639.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::contains_key (1,770 samples, 1.24%)</title><rect x="61.8382%" y="741" width="1.2385%" height="15" fill="rgb(226,191,16)" fg:x="88376" fg:w="1770"/><text x="62.0882%" y="751.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::contains_key (1,770 samples, 1.24%)</title><rect x="61.8382%" y="725" width="1.2385%" height="15" fill="rgb(214,40,45)" fg:x="88376" fg:w="1770"/><text x="62.0882%" y="735.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (1,766 samples, 1.24%)</title><rect x="61.8410%" y="709" width="1.2357%" height="15" fill="rgb(244,29,26)" fg:x="88380" fg:w="1766"/><text x="62.0910%" y="719.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get (914 samples, 0.64%)</title><rect x="62.4371%" y="693" width="0.6395%" height="15" fill="rgb(216,16,5)" fg:x="89232" fg:w="914"/><text x="62.6871%" y="703.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (884 samples, 0.62%)</title><rect x="62.4581%" y="677" width="0.6185%" height="15" fill="rgb(249,76,35)" fg:x="89262" fg:w="884"/><text x="62.7081%" y="687.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::find_inner (813 samples, 0.57%)</title><rect x="62.5078%" y="661" width="0.5689%" height="15" fill="rgb(207,11,44)" fg:x="89333" fg:w="813"/><text x="62.7578%" y="671.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (250 samples, 0.17%)</title><rect x="62.9017%" y="645" width="0.1749%" height="15" fill="rgb(228,190,49)" fg:x="89896" fg:w="250"/><text x="63.1517%" y="655.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_set1_epi8 (70 samples, 0.05%)</title><rect x="63.0277%" y="629" width="0.0490%" height="15" fill="rgb(214,173,12)" fg:x="90076" fg:w="70"/><text x="63.2777%" y="639.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_set_epi8 (70 samples, 0.05%)</title><rect x="63.0277%" y="613" width="0.0490%" height="15" fill="rgb(218,26,35)" fg:x="90076" fg:w="70"/><text x="63.2777%" y="623.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (84 samples, 0.06%)</title><rect x="63.1074%" y="613" width="0.0588%" height="15" fill="rgb(220,200,19)" fg:x="90190" fg:w="84"/><text x="63.3574%" y="623.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::finish (362 samples, 0.25%)</title><rect x="63.0962%" y="661" width="0.2533%" height="15" fill="rgb(239,95,49)" fg:x="90174" fg:w="362"/><text x="63.3462%" y="671.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (362 samples, 0.25%)</title><rect x="63.0962%" y="645" width="0.2533%" height="15" fill="rgb(235,85,53)" fg:x="90174" fg:w="362"/><text x="63.3462%" y="655.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (362 samples, 0.25%)</title><rect x="63.0962%" y="629" width="0.2533%" height="15" fill="rgb(233,133,31)" fg:x="90174" fg:w="362"/><text x="63.3462%" y="639.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (262 samples, 0.18%)</title><rect x="63.1662%" y="613" width="0.1833%" height="15" fill="rgb(218,25,20)" fg:x="90274" fg:w="262"/><text x="63.4162%" y="623.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (68 samples, 0.05%)</title><rect x="63.3020%" y="597" width="0.0476%" height="15" fill="rgb(252,210,38)" fg:x="90468" fg:w="68"/><text x="63.5520%" y="607.50"></text></g><g><title>__memcpy_avx_unaligned_erms (56 samples, 0.04%)</title><rect x="63.3516%" y="645" width="0.0392%" height="15" fill="rgb(242,134,21)" fg:x="90539" fg:w="56"/><text x="63.6016%" y="655.50"></text></g><g><title>__memcpy_avx_unaligned_erms (40 samples, 0.03%)</title><rect x="63.3915%" y="629" width="0.0280%" height="15" fill="rgb(213,28,48)" fg:x="90596" fg:w="40"/><text x="63.6415%" y="639.50"></text></g><g><title>__memcpy_avx_unaligned_erms (67 samples, 0.05%)</title><rect x="63.4286%" y="613" width="0.0469%" height="15" fill="rgb(250,196,2)" fg:x="90649" fg:w="67"/><text x="63.6786%" y="623.50"></text></g><g><title>&lt;std::collections::hash::map::RandomState as core::hash::BuildHasher&gt;::build_hasher (194 samples, 0.14%)</title><rect x="63.3495%" y="661" width="0.1357%" height="15" fill="rgb(227,5,17)" fg:x="90536" fg:w="194"/><text x="63.5995%" y="671.50"></text></g><g><title>core::hash::sip::SipHasher13::new_with_keys (134 samples, 0.09%)</title><rect x="63.3915%" y="645" width="0.0938%" height="15" fill="rgb(221,226,24)" fg:x="90596" fg:w="134"/><text x="63.6415%" y="655.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::new_with_keys (92 samples, 0.06%)</title><rect x="63.4209%" y="629" width="0.0644%" height="15" fill="rgb(211,5,48)" fg:x="90638" fg:w="92"/><text x="63.6709%" y="639.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (25 samples, 0.02%)</title><rect x="63.5798%" y="533" width="0.0175%" height="15" fill="rgb(219,150,6)" fg:x="90865" fg:w="25"/><text x="63.8298%" y="543.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (100 samples, 0.07%)</title><rect x="63.5301%" y="549" width="0.0700%" height="15" fill="rgb(251,46,16)" fg:x="90794" fg:w="100"/><text x="63.7801%" y="559.50"></text></g><g><title>core::hash::sip::u8to64_le (26 samples, 0.02%)</title><rect x="63.6007%" y="549" width="0.0182%" height="15" fill="rgb(220,204,40)" fg:x="90895" fg:w="26"/><text x="63.8507%" y="559.50"></text></g><g><title>hashbrown::map::make_hash (776 samples, 0.54%)</title><rect x="63.0871%" y="693" width="0.5430%" height="15" fill="rgb(211,85,2)" fg:x="90161" fg:w="776"/><text x="63.3371%" y="703.50"></text></g><g><title>core::hash::BuildHasher::hash_one (774 samples, 0.54%)</title><rect x="63.0885%" y="677" width="0.5416%" height="15" fill="rgb(229,17,7)" fg:x="90163" fg:w="774"/><text x="63.3385%" y="687.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (207 samples, 0.14%)</title><rect x="63.4853%" y="661" width="0.1448%" height="15" fill="rgb(239,72,28)" fg:x="90730" fg:w="207"/><text x="63.7353%" y="671.50"></text></g><g><title>&lt;coldbrew::runtime::ProgramCounter as core::hash::Hash&gt;::hash (206 samples, 0.14%)</title><rect x="63.4860%" y="645" width="0.1441%" height="15" fill="rgb(230,47,54)" fg:x="90731" fg:w="206"/><text x="63.7360%" y="655.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for usize&gt;::hash (204 samples, 0.14%)</title><rect x="63.4874%" y="629" width="0.1427%" height="15" fill="rgb(214,50,8)" fg:x="90733" fg:w="204"/><text x="63.7374%" y="639.50"></text></g><g><title>core::hash::Hasher::write_usize (204 samples, 0.14%)</title><rect x="63.4874%" y="613" width="0.1427%" height="15" fill="rgb(216,198,43)" fg:x="90733" fg:w="204"/><text x="63.7374%" y="623.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (204 samples, 0.14%)</title><rect x="63.4874%" y="597" width="0.1427%" height="15" fill="rgb(234,20,35)" fg:x="90733" fg:w="204"/><text x="63.7374%" y="607.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (200 samples, 0.14%)</title><rect x="63.4902%" y="581" width="0.1399%" height="15" fill="rgb(254,45,19)" fg:x="90737" fg:w="200"/><text x="63.7402%" y="591.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (200 samples, 0.14%)</title><rect x="63.4902%" y="565" width="0.1399%" height="15" fill="rgb(219,14,44)" fg:x="90737" fg:w="200"/><text x="63.7402%" y="575.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_mut (20 samples, 0.01%)</title><rect x="63.6336%" y="677" width="0.0140%" height="15" fill="rgb(217,220,26)" fg:x="90942" fg:w="20"/><text x="63.8836%" y="687.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ptr (20 samples, 0.01%)</title><rect x="63.6336%" y="661" width="0.0140%" height="15" fill="rgb(213,158,28)" fg:x="90942" fg:w="20"/><text x="63.8836%" y="671.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::from_base_index (19 samples, 0.01%)</title><rect x="63.6644%" y="645" width="0.0133%" height="15" fill="rgb(252,51,52)" fg:x="90986" fg:w="19"/><text x="63.9144%" y="655.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::bucket (31 samples, 0.02%)</title><rect x="63.6595%" y="661" width="0.0217%" height="15" fill="rgb(246,89,16)" fg:x="90979" fg:w="31"/><text x="63.9095%" y="671.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (21 samples, 0.01%)</title><rect x="63.6812%" y="661" width="0.0147%" height="15" fill="rgb(216,158,49)" fg:x="91010" fg:w="21"/><text x="63.9312%" y="671.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMask as core::iter::traits::collect::IntoIterator&gt;::into_iter (17 samples, 0.01%)</title><rect x="63.7792%" y="645" width="0.0119%" height="15" fill="rgb(236,107,19)" fg:x="91150" fg:w="17"/><text x="64.0292%" y="655.50"></text></g><g><title>core::num::nonzero::NonZeroU16::new (17 samples, 0.01%)</title><rect x="63.8442%" y="613" width="0.0119%" height="15" fill="rgb(228,185,30)" fg:x="91243" fg:w="17"/><text x="64.0942%" y="623.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (71 samples, 0.05%)</title><rect x="63.8233%" y="629" width="0.0497%" height="15" fill="rgb(246,134,8)" fg:x="91213" fg:w="71"/><text x="64.0733%" y="639.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::nonzero_trailing_zeros (24 samples, 0.02%)</title><rect x="63.8561%" y="613" width="0.0168%" height="15" fill="rgb(214,143,50)" fg:x="91260" fg:w="24"/><text x="64.1061%" y="623.50"></text></g><g><title>core::num::nonzero::NonZeroU16::trailing_zeros (17 samples, 0.01%)</title><rect x="63.8610%" y="597" width="0.0119%" height="15" fill="rgb(228,75,8)" fg:x="91267" fg:w="17"/><text x="64.1110%" y="607.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (120 samples, 0.08%)</title><rect x="63.7911%" y="645" width="0.0840%" height="15" fill="rgb(207,175,4)" fg:x="91167" fg:w="120"/><text x="64.0411%" y="655.50"></text></g><g><title>hashbrown::map::equivalent_key::{{closure}} (78 samples, 0.05%)</title><rect x="63.8883%" y="629" width="0.0546%" height="15" fill="rgb(205,108,24)" fg:x="91306" fg:w="78"/><text x="64.1383%" y="639.50"></text></g><g><title>&lt;Q as hashbrown::Equivalent&lt;K&gt;&gt;::equivalent (70 samples, 0.05%)</title><rect x="63.8939%" y="613" width="0.0490%" height="15" fill="rgb(244,120,49)" fg:x="91314" fg:w="70"/><text x="64.1439%" y="623.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (56 samples, 0.04%)</title><rect x="63.9037%" y="597" width="0.0392%" height="15" fill="rgb(223,47,38)" fg:x="91328" fg:w="56"/><text x="64.1537%" y="607.50"></text></g><g><title>&lt;coldbrew::runtime::ProgramCounter as core::cmp::PartialEq&gt;::eq (53 samples, 0.04%)</title><rect x="63.9058%" y="581" width="0.0371%" height="15" fill="rgb(229,179,11)" fg:x="91331" fg:w="53"/><text x="64.1558%" y="591.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ref (26 samples, 0.02%)</title><rect x="63.9429%" y="629" width="0.0182%" height="15" fill="rgb(231,122,1)" fg:x="91384" fg:w="26"/><text x="64.1929%" y="639.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::{{closure}} (183 samples, 0.13%)</title><rect x="63.8750%" y="645" width="0.1280%" height="15" fill="rgb(245,119,9)" fg:x="91287" fg:w="183"/><text x="64.1250%" y="655.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::bucket (60 samples, 0.04%)</title><rect x="63.9611%" y="629" width="0.0420%" height="15" fill="rgb(241,163,25)" fg:x="91410" fg:w="60"/><text x="64.2111%" y="639.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::from_base_index (49 samples, 0.03%)</title><rect x="63.9688%" y="613" width="0.0343%" height="15" fill="rgb(217,214,3)" fg:x="91421" fg:w="49"/><text x="64.2188%" y="623.50"></text></g><g><title>hashbrown::raw::sse2::Group::load (76 samples, 0.05%)</title><rect x="64.0101%" y="645" width="0.0532%" height="15" fill="rgb(240,86,28)" fg:x="91480" fg:w="76"/><text x="64.2601%" y="655.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (66 samples, 0.05%)</title><rect x="64.0171%" y="629" width="0.0462%" height="15" fill="rgb(215,47,9)" fg:x="91490" fg:w="66"/><text x="64.2671%" y="639.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_cmpeq_epi8 (35 samples, 0.02%)</title><rect x="64.0947%" y="629" width="0.0245%" height="15" fill="rgb(252,25,45)" fg:x="91601" fg:w="35"/><text x="64.3447%" y="639.50"></text></g><g><title>core::core_arch::x86::m128iExt::as_i8x16 (15 samples, 0.01%)</title><rect x="64.1087%" y="613" width="0.0105%" height="15" fill="rgb(251,164,9)" fg:x="91621" fg:w="15"/><text x="64.3587%" y="623.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (108 samples, 0.08%)</title><rect x="64.1192%" y="629" width="0.0756%" height="15" fill="rgb(233,194,0)" fg:x="91636" fg:w="108"/><text x="64.3692%" y="639.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get_mut (1,688 samples, 1.18%)</title><rect x="63.0767%" y="741" width="1.1811%" height="15" fill="rgb(249,111,24)" fg:x="90146" fg:w="1688"/><text x="63.3267%" y="751.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_mut (1,688 samples, 1.18%)</title><rect x="63.0767%" y="725" width="1.1811%" height="15" fill="rgb(250,223,3)" fg:x="90146" fg:w="1688"/><text x="63.3267%" y="735.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner_mut (1,680 samples, 1.18%)</title><rect x="63.0823%" y="709" width="1.1755%" height="15" fill="rgb(236,178,37)" fg:x="90154" fg:w="1680"/><text x="63.3323%" y="719.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get_mut (897 samples, 0.63%)</title><rect x="63.6301%" y="693" width="0.6276%" height="15" fill="rgb(241,158,50)" fg:x="90937" fg:w="897"/><text x="63.8801%" y="703.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (872 samples, 0.61%)</title><rect x="63.6476%" y="677" width="0.6102%" height="15" fill="rgb(213,121,41)" fg:x="90962" fg:w="872"/><text x="63.8976%" y="687.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::find_inner (803 samples, 0.56%)</title><rect x="63.6959%" y="661" width="0.5619%" height="15" fill="rgb(240,92,3)" fg:x="91031" fg:w="803"/><text x="63.9459%" y="671.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (278 samples, 0.19%)</title><rect x="64.0633%" y="645" width="0.1945%" height="15" fill="rgb(205,123,3)" fg:x="91556" fg:w="278"/><text x="64.3133%" y="655.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_set1_epi8 (90 samples, 0.06%)</title><rect x="64.1948%" y="629" width="0.0630%" height="15" fill="rgb(205,97,47)" fg:x="91744" fg:w="90"/><text x="64.4448%" y="639.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_set_epi8 (90 samples, 0.06%)</title><rect x="64.1948%" y="613" width="0.0630%" height="15" fill="rgb(247,152,14)" fg:x="91744" fg:w="90"/><text x="64.4448%" y="623.50"></text></g><g><title>__memcpy_avx_unaligned_erms (36 samples, 0.03%)</title><rect x="64.2585%" y="725" width="0.0252%" height="15" fill="rgb(248,195,53)" fg:x="91835" fg:w="36"/><text x="64.5085%" y="735.50"></text></g><g><title>__memcpy_avx_unaligned_erms (50 samples, 0.03%)</title><rect x="64.2872%" y="709" width="0.0350%" height="15" fill="rgb(226,201,16)" fg:x="91876" fg:w="50"/><text x="64.5372%" y="719.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (16 samples, 0.01%)</title><rect x="64.3942%" y="677" width="0.0112%" height="15" fill="rgb(205,98,0)" fg:x="92029" fg:w="16"/><text x="64.6442%" y="687.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::from_base_index (66 samples, 0.05%)</title><rect x="64.3620%" y="693" width="0.0462%" height="15" fill="rgb(214,191,48)" fg:x="91983" fg:w="66"/><text x="64.6120%" y="703.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMask as core::iter::traits::collect::IntoIterator&gt;::into_iter (23 samples, 0.02%)</title><rect x="64.4460%" y="677" width="0.0161%" height="15" fill="rgb(237,112,39)" fg:x="92103" fg:w="23"/><text x="64.6960%" y="687.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::add (34 samples, 0.02%)</title><rect x="64.4621%" y="677" width="0.0238%" height="15" fill="rgb(247,203,27)" fg:x="92126" fg:w="34"/><text x="64.7121%" y="687.50"></text></g><g><title>hashbrown::raw::sse2::Group::load_aligned (63 samples, 0.04%)</title><rect x="64.4859%" y="677" width="0.0441%" height="15" fill="rgb(235,124,28)" fg:x="92160" fg:w="63"/><text x="64.7359%" y="687.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_load_si128 (49 samples, 0.03%)</title><rect x="64.4957%" y="661" width="0.0343%" height="15" fill="rgb(208,207,46)" fg:x="92174" fg:w="49"/><text x="64.7457%" y="671.50"></text></g><g><title>core::core_arch::simd::i8x16::splat (64 samples, 0.04%)</title><rect x="64.7266%" y="629" width="0.0448%" height="15" fill="rgb(234,176,4)" fg:x="92504" fg:w="64"/><text x="64.9766%" y="639.50"></text></g><g><title>hashbrown::raw::RawIterRange&lt;T&gt;::new (555 samples, 0.39%)</title><rect x="64.4082%" y="693" width="0.3883%" height="15" fill="rgb(230,133,28)" fg:x="92049" fg:w="555"/><text x="64.6582%" y="703.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_full (381 samples, 0.27%)</title><rect x="64.5300%" y="677" width="0.2666%" height="15" fill="rgb(211,137,40)" fg:x="92223" fg:w="381"/><text x="64.7800%" y="687.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_empty_or_deleted (364 samples, 0.25%)</title><rect x="64.5419%" y="661" width="0.2547%" height="15" fill="rgb(254,35,13)" fg:x="92240" fg:w="364"/><text x="64.7919%" y="671.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (362 samples, 0.25%)</title><rect x="64.5433%" y="645" width="0.2533%" height="15" fill="rgb(225,49,51)" fg:x="92242" fg:w="362"/><text x="64.7933%" y="655.50"></text></g><g><title>core::core_arch::x86::m128iExt::as_i8x16 (36 samples, 0.03%)</title><rect x="64.7714%" y="629" width="0.0252%" height="15" fill="rgb(251,10,15)" fg:x="92568" fg:w="36"/><text x="65.0214%" y="639.50"></text></g><g><title>coldbrew::jit::JitCache::execute (9,068 samples, 6.35%)</title><rect x="58.4557%" y="757" width="6.3450%" height="15" fill="rgb(228,207,15)" fg:x="83542" fg:w="9068"/><text x="58.7057%" y="767.50">coldbrew..</text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::iter (776 samples, 0.54%)</title><rect x="64.2578%" y="741" width="0.5430%" height="15" fill="rgb(241,99,19)" fg:x="91834" fg:w="776"/><text x="64.5078%" y="751.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::iter (734 samples, 0.51%)</title><rect x="64.2872%" y="725" width="0.5136%" height="15" fill="rgb(207,104,49)" fg:x="91876" fg:w="734"/><text x="64.5372%" y="735.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::iter (683 samples, 0.48%)</title><rect x="64.3228%" y="709" width="0.4779%" height="15" fill="rgb(234,99,18)" fg:x="91927" fg:w="683"/><text x="64.5728%" y="719.50"></text></g><g><title>core::option::Option&lt;T&gt;::is_some (53 samples, 0.04%)</title><rect x="64.8378%" y="709" width="0.0371%" height="15" fill="rgb(213,191,49)" fg:x="92663" fg:w="53"/><text x="65.0878%" y="719.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (106 samples, 0.07%)</title><rect x="65.2577%" y="597" width="0.0742%" height="15" fill="rgb(210,226,19)" fg:x="93263" fg:w="106"/><text x="65.5077%" y="607.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (349 samples, 0.24%)</title><rect x="65.0883%" y="613" width="0.2442%" height="15" fill="rgb(229,97,18)" fg:x="93021" fg:w="349"/><text x="65.3383%" y="623.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (523 samples, 0.37%)</title><rect x="66.3268%" y="597" width="0.3660%" height="15" fill="rgb(211,167,15)" fg:x="94791" fg:w="523"/><text x="66.5768%" y="607.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::finish (2,432 samples, 1.70%)</title><rect x="65.0149%" y="661" width="1.7017%" height="15" fill="rgb(210,169,34)" fg:x="92916" fg:w="2432"/><text x="65.2649%" y="671.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (2,432 samples, 1.70%)</title><rect x="65.0149%" y="645" width="1.7017%" height="15" fill="rgb(241,121,31)" fg:x="92916" fg:w="2432"/><text x="65.2649%" y="655.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (2,432 samples, 1.70%)</title><rect x="65.0149%" y="629" width="1.7017%" height="15" fill="rgb(232,40,11)" fg:x="92916" fg:w="2432"/><text x="65.2649%" y="639.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (1,978 samples, 1.38%)</title><rect x="65.3325%" y="613" width="1.3840%" height="15" fill="rgb(205,86,26)" fg:x="93370" fg:w="1978"/><text x="65.5825%" y="623.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (34 samples, 0.02%)</title><rect x="66.6928%" y="597" width="0.0238%" height="15" fill="rgb(231,126,28)" fg:x="95314" fg:w="34"/><text x="66.9428%" y="607.50"></text></g><g><title>__memcpy_avx_unaligned_erms (442 samples, 0.31%)</title><rect x="66.7446%" y="645" width="0.3093%" height="15" fill="rgb(219,221,18)" fg:x="95388" fg:w="442"/><text x="66.9946%" y="655.50"></text></g><g><title>_init (27 samples, 0.02%)</title><rect x="67.0538%" y="645" width="0.0189%" height="15" fill="rgb(211,40,0)" fg:x="95830" fg:w="27"/><text x="67.3038%" y="655.50"></text></g><g><title>__memcpy_avx_unaligned_erms (460 samples, 0.32%)</title><rect x="67.0727%" y="629" width="0.3219%" height="15" fill="rgb(239,85,43)" fg:x="95857" fg:w="460"/><text x="67.3227%" y="639.50"></text></g><g><title>_init (23 samples, 0.02%)</title><rect x="67.3946%" y="629" width="0.0161%" height="15" fill="rgb(231,55,21)" fg:x="96317" fg:w="23"/><text x="67.6446%" y="639.50"></text></g><g><title>__memcpy_avx_unaligned_erms (576 samples, 0.40%)</title><rect x="67.5038%" y="613" width="0.4030%" height="15" fill="rgb(225,184,43)" fg:x="96473" fg:w="576"/><text x="67.7538%" y="623.50"></text></g><g><title>_init (23 samples, 0.02%)</title><rect x="67.9068%" y="613" width="0.0161%" height="15" fill="rgb(251,158,41)" fg:x="97049" fg:w="23"/><text x="68.1568%" y="623.50"></text></g><g><title>&lt;std::collections::hash::map::RandomState as core::hash::BuildHasher&gt;::build_hasher (1,790 samples, 1.25%)</title><rect x="66.7166%" y="661" width="1.2525%" height="15" fill="rgb(234,159,37)" fg:x="95348" fg:w="1790"/><text x="66.9666%" y="671.50"></text></g><g><title>core::hash::sip::SipHasher13::new_with_keys (1,281 samples, 0.90%)</title><rect x="67.0727%" y="645" width="0.8963%" height="15" fill="rgb(216,204,22)" fg:x="95857" fg:w="1281"/><text x="67.3227%" y="655.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::new_with_keys (798 samples, 0.56%)</title><rect x="67.4107%" y="629" width="0.5584%" height="15" fill="rgb(214,17,3)" fg:x="96340" fg:w="798"/><text x="67.6607%" y="639.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::reset (66 samples, 0.05%)</title><rect x="67.9229%" y="613" width="0.0462%" height="15" fill="rgb(212,111,17)" fg:x="97072" fg:w="66"/><text x="68.1729%" y="623.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (215 samples, 0.15%)</title><rect x="68.8689%" y="533" width="0.1504%" height="15" fill="rgb(221,157,24)" fg:x="98424" fg:w="215"/><text x="69.1189%" y="543.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (880 samples, 0.62%)</title><rect x="68.4386%" y="549" width="0.6158%" height="15" fill="rgb(252,16,13)" fg:x="97809" fg:w="880"/><text x="68.6886%" y="559.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (50 samples, 0.03%)</title><rect x="69.0193%" y="533" width="0.0350%" height="15" fill="rgb(221,62,2)" fg:x="98639" fg:w="50"/><text x="69.2693%" y="543.50"></text></g><g><title>core::hash::sip::u8to64_le (257 samples, 0.18%)</title><rect x="69.0543%" y="549" width="0.1798%" height="15" fill="rgb(247,87,22)" fg:x="98689" fg:w="257"/><text x="69.3043%" y="559.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (37 samples, 0.03%)</title><rect x="69.2083%" y="533" width="0.0259%" height="15" fill="rgb(215,73,9)" fg:x="98909" fg:w="37"/><text x="69.4583%" y="543.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (64 samples, 0.04%)</title><rect x="69.2342%" y="549" width="0.0448%" height="15" fill="rgb(207,175,33)" fg:x="98946" fg:w="64"/><text x="69.4842%" y="559.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::add (29 samples, 0.02%)</title><rect x="69.2789%" y="549" width="0.0203%" height="15" fill="rgb(243,129,54)" fg:x="99010" fg:w="29"/><text x="69.5289%" y="559.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (1,880 samples, 1.32%)</title><rect x="68.0195%" y="597" width="1.3155%" height="15" fill="rgb(227,119,45)" fg:x="97210" fg:w="1880"/><text x="68.2695%" y="607.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (1,853 samples, 1.30%)</title><rect x="68.0383%" y="581" width="1.2966%" height="15" fill="rgb(205,109,36)" fg:x="97237" fg:w="1853"/><text x="68.2883%" y="591.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1,853 samples, 1.30%)</title><rect x="68.0383%" y="565" width="1.2966%" height="15" fill="rgb(205,6,39)" fg:x="97237" fg:w="1853"/><text x="68.2883%" y="575.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::as_ptr (51 samples, 0.04%)</title><rect x="69.2992%" y="549" width="0.0357%" height="15" fill="rgb(221,32,16)" fg:x="99039" fg:w="51"/><text x="69.5492%" y="559.50"></text></g><g><title>hashbrown::map::make_hash (6,357 samples, 4.45%)</title><rect x="64.9127%" y="693" width="4.4481%" height="15" fill="rgb(228,144,50)" fg:x="92770" fg:w="6357"/><text x="65.1627%" y="703.50">hashb..</text></g><g><title>core::hash::BuildHasher::hash_one (6,330 samples, 4.43%)</title><rect x="64.9316%" y="677" width="4.4292%" height="15" fill="rgb(229,201,53)" fg:x="92797" fg:w="6330"/><text x="65.1816%" y="687.50">core:..</text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (1,989 samples, 1.39%)</title><rect x="67.9691%" y="661" width="1.3917%" height="15" fill="rgb(249,153,27)" fg:x="97138" fg:w="1989"/><text x="68.2191%" y="671.50"></text></g><g><title>&lt;coldbrew::runtime::ProgramCounter as core::hash::Hash&gt;::hash (1,958 samples, 1.37%)</title><rect x="67.9908%" y="645" width="1.3700%" height="15" fill="rgb(227,106,25)" fg:x="97169" fg:w="1958"/><text x="68.2408%" y="655.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for usize&gt;::hash (1,947 samples, 1.36%)</title><rect x="67.9985%" y="629" width="1.3623%" height="15" fill="rgb(230,65,29)" fg:x="97180" fg:w="1947"/><text x="68.2485%" y="639.50"></text></g><g><title>core::hash::Hasher::write_usize (1,917 samples, 1.34%)</title><rect x="68.0195%" y="613" width="1.3414%" height="15" fill="rgb(221,57,46)" fg:x="97210" fg:w="1917"/><text x="68.2695%" y="623.50"></text></g><g><title>core::num::&lt;impl usize&gt;::to_ne_bytes (37 samples, 0.03%)</title><rect x="69.3349%" y="597" width="0.0259%" height="15" fill="rgb(229,161,17)" fg:x="99090" fg:w="37"/><text x="69.5849%" y="607.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ref (42 samples, 0.03%)</title><rect x="69.4224%" y="677" width="0.0294%" height="15" fill="rgb(222,213,11)" fg:x="99215" fg:w="42"/><text x="69.6724%" y="687.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ptr (42 samples, 0.03%)</title><rect x="69.4224%" y="661" width="0.0294%" height="15" fill="rgb(235,35,13)" fg:x="99215" fg:w="42"/><text x="69.6724%" y="671.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (35 samples, 0.02%)</title><rect x="69.4273%" y="645" width="0.0245%" height="15" fill="rgb(233,158,34)" fg:x="99222" fg:w="35"/><text x="69.6773%" y="655.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (28 samples, 0.02%)</title><rect x="69.4322%" y="629" width="0.0196%" height="15" fill="rgb(215,151,48)" fg:x="99229" fg:w="28"/><text x="69.6822%" y="639.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::from_base_index (25 samples, 0.02%)</title><rect x="69.5469%" y="645" width="0.0175%" height="15" fill="rgb(229,84,14)" fg:x="99393" fg:w="25"/><text x="69.7969%" y="655.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::bucket (73 samples, 0.05%)</title><rect x="69.5161%" y="661" width="0.0511%" height="15" fill="rgb(229,68,14)" fg:x="99349" fg:w="73"/><text x="69.7661%" y="671.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (86 samples, 0.06%)</title><rect x="69.5672%" y="661" width="0.0602%" height="15" fill="rgb(243,106,26)" fg:x="99422" fg:w="86"/><text x="69.8172%" y="671.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMask as core::iter::traits::collect::IntoIterator&gt;::into_iter (137 samples, 0.10%)</title><rect x="70.0906%" y="645" width="0.0959%" height="15" fill="rgb(206,45,38)" fg:x="100170" fg:w="137"/><text x="70.3406%" y="655.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::ops::try_trait::Try&gt;::branch (75 samples, 0.05%)</title><rect x="70.3012%" y="629" width="0.0525%" height="15" fill="rgb(226,6,15)" fg:x="100471" fg:w="75"/><text x="70.5512%" y="639.50"></text></g><g><title>core::num::nonzero::NonZeroU16::new (36 samples, 0.03%)</title><rect x="70.4139%" y="613" width="0.0252%" height="15" fill="rgb(232,22,54)" fg:x="100632" fg:w="36"/><text x="70.6639%" y="623.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (141 samples, 0.10%)</title><rect x="70.3537%" y="629" width="0.0987%" height="15" fill="rgb(229,222,32)" fg:x="100546" fg:w="141"/><text x="70.6037%" y="639.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::nonzero_trailing_zeros (19 samples, 0.01%)</title><rect x="70.4391%" y="613" width="0.0133%" height="15" fill="rgb(228,62,29)" fg:x="100668" fg:w="19"/><text x="70.6891%" y="623.50"></text></g><g><title>core::num::nonzero::NonZeroU16::trailing_zeros (15 samples, 0.01%)</title><rect x="70.4419%" y="597" width="0.0105%" height="15" fill="rgb(251,103,34)" fg:x="100672" fg:w="15"/><text x="70.6919%" y="607.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (385 samples, 0.27%)</title><rect x="70.1865%" y="645" width="0.2694%" height="15" fill="rgb(233,12,30)" fg:x="100307" fg:w="385"/><text x="70.4365%" y="655.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (36 samples, 0.03%)</title><rect x="70.4559%" y="645" width="0.0252%" height="15" fill="rgb(238,52,0)" fg:x="100692" fg:w="36"/><text x="70.7059%" y="655.50"></text></g><g><title>hashbrown::map::equivalent_key::{{closure}} (74 samples, 0.05%)</title><rect x="70.4895%" y="629" width="0.0518%" height="15" fill="rgb(223,98,5)" fg:x="100740" fg:w="74"/><text x="70.7395%" y="639.50"></text></g><g><title>&lt;Q as hashbrown::Equivalent&lt;K&gt;&gt;::equivalent (67 samples, 0.05%)</title><rect x="70.4943%" y="613" width="0.0469%" height="15" fill="rgb(228,75,37)" fg:x="100747" fg:w="67"/><text x="70.7443%" y="623.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (52 samples, 0.04%)</title><rect x="70.5048%" y="597" width="0.0364%" height="15" fill="rgb(205,115,49)" fg:x="100762" fg:w="52"/><text x="70.7548%" y="607.50"></text></g><g><title>&lt;coldbrew::runtime::ProgramCounter as core::cmp::PartialEq&gt;::eq (51 samples, 0.04%)</title><rect x="70.5055%" y="581" width="0.0357%" height="15" fill="rgb(250,154,43)" fg:x="100763" fg:w="51"/><text x="70.7555%" y="591.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ref (30 samples, 0.02%)</title><rect x="70.5412%" y="629" width="0.0210%" height="15" fill="rgb(226,43,29)" fg:x="100814" fg:w="30"/><text x="70.7912%" y="639.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::{{closure}} (17 samples, 0.01%)</title><rect x="70.5503%" y="613" width="0.0119%" height="15" fill="rgb(249,228,39)" fg:x="100827" fg:w="17"/><text x="70.8003%" y="623.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::from_base_index (44 samples, 0.03%)</title><rect x="70.5650%" y="613" width="0.0308%" height="15" fill="rgb(216,79,43)" fg:x="100848" fg:w="44"/><text x="70.8150%" y="623.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::{{closure}} (167 samples, 0.12%)</title><rect x="70.4811%" y="645" width="0.1169%" height="15" fill="rgb(228,95,12)" fg:x="100728" fg:w="167"/><text x="70.7311%" y="655.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::bucket (51 samples, 0.04%)</title><rect x="70.5622%" y="629" width="0.0357%" height="15" fill="rgb(249,221,15)" fg:x="100844" fg:w="51"/><text x="70.8122%" y="639.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::ctrl (23 samples, 0.02%)</title><rect x="70.5979%" y="645" width="0.0161%" height="15" fill="rgb(233,34,13)" fg:x="100895" fg:w="23"/><text x="70.8479%" y="655.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (22 samples, 0.02%)</title><rect x="70.5986%" y="629" width="0.0154%" height="15" fill="rgb(214,103,39)" fg:x="100896" fg:w="22"/><text x="70.8486%" y="639.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::probe_seq (27 samples, 0.02%)</title><rect x="70.6140%" y="645" width="0.0189%" height="15" fill="rgb(251,126,39)" fg:x="100918" fg:w="27"/><text x="70.8640%" y="655.50"></text></g><g><title>hashbrown::raw::h2 (21 samples, 0.01%)</title><rect x="70.6329%" y="645" width="0.0147%" height="15" fill="rgb(214,216,36)" fg:x="100945" fg:w="21"/><text x="70.8829%" y="655.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_undefined_si128 (26 samples, 0.02%)</title><rect x="71.4949%" y="613" width="0.0182%" height="15" fill="rgb(220,221,8)" fg:x="102177" fg:w="26"/><text x="71.7449%" y="623.50"></text></g><g><title>hashbrown::raw::sse2::Group::load (1,278 samples, 0.89%)</title><rect x="70.6476%" y="645" width="0.8942%" height="15" fill="rgb(240,216,3)" fg:x="100966" fg:w="1278"/><text x="70.8976%" y="655.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (1,158 samples, 0.81%)</title><rect x="70.7316%" y="629" width="0.8103%" height="15" fill="rgb(232,218,17)" fg:x="101086" fg:w="1158"/><text x="70.9816%" y="639.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (41 samples, 0.03%)</title><rect x="71.5131%" y="613" width="0.0287%" height="15" fill="rgb(229,163,45)" fg:x="102203" fg:w="41"/><text x="71.7631%" y="623.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_cmpeq_epi8 (382 samples, 0.27%)</title><rect x="71.8966%" y="629" width="0.2673%" height="15" fill="rgb(231,110,42)" fg:x="102751" fg:w="382"/><text x="72.1466%" y="639.50"></text></g><g><title>core::core_arch::x86::m128iExt::as_i8x16 (78 samples, 0.05%)</title><rect x="72.1093%" y="613" width="0.0546%" height="15" fill="rgb(208,170,48)" fg:x="103055" fg:w="78"/><text x="72.3593%" y="623.50"></text></g><g><title>core::core_arch::simd::i8x16::splat (82 samples, 0.06%)</title><rect x="72.7656%" y="613" width="0.0574%" height="15" fill="rgb(239,116,25)" fg:x="103993" fg:w="82"/><text x="73.0156%" y="623.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (965 samples, 0.68%)</title><rect x="72.1639%" y="629" width="0.6752%" height="15" fill="rgb(219,200,50)" fg:x="103133" fg:w="965"/><text x="72.4139%" y="639.50"></text></g><g><title>core::core_arch::x86::m128iExt::as_i8x16 (23 samples, 0.02%)</title><rect x="72.8230%" y="613" width="0.0161%" height="15" fill="rgb(245,200,0)" fg:x="104075" fg:w="23"/><text x="73.0730%" y="623.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (2,559 samples, 1.79%)</title><rect x="71.5418%" y="645" width="1.7906%" height="15" fill="rgb(245,119,33)" fg:x="102244" fg:w="2559"/><text x="71.7918%" y="655.50">h..</text></g><g><title>core::core_arch::x86::sse2::_mm_set1_epi8 (705 samples, 0.49%)</title><rect x="72.8391%" y="629" width="0.4933%" height="15" fill="rgb(231,125,12)" fg:x="104098" fg:w="705"/><text x="73.0891%" y="639.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_set_epi8 (705 samples, 0.49%)</title><rect x="72.8391%" y="613" width="0.4933%" height="15" fill="rgb(216,96,41)" fg:x="104098" fg:w="705"/><text x="73.0891%" y="623.50"></text></g><g><title>core::core_arch::simd::i8x16::new (110 samples, 0.08%)</title><rect x="73.2554%" y="597" width="0.0770%" height="15" fill="rgb(248,43,45)" fg:x="104693" fg:w="110"/><text x="73.5054%" y="607.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_cmpeq_epi8 (352 samples, 0.25%)</title><rect x="73.6256%" y="613" width="0.2463%" height="15" fill="rgb(217,222,7)" fg:x="105222" fg:w="352"/><text x="73.8756%" y="623.50"></text></g><g><title>core::core_arch::x86::m128iExt::as_i8x16 (85 samples, 0.06%)</title><rect x="73.8124%" y="597" width="0.0595%" height="15" fill="rgb(233,28,6)" fg:x="105489" fg:w="85"/><text x="74.0624%" y="607.50"></text></g><g><title>core::core_arch::simd::i8x16::splat (102 samples, 0.07%)</title><rect x="74.4345%" y="597" width="0.0714%" height="15" fill="rgb(231,218,15)" fg:x="106378" fg:w="102"/><text x="74.6845%" y="607.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (924 samples, 0.65%)</title><rect x="73.8719%" y="613" width="0.6465%" height="15" fill="rgb(226,171,48)" fg:x="105574" fg:w="924"/><text x="74.1219%" y="623.50"></text></g><g><title>core::core_arch::x86::m128iExt::as_i8x16 (18 samples, 0.01%)</title><rect x="74.5058%" y="597" width="0.0126%" height="15" fill="rgb(235,201,9)" fg:x="106480" fg:w="18"/><text x="74.7558%" y="607.50"></text></g><g><title>coldbrew::jit::JitCache::has_native_trace (14,508 samples, 10.15%)</title><rect x="64.8008%" y="757" width="10.1515%" height="15" fill="rgb(217,80,15)" fg:x="92610" fg:w="14508"/><text x="65.0508%" y="767.50">coldbrew::jit::..</text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::contains_key (14,480 samples, 10.13%)</title><rect x="64.8203%" y="741" width="10.1319%" height="15" fill="rgb(219,152,8)" fg:x="92638" fg:w="14480"/><text x="65.0703%" y="751.50">std::collection..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::contains_key (14,480 samples, 10.13%)</title><rect x="64.8203%" y="725" width="10.1319%" height="15" fill="rgb(243,107,38)" fg:x="92638" fg:w="14480"/><text x="65.0703%" y="735.50">hashbrown::map:..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (14,402 samples, 10.08%)</title><rect x="64.8749%" y="709" width="10.0773%" height="15" fill="rgb(231,17,5)" fg:x="92716" fg:w="14402"/><text x="65.1249%" y="719.50">hashbrown::map:..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get (7,991 samples, 5.59%)</title><rect x="69.3608%" y="693" width="5.5914%" height="15" fill="rgb(209,25,54)" fg:x="99127" fg:w="7991"/><text x="69.6108%" y="703.50">hashbro..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (7,861 samples, 5.50%)</title><rect x="69.4518%" y="677" width="5.5005%" height="15" fill="rgb(219,0,2)" fg:x="99257" fg:w="7861"/><text x="69.7018%" y="687.50">hashbro..</text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::find_inner (7,610 samples, 5.32%)</title><rect x="69.6274%" y="661" width="5.3248%" height="15" fill="rgb(246,9,5)" fg:x="99508" fg:w="7610"/><text x="69.8774%" y="671.50">hashbro..</text></g><g><title>hashbrown::raw::sse2::Group::match_empty (2,315 samples, 1.62%)</title><rect x="73.3324%" y="645" width="1.6198%" height="15" fill="rgb(226,159,4)" fg:x="104803" fg:w="2315"/><text x="73.5824%" y="655.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (2,254 samples, 1.58%)</title><rect x="73.3751%" y="629" width="1.5772%" height="15" fill="rgb(219,175,34)" fg:x="104864" fg:w="2254"/><text x="73.6251%" y="639.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_set1_epi8 (620 samples, 0.43%)</title><rect x="74.5184%" y="613" width="0.4338%" height="15" fill="rgb(236,10,46)" fg:x="106498" fg:w="620"/><text x="74.7684%" y="623.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_set_epi8 (620 samples, 0.43%)</title><rect x="74.5184%" y="597" width="0.4338%" height="15" fill="rgb(240,211,16)" fg:x="106498" fg:w="620"/><text x="74.7684%" y="607.50"></text></g><g><title>core::core_arch::simd::i8x16::new (98 samples, 0.07%)</title><rect x="74.8837%" y="581" width="0.0686%" height="15" fill="rgb(205,3,43)" fg:x="107020" fg:w="98"/><text x="75.1337%" y="591.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (23 samples, 0.02%)</title><rect x="75.1188%" y="613" width="0.0161%" height="15" fill="rgb(245,7,22)" fg:x="107356" fg:w="23"/><text x="75.3688%" y="623.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (61 samples, 0.04%)</title><rect x="75.2146%" y="597" width="0.0427%" height="15" fill="rgb(239,132,32)" fg:x="107493" fg:w="61"/><text x="75.4646%" y="607.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::finish (210 samples, 0.15%)</title><rect x="75.1153%" y="661" width="0.1469%" height="15" fill="rgb(228,202,34)" fg:x="107351" fg:w="210"/><text x="75.3653%" y="671.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (210 samples, 0.15%)</title><rect x="75.1153%" y="645" width="0.1469%" height="15" fill="rgb(254,200,22)" fg:x="107351" fg:w="210"/><text x="75.3653%" y="655.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (210 samples, 0.15%)</title><rect x="75.1153%" y="629" width="0.1469%" height="15" fill="rgb(219,10,39)" fg:x="107351" fg:w="210"/><text x="75.3653%" y="639.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (182 samples, 0.13%)</title><rect x="75.1349%" y="613" width="0.1273%" height="15" fill="rgb(226,210,39)" fg:x="107379" fg:w="182"/><text x="75.3849%" y="623.50"></text></g><g><title>__memcpy_avx_unaligned_erms (24 samples, 0.02%)</title><rect x="75.2685%" y="645" width="0.0168%" height="15" fill="rgb(208,219,16)" fg:x="107570" fg:w="24"/><text x="75.5185%" y="655.50"></text></g><g><title>__memcpy_avx_unaligned_erms (54 samples, 0.04%)</title><rect x="75.2853%" y="629" width="0.0378%" height="15" fill="rgb(216,158,51)" fg:x="107594" fg:w="54"/><text x="75.5353%" y="639.50"></text></g><g><title>__memcpy_avx_unaligned_erms (62 samples, 0.04%)</title><rect x="75.3350%" y="613" width="0.0434%" height="15" fill="rgb(233,14,44)" fg:x="107665" fg:w="62"/><text x="75.5850%" y="623.50"></text></g><g><title>&lt;std::collections::hash::map::RandomState as core::hash::BuildHasher&gt;::build_hasher (176 samples, 0.12%)</title><rect x="75.2622%" y="661" width="0.1232%" height="15" fill="rgb(237,97,39)" fg:x="107561" fg:w="176"/><text x="75.5122%" y="671.50"></text></g><g><title>core::hash::sip::SipHasher13::new_with_keys (143 samples, 0.10%)</title><rect x="75.2853%" y="645" width="0.1001%" height="15" fill="rgb(218,198,43)" fg:x="107594" fg:w="143"/><text x="75.5353%" y="655.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::new_with_keys (86 samples, 0.06%)</title><rect x="75.3252%" y="629" width="0.0602%" height="15" fill="rgb(231,104,20)" fg:x="107651" fg:w="86"/><text x="75.5752%" y="639.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (23 samples, 0.02%)</title><rect x="75.4854%" y="533" width="0.0161%" height="15" fill="rgb(254,36,13)" fg:x="107880" fg:w="23"/><text x="75.7354%" y="543.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (89 samples, 0.06%)</title><rect x="75.4420%" y="549" width="0.0623%" height="15" fill="rgb(248,14,50)" fg:x="107818" fg:w="89"/><text x="75.6920%" y="559.50"></text></g><g><title>core::hash::sip::u8to64_le (31 samples, 0.02%)</title><rect x="75.5043%" y="549" width="0.0217%" height="15" fill="rgb(217,107,29)" fg:x="107907" fg:w="31"/><text x="75.7543%" y="559.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (208 samples, 0.15%)</title><rect x="75.3938%" y="597" width="0.1455%" height="15" fill="rgb(251,169,33)" fg:x="107749" fg:w="208"/><text x="75.6438%" y="607.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (206 samples, 0.14%)</title><rect x="75.3952%" y="581" width="0.1441%" height="15" fill="rgb(217,108,32)" fg:x="107751" fg:w="206"/><text x="75.6452%" y="591.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (206 samples, 0.14%)</title><rect x="75.3952%" y="565" width="0.1441%" height="15" fill="rgb(219,66,42)" fg:x="107751" fg:w="206"/><text x="75.6452%" y="575.50"></text></g><g><title>hashbrown::map::make_hash (628 samples, 0.44%)</title><rect x="75.1027%" y="693" width="0.4394%" height="15" fill="rgb(206,180,7)" fg:x="107333" fg:w="628"/><text x="75.3527%" y="703.50"></text></g><g><title>core::hash::BuildHasher::hash_one (627 samples, 0.44%)</title><rect x="75.1034%" y="677" width="0.4387%" height="15" fill="rgb(208,226,31)" fg:x="107334" fg:w="627"/><text x="75.3534%" y="687.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (224 samples, 0.16%)</title><rect x="75.3854%" y="661" width="0.1567%" height="15" fill="rgb(218,26,49)" fg:x="107737" fg:w="224"/><text x="75.6354%" y="671.50"></text></g><g><title>&lt;coldbrew::runtime::ProgramCounter as core::hash::Hash&gt;::hash (220 samples, 0.15%)</title><rect x="75.3882%" y="645" width="0.1539%" height="15" fill="rgb(233,197,48)" fg:x="107741" fg:w="220"/><text x="75.6382%" y="655.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for usize&gt;::hash (217 samples, 0.15%)</title><rect x="75.3903%" y="629" width="0.1518%" height="15" fill="rgb(252,181,51)" fg:x="107744" fg:w="217"/><text x="75.6403%" y="639.50"></text></g><g><title>core::hash::Hasher::write_usize (212 samples, 0.15%)</title><rect x="75.3938%" y="613" width="0.1483%" height="15" fill="rgb(253,90,19)" fg:x="107749" fg:w="212"/><text x="75.6438%" y="623.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_mut (22 samples, 0.02%)</title><rect x="75.5505%" y="677" width="0.0154%" height="15" fill="rgb(215,171,30)" fg:x="107973" fg:w="22"/><text x="75.8005%" y="687.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ptr (22 samples, 0.02%)</title><rect x="75.5505%" y="661" width="0.0154%" height="15" fill="rgb(214,222,9)" fg:x="107973" fg:w="22"/><text x="75.8005%" y="671.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (15 samples, 0.01%)</title><rect x="75.5554%" y="645" width="0.0105%" height="15" fill="rgb(223,3,22)" fg:x="107980" fg:w="15"/><text x="75.8054%" y="655.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::from_base_index (19 samples, 0.01%)</title><rect x="75.5785%" y="645" width="0.0133%" height="15" fill="rgb(225,196,46)" fg:x="108013" fg:w="19"/><text x="75.8285%" y="655.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::bucket (29 samples, 0.02%)</title><rect x="75.5750%" y="661" width="0.0203%" height="15" fill="rgb(209,110,37)" fg:x="108008" fg:w="29"/><text x="75.8250%" y="671.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (19 samples, 0.01%)</title><rect x="75.5953%" y="661" width="0.0133%" height="15" fill="rgb(249,89,12)" fg:x="108037" fg:w="19"/><text x="75.8453%" y="671.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMask as core::iter::traits::collect::IntoIterator&gt;::into_iter (18 samples, 0.01%)</title><rect x="75.6820%" y="645" width="0.0126%" height="15" fill="rgb(226,27,33)" fg:x="108161" fg:w="18"/><text x="75.9320%" y="655.50"></text></g><g><title>core::num::nonzero::NonZeroU16::new (18 samples, 0.01%)</title><rect x="75.7268%" y="613" width="0.0126%" height="15" fill="rgb(213,82,22)" fg:x="108225" fg:w="18"/><text x="75.9768%" y="623.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (68 samples, 0.05%)</title><rect x="75.7079%" y="629" width="0.0476%" height="15" fill="rgb(248,140,0)" fg:x="108198" fg:w="68"/><text x="75.9579%" y="639.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::nonzero_trailing_zeros (23 samples, 0.02%)</title><rect x="75.7394%" y="613" width="0.0161%" height="15" fill="rgb(228,106,3)" fg:x="108243" fg:w="23"/><text x="75.9894%" y="623.50"></text></g><g><title>core::num::nonzero::NonZeroU16::trailing_zeros (18 samples, 0.01%)</title><rect x="75.7429%" y="597" width="0.0126%" height="15" fill="rgb(209,23,37)" fg:x="108248" fg:w="18"/><text x="75.9929%" y="607.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (91 samples, 0.06%)</title><rect x="75.6946%" y="645" width="0.0637%" height="15" fill="rgb(241,93,50)" fg:x="108179" fg:w="91"/><text x="75.9446%" y="655.50"></text></g><g><title>hashbrown::map::equivalent_key::{{closure}} (99 samples, 0.07%)</title><rect x="75.7751%" y="629" width="0.0693%" height="15" fill="rgb(253,46,43)" fg:x="108294" fg:w="99"/><text x="76.0251%" y="639.50"></text></g><g><title>&lt;Q as hashbrown::Equivalent&lt;K&gt;&gt;::equivalent (94 samples, 0.07%)</title><rect x="75.7786%" y="613" width="0.0658%" height="15" fill="rgb(226,206,43)" fg:x="108299" fg:w="94"/><text x="76.0286%" y="623.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (82 samples, 0.06%)</title><rect x="75.7870%" y="597" width="0.0574%" height="15" fill="rgb(217,54,7)" fg:x="108311" fg:w="82"/><text x="76.0370%" y="607.50"></text></g><g><title>&lt;coldbrew::runtime::ProgramCounter as core::cmp::PartialEq&gt;::eq (82 samples, 0.06%)</title><rect x="75.7870%" y="581" width="0.0574%" height="15" fill="rgb(223,5,52)" fg:x="108311" fg:w="82"/><text x="76.0370%" y="591.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ptr (19 samples, 0.01%)</title><rect x="75.8451%" y="613" width="0.0133%" height="15" fill="rgb(206,52,46)" fg:x="108394" fg:w="19"/><text x="76.0951%" y="623.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ref (29 samples, 0.02%)</title><rect x="75.8444%" y="629" width="0.0203%" height="15" fill="rgb(253,136,11)" fg:x="108393" fg:w="29"/><text x="76.0944%" y="639.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::from_base_index (45 samples, 0.03%)</title><rect x="75.8668%" y="613" width="0.0315%" height="15" fill="rgb(208,106,33)" fg:x="108425" fg:w="45"/><text x="76.1168%" y="623.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::bucket (50 samples, 0.03%)</title><rect x="75.8647%" y="629" width="0.0350%" height="15" fill="rgb(206,54,4)" fg:x="108422" fg:w="50"/><text x="76.1147%" y="639.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::{{closure}} (203 samples, 0.14%)</title><rect x="75.7583%" y="645" width="0.1420%" height="15" fill="rgb(213,3,15)" fg:x="108270" fg:w="203"/><text x="76.0083%" y="655.50"></text></g><g><title>hashbrown::raw::sse2::Group::load (185 samples, 0.13%)</title><rect x="75.9046%" y="645" width="0.1294%" height="15" fill="rgb(252,211,39)" fg:x="108479" fg:w="185"/><text x="76.1546%" y="655.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (173 samples, 0.12%)</title><rect x="75.9130%" y="629" width="0.1211%" height="15" fill="rgb(223,6,36)" fg:x="108491" fg:w="173"/><text x="76.1630%" y="639.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_cmpeq_epi8 (45 samples, 0.03%)</title><rect x="76.0662%" y="629" width="0.0315%" height="15" fill="rgb(252,169,45)" fg:x="108710" fg:w="45"/><text x="76.3162%" y="639.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (92 samples, 0.06%)</title><rect x="76.0977%" y="629" width="0.0644%" height="15" fill="rgb(212,48,26)" fg:x="108755" fg:w="92"/><text x="76.3477%" y="639.50"></text></g><g><title>coldbrew::profiler::Profiler::count_entry (1,800 samples, 1.26%)</title><rect x="74.9522%" y="757" width="1.2595%" height="15" fill="rgb(251,102,48)" fg:x="107118" fg:w="1800"/><text x="75.2022%" y="767.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get_mut (1,599 samples, 1.12%)</title><rect x="75.0929%" y="741" width="1.1188%" height="15" fill="rgb(243,208,16)" fg:x="107319" fg:w="1599"/><text x="75.3429%" y="751.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_mut (1,599 samples, 1.12%)</title><rect x="75.0929%" y="725" width="1.1188%" height="15" fill="rgb(219,96,24)" fg:x="107319" fg:w="1599"/><text x="75.3429%" y="735.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner_mut (1,590 samples, 1.11%)</title><rect x="75.0992%" y="709" width="1.1125%" height="15" fill="rgb(219,33,29)" fg:x="107328" fg:w="1590"/><text x="75.3492%" y="719.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get_mut (957 samples, 0.67%)</title><rect x="75.5421%" y="693" width="0.6696%" height="15" fill="rgb(223,176,5)" fg:x="107961" fg:w="957"/><text x="75.7921%" y="703.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (923 samples, 0.65%)</title><rect x="75.5659%" y="677" width="0.6458%" height="15" fill="rgb(228,140,14)" fg:x="107995" fg:w="923"/><text x="75.8159%" y="687.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::find_inner (862 samples, 0.60%)</title><rect x="75.6086%" y="661" width="0.6032%" height="15" fill="rgb(217,179,31)" fg:x="108056" fg:w="862"/><text x="75.8586%" y="671.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (254 samples, 0.18%)</title><rect x="76.0340%" y="645" width="0.1777%" height="15" fill="rgb(230,9,30)" fg:x="108664" fg:w="254"/><text x="76.2840%" y="655.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_set1_epi8 (71 samples, 0.05%)</title><rect x="76.1621%" y="629" width="0.0497%" height="15" fill="rgb(230,136,20)" fg:x="108847" fg:w="71"/><text x="76.4121%" y="639.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_set_epi8 (71 samples, 0.05%)</title><rect x="76.1621%" y="613" width="0.0497%" height="15" fill="rgb(215,210,22)" fg:x="108847" fg:w="71"/><text x="76.4121%" y="623.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (87 samples, 0.06%)</title><rect x="76.7197%" y="597" width="0.0609%" height="15" fill="rgb(218,43,5)" fg:x="109644" fg:w="87"/><text x="76.9697%" y="607.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (324 samples, 0.23%)</title><rect x="76.5560%" y="613" width="0.2267%" height="15" fill="rgb(216,11,5)" fg:x="109410" fg:w="324"/><text x="76.8060%" y="623.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (502 samples, 0.35%)</title><rect x="77.7518%" y="597" width="0.3513%" height="15" fill="rgb(209,82,29)" fg:x="111119" fg:w="502"/><text x="78.0018%" y="607.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (1,915 samples, 1.34%)</title><rect x="76.7827%" y="613" width="1.3400%" height="15" fill="rgb(244,115,12)" fg:x="109734" fg:w="1915"/><text x="77.0327%" y="623.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (28 samples, 0.02%)</title><rect x="78.1031%" y="597" width="0.0196%" height="15" fill="rgb(222,82,18)" fg:x="111621" fg:w="28"/><text x="78.3531%" y="607.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::finish (2,332 samples, 1.63%)</title><rect x="76.4916%" y="661" width="1.6317%" height="15" fill="rgb(249,227,8)" fg:x="109318" fg:w="2332"/><text x="76.7416%" y="671.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (2,332 samples, 1.63%)</title><rect x="76.4916%" y="645" width="1.6317%" height="15" fill="rgb(253,141,45)" fg:x="109318" fg:w="2332"/><text x="76.7416%" y="655.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (2,332 samples, 1.63%)</title><rect x="76.4916%" y="629" width="1.6317%" height="15" fill="rgb(234,184,4)" fg:x="109318" fg:w="2332"/><text x="76.7416%" y="639.50"></text></g><g><title>__memcpy_avx_unaligned_erms (425 samples, 0.30%)</title><rect x="78.1618%" y="645" width="0.2974%" height="15" fill="rgb(218,194,23)" fg:x="111705" fg:w="425"/><text x="78.4118%" y="655.50"></text></g><g><title>_init (34 samples, 0.02%)</title><rect x="78.4592%" y="645" width="0.0238%" height="15" fill="rgb(235,66,41)" fg:x="112130" fg:w="34"/><text x="78.7092%" y="655.50"></text></g><g><title>__memcpy_avx_unaligned_erms (412 samples, 0.29%)</title><rect x="78.4830%" y="629" width="0.2883%" height="15" fill="rgb(245,217,1)" fg:x="112164" fg:w="412"/><text x="78.7330%" y="639.50"></text></g><g><title>__memcpy_avx_unaligned_erms (1,208 samples, 0.85%)</title><rect x="78.8665%" y="613" width="0.8453%" height="15" fill="rgb(229,91,1)" fg:x="112712" fg:w="1208"/><text x="79.1165%" y="623.50"></text></g><g><title>_init (29 samples, 0.02%)</title><rect x="79.7117%" y="613" width="0.0203%" height="15" fill="rgb(207,101,30)" fg:x="113920" fg:w="29"/><text x="79.9617%" y="623.50"></text></g><g><title>&lt;std::collections::hash::map::RandomState as core::hash::BuildHasher&gt;::build_hasher (2,366 samples, 1.66%)</title><rect x="78.1234%" y="661" width="1.6555%" height="15" fill="rgb(223,82,49)" fg:x="111650" fg:w="2366"/><text x="78.3734%" y="671.50"></text></g><g><title>core::hash::sip::SipHasher13::new_with_keys (1,852 samples, 1.30%)</title><rect x="78.4830%" y="645" width="1.2959%" height="15" fill="rgb(218,167,17)" fg:x="112164" fg:w="1852"/><text x="78.7330%" y="655.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::new_with_keys (1,426 samples, 1.00%)</title><rect x="78.7811%" y="629" width="0.9978%" height="15" fill="rgb(208,103,14)" fg:x="112590" fg:w="1426"/><text x="79.0311%" y="639.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::reset (67 samples, 0.05%)</title><rect x="79.7320%" y="613" width="0.0469%" height="15" fill="rgb(238,20,8)" fg:x="113949" fg:w="67"/><text x="79.9820%" y="623.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (264 samples, 0.18%)</title><rect x="80.8481%" y="533" width="0.1847%" height="15" fill="rgb(218,80,54)" fg:x="115544" fg:w="264"/><text x="81.0981%" y="543.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (1,005 samples, 0.70%)</title><rect x="80.3569%" y="549" width="0.7032%" height="15" fill="rgb(240,144,17)" fg:x="114842" fg:w="1005"/><text x="80.6069%" y="559.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (39 samples, 0.03%)</title><rect x="81.0328%" y="533" width="0.0273%" height="15" fill="rgb(245,27,50)" fg:x="115808" fg:w="39"/><text x="81.2828%" y="543.50"></text></g><g><title>core::hash::sip::u8to64_le (275 samples, 0.19%)</title><rect x="81.0622%" y="549" width="0.1924%" height="15" fill="rgb(251,51,7)" fg:x="115850" fg:w="275"/><text x="81.3122%" y="559.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (44 samples, 0.03%)</title><rect x="81.2238%" y="533" width="0.0308%" height="15" fill="rgb(245,217,29)" fg:x="116081" fg:w="44"/><text x="81.4738%" y="543.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (118 samples, 0.08%)</title><rect x="81.2546%" y="549" width="0.0826%" height="15" fill="rgb(221,176,29)" fg:x="116125" fg:w="118"/><text x="81.5046%" y="559.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::add (51 samples, 0.04%)</title><rect x="81.3372%" y="549" width="0.0357%" height="15" fill="rgb(212,180,24)" fg:x="116243" fg:w="51"/><text x="81.5872%" y="559.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (2,239 samples, 1.57%)</title><rect x="79.8356%" y="597" width="1.5667%" height="15" fill="rgb(254,24,2)" fg:x="114097" fg:w="2239"/><text x="80.0856%" y="607.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (2,202 samples, 1.54%)</title><rect x="79.8615%" y="581" width="1.5408%" height="15" fill="rgb(230,100,2)" fg:x="114134" fg:w="2202"/><text x="80.1115%" y="591.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (2,202 samples, 1.54%)</title><rect x="79.8615%" y="565" width="1.5408%" height="15" fill="rgb(219,142,25)" fg:x="114134" fg:w="2202"/><text x="80.1115%" y="575.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::as_ptr (42 samples, 0.03%)</title><rect x="81.3728%" y="549" width="0.0294%" height="15" fill="rgb(240,73,43)" fg:x="116294" fg:w="42"/><text x="81.6228%" y="559.50"></text></g><g><title>hashbrown::map::make_hash (7,194 samples, 5.03%)</title><rect x="76.4021%" y="693" width="5.0338%" height="15" fill="rgb(214,114,15)" fg:x="109190" fg:w="7194"/><text x="76.6521%" y="703.50">hashbr..</text></g><g><title>core::hash::BuildHasher::hash_one (7,175 samples, 5.02%)</title><rect x="76.4154%" y="677" width="5.0205%" height="15" fill="rgb(207,130,4)" fg:x="109209" fg:w="7175"/><text x="76.6654%" y="687.50">core::..</text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (2,367 samples, 1.66%)</title><rect x="79.7796%" y="661" width="1.6562%" height="15" fill="rgb(221,25,40)" fg:x="114017" fg:w="2367"/><text x="80.0296%" y="671.50"></text></g><g><title>&lt;coldbrew::runtime::ProgramCounter as core::hash::Hash&gt;::hash (2,350 samples, 1.64%)</title><rect x="79.7915%" y="645" width="1.6443%" height="15" fill="rgb(241,184,7)" fg:x="114034" fg:w="2350"/><text x="80.0415%" y="655.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for usize&gt;::hash (2,336 samples, 1.63%)</title><rect x="79.8013%" y="629" width="1.6345%" height="15" fill="rgb(235,159,4)" fg:x="114048" fg:w="2336"/><text x="80.0513%" y="639.50"></text></g><g><title>core::hash::Hasher::write_usize (2,287 samples, 1.60%)</title><rect x="79.8356%" y="613" width="1.6003%" height="15" fill="rgb(214,87,48)" fg:x="114097" fg:w="2287"/><text x="80.0856%" y="623.50"></text></g><g><title>core::num::&lt;impl usize&gt;::to_ne_bytes (48 samples, 0.03%)</title><rect x="81.4022%" y="597" width="0.0336%" height="15" fill="rgb(246,198,24)" fg:x="116336" fg:w="48"/><text x="81.6522%" y="607.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ref (36 samples, 0.03%)</title><rect x="81.4953%" y="677" width="0.0252%" height="15" fill="rgb(209,66,40)" fg:x="116469" fg:w="36"/><text x="81.7453%" y="687.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ptr (36 samples, 0.03%)</title><rect x="81.4953%" y="661" width="0.0252%" height="15" fill="rgb(233,147,39)" fg:x="116469" fg:w="36"/><text x="81.7453%" y="671.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (28 samples, 0.02%)</title><rect x="81.5009%" y="645" width="0.0196%" height="15" fill="rgb(231,145,52)" fg:x="116477" fg:w="28"/><text x="81.7509%" y="655.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (26 samples, 0.02%)</title><rect x="81.5023%" y="629" width="0.0182%" height="15" fill="rgb(206,20,26)" fg:x="116479" fg:w="26"/><text x="81.7523%" y="639.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::from_base_index (18 samples, 0.01%)</title><rect x="81.6275%" y="645" width="0.0126%" height="15" fill="rgb(238,220,4)" fg:x="116658" fg:w="18"/><text x="81.8775%" y="655.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::bucket (75 samples, 0.05%)</title><rect x="81.5940%" y="661" width="0.0525%" height="15" fill="rgb(252,195,42)" fg:x="116610" fg:w="75"/><text x="81.8440%" y="671.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (90 samples, 0.06%)</title><rect x="81.6464%" y="661" width="0.0630%" height="15" fill="rgb(209,10,6)" fg:x="116685" fg:w="90"/><text x="81.8964%" y="671.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMask as core::iter::traits::collect::IntoIterator&gt;::into_iter (120 samples, 0.08%)</title><rect x="82.1796%" y="645" width="0.0840%" height="15" fill="rgb(229,3,52)" fg:x="117447" fg:w="120"/><text x="82.4296%" y="655.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::ops::try_trait::Try&gt;::branch (61 samples, 0.04%)</title><rect x="82.3315%" y="629" width="0.0427%" height="15" fill="rgb(253,49,37)" fg:x="117664" fg:w="61"/><text x="82.5815%" y="639.50"></text></g><g><title>core::num::nonzero::NonZeroU16::new (41 samples, 0.03%)</title><rect x="82.4273%" y="613" width="0.0287%" height="15" fill="rgb(240,103,49)" fg:x="117801" fg:w="41"/><text x="82.6773%" y="623.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (145 samples, 0.10%)</title><rect x="82.3741%" y="629" width="0.1015%" height="15" fill="rgb(250,182,30)" fg:x="117725" fg:w="145"/><text x="82.6241%" y="639.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::nonzero_trailing_zeros (28 samples, 0.02%)</title><rect x="82.4560%" y="613" width="0.0196%" height="15" fill="rgb(248,8,30)" fg:x="117842" fg:w="28"/><text x="82.7060%" y="623.50"></text></g><g><title>core::num::nonzero::NonZeroU16::trailing_zeros (24 samples, 0.02%)</title><rect x="82.4588%" y="597" width="0.0168%" height="15" fill="rgb(237,120,30)" fg:x="117846" fg:w="24"/><text x="82.7088%" y="607.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (306 samples, 0.21%)</title><rect x="82.2636%" y="645" width="0.2141%" height="15" fill="rgb(221,146,34)" fg:x="117567" fg:w="306"/><text x="82.5136%" y="655.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (55 samples, 0.04%)</title><rect x="82.4777%" y="645" width="0.0385%" height="15" fill="rgb(242,55,13)" fg:x="117873" fg:w="55"/><text x="82.7277%" y="655.50"></text></g><g><title>hashbrown::map::equivalent_key::{{closure}} (79 samples, 0.06%)</title><rect x="82.5253%" y="629" width="0.0553%" height="15" fill="rgb(242,112,31)" fg:x="117941" fg:w="79"/><text x="82.7753%" y="639.50"></text></g><g><title>&lt;Q as hashbrown::Equivalent&lt;K&gt;&gt;::equivalent (76 samples, 0.05%)</title><rect x="82.5274%" y="613" width="0.0532%" height="15" fill="rgb(249,192,27)" fg:x="117944" fg:w="76"/><text x="82.7774%" y="623.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (63 samples, 0.04%)</title><rect x="82.5365%" y="597" width="0.0441%" height="15" fill="rgb(208,204,44)" fg:x="117957" fg:w="63"/><text x="82.7865%" y="607.50"></text></g><g><title>&lt;coldbrew::runtime::ProgramCounter as core::cmp::PartialEq&gt;::eq (60 samples, 0.04%)</title><rect x="82.5386%" y="581" width="0.0420%" height="15" fill="rgb(208,93,54)" fg:x="117960" fg:w="60"/><text x="82.7886%" y="591.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ref (19 samples, 0.01%)</title><rect x="82.5806%" y="629" width="0.0133%" height="15" fill="rgb(242,1,31)" fg:x="118020" fg:w="19"/><text x="82.8306%" y="639.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::from_base_index (53 samples, 0.04%)</title><rect x="82.5959%" y="613" width="0.0371%" height="15" fill="rgb(241,83,25)" fg:x="118042" fg:w="53"/><text x="82.8459%" y="623.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::{{closure}} (168 samples, 0.12%)</title><rect x="82.5162%" y="645" width="0.1176%" height="15" fill="rgb(205,169,50)" fg:x="117928" fg:w="168"/><text x="82.7662%" y="655.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::bucket (57 samples, 0.04%)</title><rect x="82.5938%" y="629" width="0.0399%" height="15" fill="rgb(239,186,37)" fg:x="118039" fg:w="57"/><text x="82.8438%" y="639.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::ctrl (26 samples, 0.02%)</title><rect x="82.6337%" y="645" width="0.0182%" height="15" fill="rgb(205,221,10)" fg:x="118096" fg:w="26"/><text x="82.8837%" y="655.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (21 samples, 0.01%)</title><rect x="82.6372%" y="629" width="0.0147%" height="15" fill="rgb(218,196,15)" fg:x="118101" fg:w="21"/><text x="82.8872%" y="639.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::probe_seq (15 samples, 0.01%)</title><rect x="82.6519%" y="645" width="0.0105%" height="15" fill="rgb(218,196,35)" fg:x="118122" fg:w="15"/><text x="82.9019%" y="655.50"></text></g><g><title>hashbrown::raw::h2 (22 samples, 0.02%)</title><rect x="82.6624%" y="645" width="0.0154%" height="15" fill="rgb(233,63,24)" fg:x="118137" fg:w="22"/><text x="82.9124%" y="655.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_undefined_si128 (23 samples, 0.02%)</title><rect x="83.5329%" y="613" width="0.0161%" height="15" fill="rgb(225,8,4)" fg:x="119381" fg:w="23"/><text x="83.7829%" y="623.50"></text></g><g><title>hashbrown::raw::sse2::Group::load (1,319 samples, 0.92%)</title><rect x="82.6778%" y="645" width="0.9229%" height="15" fill="rgb(234,105,35)" fg:x="118159" fg:w="1319"/><text x="82.9278%" y="655.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (1,191 samples, 0.83%)</title><rect x="82.7674%" y="629" width="0.8334%" height="15" fill="rgb(236,21,32)" fg:x="118287" fg:w="1191"/><text x="83.0174%" y="639.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (74 samples, 0.05%)</title><rect x="83.5490%" y="613" width="0.0518%" height="15" fill="rgb(228,109,6)" fg:x="119404" fg:w="74"/><text x="83.7990%" y="623.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_cmpeq_epi8 (394 samples, 0.28%)</title><rect x="83.9387%" y="629" width="0.2757%" height="15" fill="rgb(229,215,31)" fg:x="119961" fg:w="394"/><text x="84.1887%" y="639.50"></text></g><g><title>core::core_arch::x86::m128iExt::as_i8x16 (76 samples, 0.05%)</title><rect x="84.1612%" y="613" width="0.0532%" height="15" fill="rgb(221,52,54)" fg:x="120279" fg:w="76"/><text x="84.4112%" y="623.50"></text></g><g><title>core::core_arch::simd::i8x16::splat (77 samples, 0.05%)</title><rect x="84.8238%" y="613" width="0.0539%" height="15" fill="rgb(252,129,43)" fg:x="121226" fg:w="77"/><text x="85.0738%" y="623.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (978 samples, 0.68%)</title><rect x="84.2144%" y="629" width="0.6843%" height="15" fill="rgb(248,183,27)" fg:x="120355" fg:w="978"/><text x="84.4644%" y="639.50"></text></g><g><title>core::core_arch::x86::m128iExt::as_i8x16 (30 samples, 0.02%)</title><rect x="84.8777%" y="613" width="0.0210%" height="15" fill="rgb(250,0,22)" fg:x="121303" fg:w="30"/><text x="85.1277%" y="623.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (2,543 samples, 1.78%)</title><rect x="83.6007%" y="645" width="1.7794%" height="15" fill="rgb(213,166,10)" fg:x="119478" fg:w="2543"/><text x="83.8507%" y="655.50">h..</text></g><g><title>core::core_arch::x86::sse2::_mm_set1_epi8 (688 samples, 0.48%)</title><rect x="84.8987%" y="629" width="0.4814%" height="15" fill="rgb(207,163,36)" fg:x="121333" fg:w="688"/><text x="85.1487%" y="639.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_set_epi8 (688 samples, 0.48%)</title><rect x="84.8987%" y="613" width="0.4814%" height="15" fill="rgb(208,122,22)" fg:x="121333" fg:w="688"/><text x="85.1487%" y="623.50"></text></g><g><title>core::core_arch::simd::i8x16::new (95 samples, 0.07%)</title><rect x="85.3136%" y="597" width="0.0665%" height="15" fill="rgb(207,104,49)" fg:x="121926" fg:w="95"/><text x="85.5636%" y="607.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_cmpeq_epi8 (365 samples, 0.26%)</title><rect x="85.7097%" y="613" width="0.2554%" height="15" fill="rgb(248,211,50)" fg:x="122492" fg:w="365"/><text x="85.9597%" y="623.50"></text></g><g><title>core::core_arch::x86::m128iExt::as_i8x16 (97 samples, 0.07%)</title><rect x="85.8972%" y="597" width="0.0679%" height="15" fill="rgb(217,13,45)" fg:x="122760" fg:w="97"/><text x="86.1472%" y="607.50"></text></g><g><title>core::core_arch::simd::i8x16::splat (87 samples, 0.06%)</title><rect x="86.5444%" y="597" width="0.0609%" height="15" fill="rgb(211,216,49)" fg:x="123685" fg:w="87"/><text x="86.7944%" y="607.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (941 samples, 0.66%)</title><rect x="85.9651%" y="613" width="0.6584%" height="15" fill="rgb(221,58,53)" fg:x="122857" fg:w="941"/><text x="86.2151%" y="623.50"></text></g><g><title>core::core_arch::x86::m128iExt::as_i8x16 (26 samples, 0.02%)</title><rect x="86.6053%" y="597" width="0.0182%" height="15" fill="rgb(220,112,41)" fg:x="123772" fg:w="26"/><text x="86.8553%" y="607.50"></text></g><g><title>coldbrew::profiler::Profiler::is_hot (15,500 samples, 10.85%)</title><rect x="76.2117%" y="757" width="10.8456%" height="15" fill="rgb(236,38,28)" fg:x="108918" fg:w="15500"/><text x="76.4617%" y="767.50">coldbrew::profil..</text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (15,371 samples, 10.76%)</title><rect x="76.3020%" y="741" width="10.7553%" height="15" fill="rgb(227,195,22)" fg:x="109047" fg:w="15371"/><text x="76.5520%" y="751.50">std::collections..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (15,371 samples, 10.76%)</title><rect x="76.3020%" y="725" width="10.7553%" height="15" fill="rgb(214,55,33)" fg:x="109047" fg:w="15371"/><text x="76.5520%" y="735.50">hashbrown::map::..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (15,269 samples, 10.68%)</title><rect x="76.3734%" y="709" width="10.6840%" height="15" fill="rgb(248,80,13)" fg:x="109149" fg:w="15269"/><text x="76.6234%" y="719.50">hashbrown::map::..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get (8,034 samples, 5.62%)</title><rect x="81.4358%" y="693" width="5.6215%" height="15" fill="rgb(238,52,6)" fg:x="116384" fg:w="8034"/><text x="81.6858%" y="703.50">hashbro..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (7,913 samples, 5.54%)</title><rect x="81.5205%" y="677" width="5.5369%" height="15" fill="rgb(224,198,47)" fg:x="116505" fg:w="7913"/><text x="81.7705%" y="687.50">hashbro..</text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::find_inner (7,643 samples, 5.35%)</title><rect x="81.7094%" y="661" width="5.3479%" height="15" fill="rgb(233,171,20)" fg:x="116775" fg:w="7643"/><text x="81.9594%" y="671.50">hashbro..</text></g><g><title>hashbrown::raw::sse2::Group::match_empty (2,397 samples, 1.68%)</title><rect x="85.3801%" y="645" width="1.6772%" height="15" fill="rgb(241,30,25)" fg:x="122021" fg:w="2397"/><text x="85.6301%" y="655.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (2,284 samples, 1.60%)</title><rect x="85.4592%" y="629" width="1.5982%" height="15" fill="rgb(207,171,38)" fg:x="122134" fg:w="2284"/><text x="85.7092%" y="639.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_set1_epi8 (620 samples, 0.43%)</title><rect x="86.6235%" y="613" width="0.4338%" height="15" fill="rgb(234,70,1)" fg:x="123798" fg:w="620"/><text x="86.8735%" y="623.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_set_epi8 (620 samples, 0.43%)</title><rect x="86.6235%" y="597" width="0.4338%" height="15" fill="rgb(232,178,18)" fg:x="123798" fg:w="620"/><text x="86.8735%" y="607.50"></text></g><g><title>core::core_arch::simd::i8x16::new (92 samples, 0.06%)</title><rect x="86.9930%" y="581" width="0.0644%" height="15" fill="rgb(241,78,40)" fg:x="124326" fg:w="92"/><text x="87.2430%" y="591.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_mut_ptr (38 samples, 0.03%)</title><rect x="87.3253%" y="725" width="0.0266%" height="15" fill="rgb(222,35,25)" fg:x="124801" fg:w="38"/><text x="87.5753%" y="735.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (38 samples, 0.03%)</title><rect x="87.3253%" y="709" width="0.0266%" height="15" fill="rgb(207,92,16)" fg:x="124801" fg:w="38"/><text x="87.5753%" y="719.50"></text></g><g><title>core::ptr::unique::Unique&lt;T&gt;::as_ptr (37 samples, 0.03%)</title><rect x="87.3260%" y="693" width="0.0259%" height="15" fill="rgb(216,59,51)" fg:x="124802" fg:w="37"/><text x="87.5760%" y="703.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::as_ptr (37 samples, 0.03%)</title><rect x="87.3260%" y="677" width="0.0259%" height="15" fill="rgb(213,80,28)" fg:x="124802" fg:w="37"/><text x="87.5760%" y="687.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::DerefMut&gt;::deref_mut (106 samples, 0.07%)</title><rect x="87.3246%" y="741" width="0.0742%" height="15" fill="rgb(220,93,7)" fg:x="124800" fg:w="106"/><text x="87.5746%" y="751.50"></text></g><g><title>core::slice::raw::from_raw_parts_mut (67 samples, 0.05%)</title><rect x="87.3519%" y="725" width="0.0469%" height="15" fill="rgb(225,24,44)" fg:x="124839" fg:w="67"/><text x="87.6019%" y="735.50"></text></g><g><title>core::ptr::slice_from_raw_parts_mut (67 samples, 0.05%)</title><rect x="87.3519%" y="709" width="0.0469%" height="15" fill="rgb(243,74,40)" fg:x="124839" fg:w="67"/><text x="87.6019%" y="719.50"></text></g><g><title>core::ptr::metadata::from_raw_parts_mut (67 samples, 0.05%)</title><rect x="87.3519%" y="693" width="0.0469%" height="15" fill="rgb(228,39,7)" fg:x="124839" fg:w="67"/><text x="87.6019%" y="703.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_ptr (17 samples, 0.01%)</title><rect x="87.4282%" y="709" width="0.0119%" height="15" fill="rgb(227,79,8)" fg:x="124948" fg:w="17"/><text x="87.6782%" y="719.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (17 samples, 0.01%)</title><rect x="87.4282%" y="693" width="0.0119%" height="15" fill="rgb(236,58,11)" fg:x="124948" fg:w="17"/><text x="87.6782%" y="703.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (65 samples, 0.05%)</title><rect x="87.4198%" y="725" width="0.0455%" height="15" fill="rgb(249,63,35)" fg:x="124936" fg:w="65"/><text x="87.6698%" y="735.50"></text></g><g><title>core::slice::raw::from_raw_parts (36 samples, 0.03%)</title><rect x="87.4401%" y="709" width="0.0252%" height="15" fill="rgb(252,114,16)" fg:x="124965" fg:w="36"/><text x="87.6901%" y="719.50"></text></g><g><title>core::ptr::slice_from_raw_parts (36 samples, 0.03%)</title><rect x="87.4401%" y="693" width="0.0252%" height="15" fill="rgb(254,151,24)" fg:x="124965" fg:w="36"/><text x="87.6901%" y="703.50"></text></g><g><title>core::ptr::metadata::from_raw_parts (36 samples, 0.03%)</title><rect x="87.4401%" y="677" width="0.0252%" height="15" fill="rgb(253,54,39)" fg:x="124965" fg:w="36"/><text x="87.6901%" y="687.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (161 samples, 0.11%)</title><rect x="87.3988%" y="741" width="0.1127%" height="15" fill="rgb(243,25,45)" fg:x="124906" fg:w="161"/><text x="87.6488%" y="751.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (66 samples, 0.05%)</title><rect x="87.4653%" y="725" width="0.0462%" height="15" fill="rgb(234,134,9)" fg:x="125001" fg:w="66"/><text x="87.7153%" y="735.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (49 samples, 0.03%)</title><rect x="87.4772%" y="709" width="0.0343%" height="15" fill="rgb(227,166,31)" fg:x="125018" fg:w="49"/><text x="87.7272%" y="719.50"></text></g><g><title>coldbrew::runtime::Runtime::jump (53 samples, 0.04%)</title><rect x="87.5171%" y="741" width="0.0371%" height="15" fill="rgb(245,143,41)" fg:x="125075" fg:w="53"/><text x="87.7671%" y="751.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::DerefMut&gt;::deref_mut (25 samples, 0.02%)</title><rect x="87.5905%" y="725" width="0.0175%" height="15" fill="rgb(238,181,32)" fg:x="125180" fg:w="25"/><text x="87.8405%" y="735.50"></text></g><g><title>core::slice::raw::from_raw_parts_mut (22 samples, 0.02%)</title><rect x="87.5926%" y="709" width="0.0154%" height="15" fill="rgb(224,113,18)" fg:x="125183" fg:w="22"/><text x="87.8426%" y="719.50"></text></g><g><title>core::ptr::slice_from_raw_parts_mut (22 samples, 0.02%)</title><rect x="87.5926%" y="693" width="0.0154%" height="15" fill="rgb(240,229,28)" fg:x="125183" fg:w="22"/><text x="87.8426%" y="703.50"></text></g><g><title>core::ptr::metadata::from_raw_parts_mut (22 samples, 0.02%)</title><rect x="87.5926%" y="677" width="0.0154%" height="15" fill="rgb(250,185,3)" fg:x="125183" fg:w="22"/><text x="87.8426%" y="687.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (42 samples, 0.03%)</title><rect x="87.6080%" y="725" width="0.0294%" height="15" fill="rgb(212,59,25)" fg:x="125205" fg:w="42"/><text x="87.8580%" y="735.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::last_mut (17 samples, 0.01%)</title><rect x="87.6374%" y="725" width="0.0119%" height="15" fill="rgb(221,87,20)" fg:x="125247" fg:w="17"/><text x="87.8874%" y="735.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (34 samples, 0.02%)</title><rect x="87.7767%" y="581" width="0.0238%" height="15" fill="rgb(213,74,28)" fg:x="125446" fg:w="34"/><text x="88.0267%" y="591.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (103 samples, 0.07%)</title><rect x="87.7291%" y="597" width="0.0721%" height="15" fill="rgb(224,132,34)" fg:x="125378" fg:w="103"/><text x="87.9791%" y="607.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (96 samples, 0.07%)</title><rect x="88.0509%" y="581" width="0.0672%" height="15" fill="rgb(222,101,24)" fg:x="125838" fg:w="96"/><text x="88.3009%" y="591.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::finish (596 samples, 0.42%)</title><rect x="87.7025%" y="645" width="0.4170%" height="15" fill="rgb(254,142,4)" fg:x="125340" fg:w="596"/><text x="87.9525%" y="655.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (596 samples, 0.42%)</title><rect x="87.7025%" y="629" width="0.4170%" height="15" fill="rgb(230,229,49)" fg:x="125340" fg:w="596"/><text x="87.9525%" y="639.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (596 samples, 0.42%)</title><rect x="87.7025%" y="613" width="0.4170%" height="15" fill="rgb(238,70,47)" fg:x="125340" fg:w="596"/><text x="87.9525%" y="623.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (455 samples, 0.32%)</title><rect x="87.8011%" y="597" width="0.3184%" height="15" fill="rgb(231,160,17)" fg:x="125481" fg:w="455"/><text x="88.0511%" y="607.50"></text></g><g><title>__memcpy_avx_unaligned_erms (68 samples, 0.05%)</title><rect x="88.1251%" y="629" width="0.0476%" height="15" fill="rgb(218,68,53)" fg:x="125944" fg:w="68"/><text x="88.3751%" y="639.50"></text></g><g><title>__memcpy_avx_unaligned_erms (103 samples, 0.07%)</title><rect x="88.1769%" y="613" width="0.0721%" height="15" fill="rgb(236,111,10)" fg:x="126018" fg:w="103"/><text x="88.4269%" y="623.50"></text></g><g><title>__memcpy_avx_unaligned_erms (154 samples, 0.11%)</title><rect x="88.2665%" y="597" width="0.1078%" height="15" fill="rgb(224,34,41)" fg:x="126146" fg:w="154"/><text x="88.5165%" y="607.50"></text></g><g><title>&lt;std::collections::hash::map::RandomState as core::hash::BuildHasher&gt;::build_hasher (386 samples, 0.27%)</title><rect x="88.1195%" y="645" width="0.2701%" height="15" fill="rgb(241,118,19)" fg:x="125936" fg:w="386"/><text x="88.3695%" y="655.50"></text></g><g><title>core::hash::sip::SipHasher13::new_with_keys (304 samples, 0.21%)</title><rect x="88.1769%" y="629" width="0.2127%" height="15" fill="rgb(238,129,25)" fg:x="126018" fg:w="304"/><text x="88.4269%" y="639.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::new_with_keys (200 samples, 0.14%)</title><rect x="88.2497%" y="613" width="0.1399%" height="15" fill="rgb(238,22,31)" fg:x="126122" fg:w="200"/><text x="88.4997%" y="623.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::reset (19 samples, 0.01%)</title><rect x="88.3763%" y="597" width="0.0133%" height="15" fill="rgb(222,174,48)" fg:x="126303" fg:w="19"/><text x="88.6263%" y="607.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (32 samples, 0.02%)</title><rect x="88.5100%" y="533" width="0.0224%" height="15" fill="rgb(206,152,40)" fg:x="126494" fg:w="32"/><text x="88.7600%" y="543.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (116 samples, 0.08%)</title><rect x="88.4582%" y="549" width="0.0812%" height="15" fill="rgb(218,99,54)" fg:x="126420" fg:w="116"/><text x="88.7082%" y="559.50"></text></g><g><title>core::hash::sip::u8to64_le (24 samples, 0.02%)</title><rect x="88.5393%" y="549" width="0.0168%" height="15" fill="rgb(220,174,26)" fg:x="126536" fg:w="24"/><text x="88.7893%" y="559.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (16 samples, 0.01%)</title><rect x="88.5561%" y="549" width="0.0112%" height="15" fill="rgb(245,116,9)" fg:x="126560" fg:w="16"/><text x="88.8061%" y="559.50"></text></g><g><title>hashbrown::map::make_hash (1,285 samples, 0.90%)</title><rect x="87.6766%" y="677" width="0.8991%" height="15" fill="rgb(209,72,35)" fg:x="125303" fg:w="1285"/><text x="87.9266%" y="687.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1,274 samples, 0.89%)</title><rect x="87.6843%" y="661" width="0.8914%" height="15" fill="rgb(226,126,21)" fg:x="125314" fg:w="1274"/><text x="87.9343%" y="671.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (266 samples, 0.19%)</title><rect x="88.3896%" y="645" width="0.1861%" height="15" fill="rgb(227,192,1)" fg:x="126322" fg:w="266"/><text x="88.6396%" y="655.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for usize&gt;::hash (262 samples, 0.18%)</title><rect x="88.3924%" y="629" width="0.1833%" height="15" fill="rgb(237,180,29)" fg:x="126326" fg:w="262"/><text x="88.6424%" y="639.50"></text></g><g><title>core::hash::Hasher::write_usize (259 samples, 0.18%)</title><rect x="88.3945%" y="613" width="0.1812%" height="15" fill="rgb(230,197,35)" fg:x="126329" fg:w="259"/><text x="88.6445%" y="623.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (259 samples, 0.18%)</title><rect x="88.3945%" y="597" width="0.1812%" height="15" fill="rgb(246,193,31)" fg:x="126329" fg:w="259"/><text x="88.6445%" y="607.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (255 samples, 0.18%)</title><rect x="88.3973%" y="581" width="0.1784%" height="15" fill="rgb(241,36,4)" fg:x="126333" fg:w="255"/><text x="88.6473%" y="591.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (255 samples, 0.18%)</title><rect x="88.3973%" y="565" width="0.1784%" height="15" fill="rgb(241,130,17)" fg:x="126333" fg:w="255"/><text x="88.6473%" y="575.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ref (36 samples, 0.03%)</title><rect x="88.5939%" y="661" width="0.0252%" height="15" fill="rgb(206,137,32)" fg:x="126614" fg:w="36"/><text x="88.8439%" y="671.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ptr (36 samples, 0.03%)</title><rect x="88.5939%" y="645" width="0.0252%" height="15" fill="rgb(237,228,51)" fg:x="126614" fg:w="36"/><text x="88.8439%" y="655.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (16 samples, 0.01%)</title><rect x="88.6079%" y="629" width="0.0112%" height="15" fill="rgb(243,6,42)" fg:x="126634" fg:w="16"/><text x="88.8579%" y="639.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (29 samples, 0.02%)</title><rect x="88.6583%" y="613" width="0.0203%" height="15" fill="rgb(251,74,28)" fg:x="126706" fg:w="29"/><text x="88.9083%" y="623.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::from_base_index (48 samples, 0.03%)</title><rect x="88.6499%" y="629" width="0.0336%" height="15" fill="rgb(218,20,49)" fg:x="126694" fg:w="48"/><text x="88.8999%" y="639.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::bucket (71 samples, 0.05%)</title><rect x="88.6415%" y="645" width="0.0497%" height="15" fill="rgb(238,28,14)" fg:x="126682" fg:w="71"/><text x="88.8915%" y="655.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (34 samples, 0.02%)</title><rect x="88.6912%" y="645" width="0.0238%" height="15" fill="rgb(229,40,46)" fg:x="126753" fg:w="34"/><text x="88.9412%" y="655.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMask as core::iter::traits::collect::IntoIterator&gt;::into_iter (28 samples, 0.02%)</title><rect x="88.8934%" y="629" width="0.0196%" height="15" fill="rgb(244,195,20)" fg:x="127042" fg:w="28"/><text x="89.1434%" y="639.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::ops::try_trait::Try&gt;::branch (19 samples, 0.01%)</title><rect x="88.9543%" y="613" width="0.0133%" height="15" fill="rgb(253,56,35)" fg:x="127129" fg:w="19"/><text x="89.2043%" y="623.50"></text></g><g><title>core::num::nonzero::NonZeroU16::new (56 samples, 0.04%)</title><rect x="89.0193%" y="597" width="0.0392%" height="15" fill="rgb(210,149,44)" fg:x="127222" fg:w="56"/><text x="89.2693%" y="607.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (184 samples, 0.13%)</title><rect x="88.9676%" y="613" width="0.1287%" height="15" fill="rgb(240,135,12)" fg:x="127148" fg:w="184"/><text x="89.2176%" y="623.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::nonzero_trailing_zeros (54 samples, 0.04%)</title><rect x="89.0585%" y="597" width="0.0378%" height="15" fill="rgb(251,24,50)" fg:x="127278" fg:w="54"/><text x="89.3085%" y="607.50"></text></g><g><title>core::num::nonzero::NonZeroU16::trailing_zeros (41 samples, 0.03%)</title><rect x="89.0676%" y="581" width="0.0287%" height="15" fill="rgb(243,200,47)" fg:x="127291" fg:w="41"/><text x="89.3176%" y="591.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (270 samples, 0.19%)</title><rect x="88.9130%" y="629" width="0.1889%" height="15" fill="rgb(224,166,26)" fg:x="127070" fg:w="270"/><text x="89.1630%" y="639.50"></text></g><g><title>hashbrown::map::equivalent_key::{{closure}} (141 samples, 0.10%)</title><rect x="89.1292%" y="613" width="0.0987%" height="15" fill="rgb(233,0,47)" fg:x="127379" fg:w="141"/><text x="89.3792%" y="623.50"></text></g><g><title>&lt;Q as hashbrown::Equivalent&lt;K&gt;&gt;::equivalent (128 samples, 0.09%)</title><rect x="89.1383%" y="597" width="0.0896%" height="15" fill="rgb(253,80,5)" fg:x="127392" fg:w="128"/><text x="89.3883%" y="607.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (95 samples, 0.07%)</title><rect x="89.1614%" y="581" width="0.0665%" height="15" fill="rgb(214,133,25)" fg:x="127425" fg:w="95"/><text x="89.4114%" y="591.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq for usize&gt;::eq (91 samples, 0.06%)</title><rect x="89.1642%" y="565" width="0.0637%" height="15" fill="rgb(209,27,14)" fg:x="127429" fg:w="91"/><text x="89.4142%" y="575.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ptr (25 samples, 0.02%)</title><rect x="89.2356%" y="597" width="0.0175%" height="15" fill="rgb(219,102,51)" fg:x="127531" fg:w="25"/><text x="89.4856%" y="607.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (16 samples, 0.01%)</title><rect x="89.2419%" y="581" width="0.0112%" height="15" fill="rgb(237,18,16)" fg:x="127540" fg:w="16"/><text x="89.4919%" y="591.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ref (62 samples, 0.04%)</title><rect x="89.2279%" y="613" width="0.0434%" height="15" fill="rgb(241,85,17)" fg:x="127520" fg:w="62"/><text x="89.4779%" y="623.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::{{closure}} (26 samples, 0.02%)</title><rect x="89.2531%" y="597" width="0.0182%" height="15" fill="rgb(236,90,42)" fg:x="127556" fg:w="26"/><text x="89.5031%" y="607.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (28 samples, 0.02%)</title><rect x="89.3258%" y="581" width="0.0196%" height="15" fill="rgb(249,57,21)" fg:x="127660" fg:w="28"/><text x="89.5758%" y="591.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::from_base_index (101 samples, 0.07%)</title><rect x="89.2803%" y="597" width="0.0707%" height="15" fill="rgb(243,12,36)" fg:x="127595" fg:w="101"/><text x="89.5303%" y="607.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::{{closure}} (359 samples, 0.25%)</title><rect x="89.1019%" y="629" width="0.2512%" height="15" fill="rgb(253,128,47)" fg:x="127340" fg:w="359"/><text x="89.3519%" y="639.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::bucket (117 samples, 0.08%)</title><rect x="89.2712%" y="613" width="0.0819%" height="15" fill="rgb(207,33,20)" fg:x="127582" fg:w="117"/><text x="89.5212%" y="623.50"></text></g><g><title>hashbrown::raw::sse2::Group::load (269 samples, 0.19%)</title><rect x="89.3664%" y="629" width="0.1882%" height="15" fill="rgb(233,215,35)" fg:x="127718" fg:w="269"/><text x="89.6164%" y="639.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (239 samples, 0.17%)</title><rect x="89.3874%" y="613" width="0.1672%" height="15" fill="rgb(249,188,52)" fg:x="127748" fg:w="239"/><text x="89.6374%" y="623.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_cmpeq_epi8 (69 samples, 0.05%)</title><rect x="89.6246%" y="613" width="0.0483%" height="15" fill="rgb(225,12,32)" fg:x="128087" fg:w="69"/><text x="89.8746%" y="623.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (207 samples, 0.14%)</title><rect x="89.6729%" y="613" width="0.1448%" height="15" fill="rgb(247,98,14)" fg:x="128156" fg:w="207"/><text x="89.9229%" y="623.50"></text></g><g><title>coldbrew::runtime::Runtime::load (3,404 samples, 2.38%)</title><rect x="87.5541%" y="741" width="2.3818%" height="15" fill="rgb(247,219,48)" fg:x="125128" fg:w="3404"/><text x="87.8041%" y="751.50">co..</text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (3,268 samples, 2.29%)</title><rect x="87.6493%" y="725" width="2.2867%" height="15" fill="rgb(253,60,48)" fg:x="125264" fg:w="3268"/><text x="87.8993%" y="735.50">s..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (3,268 samples, 2.29%)</title><rect x="87.6493%" y="709" width="2.2867%" height="15" fill="rgb(245,15,52)" fg:x="125264" fg:w="3268"/><text x="87.8993%" y="719.50">h..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (3,241 samples, 2.27%)</title><rect x="87.6682%" y="693" width="2.2678%" height="15" fill="rgb(220,133,28)" fg:x="125291" fg:w="3241"/><text x="87.9182%" y="703.50">h..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get (1,944 samples, 1.36%)</title><rect x="88.5757%" y="677" width="1.3602%" height="15" fill="rgb(217,180,4)" fg:x="126588" fg:w="1944"/><text x="88.8257%" y="687.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (1,882 samples, 1.32%)</title><rect x="88.6191%" y="661" width="1.3169%" height="15" fill="rgb(251,24,1)" fg:x="126650" fg:w="1882"/><text x="88.8691%" y="671.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::find_inner (1,745 samples, 1.22%)</title><rect x="88.7150%" y="645" width="1.2210%" height="15" fill="rgb(212,185,49)" fg:x="126787" fg:w="1745"/><text x="88.9650%" y="655.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (545 samples, 0.38%)</title><rect x="89.5546%" y="629" width="0.3813%" height="15" fill="rgb(215,175,22)" fg:x="127987" fg:w="545"/><text x="89.8046%" y="639.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_set1_epi8 (169 samples, 0.12%)</title><rect x="89.8177%" y="613" width="0.1183%" height="15" fill="rgb(250,205,14)" fg:x="128363" fg:w="169"/><text x="90.0677%" y="623.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_set_epi8 (169 samples, 0.12%)</title><rect x="89.8177%" y="597" width="0.1183%" height="15" fill="rgb(225,211,22)" fg:x="128363" fg:w="169"/><text x="90.0677%" y="607.50"></text></g><g><title>core::core_arch::simd::i8x16::new (31 samples, 0.02%)</title><rect x="89.9143%" y="581" width="0.0217%" height="15" fill="rgb(251,179,42)" fg:x="128501" fg:w="31"/><text x="90.1643%" y="591.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::DerefMut&gt;::deref_mut (50 samples, 0.03%)</title><rect x="89.9829%" y="725" width="0.0350%" height="15" fill="rgb(208,216,51)" fg:x="128599" fg:w="50"/><text x="90.2329%" y="735.50"></text></g><g><title>core::slice::raw::from_raw_parts_mut (38 samples, 0.03%)</title><rect x="89.9913%" y="709" width="0.0266%" height="15" fill="rgb(235,36,11)" fg:x="128611" fg:w="38"/><text x="90.2413%" y="719.50"></text></g><g><title>core::ptr::slice_from_raw_parts_mut (38 samples, 0.03%)</title><rect x="89.9913%" y="693" width="0.0266%" height="15" fill="rgb(213,189,28)" fg:x="128611" fg:w="38"/><text x="90.2413%" y="703.50"></text></g><g><title>core::ptr::metadata::from_raw_parts_mut (38 samples, 0.03%)</title><rect x="89.9913%" y="677" width="0.0266%" height="15" fill="rgb(227,203,42)" fg:x="128611" fg:w="38"/><text x="90.2413%" y="687.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::pop (89 samples, 0.06%)</title><rect x="90.0178%" y="725" width="0.0623%" height="15" fill="rgb(244,72,36)" fg:x="128649" fg:w="89"/><text x="90.2678%" y="735.50"></text></g><g><title>coldbrew::runtime::Runtime::pop (247 samples, 0.17%)</title><rect x="89.9360%" y="741" width="0.1728%" height="15" fill="rgb(213,53,17)" fg:x="128532" fg:w="247"/><text x="90.1860%" y="751.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::last_mut (41 samples, 0.03%)</title><rect x="90.0801%" y="725" width="0.0287%" height="15" fill="rgb(207,167,3)" fg:x="128738" fg:w="41"/><text x="90.3301%" y="735.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::DerefMut&gt;::deref_mut (24 samples, 0.02%)</title><rect x="90.1263%" y="725" width="0.0168%" height="15" fill="rgb(216,98,30)" fg:x="128804" fg:w="24"/><text x="90.3763%" y="735.50"></text></g><g><title>core::slice::raw::from_raw_parts_mut (16 samples, 0.01%)</title><rect x="90.1319%" y="709" width="0.0112%" height="15" fill="rgb(236,123,15)" fg:x="128812" fg:w="16"/><text x="90.3819%" y="719.50"></text></g><g><title>core::ptr::slice_from_raw_parts_mut (16 samples, 0.01%)</title><rect x="90.1319%" y="693" width="0.0112%" height="15" fill="rgb(248,81,50)" fg:x="128812" fg:w="16"/><text x="90.3819%" y="703.50"></text></g><g><title>core::ptr::metadata::from_raw_parts_mut (16 samples, 0.01%)</title><rect x="90.1319%" y="677" width="0.0112%" height="15" fill="rgb(214,120,4)" fg:x="128812" fg:w="16"/><text x="90.3819%" y="687.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (57 samples, 0.04%)</title><rect x="90.1431%" y="725" width="0.0399%" height="15" fill="rgb(208,179,34)" fg:x="128828" fg:w="57"/><text x="90.3931%" y="735.50"></text></g><g><title>coldbrew::runtime::Runtime::push (122 samples, 0.09%)</title><rect x="90.1088%" y="741" width="0.0854%" height="15" fill="rgb(227,140,7)" fg:x="128779" fg:w="122"/><text x="90.3588%" y="751.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::last_mut (16 samples, 0.01%)</title><rect x="90.1830%" y="725" width="0.0112%" height="15" fill="rgb(214,22,6)" fg:x="128885" fg:w="16"/><text x="90.4330%" y="735.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::finish (19 samples, 0.01%)</title><rect x="90.2075%" y="661" width="0.0133%" height="15" fill="rgb(207,137,27)" fg:x="128920" fg:w="19"/><text x="90.4575%" y="671.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (19 samples, 0.01%)</title><rect x="90.2075%" y="645" width="0.0133%" height="15" fill="rgb(210,8,46)" fg:x="128920" fg:w="19"/><text x="90.4575%" y="655.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (19 samples, 0.01%)</title><rect x="90.2075%" y="629" width="0.0133%" height="15" fill="rgb(240,16,54)" fg:x="128920" fg:w="19"/><text x="90.4575%" y="639.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (15 samples, 0.01%)</title><rect x="90.2103%" y="613" width="0.0105%" height="15" fill="rgb(211,209,29)" fg:x="128924" fg:w="15"/><text x="90.4603%" y="623.50"></text></g><g><title>&lt;std::collections::hash::map::RandomState as core::hash::BuildHasher&gt;::build_hasher (18 samples, 0.01%)</title><rect x="90.2208%" y="661" width="0.0126%" height="15" fill="rgb(226,228,24)" fg:x="128939" fg:w="18"/><text x="90.4708%" y="671.50"></text></g><g><title>hashbrown::map::make_hash (53 samples, 0.04%)</title><rect x="90.2068%" y="693" width="0.0371%" height="15" fill="rgb(222,84,9)" fg:x="128919" fg:w="53"/><text x="90.4568%" y="703.50"></text></g><g><title>core::hash::BuildHasher::hash_one (52 samples, 0.04%)</title><rect x="90.2075%" y="677" width="0.0364%" height="15" fill="rgb(234,203,30)" fg:x="128920" fg:w="52"/><text x="90.4575%" y="687.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (15 samples, 0.01%)</title><rect x="90.2334%" y="661" width="0.0105%" height="15" fill="rgb(238,109,14)" fg:x="128957" fg:w="15"/><text x="90.4834%" y="671.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find_or_find_insert_slot::{{closure}} (15 samples, 0.01%)</title><rect x="90.2648%" y="661" width="0.0105%" height="15" fill="rgb(233,206,34)" fg:x="129002" fg:w="15"/><text x="90.5148%" y="671.50"></text></g><g><title>hashbrown::raw::sse2::Group::load (16 samples, 0.01%)</title><rect x="90.2753%" y="661" width="0.0112%" height="15" fill="rgb(220,167,47)" fg:x="129017" fg:w="16"/><text x="90.5253%" y="671.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (16 samples, 0.01%)</title><rect x="90.2753%" y="645" width="0.0112%" height="15" fill="rgb(238,105,10)" fg:x="129017" fg:w="16"/><text x="90.5253%" y="655.50"></text></g><g><title>coldbrew::runtime::Runtime::store (157 samples, 0.11%)</title><rect x="90.1942%" y="741" width="0.1099%" height="15" fill="rgb(213,227,17)" fg:x="128901" fg:w="157"/><text x="90.4442%" y="751.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::insert (144 samples, 0.10%)</title><rect x="90.2033%" y="725" width="0.1008%" height="15" fill="rgb(217,132,38)" fg:x="128914" fg:w="144"/><text x="90.4533%" y="735.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (144 samples, 0.10%)</title><rect x="90.2033%" y="709" width="0.1008%" height="15" fill="rgb(242,146,4)" fg:x="128914" fg:w="144"/><text x="90.4533%" y="719.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find_or_find_insert_slot (84 samples, 0.06%)</title><rect x="90.2453%" y="693" width="0.0588%" height="15" fill="rgb(212,61,9)" fg:x="128974" fg:w="84"/><text x="90.4953%" y="703.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::find_or_find_insert_slot_inner (76 samples, 0.05%)</title><rect x="90.2508%" y="677" width="0.0532%" height="15" fill="rgb(247,126,22)" fg:x="128982" fg:w="76"/><text x="90.5008%" y="687.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (25 samples, 0.02%)</title><rect x="90.2865%" y="661" width="0.0175%" height="15" fill="rgb(220,196,2)" fg:x="129033" fg:w="25"/><text x="90.5365%" y="671.50"></text></g><g><title>coldbrew::runtime::Value::rem (32 samples, 0.02%)</title><rect x="90.3040%" y="741" width="0.0224%" height="15" fill="rgb(208,46,4)" fg:x="129058" fg:w="32"/><text x="90.5540%" y="751.50"></text></g><g><title>&lt;&amp;i32 as core::ops::arith::Rem&lt;&amp;i32&gt;&gt;::rem (16 samples, 0.01%)</title><rect x="90.3152%" y="725" width="0.0112%" height="15" fill="rgb(252,104,46)" fg:x="129074" fg:w="16"/><text x="90.5652%" y="735.50"></text></g><g><title>core::cmp::PartialOrd::ge (46 samples, 0.03%)</title><rect x="90.3264%" y="741" width="0.0322%" height="15" fill="rgb(237,152,48)" fg:x="129090" fg:w="46"/><text x="90.5764%" y="751.50"></text></g><g><title>&lt;coldbrew::runtime::Value as core::cmp::PartialOrd&gt;::partial_cmp (30 samples, 0.02%)</title><rect x="90.3376%" y="725" width="0.0210%" height="15" fill="rgb(221,59,37)" fg:x="129106" fg:w="30"/><text x="90.5876%" y="735.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (25 samples, 0.02%)</title><rect x="90.4300%" y="709" width="0.0175%" height="15" fill="rgb(209,202,51)" fg:x="129238" fg:w="25"/><text x="90.6800%" y="719.50"></text></g><g><title>core::slice::raw::from_raw_parts (15 samples, 0.01%)</title><rect x="90.4370%" y="693" width="0.0105%" height="15" fill="rgb(228,81,30)" fg:x="129248" fg:w="15"/><text x="90.6870%" y="703.50"></text></g><g><title>core::ptr::slice_from_raw_parts (15 samples, 0.01%)</title><rect x="90.4370%" y="677" width="0.0105%" height="15" fill="rgb(227,42,39)" fg:x="129248" fg:w="15"/><text x="90.6870%" y="687.50"></text></g><g><title>core::ptr::metadata::from_raw_parts (15 samples, 0.01%)</title><rect x="90.4370%" y="661" width="0.0105%" height="15" fill="rgb(221,26,2)" fg:x="129248" fg:w="15"/><text x="90.6870%" y="671.50"></text></g><g><title>&lt;&amp;i32 as core::ops::arith::Sub&lt;i32&gt;&gt;::sub (18 samples, 0.01%)</title><rect x="90.4692%" y="693" width="0.0126%" height="15" fill="rgb(254,61,31)" fg:x="129294" fg:w="18"/><text x="90.7192%" y="703.50"></text></g><g><title>core::option::Option&lt;T&gt;::map_or_else (205 samples, 0.14%)</title><rect x="90.3684%" y="741" width="0.1434%" height="15" fill="rgb(222,173,38)" fg:x="129150" fg:w="205"/><text x="90.6184%" y="751.50"></text></g><g><title>coldbrew::runtime::Runtime::eval::{{closure}} (117 samples, 0.08%)</title><rect x="90.4300%" y="725" width="0.0819%" height="15" fill="rgb(218,50,12)" fg:x="129238" fg:w="117"/><text x="90.6800%" y="735.50"></text></g><g><title>coldbrew::runtime::Runtime::get_relative_offset (92 samples, 0.06%)</title><rect x="90.4475%" y="709" width="0.0644%" height="15" fill="rgb(223,88,40)" fg:x="129263" fg:w="92"/><text x="90.6975%" y="719.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get (42 samples, 0.03%)</title><rect x="90.4825%" y="693" width="0.0294%" height="15" fill="rgb(237,54,19)" fg:x="129313" fg:w="42"/><text x="90.7325%" y="703.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get (22 samples, 0.02%)</title><rect x="90.4964%" y="677" width="0.0154%" height="15" fill="rgb(251,129,25)" fg:x="129333" fg:w="22"/><text x="90.7464%" y="687.50"></text></g><g><title>core::option::Option&lt;T&gt;::unwrap (18 samples, 0.01%)</title><rect x="90.5118%" y="741" width="0.0126%" height="15" fill="rgb(238,97,19)" fg:x="129355" fg:w="18"/><text x="90.7618%" y="751.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::last_mut (102 samples, 0.07%)</title><rect x="90.5251%" y="741" width="0.0714%" height="15" fill="rgb(240,169,18)" fg:x="129374" fg:w="102"/><text x="90.7751%" y="751.50"></text></g><g><title>coldbrew::runtime::Runtime::eval::{{closure}} (263 samples, 0.18%)</title><rect x="90.6686%" y="725" width="0.1840%" height="15" fill="rgb(230,187,49)" fg:x="129579" fg:w="263"/><text x="90.9186%" y="735.50"></text></g><g><title>coldbrew::runtime::Value::add (176 samples, 0.12%)</title><rect x="90.7295%" y="709" width="0.1232%" height="15" fill="rgb(209,44,26)" fg:x="129666" fg:w="176"/><text x="90.9795%" y="719.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (28 samples, 0.02%)</title><rect x="90.8729%" y="661" width="0.0196%" height="15" fill="rgb(244,0,6)" fg:x="129871" fg:w="28"/><text x="91.1229%" y="671.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (21 samples, 0.01%)</title><rect x="90.8778%" y="645" width="0.0147%" height="15" fill="rgb(248,18,21)" fg:x="129878" fg:w="21"/><text x="91.1278%" y="655.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ptr (41 samples, 0.03%)</title><rect x="90.8659%" y="677" width="0.0287%" height="15" fill="rgb(245,180,19)" fg:x="129861" fg:w="41"/><text x="91.1159%" y="687.50"></text></g><g><title>std::collections::hash::map::Entry&lt;K,V&gt;::and_modify (432 samples, 0.30%)</title><rect x="90.5965%" y="741" width="0.3023%" height="15" fill="rgb(252,118,36)" fg:x="129476" fg:w="432"/><text x="90.8465%" y="751.50"></text></g><g><title>std::collections::hash::map::OccupiedEntry&lt;K,V&gt;::get_mut (66 samples, 0.05%)</title><rect x="90.8526%" y="725" width="0.0462%" height="15" fill="rgb(210,224,19)" fg:x="129842" fg:w="66"/><text x="91.1026%" y="735.50"></text></g><g><title>hashbrown::rustc_entry::RustcOccupiedEntry&lt;K,V,A&gt;::get_mut (55 samples, 0.04%)</title><rect x="90.8603%" y="709" width="0.0385%" height="15" fill="rgb(218,30,24)" fg:x="129853" fg:w="55"/><text x="91.1103%" y="719.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_mut (48 samples, 0.03%)</title><rect x="90.8652%" y="693" width="0.0336%" height="15" fill="rgb(219,75,50)" fg:x="129860" fg:w="48"/><text x="91.1152%" y="703.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (25 samples, 0.02%)</title><rect x="91.0324%" y="661" width="0.0175%" height="15" fill="rgb(234,72,50)" fg:x="130099" fg:w="25"/><text x="91.2824%" y="671.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ptr (42 samples, 0.03%)</title><rect x="91.0219%" y="677" width="0.0294%" height="15" fill="rgb(219,100,48)" fg:x="130084" fg:w="42"/><text x="91.2719%" y="687.50"></text></g><g><title>std::collections::hash::map::Entry&lt;K,V&gt;::or_insert (226 samples, 0.16%)</title><rect x="90.8988%" y="741" width="0.1581%" height="15" fill="rgb(253,5,41)" fg:x="129908" fg:w="226"/><text x="91.1488%" y="751.50"></text></g><g><title>std::collections::hash::map::OccupiedEntry&lt;K,V&gt;::into_mut (102 samples, 0.07%)</title><rect x="90.9856%" y="725" width="0.0714%" height="15" fill="rgb(247,181,11)" fg:x="130032" fg:w="102"/><text x="91.2356%" y="735.50"></text></g><g><title>hashbrown::rustc_entry::RustcOccupiedEntry&lt;K,V,A&gt;::into_mut (55 samples, 0.04%)</title><rect x="91.0184%" y="709" width="0.0385%" height="15" fill="rgb(222,223,25)" fg:x="130079" fg:w="55"/><text x="91.2684%" y="719.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_mut (52 samples, 0.04%)</title><rect x="91.0205%" y="693" width="0.0364%" height="15" fill="rgb(214,198,28)" fg:x="130082" fg:w="52"/><text x="91.2705%" y="703.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (21 samples, 0.01%)</title><rect x="91.2067%" y="613" width="0.0147%" height="15" fill="rgb(230,46,43)" fg:x="130348" fg:w="21"/><text x="91.4567%" y="623.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (99 samples, 0.07%)</title><rect x="91.1556%" y="629" width="0.0693%" height="15" fill="rgb(233,65,53)" fg:x="130275" fg:w="99"/><text x="91.4056%" y="639.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (57 samples, 0.04%)</title><rect x="91.3529%" y="613" width="0.0399%" height="15" fill="rgb(221,121,27)" fg:x="130557" fg:w="57"/><text x="91.6029%" y="623.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::finish (368 samples, 0.26%)</title><rect x="91.1388%" y="677" width="0.2575%" height="15" fill="rgb(247,70,47)" fg:x="130251" fg:w="368"/><text x="91.3888%" y="687.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (368 samples, 0.26%)</title><rect x="91.1388%" y="661" width="0.2575%" height="15" fill="rgb(228,85,35)" fg:x="130251" fg:w="368"/><text x="91.3888%" y="671.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (368 samples, 0.26%)</title><rect x="91.1388%" y="645" width="0.2575%" height="15" fill="rgb(209,50,18)" fg:x="130251" fg:w="368"/><text x="91.3888%" y="655.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (245 samples, 0.17%)</title><rect x="91.2249%" y="629" width="0.1714%" height="15" fill="rgb(250,19,35)" fg:x="130374" fg:w="245"/><text x="91.4749%" y="639.50"></text></g><g><title>__memcpy_avx_unaligned_erms (94 samples, 0.07%)</title><rect x="91.3991%" y="661" width="0.0658%" height="15" fill="rgb(253,107,29)" fg:x="130623" fg:w="94"/><text x="91.6491%" y="671.50"></text></g><g><title>__memcpy_avx_unaligned_erms (223 samples, 0.16%)</title><rect x="91.4656%" y="645" width="0.1560%" height="15" fill="rgb(252,179,29)" fg:x="130718" fg:w="223"/><text x="91.7156%" y="655.50"></text></g><g><title>__memcpy_avx_unaligned_erms (69 samples, 0.05%)</title><rect x="91.6510%" y="629" width="0.0483%" height="15" fill="rgb(238,194,6)" fg:x="130983" fg:w="69"/><text x="91.9010%" y="639.50"></text></g><g><title>&lt;std::collections::hash::map::RandomState as core::hash::BuildHasher&gt;::build_hasher (451 samples, 0.32%)</title><rect x="91.3963%" y="677" width="0.3156%" height="15" fill="rgb(238,164,29)" fg:x="130619" fg:w="451"/><text x="91.6463%" y="687.50"></text></g><g><title>core::hash::sip::SipHasher13::new_with_keys (352 samples, 0.25%)</title><rect x="91.4656%" y="661" width="0.2463%" height="15" fill="rgb(224,25,9)" fg:x="130718" fg:w="352"/><text x="91.7156%" y="671.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::new_with_keys (127 samples, 0.09%)</title><rect x="91.6230%" y="645" width="0.0889%" height="15" fill="rgb(244,153,23)" fg:x="130943" fg:w="127"/><text x="91.8730%" y="655.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (28 samples, 0.02%)</title><rect x="91.8350%" y="565" width="0.0196%" height="15" fill="rgb(212,203,14)" fg:x="131246" fg:w="28"/><text x="92.0850%" y="575.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (114 samples, 0.08%)</title><rect x="91.7769%" y="581" width="0.0798%" height="15" fill="rgb(220,164,20)" fg:x="131163" fg:w="114"/><text x="92.0269%" y="591.50"></text></g><g><title>core::hash::sip::u8to64_le (39 samples, 0.03%)</title><rect x="91.8567%" y="581" width="0.0273%" height="15" fill="rgb(222,203,48)" fg:x="131277" fg:w="39"/><text x="92.1067%" y="591.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (257 samples, 0.18%)</title><rect x="91.7189%" y="629" width="0.1798%" height="15" fill="rgb(215,159,22)" fg:x="131080" fg:w="257"/><text x="91.9689%" y="639.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (250 samples, 0.17%)</title><rect x="91.7238%" y="613" width="0.1749%" height="15" fill="rgb(216,183,47)" fg:x="131087" fg:w="250"/><text x="91.9738%" y="623.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (250 samples, 0.17%)</title><rect x="91.7238%" y="597" width="0.1749%" height="15" fill="rgb(229,195,25)" fg:x="131087" fg:w="250"/><text x="91.9738%" y="607.50"></text></g><g><title>hashbrown::map::make_hash (1,129 samples, 0.79%)</title><rect x="91.1136%" y="709" width="0.7900%" height="15" fill="rgb(224,132,51)" fg:x="130215" fg:w="1129"/><text x="91.3636%" y="719.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1,119 samples, 0.78%)</title><rect x="91.1206%" y="693" width="0.7830%" height="15" fill="rgb(240,63,7)" fg:x="130225" fg:w="1119"/><text x="91.3706%" y="703.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (274 samples, 0.19%)</title><rect x="91.7119%" y="677" width="0.1917%" height="15" fill="rgb(249,182,41)" fg:x="131070" fg:w="274"/><text x="91.9619%" y="687.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for usize&gt;::hash (268 samples, 0.19%)</title><rect x="91.7161%" y="661" width="0.1875%" height="15" fill="rgb(243,47,26)" fg:x="131076" fg:w="268"/><text x="91.9661%" y="671.50"></text></g><g><title>core::hash::Hasher::write_usize (264 samples, 0.18%)</title><rect x="91.7189%" y="645" width="0.1847%" height="15" fill="rgb(233,48,2)" fg:x="131080" fg:w="264"/><text x="91.9689%" y="655.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (21 samples, 0.01%)</title><rect x="91.9477%" y="661" width="0.0147%" height="15" fill="rgb(244,165,34)" fg:x="131407" fg:w="21"/><text x="92.1977%" y="671.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::from_base_index (41 samples, 0.03%)</title><rect x="91.9379%" y="677" width="0.0287%" height="15" fill="rgb(207,89,7)" fg:x="131393" fg:w="41"/><text x="92.1879%" y="687.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::bucket (71 samples, 0.05%)</title><rect x="91.9246%" y="693" width="0.0497%" height="15" fill="rgb(244,117,36)" fg:x="131374" fg:w="71"/><text x="92.1746%" y="703.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (41 samples, 0.03%)</title><rect x="91.9743%" y="693" width="0.0287%" height="15" fill="rgb(226,144,34)" fg:x="131445" fg:w="41"/><text x="92.2243%" y="703.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMask as core::iter::traits::collect::IntoIterator&gt;::into_iter (35 samples, 0.02%)</title><rect x="92.1646%" y="677" width="0.0245%" height="15" fill="rgb(213,23,19)" fg:x="131717" fg:w="35"/><text x="92.4146%" y="687.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (19 samples, 0.01%)</title><rect x="92.2471%" y="645" width="0.0133%" height="15" fill="rgb(217,75,12)" fg:x="131835" fg:w="19"/><text x="92.4971%" y="655.50"></text></g><g><title>core::num::nonzero::NonZeroU16::new (39 samples, 0.03%)</title><rect x="92.2604%" y="645" width="0.0273%" height="15" fill="rgb(224,159,17)" fg:x="131854" fg:w="39"/><text x="92.5104%" y="655.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (147 samples, 0.10%)</title><rect x="92.2171%" y="661" width="0.1029%" height="15" fill="rgb(217,118,1)" fg:x="131792" fg:w="147"/><text x="92.4671%" y="671.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::nonzero_trailing_zeros (46 samples, 0.03%)</title><rect x="92.2877%" y="645" width="0.0322%" height="15" fill="rgb(232,180,48)" fg:x="131893" fg:w="46"/><text x="92.5377%" y="655.50"></text></g><g><title>core::num::nonzero::NonZeroU16::trailing_zeros (36 samples, 0.03%)</title><rect x="92.2947%" y="629" width="0.0252%" height="15" fill="rgb(230,27,33)" fg:x="131903" fg:w="36"/><text x="92.5447%" y="639.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (191 samples, 0.13%)</title><rect x="92.1891%" y="677" width="0.1336%" height="15" fill="rgb(205,31,21)" fg:x="131752" fg:w="191"/><text x="92.4391%" y="687.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ptr (36 samples, 0.03%)</title><rect x="92.3549%" y="645" width="0.0252%" height="15" fill="rgb(253,59,4)" fg:x="131989" fg:w="36"/><text x="92.6049%" y="655.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (21 samples, 0.01%)</title><rect x="92.3654%" y="629" width="0.0147%" height="15" fill="rgb(224,201,9)" fg:x="132004" fg:w="21"/><text x="92.6154%" y="639.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ref (52 samples, 0.04%)</title><rect x="92.3521%" y="661" width="0.0364%" height="15" fill="rgb(229,206,30)" fg:x="131985" fg:w="52"/><text x="92.6021%" y="671.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (18 samples, 0.01%)</title><rect x="92.4228%" y="629" width="0.0126%" height="15" fill="rgb(212,67,47)" fg:x="132086" fg:w="18"/><text x="92.6728%" y="639.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::from_base_index (61 samples, 0.04%)</title><rect x="92.3948%" y="645" width="0.0427%" height="15" fill="rgb(211,96,50)" fg:x="132046" fg:w="61"/><text x="92.6448%" y="655.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::bucket (77 samples, 0.05%)</title><rect x="92.3885%" y="661" width="0.0539%" height="15" fill="rgb(252,114,18)" fg:x="132037" fg:w="77"/><text x="92.6385%" y="671.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::{{closure}} (233 samples, 0.16%)</title><rect x="92.3227%" y="677" width="0.1630%" height="15" fill="rgb(223,58,37)" fg:x="131943" fg:w="233"/><text x="92.5727%" y="687.50"></text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry::{{closure}} (62 samples, 0.04%)</title><rect x="92.4424%" y="661" width="0.0434%" height="15" fill="rgb(237,70,4)" fg:x="132114" fg:w="62"/><text x="92.6924%" y="671.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq for usize&gt;::eq (33 samples, 0.02%)</title><rect x="92.4627%" y="645" width="0.0231%" height="15" fill="rgb(244,85,46)" fg:x="132143" fg:w="33"/><text x="92.7127%" y="655.50"></text></g><g><title>hashbrown::raw::sse2::Group::load (345 samples, 0.24%)</title><rect x="92.5046%" y="677" width="0.2414%" height="15" fill="rgb(223,39,52)" fg:x="132203" fg:w="345"/><text x="92.7546%" y="687.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (322 samples, 0.23%)</title><rect x="92.5207%" y="661" width="0.2253%" height="15" fill="rgb(218,200,14)" fg:x="132226" fg:w="322"/><text x="92.7707%" y="671.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_cmpeq_epi8 (81 samples, 0.06%)</title><rect x="92.8244%" y="661" width="0.0567%" height="15" fill="rgb(208,171,16)" fg:x="132660" fg:w="81"/><text x="93.0744%" y="671.50"></text></g><g><title>core::core_arch::x86::m128iExt::as_i8x16 (22 samples, 0.02%)</title><rect x="92.8657%" y="645" width="0.0154%" height="15" fill="rgb(234,200,18)" fg:x="132719" fg:w="22"/><text x="93.1157%" y="655.50"></text></g><g><title>core::core_arch::simd::i8x16::splat (23 samples, 0.02%)</title><rect x="92.9797%" y="645" width="0.0161%" height="15" fill="rgb(228,45,11)" fg:x="132882" fg:w="23"/><text x="93.2297%" y="655.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (169 samples, 0.12%)</title><rect x="92.8811%" y="661" width="0.1183%" height="15" fill="rgb(237,182,11)" fg:x="132741" fg:w="169"/><text x="93.1311%" y="671.50"></text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (2,893 samples, 2.02%)</title><rect x="91.0632%" y="725" width="2.0243%" height="15" fill="rgb(241,175,49)" fg:x="130143" fg:w="2893"/><text x="91.3132%" y="735.50">h..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (1,692 samples, 1.18%)</title><rect x="91.9036%" y="709" width="1.1839%" height="15" fill="rgb(247,38,35)" fg:x="131344" fg:w="1692"/><text x="92.1536%" y="719.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::find_inner (1,550 samples, 1.08%)</title><rect x="92.0029%" y="693" width="1.0846%" height="15" fill="rgb(228,39,49)" fg:x="131486" fg:w="1550"/><text x="92.2529%" y="703.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (488 samples, 0.34%)</title><rect x="92.7460%" y="677" width="0.3415%" height="15" fill="rgb(226,101,26)" fg:x="132548" fg:w="488"/><text x="92.9960%" y="687.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_set1_epi8 (126 samples, 0.09%)</title><rect x="92.9993%" y="661" width="0.0882%" height="15" fill="rgb(206,141,19)" fg:x="132910" fg:w="126"/><text x="93.2493%" y="671.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_set_epi8 (126 samples, 0.09%)</title><rect x="92.9993%" y="645" width="0.0882%" height="15" fill="rgb(211,200,13)" fg:x="132910" fg:w="126"/><text x="93.2493%" y="655.50"></text></g><g><title>core::core_arch::simd::i8x16::new (17 samples, 0.01%)</title><rect x="93.0756%" y="629" width="0.0119%" height="15" fill="rgb(241,121,6)" fg:x="133019" fg:w="17"/><text x="93.3256%" y="639.50"></text></g><g><title>coldbrew::runtime::Runtime::eval (8,653 samples, 6.05%)</title><rect x="87.0573%" y="757" width="6.0546%" height="15" fill="rgb(234,221,29)" fg:x="124418" fg:w="8653"/><text x="87.3073%" y="767.50">coldbrew..</text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::entry (2,937 samples, 2.06%)</title><rect x="91.0569%" y="741" width="2.0551%" height="15" fill="rgb(229,136,5)" fg:x="130134" fg:w="2937"/><text x="91.3069%" y="751.50">s..</text></g><g><title>std::collections::hash::map::map_entry (35 samples, 0.02%)</title><rect x="93.0875%" y="725" width="0.0245%" height="15" fill="rgb(238,36,11)" fg:x="133036" fg:w="35"/><text x="93.3375%" y="735.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (45 samples, 0.03%)</title><rect x="94.2917%" y="741" width="0.0315%" height="15" fill="rgb(251,55,41)" fg:x="134757" fg:w="45"/><text x="94.5417%" y="751.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (23 samples, 0.02%)</title><rect x="94.3071%" y="725" width="0.0161%" height="15" fill="rgb(242,34,40)" fg:x="134779" fg:w="23"/><text x="94.5571%" y="735.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (20 samples, 0.01%)</title><rect x="94.3092%" y="709" width="0.0140%" height="15" fill="rgb(215,42,17)" fg:x="134782" fg:w="20"/><text x="94.5592%" y="719.50"></text></g><g><title>&lt;coldbrew::bytecode::OPCode as core::convert::From&lt;u8&gt;&gt;::from (452 samples, 0.32%)</title><rect x="94.3232%" y="741" width="0.3163%" height="15" fill="rgb(207,44,46)" fg:x="134802" fg:w="452"/><text x="94.5732%" y="751.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (69 samples, 0.05%)</title><rect x="94.8179%" y="693" width="0.0483%" height="15" fill="rgb(211,206,28)" fg:x="135509" fg:w="69"/><text x="95.0679%" y="703.50"></text></g><g><title>&lt;core::result::Result&lt;T,F&gt; as core::ops::try_trait::FromResidual&lt;core::result::Result&lt;core::convert::Infallible,E&gt;&gt;&gt;::from_residual (15 samples, 0.01%)</title><rect x="94.8662%" y="693" width="0.0105%" height="15" fill="rgb(237,167,16)" fg:x="135578" fg:w="15"/><text x="95.1162%" y="703.50"></text></g><g><title>&lt;T as core::convert::From&lt;T&gt;&gt;::from (15 samples, 0.01%)</title><rect x="94.8662%" y="677" width="0.0105%" height="15" fill="rgb(233,66,6)" fg:x="135578" fg:w="15"/><text x="95.1162%" y="687.50"></text></g><g><title>checked_request2size (50 samples, 0.03%)</title><rect x="94.9466%" y="661" width="0.0350%" height="15" fill="rgb(246,123,29)" fg:x="135693" fg:w="50"/><text x="95.1966%" y="671.50"></text></g><g><title>__GI___libc_malloc (202 samples, 0.14%)</title><rect x="94.8767%" y="677" width="0.1413%" height="15" fill="rgb(209,62,40)" fg:x="135593" fg:w="202"/><text x="95.1267%" y="687.50"></text></g><g><title>tcache_get (52 samples, 0.04%)</title><rect x="94.9816%" y="661" width="0.0364%" height="15" fill="rgb(218,4,25)" fg:x="135743" fg:w="52"/><text x="95.2316%" y="671.50"></text></g><g><title>__rdl_alloc (24 samples, 0.02%)</title><rect x="95.0180%" y="677" width="0.0168%" height="15" fill="rgb(253,91,49)" fg:x="135795" fg:w="24"/><text x="95.2680%" y="687.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (22 samples, 0.02%)</title><rect x="95.0194%" y="661" width="0.0154%" height="15" fill="rgb(228,155,29)" fg:x="135797" fg:w="22"/><text x="95.2694%" y="671.50"></text></g><g><title>__rust_alloc (15 samples, 0.01%)</title><rect x="95.0348%" y="677" width="0.0105%" height="15" fill="rgb(243,57,37)" fg:x="135819" fg:w="15"/><text x="95.2848%" y="687.50"></text></g><g><title>alloc::alloc::alloc (257 samples, 0.18%)</title><rect x="94.8767%" y="693" width="0.1798%" height="15" fill="rgb(244,167,17)" fg:x="135593" fg:w="257"/><text x="95.1267%" y="703.50"></text></g><g><title>core::alloc::layout::Layout::size (18 samples, 0.01%)</title><rect x="95.0565%" y="693" width="0.0126%" height="15" fill="rgb(207,181,38)" fg:x="135850" fg:w="18"/><text x="95.3065%" y="703.50"></text></g><g><title>core::option::Option&lt;T&gt;::ok_or (38 samples, 0.03%)</title><rect x="95.0691%" y="693" width="0.0266%" height="15" fill="rgb(211,8,23)" fg:x="135868" fg:w="38"/><text x="95.3191%" y="703.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::new (34 samples, 0.02%)</title><rect x="95.0957%" y="693" width="0.0238%" height="15" fill="rgb(235,11,44)" fg:x="135906" fg:w="34"/><text x="95.3457%" y="703.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (701 samples, 0.49%)</title><rect x="94.6808%" y="725" width="0.4905%" height="15" fill="rgb(248,18,52)" fg:x="135313" fg:w="701"/><text x="94.9308%" y="735.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (670 samples, 0.47%)</title><rect x="94.7024%" y="709" width="0.4688%" height="15" fill="rgb(208,4,7)" fg:x="135344" fg:w="670"/><text x="94.9524%" y="719.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;[T]&gt;::slice_from_raw_parts (74 samples, 0.05%)</title><rect x="95.1195%" y="693" width="0.0518%" height="15" fill="rgb(240,17,39)" fg:x="135940" fg:w="74"/><text x="95.3695%" y="703.50"></text></g><g><title>core::ptr::slice_from_raw_parts_mut (72 samples, 0.05%)</title><rect x="95.1209%" y="677" width="0.0504%" height="15" fill="rgb(207,170,3)" fg:x="135942" fg:w="72"/><text x="95.3709%" y="687.50"></text></g><g><title>core::ptr::metadata::from_raw_parts_mut (71 samples, 0.05%)</title><rect x="95.1216%" y="661" width="0.0497%" height="15" fill="rgb(236,100,52)" fg:x="135943" fg:w="71"/><text x="95.3716%" y="671.50"></text></g><g><title>core::alloc::layout::Layout::from_size_align_unchecked (19 samples, 0.01%)</title><rect x="95.1713%" y="725" width="0.0133%" height="15" fill="rgb(246,78,51)" fg:x="136014" fg:w="19"/><text x="95.4213%" y="735.50"></text></g><g><title>alloc::alloc::exchange_malloc (790 samples, 0.55%)</title><rect x="94.6423%" y="741" width="0.5528%" height="15" fill="rgb(211,17,15)" fg:x="135258" fg:w="790"/><text x="94.8923%" y="751.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;[T]&gt;::as_mut_ptr (15 samples, 0.01%)</title><rect x="95.1846%" y="725" width="0.0105%" height="15" fill="rgb(209,59,46)" fg:x="136033" fg:w="15"/><text x="95.4346%" y="735.50"></text></g><g><title>alloc::boxed::Box&lt;T,A&gt;::into_unique (36 samples, 0.03%)</title><rect x="95.2391%" y="693" width="0.0252%" height="15" fill="rgb(210,92,25)" fg:x="136111" fg:w="36"/><text x="95.4891%" y="703.50"></text></g><g><title>alloc::boxed::Box&lt;T,A&gt;::leak (36 samples, 0.03%)</title><rect x="95.2391%" y="677" width="0.0252%" height="15" fill="rgb(238,174,52)" fg:x="136111" fg:w="36"/><text x="95.4891%" y="687.50"></text></g><g><title>core::ptr::unique::Unique&lt;T&gt;::as_ptr (24 samples, 0.02%)</title><rect x="95.2475%" y="661" width="0.0168%" height="15" fill="rgb(230,73,7)" fg:x="136123" fg:w="24"/><text x="95.4975%" y="671.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::as_ptr (24 samples, 0.02%)</title><rect x="95.2475%" y="645" width="0.0168%" height="15" fill="rgb(243,124,40)" fg:x="136123" fg:w="24"/><text x="95.4975%" y="655.50"></text></g><g><title>alloc::boxed::Box&lt;T,A&gt;::into_raw_with_allocator (46 samples, 0.03%)</title><rect x="95.2391%" y="709" width="0.0322%" height="15" fill="rgb(244,170,11)" fg:x="136111" fg:w="46"/><text x="95.4891%" y="719.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::into_vec (165 samples, 0.12%)</title><rect x="95.1950%" y="741" width="0.1155%" height="15" fill="rgb(207,114,54)" fg:x="136048" fg:w="165"/><text x="95.4450%" y="751.50"></text></g><g><title>alloc::slice::hack::into_vec (143 samples, 0.10%)</title><rect x="95.2104%" y="725" width="0.1001%" height="15" fill="rgb(205,42,20)" fg:x="136070" fg:w="143"/><text x="95.4604%" y="735.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::from_raw_parts_in (56 samples, 0.04%)</title><rect x="95.2713%" y="709" width="0.0392%" height="15" fill="rgb(230,30,28)" fg:x="136157" fg:w="56"/><text x="95.5213%" y="719.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::from_raw_parts_in (20 samples, 0.01%)</title><rect x="95.2965%" y="693" width="0.0140%" height="15" fill="rgb(205,73,54)" fg:x="136193" fg:w="20"/><text x="95.5465%" y="703.50"></text></g><g><title>__memcpy_avx_unaligned_erms (387 samples, 0.27%)</title><rect x="95.3595%" y="725" width="0.2708%" height="15" fill="rgb(254,227,23)" fg:x="136283" fg:w="387"/><text x="95.6095%" y="735.50"></text></g><g><title>_init (21 samples, 0.01%)</title><rect x="95.6303%" y="725" width="0.0147%" height="15" fill="rgb(228,202,34)" fg:x="136670" fg:w="21"/><text x="95.8803%" y="735.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::len (15 samples, 0.01%)</title><rect x="95.6450%" y="725" width="0.0105%" height="15" fill="rgb(222,225,37)" fg:x="136691" fg:w="15"/><text x="95.8950%" y="735.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::add (27 samples, 0.02%)</title><rect x="95.6555%" y="725" width="0.0189%" height="15" fill="rgb(221,14,54)" fg:x="136706" fg:w="27"/><text x="95.9055%" y="735.50"></text></g><g><title>__memcpy_avx_unaligned_erms (140 samples, 0.10%)</title><rect x="95.6744%" y="709" width="0.0980%" height="15" fill="rgb(254,102,2)" fg:x="136733" fg:w="140"/><text x="95.9244%" y="719.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::pop (683 samples, 0.48%)</title><rect x="95.3105%" y="741" width="0.4779%" height="15" fill="rgb(232,104,17)" fg:x="136213" fg:w="683"/><text x="95.5605%" y="751.50"></text></g><g><title>core::ptr::read (163 samples, 0.11%)</title><rect x="95.6744%" y="725" width="0.1141%" height="15" fill="rgb(250,220,14)" fg:x="136733" fg:w="163"/><text x="95.9244%" y="735.50"></text></g><g><title>_init (23 samples, 0.02%)</title><rect x="95.7723%" y="709" width="0.0161%" height="15" fill="rgb(241,158,9)" fg:x="136873" fg:w="23"/><text x="96.0223%" y="719.50"></text></g><g><title>__memcpy_avx_unaligned_erms (306 samples, 0.21%)</title><rect x="95.8458%" y="725" width="0.2141%" height="15" fill="rgb(246,9,43)" fg:x="136978" fg:w="306"/><text x="96.0958%" y="735.50"></text></g><g><title>_init (25 samples, 0.02%)</title><rect x="96.0599%" y="725" width="0.0175%" height="15" fill="rgb(206,73,33)" fg:x="137284" fg:w="25"/><text x="96.3099%" y="735.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::capacity (47 samples, 0.03%)</title><rect x="96.0774%" y="725" width="0.0329%" height="15" fill="rgb(222,79,8)" fg:x="137309" fg:w="47"/><text x="96.3274%" y="735.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (25 samples, 0.02%)</title><rect x="96.1103%" y="725" width="0.0175%" height="15" fill="rgb(234,8,54)" fg:x="137356" fg:w="25"/><text x="96.3603%" y="735.50"></text></g><g><title>__memcpy_avx_unaligned_erms (463 samples, 0.32%)</title><rect x="96.1278%" y="709" width="0.3240%" height="15" fill="rgb(209,134,38)" fg:x="137381" fg:w="463"/><text x="96.3778%" y="719.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (967 samples, 0.68%)</title><rect x="95.7884%" y="741" width="0.6766%" height="15" fill="rgb(230,127,29)" fg:x="136896" fg:w="967"/><text x="96.0384%" y="751.50"></text></g><g><title>core::ptr::write (482 samples, 0.34%)</title><rect x="96.1278%" y="725" width="0.3373%" height="15" fill="rgb(242,44,41)" fg:x="137381" fg:w="482"/><text x="96.3778%" y="735.50"></text></g><g><title>_init (19 samples, 0.01%)</title><rect x="96.4517%" y="709" width="0.0133%" height="15" fill="rgb(222,56,43)" fg:x="137844" fg:w="19"/><text x="96.7017%" y="719.50"></text></g><g><title>coldbrew::runtime::Runtime::encode_arg (21 samples, 0.01%)</title><rect x="96.4650%" y="741" width="0.0147%" height="15" fill="rgb(238,39,47)" fg:x="137863" fg:w="21"/><text x="96.7150%" y="751.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_ptr (52 samples, 0.04%)</title><rect x="96.7288%" y="693" width="0.0364%" height="15" fill="rgb(226,79,43)" fg:x="138240" fg:w="52"/><text x="96.9788%" y="703.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (162 samples, 0.11%)</title><rect x="96.7288%" y="709" width="0.1134%" height="15" fill="rgb(242,105,53)" fg:x="138240" fg:w="162"/><text x="96.9788%" y="719.50"></text></g><g><title>core::slice::raw::from_raw_parts (110 samples, 0.08%)</title><rect x="96.7652%" y="693" width="0.0770%" height="15" fill="rgb(251,132,46)" fg:x="138292" fg:w="110"/><text x="97.0152%" y="703.50"></text></g><g><title>core::ptr::slice_from_raw_parts (110 samples, 0.08%)</title><rect x="96.7652%" y="677" width="0.0770%" height="15" fill="rgb(231,77,14)" fg:x="138292" fg:w="110"/><text x="97.0152%" y="687.50"></text></g><g><title>core::ptr::metadata::from_raw_parts (110 samples, 0.08%)</title><rect x="96.7652%" y="661" width="0.0770%" height="15" fill="rgb(240,135,9)" fg:x="138292" fg:w="110"/><text x="97.0152%" y="671.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_ptr (34 samples, 0.02%)</title><rect x="96.9352%" y="677" width="0.0238%" height="15" fill="rgb(248,109,14)" fg:x="138535" fg:w="34"/><text x="97.1852%" y="687.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (34 samples, 0.02%)</title><rect x="96.9352%" y="661" width="0.0238%" height="15" fill="rgb(227,146,52)" fg:x="138535" fg:w="34"/><text x="97.1852%" y="671.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (181 samples, 0.13%)</title><rect x="96.9038%" y="693" width="0.1266%" height="15" fill="rgb(232,54,3)" fg:x="138490" fg:w="181"/><text x="97.1538%" y="703.50"></text></g><g><title>core::slice::raw::from_raw_parts (102 samples, 0.07%)</title><rect x="96.9590%" y="677" width="0.0714%" height="15" fill="rgb(229,201,43)" fg:x="138569" fg:w="102"/><text x="97.2090%" y="687.50"></text></g><g><title>core::ptr::slice_from_raw_parts (102 samples, 0.07%)</title><rect x="96.9590%" y="661" width="0.0714%" height="15" fill="rgb(252,161,33)" fg:x="138569" fg:w="102"/><text x="97.2090%" y="671.50"></text></g><g><title>core::ptr::metadata::from_raw_parts (100 samples, 0.07%)</title><rect x="96.9604%" y="645" width="0.0700%" height="15" fill="rgb(226,146,40)" fg:x="138571" fg:w="100"/><text x="97.2104%" y="655.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (223 samples, 0.16%)</title><rect x="97.0675%" y="677" width="0.1560%" height="15" fill="rgb(219,47,25)" fg:x="138724" fg:w="223"/><text x="97.3175%" y="687.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (546 samples, 0.38%)</title><rect x="96.8422%" y="709" width="0.3820%" height="15" fill="rgb(250,135,13)" fg:x="138402" fg:w="546"/><text x="97.0922%" y="719.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (276 samples, 0.19%)</title><rect x="97.0311%" y="693" width="0.1931%" height="15" fill="rgb(219,229,18)" fg:x="138672" fg:w="276"/><text x="97.2811%" y="703.50"></text></g><g><title>coldbrew::program::Program::code (755 samples, 0.53%)</title><rect x="96.6966%" y="725" width="0.5283%" height="15" fill="rgb(217,152,27)" fg:x="138194" fg:w="755"/><text x="96.9466%" y="735.50"></text></g><g><title>coldbrew::runtime::Runtime::next (1,171 samples, 0.82%)</title><rect x="96.4797%" y="741" width="0.8194%" height="15" fill="rgb(225,71,47)" fg:x="137884" fg:w="1171"/><text x="96.7297%" y="751.50"></text></g><g><title>coldbrew::runtime::Frame::inc_instruction_index (106 samples, 0.07%)</title><rect x="97.2249%" y="725" width="0.0742%" height="15" fill="rgb(220,139,14)" fg:x="138949" fg:w="106"/><text x="97.4749%" y="735.50"></text></g><g><title>coldbrew::runtime::Runtime::fetch (5,989 samples, 4.19%)</title><rect x="93.1120%" y="757" width="4.1906%" height="15" fill="rgb(247,54,32)" fg:x="133071" fg:w="5989"/><text x="93.3620%" y="767.50">coldb..</text></g><g><title>_int_free (20 samples, 0.01%)</title><rect x="97.3747%" y="565" width="0.0140%" height="15" fill="rgb(252,131,39)" fg:x="139163" fg:w="20"/><text x="97.6247%" y="575.50"></text></g><g><title>__GI___libc_free (34 samples, 0.02%)</title><rect x="97.3691%" y="581" width="0.0238%" height="15" fill="rgb(210,108,39)" fg:x="139155" fg:w="34"/><text x="97.6191%" y="591.50"></text></g><g><title>alloc::alloc::dealloc (38 samples, 0.03%)</title><rect x="97.3691%" y="597" width="0.0266%" height="15" fill="rgb(205,23,29)" fg:x="139155" fg:w="38"/><text x="97.6191%" y="607.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (48 samples, 0.03%)</title><rect x="97.3642%" y="613" width="0.0336%" height="15" fill="rgb(246,139,46)" fg:x="139148" fg:w="48"/><text x="97.6142%" y="623.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::clear (157 samples, 0.11%)</title><rect x="97.3187%" y="741" width="0.1099%" height="15" fill="rgb(250,81,26)" fg:x="139083" fg:w="157"/><text x="97.5687%" y="751.50"></text></g><g><title>core::ptr::drop_in_place&lt;[coldbrew::trace::RecordEntry]&gt; (137 samples, 0.10%)</title><rect x="97.3327%" y="725" width="0.0959%" height="15" fill="rgb(214,104,7)" fg:x="139103" fg:w="137"/><text x="97.5827%" y="735.50"></text></g><g><title>core::ptr::drop_in_place&lt;coldbrew::trace::RecordEntry&gt; (119 samples, 0.08%)</title><rect x="97.3453%" y="709" width="0.0833%" height="15" fill="rgb(233,189,8)" fg:x="139121" fg:w="119"/><text x="97.5953%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;coldbrew::runtime::Instruction&gt; (119 samples, 0.08%)</title><rect x="97.3453%" y="693" width="0.0833%" height="15" fill="rgb(228,141,17)" fg:x="139121" fg:w="119"/><text x="97.5953%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;alloc::vec::Vec&lt;coldbrew::runtime::Value&gt;&gt;&gt; (119 samples, 0.08%)</title><rect x="97.3453%" y="677" width="0.0833%" height="15" fill="rgb(247,157,1)" fg:x="139121" fg:w="119"/><text x="97.5953%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;coldbrew::runtime::Value&gt;&gt; (113 samples, 0.08%)</title><rect x="97.3495%" y="661" width="0.0791%" height="15" fill="rgb(249,225,5)" fg:x="139127" fg:w="113"/><text x="97.5995%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;coldbrew::runtime::Value&gt;&gt; (103 samples, 0.07%)</title><rect x="97.3565%" y="645" width="0.0721%" height="15" fill="rgb(242,55,13)" fg:x="139137" fg:w="103"/><text x="97.6065%" y="655.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (103 samples, 0.07%)</title><rect x="97.3565%" y="629" width="0.0721%" height="15" fill="rgb(230,49,50)" fg:x="139137" fg:w="103"/><text x="97.6065%" y="639.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::current_memory (44 samples, 0.03%)</title><rect x="97.3978%" y="613" width="0.0308%" height="15" fill="rgb(241,111,38)" fg:x="139196" fg:w="44"/><text x="97.6478%" y="623.50"></text></g><g><title>coldbrew::trace::Recorder::init (185 samples, 0.13%)</title><rect x="97.3026%" y="757" width="0.1294%" height="15" fill="rgb(252,155,4)" fg:x="139060" fg:w="185"/><text x="97.5526%" y="767.50"></text></g><g><title>coldbrew::trace::Recorder::is_recording (30 samples, 0.02%)</title><rect x="97.4320%" y="757" width="0.0210%" height="15" fill="rgb(212,69,32)" fg:x="139245" fg:w="30"/><text x="97.6820%" y="767.50"></text></g><g><title>__GI___libc_malloc (33 samples, 0.02%)</title><rect x="97.6427%" y="677" width="0.0231%" height="15" fill="rgb(243,107,47)" fg:x="139546" fg:w="33"/><text x="97.8927%" y="687.50"></text></g><g><title>alloc::alloc::alloc (46 samples, 0.03%)</title><rect x="97.6427%" y="693" width="0.0322%" height="15" fill="rgb(247,130,12)" fg:x="139546" fg:w="46"/><text x="97.8927%" y="703.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (102 samples, 0.07%)</title><rect x="97.6203%" y="725" width="0.0714%" height="15" fill="rgb(233,74,16)" fg:x="139514" fg:w="102"/><text x="97.8703%" y="735.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (100 samples, 0.07%)</title><rect x="97.6217%" y="709" width="0.0700%" height="15" fill="rgb(208,58,18)" fg:x="139516" fg:w="100"/><text x="97.8717%" y="719.50"></text></g><g><title>alloc::alloc::exchange_malloc (116 samples, 0.08%)</title><rect x="97.6168%" y="741" width="0.0812%" height="15" fill="rgb(242,225,1)" fg:x="139509" fg:w="116"/><text x="97.8668%" y="751.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::into_vec (15 samples, 0.01%)</title><rect x="97.6979%" y="741" width="0.0105%" height="15" fill="rgb(249,39,40)" fg:x="139625" fg:w="15"/><text x="97.9479%" y="751.50"></text></g><g><title>__memcpy_avx_unaligned_erms (20 samples, 0.01%)</title><rect x="97.7147%" y="725" width="0.0140%" height="15" fill="rgb(207,72,44)" fg:x="139649" fg:w="20"/><text x="97.9647%" y="735.50"></text></g><g><title>__memcpy_avx_unaligned_erms (32 samples, 0.02%)</title><rect x="97.7364%" y="709" width="0.0224%" height="15" fill="rgb(215,193,12)" fg:x="139680" fg:w="32"/><text x="97.9864%" y="719.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (76 samples, 0.05%)</title><rect x="97.7084%" y="741" width="0.0532%" height="15" fill="rgb(248,41,39)" fg:x="139640" fg:w="76"/><text x="97.9584%" y="751.50"></text></g><g><title>core::ptr::write (36 samples, 0.03%)</title><rect x="97.7364%" y="725" width="0.0252%" height="15" fill="rgb(253,85,4)" fg:x="139680" fg:w="36"/><text x="97.9864%" y="735.50"></text></g><g><title>coldbrew::trace::Recorder::get_params (64 samples, 0.04%)</title><rect x="97.7693%" y="741" width="0.0448%" height="15" fill="rgb(243,70,31)" fg:x="139727" fg:w="64"/><text x="98.0193%" y="751.50"></text></g><g><title>coldbrew::trace::Recorder::record (517 samples, 0.36%)</title><rect x="97.4530%" y="757" width="0.3618%" height="15" fill="rgb(253,195,26)" fg:x="139275" fg:w="517"/><text x="97.7030%" y="767.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (37 samples, 0.03%)</title><rect x="97.9631%" y="613" width="0.0259%" height="15" fill="rgb(243,42,11)" fg:x="140004" fg:w="37"/><text x="98.2131%" y="623.50"></text></g><g><title>core::slice::raw::from_raw_parts (28 samples, 0.02%)</title><rect x="97.9694%" y="597" width="0.0196%" height="15" fill="rgb(239,66,17)" fg:x="140013" fg:w="28"/><text x="98.2194%" y="607.50"></text></g><g><title>core::ptr::slice_from_raw_parts (28 samples, 0.02%)</title><rect x="97.9694%" y="581" width="0.0196%" height="15" fill="rgb(217,132,21)" fg:x="140013" fg:w="28"/><text x="98.2194%" y="591.50"></text></g><g><title>core::ptr::metadata::from_raw_parts (23 samples, 0.02%)</title><rect x="97.9729%" y="565" width="0.0161%" height="15" fill="rgb(252,202,21)" fg:x="140018" fg:w="23"/><text x="98.2229%" y="575.50"></text></g><g><title>__GI___libc_malloc (18 samples, 0.01%)</title><rect x="98.1073%" y="469" width="0.0126%" height="15" fill="rgb(233,98,36)" fg:x="140210" fg:w="18"/><text x="98.3573%" y="479.50"></text></g><g><title>alloc::alloc::alloc (34 samples, 0.02%)</title><rect x="98.1073%" y="485" width="0.0238%" height="15" fill="rgb(216,153,54)" fg:x="140210" fg:w="34"/><text x="98.3573%" y="495.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (93 samples, 0.07%)</title><rect x="98.0856%" y="517" width="0.0651%" height="15" fill="rgb(250,99,7)" fg:x="140179" fg:w="93"/><text x="98.3356%" y="527.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (91 samples, 0.06%)</title><rect x="98.0870%" y="501" width="0.0637%" height="15" fill="rgb(207,56,50)" fg:x="140181" fg:w="91"/><text x="98.3370%" y="511.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;[T]&gt;::slice_from_raw_parts (15 samples, 0.01%)</title><rect x="98.1402%" y="485" width="0.0105%" height="15" fill="rgb(244,61,34)" fg:x="140257" fg:w="15"/><text x="98.3902%" y="495.50"></text></g><g><title>core::alloc::layout::Layout::array::inner (33 samples, 0.02%)</title><rect x="98.1541%" y="501" width="0.0231%" height="15" fill="rgb(241,50,38)" fg:x="140277" fg:w="33"/><text x="98.4041%" y="511.50"></text></g><g><title>core::alloc::layout::Layout::array (45 samples, 0.03%)</title><rect x="98.1506%" y="517" width="0.0315%" height="15" fill="rgb(212,166,30)" fg:x="140272" fg:w="45"/><text x="98.4006%" y="527.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (235 samples, 0.16%)</title><rect x="98.0212%" y="565" width="0.1644%" height="15" fill="rgb(249,127,32)" fg:x="140087" fg:w="235"/><text x="98.2712%" y="575.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (231 samples, 0.16%)</title><rect x="98.0240%" y="549" width="0.1616%" height="15" fill="rgb(209,103,0)" fg:x="140091" fg:w="231"/><text x="98.2740%" y="559.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (223 samples, 0.16%)</title><rect x="98.0296%" y="533" width="0.1560%" height="15" fill="rgb(238,209,51)" fg:x="140099" fg:w="223"/><text x="98.2796%" y="543.50"></text></g><g><title>&lt;coldbrew::runtime::Instruction as core::clone::Clone&gt;::clone (384 samples, 0.27%)</title><rect x="97.9225%" y="661" width="0.2687%" height="15" fill="rgb(237,56,23)" fg:x="139946" fg:w="384"/><text x="98.1725%" y="671.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::clone::Clone&gt;::clone (355 samples, 0.25%)</title><rect x="97.9428%" y="645" width="0.2484%" height="15" fill="rgb(215,153,46)" fg:x="139975" fg:w="355"/><text x="98.1928%" y="655.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (331 samples, 0.23%)</title><rect x="97.9596%" y="629" width="0.2316%" height="15" fill="rgb(224,49,31)" fg:x="139999" fg:w="331"/><text x="98.2096%" y="639.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (289 samples, 0.20%)</title><rect x="97.9890%" y="613" width="0.2022%" height="15" fill="rgb(250,18,42)" fg:x="140041" fg:w="289"/><text x="98.2390%" y="623.50"></text></g><g><title>alloc::slice::hack::to_vec (289 samples, 0.20%)</title><rect x="97.9890%" y="597" width="0.2022%" height="15" fill="rgb(215,176,39)" fg:x="140041" fg:w="289"/><text x="98.2390%" y="607.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (289 samples, 0.20%)</title><rect x="97.9890%" y="581" width="0.2022%" height="15" fill="rgb(223,77,29)" fg:x="140041" fg:w="289"/><text x="98.2390%" y="591.50"></text></g><g><title>&lt;coldbrew::trace::RecordEntry as core::clone::Clone&gt;::clone (445 samples, 0.31%)</title><rect x="97.8855%" y="677" width="0.3114%" height="15" fill="rgb(234,94,52)" fg:x="139893" fg:w="445"/><text x="98.1355%" y="687.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (27 samples, 0.02%)</title><rect x="98.2318%" y="645" width="0.0189%" height="15" fill="rgb(220,154,50)" fg:x="140388" fg:w="27"/><text x="98.4818%" y="655.50"></text></g><g><title>core::slice::iter::Iter&lt;T&gt;::post_inc_start (17 samples, 0.01%)</title><rect x="98.2388%" y="629" width="0.0119%" height="15" fill="rgb(212,11,10)" fg:x="140398" fg:w="17"/><text x="98.4888%" y="639.50"></text></g><g><title>&lt;core::iter::adapters::take::Take&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (78 samples, 0.05%)</title><rect x="98.1968%" y="677" width="0.0546%" height="15" fill="rgb(205,166,19)" fg:x="140338" fg:w="78"/><text x="98.4468%" y="687.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (61 samples, 0.04%)</title><rect x="98.2087%" y="661" width="0.0427%" height="15" fill="rgb(244,198,16)" fg:x="140355" fg:w="61"/><text x="98.4587%" y="671.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::spare_capacity_mut (21 samples, 0.01%)</title><rect x="98.2514%" y="677" width="0.0147%" height="15" fill="rgb(219,69,12)" fg:x="140416" fg:w="21"/><text x="98.5014%" y="687.50"></text></g><g><title>__GI___libc_malloc (30 samples, 0.02%)</title><rect x="98.3291%" y="581" width="0.0210%" height="15" fill="rgb(245,30,7)" fg:x="140527" fg:w="30"/><text x="98.5791%" y="591.50"></text></g><g><title>alloc::alloc::alloc (36 samples, 0.03%)</title><rect x="98.3291%" y="597" width="0.0252%" height="15" fill="rgb(218,221,48)" fg:x="140527" fg:w="36"/><text x="98.5791%" y="607.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (94 samples, 0.07%)</title><rect x="98.3039%" y="629" width="0.0658%" height="15" fill="rgb(216,66,15)" fg:x="140491" fg:w="94"/><text x="98.5539%" y="639.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (92 samples, 0.06%)</title><rect x="98.3053%" y="613" width="0.0644%" height="15" fill="rgb(226,122,50)" fg:x="140493" fg:w="92"/><text x="98.5553%" y="623.50"></text></g><g><title>core::alloc::layout::Layout::array::inner (36 samples, 0.03%)</title><rect x="98.3725%" y="613" width="0.0252%" height="15" fill="rgb(239,156,16)" fg:x="140589" fg:w="36"/><text x="98.6225%" y="623.50"></text></g><g><title>core::alloc::layout::Layout::array (41 samples, 0.03%)</title><rect x="98.3697%" y="629" width="0.0287%" height="15" fill="rgb(224,27,38)" fg:x="140585" fg:w="41"/><text x="98.6197%" y="639.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (196 samples, 0.14%)</title><rect x="98.2661%" y="677" width="0.1371%" height="15" fill="rgb(224,39,27)" fg:x="140437" fg:w="196"/><text x="98.5161%" y="687.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (191 samples, 0.13%)</title><rect x="98.2696%" y="661" width="0.1336%" height="15" fill="rgb(215,92,29)" fg:x="140442" fg:w="191"/><text x="98.5196%" y="671.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (186 samples, 0.13%)</title><rect x="98.2731%" y="645" width="0.1301%" height="15" fill="rgb(207,159,16)" fg:x="140447" fg:w="186"/><text x="98.5231%" y="655.50"></text></g><g><title>__memcpy_avx_unaligned_erms (37 samples, 0.03%)</title><rect x="98.4032%" y="661" width="0.0259%" height="15" fill="rgb(238,163,47)" fg:x="140633" fg:w="37"/><text x="98.6532%" y="671.50"></text></g><g><title>__memcpy_avx_unaligned_erms (42 samples, 0.03%)</title><rect x="98.4312%" y="645" width="0.0294%" height="15" fill="rgb(219,91,49)" fg:x="140673" fg:w="42"/><text x="98.6812%" y="655.50"></text></g><g><title>__memcpy_avx_unaligned_erms (60 samples, 0.04%)</title><rect x="98.4627%" y="629" width="0.0420%" height="15" fill="rgb(227,167,31)" fg:x="140718" fg:w="60"/><text x="98.7127%" y="639.50"></text></g><g><title>core::mem::maybe_uninit::MaybeUninit&lt;T&gt;::write (149 samples, 0.10%)</title><rect x="98.4032%" y="677" width="0.1043%" height="15" fill="rgb(234,80,54)" fg:x="140633" fg:w="149"/><text x="98.6532%" y="687.50"></text></g><g><title>core::mem::maybe_uninit::MaybeUninit&lt;T&gt;::new (109 samples, 0.08%)</title><rect x="98.4312%" y="661" width="0.0763%" height="15" fill="rgb(212,114,2)" fg:x="140673" fg:w="109"/><text x="98.6812%" y="671.50"></text></g><g><title>core::mem::manually_drop::ManuallyDrop&lt;T&gt;::new (64 samples, 0.04%)</title><rect x="98.4627%" y="645" width="0.0448%" height="15" fill="rgb(234,50,24)" fg:x="140718" fg:w="64"/><text x="98.7127%" y="655.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (980 samples, 0.69%)</title><rect x="97.8295%" y="741" width="0.6857%" height="15" fill="rgb(221,68,8)" fg:x="139813" fg:w="980"/><text x="98.0795%" y="751.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (969 samples, 0.68%)</title><rect x="97.8372%" y="725" width="0.6780%" height="15" fill="rgb(254,180,31)" fg:x="139824" fg:w="969"/><text x="98.0872%" y="735.50"></text></g><g><title>alloc::slice::hack::to_vec (969 samples, 0.68%)</title><rect x="97.8372%" y="709" width="0.6780%" height="15" fill="rgb(247,130,50)" fg:x="139824" fg:w="969"/><text x="98.0872%" y="719.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (964 samples, 0.67%)</title><rect x="97.8407%" y="693" width="0.6745%" height="15" fill="rgb(211,109,4)" fg:x="139829" fg:w="964"/><text x="98.0907%" y="703.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (40 samples, 0.03%)</title><rect x="98.5488%" y="693" width="0.0280%" height="15" fill="rgb(238,50,21)" fg:x="140841" fg:w="40"/><text x="98.7988%" y="703.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::new_in (21 samples, 0.01%)</title><rect x="98.5621%" y="677" width="0.0147%" height="15" fill="rgb(225,57,45)" fg:x="140860" fg:w="21"/><text x="98.8121%" y="687.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::new_in (16 samples, 0.01%)</title><rect x="98.5656%" y="661" width="0.0112%" height="15" fill="rgb(209,196,50)" fg:x="140865" fg:w="16"/><text x="98.8156%" y="671.50"></text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::clone::Clone&gt;::clone (80 samples, 0.06%)</title><rect x="98.5222%" y="709" width="0.0560%" height="15" fill="rgb(242,140,13)" fg:x="140803" fg:w="80"/><text x="98.7722%" y="719.50"></text></g><g><title>__memcpy_avx_unaligned_erms (92 samples, 0.06%)</title><rect x="98.5782%" y="709" width="0.0644%" height="15" fill="rgb(217,111,7)" fg:x="140883" fg:w="92"/><text x="98.8282%" y="719.50"></text></g><g><title>&lt;hashbrown::set::HashSet&lt;T,S,A&gt; as core::clone::Clone&gt;::clone (179 samples, 0.13%)</title><rect x="98.5222%" y="725" width="0.1252%" height="15" fill="rgb(253,193,51)" fg:x="140803" fg:w="179"/><text x="98.7722%" y="735.50"></text></g><g><title>__memcpy_avx_unaligned_erms (74 samples, 0.05%)</title><rect x="98.6474%" y="725" width="0.0518%" height="15" fill="rgb(252,70,29)" fg:x="140982" fg:w="74"/><text x="98.8974%" y="735.50"></text></g><g><title>&lt;std::collections::hash::set::HashSet&lt;T,S&gt; as core::clone::Clone&gt;::clone (265 samples, 0.19%)</title><rect x="98.5152%" y="741" width="0.1854%" height="15" fill="rgb(232,127,12)" fg:x="140793" fg:w="265"/><text x="98.7652%" y="751.50"></text></g><g><title>__memcpy_avx_unaligned_erms (17 samples, 0.01%)</title><rect x="98.7006%" y="741" width="0.0119%" height="15" fill="rgb(211,180,21)" fg:x="141058" fg:w="17"/><text x="98.9506%" y="751.50"></text></g><g><title>coldbrew::trace::Recorder::recording (1,289 samples, 0.90%)</title><rect x="97.8148%" y="757" width="0.9019%" height="15" fill="rgb(229,72,13)" fg:x="139792" fg:w="1289"/><text x="98.0648%" y="767.50"></text></g><g><title>core::option::Option&lt;T&gt;::unwrap (88 samples, 0.06%)</title><rect x="98.7167%" y="757" width="0.0616%" height="15" fill="rgb(240,211,49)" fg:x="141081" fg:w="88"/><text x="98.9667%" y="767.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;coldbrew::runtime::Value&gt;&gt; (32 samples, 0.02%)</title><rect x="98.7818%" y="741" width="0.0224%" height="15" fill="rgb(219,149,40)" fg:x="141174" fg:w="32"/><text x="99.0318%" y="751.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;coldbrew::runtime::Value&gt;&gt; (18 samples, 0.01%)</title><rect x="98.7916%" y="725" width="0.0126%" height="15" fill="rgb(210,127,46)" fg:x="141188" fg:w="18"/><text x="99.0416%" y="735.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (18 samples, 0.01%)</title><rect x="98.7916%" y="709" width="0.0126%" height="15" fill="rgb(220,106,7)" fg:x="141188" fg:w="18"/><text x="99.0416%" y="719.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::drop_elements (15 samples, 0.01%)</title><rect x="98.8098%" y="677" width="0.0105%" height="15" fill="rgb(249,31,22)" fg:x="141214" fg:w="15"/><text x="99.0598%" y="687.50"></text></g><g><title>_int_free (34 samples, 0.02%)</title><rect x="98.8399%" y="597" width="0.0238%" height="15" fill="rgb(253,1,49)" fg:x="141257" fg:w="34"/><text x="99.0899%" y="607.50"></text></g><g><title>__GI___libc_free (47 samples, 0.03%)</title><rect x="98.8322%" y="613" width="0.0329%" height="15" fill="rgb(227,144,33)" fg:x="141246" fg:w="47"/><text x="99.0822%" y="623.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (62 samples, 0.04%)</title><rect x="98.8280%" y="645" width="0.0434%" height="15" fill="rgb(249,163,44)" fg:x="141240" fg:w="62"/><text x="99.0780%" y="655.50"></text></g><g><title>alloc::alloc::dealloc (56 samples, 0.04%)</title><rect x="98.8322%" y="629" width="0.0392%" height="15" fill="rgb(234,15,39)" fg:x="141246" fg:w="56"/><text x="99.0822%" y="639.50"></text></g><g><title>core::num::&lt;impl usize&gt;::checked_add (42 samples, 0.03%)</title><rect x="98.9399%" y="613" width="0.0294%" height="15" fill="rgb(207,66,16)" fg:x="141400" fg:w="42"/><text x="99.1899%" y="623.50"></text></g><g><title>core::num::&lt;impl usize&gt;::overflowing_add (16 samples, 0.01%)</title><rect x="98.9581%" y="597" width="0.0112%" height="15" fill="rgb(233,112,24)" fg:x="141426" fg:w="16"/><text x="99.2081%" y="607.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::free_buckets (230 samples, 0.16%)</title><rect x="98.8203%" y="677" width="0.1609%" height="15" fill="rgb(230,90,22)" fg:x="141229" fg:w="230"/><text x="99.0703%" y="687.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::free_buckets (230 samples, 0.16%)</title><rect x="98.8203%" y="661" width="0.1609%" height="15" fill="rgb(229,61,13)" fg:x="141229" fg:w="230"/><text x="99.0703%" y="671.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::allocation_info (157 samples, 0.11%)</title><rect x="98.8714%" y="645" width="0.1099%" height="15" fill="rgb(225,57,24)" fg:x="141302" fg:w="157"/><text x="99.1214%" y="655.50"></text></g><g><title>hashbrown::raw::TableLayout::calculate_layout_for (133 samples, 0.09%)</title><rect x="98.8882%" y="629" width="0.0931%" height="15" fill="rgb(208,169,48)" fg:x="141326" fg:w="133"/><text x="99.1382%" y="639.50"></text></g><g><title>core::num::&lt;impl usize&gt;::checked_mul (17 samples, 0.01%)</title><rect x="98.9693%" y="613" width="0.0119%" height="15" fill="rgb(244,218,51)" fg:x="141442" fg:w="17"/><text x="99.2193%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;coldbrew::runtime::Frame&gt; (292 samples, 0.20%)</title><rect x="98.7783%" y="757" width="0.2043%" height="15" fill="rgb(214,148,10)" fg:x="141169" fg:w="292"/><text x="99.0283%" y="767.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::collections::hash::map::HashMap&lt;usize,coldbrew::runtime::Value&gt;&gt; (255 samples, 0.18%)</title><rect x="98.8042%" y="741" width="0.1784%" height="15" fill="rgb(225,174,27)" fg:x="141206" fg:w="255"/><text x="99.0542%" y="751.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::map::HashMap&lt;usize,coldbrew::runtime::Value,std::collections::hash::map::RandomState&gt;&gt; (255 samples, 0.18%)</title><rect x="98.8042%" y="725" width="0.1784%" height="15" fill="rgb(230,96,26)" fg:x="141206" fg:w="255"/><text x="99.0542%" y="735.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::raw::RawTable&lt;(usize,coldbrew::runtime::Value)&gt;&gt; (255 samples, 0.18%)</title><rect x="98.8042%" y="709" width="0.1784%" height="15" fill="rgb(232,10,30)" fg:x="141206" fg:w="255"/><text x="99.0542%" y="719.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (255 samples, 0.18%)</title><rect x="98.8042%" y="693" width="0.1784%" height="15" fill="rgb(222,8,50)" fg:x="141206" fg:w="255"/><text x="99.0542%" y="703.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (38 samples, 0.03%)</title><rect x="99.0442%" y="709" width="0.0266%" height="15" fill="rgb(213,81,27)" fg:x="141549" fg:w="38"/><text x="99.2942%" y="719.50"></text></g><g><title>core::ptr::slice_from_raw_parts_mut (25 samples, 0.02%)</title><rect x="99.0533%" y="693" width="0.0175%" height="15" fill="rgb(245,50,10)" fg:x="141562" fg:w="25"/><text x="99.3033%" y="703.50"></text></g><g><title>core::ptr::metadata::from_raw_parts_mut (25 samples, 0.02%)</title><rect x="99.0533%" y="677" width="0.0175%" height="15" fill="rgb(216,100,18)" fg:x="141562" fg:w="25"/><text x="99.3033%" y="687.50"></text></g><g><title>_int_free (176 samples, 0.12%)</title><rect x="99.1533%" y="629" width="0.1232%" height="15" fill="rgb(236,147,54)" fg:x="141705" fg:w="176"/><text x="99.4033%" y="639.50"></text></g><g><title>tcache_put (32 samples, 0.02%)</title><rect x="99.2541%" y="613" width="0.0224%" height="15" fill="rgb(205,143,26)" fg:x="141849" fg:w="32"/><text x="99.5041%" y="623.50"></text></g><g><title>__GI___libc_free (207 samples, 0.14%)</title><rect x="99.1358%" y="645" width="0.1448%" height="15" fill="rgb(236,26,9)" fg:x="141680" fg:w="207"/><text x="99.3858%" y="655.50"></text></g><g><title>__rust_dealloc (16 samples, 0.01%)</title><rect x="99.2891%" y="645" width="0.0112%" height="15" fill="rgb(221,165,53)" fg:x="141899" fg:w="16"/><text x="99.5391%" y="655.50"></text></g><g><title>alloc::alloc::dealloc (247 samples, 0.17%)</title><rect x="99.1358%" y="661" width="0.1728%" height="15" fill="rgb(214,110,17)" fg:x="141680" fg:w="247"/><text x="99.3858%" y="671.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (302 samples, 0.21%)</title><rect x="99.1086%" y="677" width="0.2113%" height="15" fill="rgb(237,197,12)" fg:x="141641" fg:w="302"/><text x="99.3586%" y="687.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::as_ptr (16 samples, 0.01%)</title><rect x="99.3087%" y="661" width="0.0112%" height="15" fill="rgb(205,84,17)" fg:x="141927" fg:w="16"/><text x="99.5587%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;coldbrew::runtime::Instruction&gt; (658 samples, 0.46%)</title><rect x="98.9826%" y="757" width="0.4604%" height="15" fill="rgb(237,18,45)" fg:x="141461" fg:w="658"/><text x="99.2326%" y="767.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;alloc::vec::Vec&lt;coldbrew::runtime::Value&gt;&gt;&gt; (658 samples, 0.46%)</title><rect x="98.9826%" y="741" width="0.4604%" height="15" fill="rgb(221,87,14)" fg:x="141461" fg:w="658"/><text x="99.2326%" y="751.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;coldbrew::runtime::Value&gt;&gt; (603 samples, 0.42%)</title><rect x="99.0211%" y="725" width="0.4219%" height="15" fill="rgb(238,186,15)" fg:x="141516" fg:w="603"/><text x="99.2711%" y="735.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;coldbrew::runtime::Value&gt;&gt; (532 samples, 0.37%)</title><rect x="99.0708%" y="709" width="0.3722%" height="15" fill="rgb(208,115,11)" fg:x="141587" fg:w="532"/><text x="99.3208%" y="719.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (532 samples, 0.37%)</title><rect x="99.0708%" y="693" width="0.3722%" height="15" fill="rgb(254,175,0)" fg:x="141587" fg:w="532"/><text x="99.3208%" y="703.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::current_memory (176 samples, 0.12%)</title><rect x="99.3199%" y="677" width="0.1232%" height="15" fill="rgb(227,24,42)" fg:x="141943" fg:w="176"/><text x="99.5699%" y="687.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_mut_ptr (29 samples, 0.02%)</title><rect x="99.4584%" y="709" width="0.0203%" height="15" fill="rgb(223,211,37)" fg:x="142141" fg:w="29"/><text x="99.7084%" y="719.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (29 samples, 0.02%)</title><rect x="99.4584%" y="693" width="0.0203%" height="15" fill="rgb(235,49,27)" fg:x="142141" fg:w="29"/><text x="99.7084%" y="703.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (17 samples, 0.01%)</title><rect x="99.5221%" y="629" width="0.0119%" height="15" fill="rgb(254,97,51)" fg:x="142232" fg:w="17"/><text x="99.7721%" y="639.50"></text></g><g><title>_int_free (47 samples, 0.03%)</title><rect x="99.5753%" y="549" width="0.0329%" height="15" fill="rgb(249,51,40)" fg:x="142308" fg:w="47"/><text x="99.8253%" y="559.50"></text></g><g><title>__GI___libc_free (82 samples, 0.06%)</title><rect x="99.5550%" y="565" width="0.0574%" height="15" fill="rgb(210,128,45)" fg:x="142279" fg:w="82"/><text x="99.8050%" y="575.50"></text></g><g><title>alloc::alloc::dealloc (91 samples, 0.06%)</title><rect x="99.5550%" y="581" width="0.0637%" height="15" fill="rgb(224,137,50)" fg:x="142279" fg:w="91"/><text x="99.8050%" y="591.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (107 samples, 0.07%)</title><rect x="99.5473%" y="597" width="0.0749%" height="15" fill="rgb(242,15,9)" fg:x="142268" fg:w="107"/><text x="99.7973%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;[coldbrew::trace::RecordEntry]&gt; (265 samples, 0.19%)</title><rect x="99.4787%" y="709" width="0.1854%" height="15" fill="rgb(233,187,41)" fg:x="142170" fg:w="265"/><text x="99.7287%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;coldbrew::trace::RecordEntry&gt; (237 samples, 0.17%)</title><rect x="99.4983%" y="693" width="0.1658%" height="15" fill="rgb(227,2,29)" fg:x="142198" fg:w="237"/><text x="99.7483%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;coldbrew::runtime::Instruction&gt; (237 samples, 0.17%)</title><rect x="99.4983%" y="677" width="0.1658%" height="15" fill="rgb(222,70,3)" fg:x="142198" fg:w="237"/><text x="99.7483%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;alloc::vec::Vec&lt;coldbrew::runtime::Value&gt;&gt;&gt; (237 samples, 0.17%)</title><rect x="99.4983%" y="661" width="0.1658%" height="15" fill="rgb(213,11,42)" fg:x="142198" fg:w="237"/><text x="99.7483%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;coldbrew::runtime::Value&gt;&gt; (211 samples, 0.15%)</title><rect x="99.5165%" y="645" width="0.1476%" height="15" fill="rgb(225,150,9)" fg:x="142224" fg:w="211"/><text x="99.7665%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;coldbrew::runtime::Value&gt;&gt; (186 samples, 0.13%)</title><rect x="99.5340%" y="629" width="0.1301%" height="15" fill="rgb(230,162,45)" fg:x="142249" fg:w="186"/><text x="99.7840%" y="639.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (186 samples, 0.13%)</title><rect x="99.5340%" y="613" width="0.1301%" height="15" fill="rgb(222,14,52)" fg:x="142249" fg:w="186"/><text x="99.7840%" y="623.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::current_memory (60 samples, 0.04%)</title><rect x="99.6222%" y="597" width="0.0420%" height="15" fill="rgb(254,198,14)" fg:x="142375" fg:w="60"/><text x="99.8722%" y="607.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (344 samples, 0.24%)</title><rect x="99.4521%" y="725" width="0.2407%" height="15" fill="rgb(220,217,30)" fg:x="142132" fg:w="344"/><text x="99.7021%" y="735.50"></text></g><g><title>core::ptr::slice_from_raw_parts_mut (41 samples, 0.03%)</title><rect x="99.6641%" y="709" width="0.0287%" height="15" fill="rgb(215,146,41)" fg:x="142435" fg:w="41"/><text x="99.9141%" y="719.50"></text></g><g><title>core::ptr::metadata::from_raw_parts_mut (41 samples, 0.03%)</title><rect x="99.6641%" y="693" width="0.0287%" height="15" fill="rgb(217,27,36)" fg:x="142435" fg:w="41"/><text x="99.9141%" y="703.50"></text></g><g><title>_int_free (32 samples, 0.02%)</title><rect x="99.7110%" y="645" width="0.0224%" height="15" fill="rgb(219,218,39)" fg:x="142502" fg:w="32"/><text x="99.9610%" y="655.50"></text></g><g><title>__GI___libc_free (42 samples, 0.03%)</title><rect x="99.7054%" y="661" width="0.0294%" height="15" fill="rgb(219,4,42)" fg:x="142494" fg:w="42"/><text x="99.9554%" y="671.50"></text></g><g><title>alloc::alloc::dealloc (55 samples, 0.04%)</title><rect x="99.7054%" y="677" width="0.0385%" height="15" fill="rgb(249,119,36)" fg:x="142494" fg:w="55"/><text x="99.9554%" y="687.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (69 samples, 0.05%)</title><rect x="99.6991%" y="693" width="0.0483%" height="15" fill="rgb(209,23,33)" fg:x="142485" fg:w="69"/><text x="99.9491%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;coldbrew::trace::RecordEntry&gt;&gt; (469 samples, 0.33%)</title><rect x="99.4493%" y="741" width="0.3282%" height="15" fill="rgb(211,10,0)" fg:x="142128" fg:w="469"/><text x="99.6993%" y="751.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;coldbrew::trace::RecordEntry&gt;&gt; (121 samples, 0.08%)</title><rect x="99.6928%" y="725" width="0.0847%" height="15" fill="rgb(208,99,37)" fg:x="142476" fg:w="121"/><text x="99.9428%" y="735.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (121 samples, 0.08%)</title><rect x="99.6928%" y="709" width="0.0847%" height="15" fill="rgb(213,132,31)" fg:x="142476" fg:w="121"/><text x="99.9428%" y="719.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::current_memory (43 samples, 0.03%)</title><rect x="99.7474%" y="693" width="0.0301%" height="15" fill="rgb(243,129,40)" fg:x="142554" fg:w="43"/><text x="99.9974%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;coldbrew::trace::Recording&gt; (484 samples, 0.34%)</title><rect x="99.4430%" y="757" width="0.3387%" height="15" fill="rgb(210,66,33)" fg:x="142119" fg:w="484"/><text x="99.6930%" y="767.50"></text></g><g><title>_start (125,942 samples, 88.12%)</title><rect x="11.7175%" y="1061" width="88.1237%" height="15" fill="rgb(209,189,4)" fg:x="16746" fg:w="125942"/><text x="11.9675%" y="1071.50">_start</text></g><g><title>__libc_start_main_impl (125,942 samples, 88.12%)</title><rect x="11.7175%" y="1045" width="88.1237%" height="15" fill="rgb(214,107,37)" fg:x="16746" fg:w="125942"/><text x="11.9675%" y="1055.50">__libc_start_main_impl</text></g><g><title>__libc_start_call_main (125,942 samples, 88.12%)</title><rect x="11.7175%" y="1029" width="88.1237%" height="15" fill="rgb(245,88,54)" fg:x="16746" fg:w="125942"/><text x="11.9675%" y="1039.50">__libc_start_call_main</text></g><g><title>main (125,942 samples, 88.12%)</title><rect x="11.7175%" y="1013" width="88.1237%" height="15" fill="rgb(205,146,20)" fg:x="16746" fg:w="125942"/><text x="11.9675%" y="1023.50">main</text></g><g><title>std::rt::lang_start (125,942 samples, 88.12%)</title><rect x="11.7175%" y="997" width="88.1237%" height="15" fill="rgb(220,161,25)" fg:x="16746" fg:w="125942"/><text x="11.9675%" y="1007.50">std::rt::lang_start</text></g><g><title>std::rt::lang_start_internal (125,942 samples, 88.12%)</title><rect x="11.7175%" y="981" width="88.1237%" height="15" fill="rgb(215,152,15)" fg:x="16746" fg:w="125942"/><text x="11.9675%" y="991.50">std::rt::lang_start_internal</text></g><g><title>std::panic::catch_unwind (125,942 samples, 88.12%)</title><rect x="11.7175%" y="965" width="88.1237%" height="15" fill="rgb(233,192,44)" fg:x="16746" fg:w="125942"/><text x="11.9675%" y="975.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (125,942 samples, 88.12%)</title><rect x="11.7175%" y="949" width="88.1237%" height="15" fill="rgb(240,170,46)" fg:x="16746" fg:w="125942"/><text x="11.9675%" y="959.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (125,942 samples, 88.12%)</title><rect x="11.7175%" y="933" width="88.1237%" height="15" fill="rgb(207,104,33)" fg:x="16746" fg:w="125942"/><text x="11.9675%" y="943.50">std::panicking::try::do_call</text></g><g><title>std::rt::lang_start_internal::{{closure}} (125,942 samples, 88.12%)</title><rect x="11.7175%" y="917" width="88.1237%" height="15" fill="rgb(219,21,39)" fg:x="16746" fg:w="125942"/><text x="11.9675%" y="927.50">std::rt::lang_start_internal::{{closure}}</text></g><g><title>std::panic::catch_unwind (125,942 samples, 88.12%)</title><rect x="11.7175%" y="901" width="88.1237%" height="15" fill="rgb(214,133,29)" fg:x="16746" fg:w="125942"/><text x="11.9675%" y="911.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (125,942 samples, 88.12%)</title><rect x="11.7175%" y="885" width="88.1237%" height="15" fill="rgb(226,93,6)" fg:x="16746" fg:w="125942"/><text x="11.9675%" y="895.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (125,942 samples, 88.12%)</title><rect x="11.7175%" y="869" width="88.1237%" height="15" fill="rgb(252,222,34)" fg:x="16746" fg:w="125942"/><text x="11.9675%" y="879.50">std::panicking::try::do_call</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (125,942 samples, 88.12%)</title><rect x="11.7175%" y="853" width="88.1237%" height="15" fill="rgb(252,92,48)" fg:x="16746" fg:w="125942"/><text x="11.9675%" y="863.50">core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once</text></g><g><title>std::rt::lang_start::{{closure}} (125,942 samples, 88.12%)</title><rect x="11.7175%" y="837" width="88.1237%" height="15" fill="rgb(245,223,24)" fg:x="16746" fg:w="125942"/><text x="11.9675%" y="847.50">std::rt::lang_start::{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (125,942 samples, 88.12%)</title><rect x="11.7175%" y="821" width="88.1237%" height="15" fill="rgb(205,176,3)" fg:x="16746" fg:w="125942"/><text x="11.9675%" y="831.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>core::ops::function::FnOnce::call_once (125,942 samples, 88.12%)</title><rect x="11.7175%" y="805" width="88.1237%" height="15" fill="rgb(235,151,15)" fg:x="16746" fg:w="125942"/><text x="11.9675%" y="815.50">core::ops::function::FnOnce::call_once</text></g><g><title>coldbrew::main (125,942 samples, 88.12%)</title><rect x="11.7175%" y="789" width="88.1237%" height="15" fill="rgb(237,209,11)" fg:x="16746" fg:w="125942"/><text x="11.9675%" y="799.50">coldbrew::main</text></g><g><title>coldbrew::runtime::Runtime::run (125,938 samples, 88.12%)</title><rect x="11.7203%" y="773" width="88.1209%" height="15" fill="rgb(243,227,24)" fg:x="16750" fg:w="125938"/><text x="11.9703%" y="783.50">coldbrew::runtime::Runtime::run</text></g><g><title>core::slice::&lt;impl [T]&gt;::last (85 samples, 0.06%)</title><rect x="99.7817%" y="757" width="0.0595%" height="15" fill="rgb(239,193,16)" fg:x="142603" fg:w="85"/><text x="100.0317%" y="767.50"></text></g><g><title>coldbrew::runtime::Runtime::pop (21 samples, 0.01%)</title><rect x="99.8859%" y="1061" width="0.0147%" height="15" fill="rgb(231,27,9)" fg:x="142752" fg:w="21"/><text x="100.1359%" y="1071.50"></text></g><g><title>coldbrew::runtime::Runtime::push (15 samples, 0.01%)</title><rect x="99.9006%" y="1061" width="0.0105%" height="15" fill="rgb(219,169,10)" fg:x="142773" fg:w="15"/><text x="100.1506%" y="1071.50"></text></g><g><title>core::cmp::Ord::max (27 samples, 0.02%)</title><rect x="99.9118%" y="1061" width="0.0189%" height="15" fill="rgb(244,229,43)" fg:x="142789" fg:w="27"/><text x="100.1618%" y="1071.50"></text></g><g><title>core::ops::function::FnOnce::call_once (29 samples, 0.02%)</title><rect x="99.9370%" y="1061" width="0.0203%" height="15" fill="rgb(254,38,20)" fg:x="142825" fg:w="29"/><text x="100.1870%" y="1071.50"></text></g><g><title>coldbrew (142,910 samples, 100.00%)</title><rect x="0.0000%" y="1077" width="99.9965%" height="15" fill="rgb(250,47,30)" fg:x="0" fg:w="142910"/><text x="0.2500%" y="1087.50">coldbrew</text></g><g><title>all (142,915 samples, 100%)</title><rect x="0.0000%" y="1093" width="100.0000%" height="15" fill="rgb(224,124,36)" fg:x="0" fg:w="142915"/><text x="0.2500%" y="1103.50"></text></g></svg></svg>