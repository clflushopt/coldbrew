<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="854" onload="init(evt)" viewBox="0 0 1200 854" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="854" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="837.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="837.00"> </text><svg id="frames" x="10" width="1180" total_samples="85798"><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::DerefMut&gt;::deref_mut (9 samples, 0.01%)</title><rect x="0.0058%" y="773" width="0.0105%" height="15" fill="rgb(227,0,7)" fg:x="5" fg:w="9"/><text x="0.2558%" y="783.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::finish (52 samples, 0.06%)</title><rect x="0.0431%" y="773" width="0.0606%" height="15" fill="rgb(217,0,24)" fg:x="37" fg:w="52"/><text x="0.2931%" y="783.50"></text></g><g><title>&lt;std::collections::hash::map::RandomState as core::hash::BuildHasher&gt;::build_hasher (48 samples, 0.06%)</title><rect x="0.1072%" y="773" width="0.0559%" height="15" fill="rgb(221,193,54)" fg:x="92" fg:w="48"/><text x="0.3572%" y="783.50"></text></g><g><title>&lt;Q as hashbrown::Equivalent&lt;K&gt;&gt;::equivalent (75 samples, 0.09%)</title><rect x="0.1713%" y="757" width="0.0874%" height="15" fill="rgb(248,212,6)" fg:x="147" fg:w="75"/><text x="0.4213%" y="767.50"></text></g><g><title>&lt;T as core::borrow::Borrow&lt;T&gt;&gt;::borrow (74 samples, 0.09%)</title><rect x="0.2646%" y="757" width="0.0862%" height="15" fill="rgb(208,68,35)" fg:x="227" fg:w="74"/><text x="0.5146%" y="767.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (43 samples, 0.05%)</title><rect x="0.3508%" y="757" width="0.0501%" height="15" fill="rgb(232,128,0)" fg:x="301" fg:w="43"/><text x="0.6008%" y="767.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (34 samples, 0.04%)</title><rect x="0.4103%" y="757" width="0.0396%" height="15" fill="rgb(207,160,47)" fg:x="352" fg:w="34"/><text x="0.6603%" y="767.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (9 samples, 0.01%)</title><rect x="0.4499%" y="757" width="0.0105%" height="15" fill="rgb(228,23,34)" fg:x="386" fg:w="9"/><text x="0.6999%" y="767.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (25 samples, 0.03%)</title><rect x="0.4604%" y="757" width="0.0291%" height="15" fill="rgb(218,30,26)" fg:x="395" fg:w="25"/><text x="0.7104%" y="767.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (27 samples, 0.03%)</title><rect x="0.4988%" y="757" width="0.0315%" height="15" fill="rgb(220,122,19)" fg:x="428" fg:w="27"/><text x="0.7488%" y="767.50"></text></g><g><title>&lt;coldbrew::runtime::ProgramCounter as core::cmp::PartialEq&gt;::eq (11 samples, 0.01%)</title><rect x="0.5396%" y="757" width="0.0128%" height="15" fill="rgb(250,228,42)" fg:x="463" fg:w="11"/><text x="0.7896%" y="767.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (32 samples, 0.04%)</title><rect x="0.5525%" y="757" width="0.0373%" height="15" fill="rgb(240,193,28)" fg:x="474" fg:w="32"/><text x="0.8025%" y="767.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::finish (37 samples, 0.04%)</title><rect x="0.5909%" y="757" width="0.0431%" height="15" fill="rgb(216,20,37)" fg:x="507" fg:w="37"/><text x="0.8409%" y="767.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::ops::index::Index&lt;&amp;Q&gt;&gt;::index (65 samples, 0.08%)</title><rect x="0.6340%" y="757" width="0.0758%" height="15" fill="rgb(206,188,39)" fg:x="544" fg:w="65"/><text x="0.8840%" y="767.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (25 samples, 0.03%)</title><rect x="0.6807%" y="741" width="0.0291%" height="15" fill="rgb(217,207,13)" fg:x="584" fg:w="25"/><text x="0.9307%" y="751.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (25 samples, 0.03%)</title><rect x="0.6807%" y="725" width="0.0291%" height="15" fill="rgb(231,73,38)" fg:x="584" fg:w="25"/><text x="0.9307%" y="735.50"></text></g><g><title>&lt;std::collections::hash::map::RandomState as core::hash::BuildHasher&gt;::build_hasher (18 samples, 0.02%)</title><rect x="0.7098%" y="757" width="0.0210%" height="15" fill="rgb(225,20,46)" fg:x="609" fg:w="18"/><text x="0.9598%" y="767.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (9 samples, 0.01%)</title><rect x="0.7378%" y="757" width="0.0105%" height="15" fill="rgb(210,31,41)" fg:x="633" fg:w="9"/><text x="0.9878%" y="767.50"></text></g><g><title>__GI___libc_free (76 samples, 0.09%)</title><rect x="0.7483%" y="757" width="0.0886%" height="15" fill="rgb(221,200,47)" fg:x="642" fg:w="76"/><text x="0.9983%" y="767.50"></text></g><g><title>__GI___libc_malloc (32 samples, 0.04%)</title><rect x="0.8368%" y="757" width="0.0373%" height="15" fill="rgb(226,26,5)" fg:x="718" fg:w="32"/><text x="1.0868%" y="767.50"></text></g><g><title>__memcpy_avx_unaligned_erms (72 samples, 0.08%)</title><rect x="0.8741%" y="757" width="0.0839%" height="15" fill="rgb(249,33,26)" fg:x="750" fg:w="72"/><text x="1.1241%" y="767.50"></text></g><g><title>_int_malloc (19 samples, 0.02%)</title><rect x="0.9581%" y="757" width="0.0221%" height="15" fill="rgb(235,183,28)" fg:x="822" fg:w="19"/><text x="1.2081%" y="767.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (27 samples, 0.03%)</title><rect x="0.9907%" y="757" width="0.0315%" height="15" fill="rgb(221,5,38)" fg:x="850" fg:w="27"/><text x="1.2407%" y="767.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::current_memory (40 samples, 0.05%)</title><rect x="1.0222%" y="757" width="0.0466%" height="15" fill="rgb(247,18,42)" fg:x="877" fg:w="40"/><text x="1.2722%" y="767.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::into_vec (10 samples, 0.01%)</title><rect x="1.0688%" y="757" width="0.0117%" height="15" fill="rgb(241,131,45)" fg:x="917" fg:w="10"/><text x="1.3188%" y="767.50"></text></g><g><title>alloc::slice::hack::into_vec (15 samples, 0.02%)</title><rect x="1.0804%" y="757" width="0.0175%" height="15" fill="rgb(249,31,29)" fg:x="927" fg:w="15"/><text x="1.3304%" y="767.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::pop (73 samples, 0.09%)</title><rect x="1.0979%" y="757" width="0.0851%" height="15" fill="rgb(225,111,53)" fg:x="942" fg:w="73"/><text x="1.3479%" y="767.50"></text></g><g><title>core::ptr::read (25 samples, 0.03%)</title><rect x="1.1539%" y="741" width="0.0291%" height="15" fill="rgb(238,160,17)" fg:x="990" fg:w="25"/><text x="1.4039%" y="751.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (89 samples, 0.10%)</title><rect x="1.1830%" y="757" width="0.1037%" height="15" fill="rgb(214,148,48)" fg:x="1015" fg:w="89"/><text x="1.4330%" y="767.50"></text></g><g><title>core::ptr::write (50 samples, 0.06%)</title><rect x="1.2285%" y="741" width="0.0583%" height="15" fill="rgb(232,36,49)" fg:x="1054" fg:w="50"/><text x="1.4785%" y="751.50"></text></g><g><title>coldbrew::profiler::Profiler::count_entry (150 samples, 0.17%)</title><rect x="1.2867%" y="757" width="0.1748%" height="15" fill="rgb(209,103,24)" fg:x="1104" fg:w="150"/><text x="1.5367%" y="767.50"></text></g><g><title>coldbrew::runtime::Instruction::get_mnemonic (20 samples, 0.02%)</title><rect x="1.4674%" y="757" width="0.0233%" height="15" fill="rgb(229,88,8)" fg:x="1259" fg:w="20"/><text x="1.7174%" y="767.50"></text></g><g><title>coldbrew::runtime::Runtime::eval::{{closure}} (12 samples, 0.01%)</title><rect x="1.4977%" y="757" width="0.0140%" height="15" fill="rgb(213,181,19)" fg:x="1285" fg:w="12"/><text x="1.7477%" y="767.50"></text></g><g><title>coldbrew::runtime::Runtime::get_relative_offset (14 samples, 0.02%)</title><rect x="1.5117%" y="757" width="0.0163%" height="15" fill="rgb(254,191,54)" fg:x="1297" fg:w="14"/><text x="1.7617%" y="767.50"></text></g><g><title>coldbrew::runtime::Runtime::load (33 samples, 0.04%)</title><rect x="1.5292%" y="757" width="0.0385%" height="15" fill="rgb(241,83,37)" fg:x="1312" fg:w="33"/><text x="1.7792%" y="767.50"></text></g><g><title>coldbrew::runtime::Runtime::next (66 samples, 0.08%)</title><rect x="1.5676%" y="757" width="0.0769%" height="15" fill="rgb(233,36,39)" fg:x="1345" fg:w="66"/><text x="1.8176%" y="767.50"></text></g><g><title>coldbrew::runtime::Runtime::pop (61 samples, 0.07%)</title><rect x="1.6446%" y="757" width="0.0711%" height="15" fill="rgb(226,3,54)" fg:x="1411" fg:w="61"/><text x="1.8946%" y="767.50"></text></g><g><title>coldbrew::runtime::Runtime::push (21 samples, 0.02%)</title><rect x="1.7157%" y="757" width="0.0245%" height="15" fill="rgb(245,192,40)" fg:x="1472" fg:w="21"/><text x="1.9657%" y="767.50"></text></g><g><title>coldbrew::trace::Recorder::flip_branch (40 samples, 0.05%)</title><rect x="1.7471%" y="757" width="0.0466%" height="15" fill="rgb(238,167,29)" fg:x="1499" fg:w="40"/><text x="1.9971%" y="767.50"></text></g><g><title>coldbrew::trace::Recorder::flip_branch::{{closure}} (20 samples, 0.02%)</title><rect x="1.7937%" y="757" width="0.0233%" height="15" fill="rgb(232,182,51)" fg:x="1539" fg:w="20"/><text x="2.0437%" y="767.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq for usize&gt;::eq (58 samples, 0.07%)</title><rect x="1.8264%" y="757" width="0.0676%" height="15" fill="rgb(231,60,39)" fg:x="1567" fg:w="58"/><text x="2.0764%" y="767.50"></text></g><g><title>core::hash::BuildHasher::hash_one (26 samples, 0.03%)</title><rect x="1.8963%" y="757" width="0.0303%" height="15" fill="rgb(208,69,12)" fg:x="1627" fg:w="26"/><text x="2.1463%" y="767.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (48 samples, 0.06%)</title><rect x="1.9266%" y="757" width="0.0559%" height="15" fill="rgb(235,93,37)" fg:x="1653" fg:w="48"/><text x="2.1766%" y="767.50"></text></g><g><title>core::hash::sip::u8to64_le (33 samples, 0.04%)</title><rect x="1.9826%" y="757" width="0.0385%" height="15" fill="rgb(213,116,39)" fg:x="1701" fg:w="33"/><text x="2.2326%" y="767.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;coldbrew::runtime::Value&gt;&gt; (31 samples, 0.04%)</title><rect x="2.0269%" y="757" width="0.0361%" height="15" fill="rgb(222,207,29)" fg:x="1739" fg:w="31"/><text x="2.2769%" y="767.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;coldbrew::runtime::Value&gt;&gt; (15 samples, 0.02%)</title><rect x="2.0642%" y="757" width="0.0175%" height="15" fill="rgb(206,96,30)" fg:x="1771" fg:w="15"/><text x="2.3142%" y="767.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (81 samples, 0.09%)</title><rect x="2.0956%" y="757" width="0.0944%" height="15" fill="rgb(218,138,4)" fg:x="1798" fg:w="81"/><text x="2.3456%" y="767.50"></text></g><g><title>hashbrown::map::make_hash (21 samples, 0.02%)</title><rect x="2.1656%" y="741" width="0.0245%" height="15" fill="rgb(250,191,14)" fg:x="1858" fg:w="21"/><text x="2.4156%" y="751.50"></text></g><g><title>hashbrown::map::equivalent_key::{{closure}} (65 samples, 0.08%)</title><rect x="2.2063%" y="757" width="0.0758%" height="15" fill="rgb(239,60,40)" fg:x="1893" fg:w="65"/><text x="2.4563%" y="767.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get (10 samples, 0.01%)</title><rect x="2.2856%" y="757" width="0.0117%" height="15" fill="rgb(206,27,48)" fg:x="1961" fg:w="10"/><text x="2.5356%" y="767.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (13 samples, 0.02%)</title><rect x="2.3042%" y="757" width="0.0152%" height="15" fill="rgb(225,35,8)" fg:x="1977" fg:w="13"/><text x="2.5542%" y="767.50"></text></g><g><title>[[heap]] (1,866 samples, 2.17%)</title><rect x="0.1678%" y="773" width="2.1749%" height="15" fill="rgb(250,213,24)" fg:x="144" fg:w="1866"/><text x="0.4178%" y="783.50">[..</text></g><g><title>unlink_chunk (20 samples, 0.02%)</title><rect x="2.3194%" y="757" width="0.0233%" height="15" fill="rgb(247,123,22)" fg:x="1990" fg:w="20"/><text x="2.5694%" y="767.50"></text></g><g><title>&lt;Q as hashbrown::Equivalent&lt;K&gt;&gt;::equivalent (83 samples, 0.10%)</title><rect x="2.3450%" y="757" width="0.0967%" height="15" fill="rgb(231,138,38)" fg:x="2012" fg:w="83"/><text x="2.5950%" y="767.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (83 samples, 0.10%)</title><rect x="2.3450%" y="741" width="0.0967%" height="15" fill="rgb(231,145,46)" fg:x="2012" fg:w="83"/><text x="2.5950%" y="751.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (24 samples, 0.03%)</title><rect x="2.4569%" y="741" width="0.0280%" height="15" fill="rgb(251,118,11)" fg:x="2108" fg:w="24"/><text x="2.7069%" y="751.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (24 samples, 0.03%)</title><rect x="2.4569%" y="725" width="0.0280%" height="15" fill="rgb(217,147,25)" fg:x="2108" fg:w="24"/><text x="2.7069%" y="735.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (55 samples, 0.06%)</title><rect x="2.4418%" y="757" width="0.0641%" height="15" fill="rgb(247,81,37)" fg:x="2095" fg:w="55"/><text x="2.6918%" y="767.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (18 samples, 0.02%)</title><rect x="2.4849%" y="741" width="0.0210%" height="15" fill="rgb(209,12,38)" fg:x="2132" fg:w="18"/><text x="2.7349%" y="751.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (18 samples, 0.02%)</title><rect x="2.4849%" y="725" width="0.0210%" height="15" fill="rgb(227,1,9)" fg:x="2132" fg:w="18"/><text x="2.7349%" y="735.50"></text></g><g><title>&lt;alloc::alloc::Global as core::clone::Clone&gt;::clone (11 samples, 0.01%)</title><rect x="2.5059%" y="757" width="0.0128%" height="15" fill="rgb(248,47,43)" fg:x="2150" fg:w="11"/><text x="2.7559%" y="767.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (18 samples, 0.02%)</title><rect x="2.5187%" y="757" width="0.0210%" height="15" fill="rgb(221,10,30)" fg:x="2161" fg:w="18"/><text x="2.7687%" y="767.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (47 samples, 0.05%)</title><rect x="2.5397%" y="757" width="0.0548%" height="15" fill="rgb(210,229,1)" fg:x="2179" fg:w="47"/><text x="2.7897%" y="767.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (23 samples, 0.03%)</title><rect x="2.5677%" y="741" width="0.0268%" height="15" fill="rgb(222,148,37)" fg:x="2203" fg:w="23"/><text x="2.8177%" y="751.50"></text></g><g><title>alloc::slice::hack::to_vec (23 samples, 0.03%)</title><rect x="2.5677%" y="725" width="0.0268%" height="15" fill="rgb(234,67,33)" fg:x="2203" fg:w="23"/><text x="2.8177%" y="735.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (32 samples, 0.04%)</title><rect x="2.5945%" y="757" width="0.0373%" height="15" fill="rgb(247,98,35)" fg:x="2226" fg:w="32"/><text x="2.8445%" y="767.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::DerefMut&gt;::deref_mut (20 samples, 0.02%)</title><rect x="2.6318%" y="757" width="0.0233%" height="15" fill="rgb(247,138,52)" fg:x="2258" fg:w="20"/><text x="2.8818%" y="767.50"></text></g><g><title>&lt;coldbrew::bytecode::OPCode as core::clone::Clone&gt;::clone (17 samples, 0.02%)</title><rect x="2.6609%" y="757" width="0.0198%" height="15" fill="rgb(213,79,30)" fg:x="2283" fg:w="17"/><text x="2.9109%" y="767.50"></text></g><g><title>&lt;coldbrew::runtime::Instruction as core::clone::Clone&gt;::clone (80 samples, 0.09%)</title><rect x="2.6807%" y="757" width="0.0932%" height="15" fill="rgb(246,177,23)" fg:x="2300" fg:w="80"/><text x="2.9307%" y="767.50"></text></g><g><title>&lt;coldbrew::runtime::ProgramCounter as core::hash::Hash&gt;::hash (86 samples, 0.10%)</title><rect x="2.7798%" y="757" width="0.1002%" height="15" fill="rgb(230,62,27)" fg:x="2385" fg:w="86"/><text x="3.0298%" y="767.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::clone::Clone&gt;::clone (70 samples, 0.08%)</title><rect x="2.8847%" y="757" width="0.0816%" height="15" fill="rgb(216,154,8)" fg:x="2475" fg:w="70"/><text x="3.1347%" y="767.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::finish (178 samples, 0.21%)</title><rect x="2.9674%" y="757" width="0.2075%" height="15" fill="rgb(244,35,45)" fg:x="2546" fg:w="178"/><text x="3.2174%" y="767.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (170 samples, 0.20%)</title><rect x="2.9768%" y="741" width="0.1981%" height="15" fill="rgb(251,115,12)" fg:x="2554" fg:w="170"/><text x="3.2268%" y="751.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (126 samples, 0.15%)</title><rect x="3.1749%" y="757" width="0.1469%" height="15" fill="rgb(240,54,50)" fg:x="2724" fg:w="126"/><text x="3.4249%" y="767.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (125 samples, 0.15%)</title><rect x="3.1761%" y="741" width="0.1457%" height="15" fill="rgb(233,84,52)" fg:x="2725" fg:w="125"/><text x="3.4261%" y="751.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::ops::index::Index&lt;&amp;Q&gt;&gt;::index (30 samples, 0.03%)</title><rect x="3.3218%" y="757" width="0.0350%" height="15" fill="rgb(207,117,47)" fg:x="2850" fg:w="30"/><text x="3.5718%" y="767.50"></text></g><g><title>&lt;std::collections::hash::map::RandomState as core::hash::BuildHasher&gt;::build_hasher (464 samples, 0.54%)</title><rect x="3.3567%" y="757" width="0.5408%" height="15" fill="rgb(249,43,39)" fg:x="2880" fg:w="464"/><text x="3.6067%" y="767.50"></text></g><g><title>core::hash::sip::SipHasher13::new_with_keys (272 samples, 0.32%)</title><rect x="3.5805%" y="741" width="0.3170%" height="15" fill="rgb(209,38,44)" fg:x="3072" fg:w="272"/><text x="3.8305%" y="751.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::new_with_keys (91 samples, 0.11%)</title><rect x="3.7915%" y="725" width="0.1061%" height="15" fill="rgb(236,212,23)" fg:x="3253" fg:w="91"/><text x="4.0415%" y="735.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (11 samples, 0.01%)</title><rect x="3.9045%" y="757" width="0.0128%" height="15" fill="rgb(242,79,21)" fg:x="3350" fg:w="11"/><text x="4.1545%" y="767.50"></text></g><g><title>__memcpy_avx_unaligned_erms (288 samples, 0.34%)</title><rect x="3.9232%" y="757" width="0.3357%" height="15" fill="rgb(211,96,35)" fg:x="3366" fg:w="288"/><text x="4.1732%" y="767.50"></text></g><g><title>_int_free (24 samples, 0.03%)</title><rect x="4.2588%" y="757" width="0.0280%" height="15" fill="rgb(253,215,40)" fg:x="3654" fg:w="24"/><text x="4.5088%" y="767.50"></text></g><g><title>_int_malloc (19 samples, 0.02%)</title><rect x="4.2868%" y="757" width="0.0221%" height="15" fill="rgb(211,81,21)" fg:x="3678" fg:w="19"/><text x="4.5368%" y="767.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (42 samples, 0.05%)</title><rect x="4.3090%" y="757" width="0.0490%" height="15" fill="rgb(208,190,38)" fg:x="3697" fg:w="42"/><text x="4.5590%" y="767.50"></text></g><g><title>alloc::alloc::alloc (30 samples, 0.03%)</title><rect x="4.3229%" y="741" width="0.0350%" height="15" fill="rgb(235,213,38)" fg:x="3709" fg:w="30"/><text x="4.5729%" y="751.50"></text></g><g><title>alloc::alloc::exchange_malloc (12 samples, 0.01%)</title><rect x="4.3579%" y="757" width="0.0140%" height="15" fill="rgb(237,122,38)" fg:x="3739" fg:w="12"/><text x="4.6079%" y="767.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (12 samples, 0.01%)</title><rect x="4.3579%" y="741" width="0.0140%" height="15" fill="rgb(244,218,35)" fg:x="3739" fg:w="12"/><text x="4.6079%" y="751.50"></text></g><g><title>alloc::slice::hack::into_vec (28 samples, 0.03%)</title><rect x="4.3719%" y="757" width="0.0326%" height="15" fill="rgb(240,68,47)" fg:x="3751" fg:w="28"/><text x="4.6219%" y="767.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::pop (16 samples, 0.02%)</title><rect x="4.4045%" y="757" width="0.0186%" height="15" fill="rgb(210,16,53)" fg:x="3779" fg:w="16"/><text x="4.6545%" y="767.50"></text></g><g><title>coldbrew::profiler::Profiler::is_hot (41 samples, 0.05%)</title><rect x="4.4267%" y="757" width="0.0478%" height="15" fill="rgb(235,124,12)" fg:x="3798" fg:w="41"/><text x="4.6767%" y="767.50"></text></g><g><title>coldbrew::program::Program::code (192 samples, 0.22%)</title><rect x="4.4745%" y="757" width="0.2238%" height="15" fill="rgb(224,169,11)" fg:x="3839" fg:w="192"/><text x="4.7245%" y="767.50"></text></g><g><title>coldbrew::runtime::Frame::inc_instruction_index (57 samples, 0.07%)</title><rect x="4.6982%" y="757" width="0.0664%" height="15" fill="rgb(250,166,2)" fg:x="4031" fg:w="57"/><text x="4.9482%" y="767.50"></text></g><g><title>coldbrew::runtime::Instruction::get_params (15 samples, 0.02%)</title><rect x="4.7647%" y="757" width="0.0175%" height="15" fill="rgb(242,216,29)" fg:x="4088" fg:w="15"/><text x="5.0147%" y="767.50"></text></g><g><title>coldbrew::runtime::Instruction::nth (10 samples, 0.01%)</title><rect x="4.7822%" y="757" width="0.0117%" height="15" fill="rgb(230,116,27)" fg:x="4103" fg:w="10"/><text x="5.0322%" y="767.50"></text></g><g><title>coldbrew::runtime::ProgramCounter::get_instruction_index (29 samples, 0.03%)</title><rect x="4.7973%" y="757" width="0.0338%" height="15" fill="rgb(228,99,48)" fg:x="4116" fg:w="29"/><text x="5.0473%" y="767.50"></text></g><g><title>coldbrew::runtime::ProgramCounter::get_method_index (35 samples, 0.04%)</title><rect x="4.8311%" y="757" width="0.0408%" height="15" fill="rgb(253,11,6)" fg:x="4145" fg:w="35"/><text x="5.0811%" y="767.50"></text></g><g><title>coldbrew::runtime::Runtime::eval (211 samples, 0.25%)</title><rect x="4.8719%" y="757" width="0.2459%" height="15" fill="rgb(247,143,39)" fg:x="4180" fg:w="211"/><text x="5.1219%" y="767.50"></text></g><g><title>coldbrew::runtime::Runtime::eval::{{closure}} (20 samples, 0.02%)</title><rect x="5.1178%" y="757" width="0.0233%" height="15" fill="rgb(236,97,10)" fg:x="4391" fg:w="20"/><text x="5.3678%" y="767.50"></text></g><g><title>coldbrew::runtime::Runtime::fetch (192 samples, 0.22%)</title><rect x="5.1411%" y="757" width="0.2238%" height="15" fill="rgb(233,208,19)" fg:x="4411" fg:w="192"/><text x="5.3911%" y="767.50"></text></g><g><title>coldbrew::runtime::Runtime::jump (14 samples, 0.02%)</title><rect x="5.3649%" y="757" width="0.0163%" height="15" fill="rgb(216,164,2)" fg:x="4603" fg:w="14"/><text x="5.6149%" y="767.50"></text></g><g><title>coldbrew::trace::Recorder::record (129 samples, 0.15%)</title><rect x="5.3976%" y="757" width="0.1504%" height="15" fill="rgb(220,129,5)" fg:x="4631" fg:w="129"/><text x="5.6476%" y="767.50"></text></g><g><title>core::hash::BuildHasher::hash_one (195 samples, 0.23%)</title><rect x="5.5619%" y="757" width="0.2273%" height="15" fill="rgb(242,17,10)" fg:x="4772" fg:w="195"/><text x="5.8119%" y="767.50"></text></g><g><title>core::hash::Hasher::write_usize (87 samples, 0.10%)</title><rect x="5.7892%" y="757" width="0.1014%" height="15" fill="rgb(242,107,0)" fg:x="4967" fg:w="87"/><text x="6.0392%" y="767.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (91 samples, 0.11%)</title><rect x="5.8906%" y="757" width="0.1061%" height="15" fill="rgb(251,28,31)" fg:x="5054" fg:w="91"/><text x="6.1406%" y="767.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for usize&gt;::hash (245 samples, 0.29%)</title><rect x="5.9966%" y="757" width="0.2856%" height="15" fill="rgb(233,223,10)" fg:x="5145" fg:w="245"/><text x="6.2466%" y="767.50"></text></g><g><title>core::option::Option&lt;T&gt;::map_or_else (12 samples, 0.01%)</title><rect x="6.2822%" y="757" width="0.0140%" height="15" fill="rgb(215,21,27)" fg:x="5390" fg:w="12"/><text x="6.5322%" y="767.50"></text></g><g><title>core::ptr::drop_in_place&lt;[coldbrew::trace::RecordEntry]&gt; (10 samples, 0.01%)</title><rect x="6.2962%" y="757" width="0.0117%" height="15" fill="rgb(232,23,21)" fg:x="5402" fg:w="10"/><text x="6.5462%" y="767.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;coldbrew::runtime::Value&gt;&gt; (52 samples, 0.06%)</title><rect x="6.3078%" y="757" width="0.0606%" height="15" fill="rgb(244,5,23)" fg:x="5412" fg:w="52"/><text x="6.5578%" y="767.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;coldbrew::runtime::Value&gt;&gt; (43 samples, 0.05%)</title><rect x="6.3684%" y="757" width="0.0501%" height="15" fill="rgb(226,81,46)" fg:x="5464" fg:w="43"/><text x="6.6184%" y="767.50"></text></g><g><title>core::ptr::drop_in_place&lt;coldbrew::runtime::Instruction&gt; (59 samples, 0.07%)</title><rect x="6.4186%" y="757" width="0.0688%" height="15" fill="rgb(247,70,30)" fg:x="5507" fg:w="59"/><text x="6.6686%" y="767.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;alloc::vec::Vec&lt;coldbrew::runtime::Value&gt;&gt;&gt; (51 samples, 0.06%)</title><rect x="6.4955%" y="757" width="0.0594%" height="15" fill="rgb(212,68,19)" fg:x="5573" fg:w="51"/><text x="6.7455%" y="767.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::last_mut (17 samples, 0.02%)</title><rect x="6.5549%" y="757" width="0.0198%" height="15" fill="rgb(240,187,13)" fg:x="5624" fg:w="17"/><text x="6.8049%" y="767.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (25 samples, 0.03%)</title><rect x="6.5747%" y="757" width="0.0291%" height="15" fill="rgb(223,113,26)" fg:x="5641" fg:w="25"/><text x="6.8247%" y="767.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (9 samples, 0.01%)</title><rect x="6.6039%" y="757" width="0.0105%" height="15" fill="rgb(206,192,2)" fg:x="5666" fg:w="9"/><text x="6.8539%" y="767.50"></text></g><g><title>hashbrown::map::equivalent_key::{{closure}} (80 samples, 0.09%)</title><rect x="6.6144%" y="757" width="0.0932%" height="15" fill="rgb(241,108,4)" fg:x="5675" fg:w="80"/><text x="6.8644%" y="767.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::bucket (78 samples, 0.09%)</title><rect x="6.7076%" y="757" width="0.0909%" height="15" fill="rgb(247,173,49)" fg:x="5755" fg:w="78"/><text x="6.9576%" y="767.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (86 samples, 0.10%)</title><rect x="6.7985%" y="757" width="0.1002%" height="15" fill="rgb(224,114,35)" fg:x="5833" fg:w="86"/><text x="7.0485%" y="767.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find_or_find_insert_slot (11 samples, 0.01%)</title><rect x="6.8988%" y="757" width="0.0128%" height="15" fill="rgb(245,159,27)" fg:x="5919" fg:w="11"/><text x="7.1488%" y="767.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get (106 samples, 0.12%)</title><rect x="6.9116%" y="757" width="0.1235%" height="15" fill="rgb(245,172,44)" fg:x="5930" fg:w="106"/><text x="7.1616%" y="767.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (485 samples, 0.57%)</title><rect x="7.0410%" y="757" width="0.5653%" height="15" fill="rgb(236,23,11)" fg:x="6041" fg:w="485"/><text x="7.2910%" y="767.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (48 samples, 0.06%)</title><rect x="7.6121%" y="757" width="0.0559%" height="15" fill="rgb(205,117,38)" fg:x="6531" fg:w="48"/><text x="7.8621%" y="767.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (30 samples, 0.03%)</title><rect x="7.6330%" y="741" width="0.0350%" height="15" fill="rgb(237,72,25)" fg:x="6549" fg:w="30"/><text x="7.8830%" y="751.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get_mut (13 samples, 0.02%)</title><rect x="7.6680%" y="757" width="0.0152%" height="15" fill="rgb(244,70,9)" fg:x="6579" fg:w="13"/><text x="7.9180%" y="767.50"></text></g><g><title>[[stack]] (4,584 samples, 5.34%)</title><rect x="2.3427%" y="773" width="5.3428%" height="15" fill="rgb(217,125,39)" fg:x="2010" fg:w="4584"/><text x="2.5927%" y="783.50">[[stack..</text></g><g><title>[anon] (15 samples, 0.02%)</title><rect x="7.6855%" y="773" width="0.0175%" height="15" fill="rgb(235,36,10)" fg:x="6594" fg:w="15"/><text x="7.9355%" y="783.50"></text></g><g><title>&lt;Q as hashbrown::Equivalent&lt;K&gt;&gt;::equivalent (77 samples, 0.09%)</title><rect x="7.9850%" y="757" width="0.0897%" height="15" fill="rgb(251,123,47)" fg:x="6851" fg:w="77"/><text x="8.2350%" y="767.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (45 samples, 0.05%)</title><rect x="8.0759%" y="757" width="0.0524%" height="15" fill="rgb(221,13,13)" fg:x="6929" fg:w="45"/><text x="8.3259%" y="767.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (73 samples, 0.09%)</title><rect x="8.1284%" y="757" width="0.0851%" height="15" fill="rgb(238,131,9)" fg:x="6974" fg:w="73"/><text x="8.3784%" y="767.50"></text></g><g><title>alloc::alloc::dealloc (73 samples, 0.09%)</title><rect x="8.1284%" y="741" width="0.0851%" height="15" fill="rgb(211,50,8)" fg:x="6974" fg:w="73"/><text x="8.3784%" y="751.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (69 samples, 0.08%)</title><rect x="8.2146%" y="757" width="0.0804%" height="15" fill="rgb(245,182,24)" fg:x="7048" fg:w="69"/><text x="8.4646%" y="767.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (15 samples, 0.02%)</title><rect x="8.2951%" y="757" width="0.0175%" height="15" fill="rgb(242,14,37)" fg:x="7117" fg:w="15"/><text x="8.5451%" y="767.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (31 samples, 0.04%)</title><rect x="8.3125%" y="757" width="0.0361%" height="15" fill="rgb(246,228,12)" fg:x="7132" fg:w="31"/><text x="8.5625%" y="767.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::DerefMut&gt;::deref_mut (39 samples, 0.05%)</title><rect x="8.3487%" y="757" width="0.0455%" height="15" fill="rgb(213,55,15)" fg:x="7163" fg:w="39"/><text x="8.5987%" y="767.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (18 samples, 0.02%)</title><rect x="8.3941%" y="757" width="0.0210%" height="15" fill="rgb(209,9,3)" fg:x="7202" fg:w="18"/><text x="8.6441%" y="767.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (30 samples, 0.03%)</title><rect x="8.4151%" y="757" width="0.0350%" height="15" fill="rgb(230,59,30)" fg:x="7220" fg:w="30"/><text x="8.6651%" y="767.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (9 samples, 0.01%)</title><rect x="8.4396%" y="741" width="0.0105%" height="15" fill="rgb(209,121,21)" fg:x="7241" fg:w="9"/><text x="8.6896%" y="751.50"></text></g><g><title>&lt;coldbrew::bytecode::OPCode as core::convert::From&lt;u8&gt;&gt;::from (37 samples, 0.04%)</title><rect x="8.4512%" y="757" width="0.0431%" height="15" fill="rgb(220,109,13)" fg:x="7251" fg:w="37"/><text x="8.7012%" y="767.50"></text></g><g><title>&lt;coldbrew::runtime::Instruction as core::clone::Clone&gt;::clone (19 samples, 0.02%)</title><rect x="8.4944%" y="757" width="0.0221%" height="15" fill="rgb(232,18,1)" fg:x="7288" fg:w="19"/><text x="8.7444%" y="767.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (415 samples, 0.48%)</title><rect x="8.5270%" y="757" width="0.4837%" height="15" fill="rgb(215,41,42)" fg:x="7316" fg:w="415"/><text x="8.7770%" y="767.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (367 samples, 0.43%)</title><rect x="9.0107%" y="757" width="0.4277%" height="15" fill="rgb(224,123,36)" fg:x="7731" fg:w="367"/><text x="9.2607%" y="767.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (193 samples, 0.22%)</title><rect x="9.4384%" y="757" width="0.2249%" height="15" fill="rgb(240,125,3)" fg:x="8098" fg:w="193"/><text x="9.6884%" y="767.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (100 samples, 0.12%)</title><rect x="9.6634%" y="757" width="0.1166%" height="15" fill="rgb(205,98,50)" fg:x="8291" fg:w="100"/><text x="9.9134%" y="767.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (21 samples, 0.02%)</title><rect x="9.7834%" y="757" width="0.0245%" height="15" fill="rgb(205,185,37)" fg:x="8394" fg:w="21"/><text x="10.0334%" y="767.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (91 samples, 0.11%)</title><rect x="9.8079%" y="757" width="0.1061%" height="15" fill="rgb(238,207,15)" fg:x="8415" fg:w="91"/><text x="10.0579%" y="767.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::finish (10 samples, 0.01%)</title><rect x="9.9151%" y="757" width="0.0117%" height="15" fill="rgb(213,199,42)" fg:x="8507" fg:w="10"/><text x="10.1651%" y="767.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (102 samples, 0.12%)</title><rect x="9.9268%" y="757" width="0.1189%" height="15" fill="rgb(235,201,11)" fg:x="8517" fg:w="102"/><text x="10.1768%" y="767.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::ops::index::Index&lt;&amp;Q&gt;&gt;::index (18 samples, 0.02%)</title><rect x="10.0457%" y="757" width="0.0210%" height="15" fill="rgb(207,46,11)" fg:x="8619" fg:w="18"/><text x="10.2957%" y="767.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (18 samples, 0.02%)</title><rect x="10.0457%" y="741" width="0.0210%" height="15" fill="rgb(241,35,35)" fg:x="8619" fg:w="18"/><text x="10.2957%" y="751.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (18 samples, 0.02%)</title><rect x="10.0457%" y="725" width="0.0210%" height="15" fill="rgb(243,32,47)" fg:x="8619" fg:w="18"/><text x="10.2957%" y="735.50"></text></g><g><title>&lt;std::collections::hash::map::RandomState as core::hash::BuildHasher&gt;::build_hasher (13 samples, 0.02%)</title><rect x="10.0667%" y="757" width="0.0152%" height="15" fill="rgb(247,202,23)" fg:x="8637" fg:w="13"/><text x="10.3167%" y="767.50"></text></g><g><title>[unknown] (67 samples, 0.08%)</title><rect x="10.0818%" y="757" width="0.0781%" height="15" fill="rgb(219,102,11)" fg:x="8650" fg:w="67"/><text x="10.3318%" y="767.50"></text></g><g><title>[unknown] (67 samples, 0.08%)</title><rect x="10.0818%" y="741" width="0.0781%" height="15" fill="rgb(243,110,44)" fg:x="8650" fg:w="67"/><text x="10.3318%" y="751.50"></text></g><g><title>[unknown] (67 samples, 0.08%)</title><rect x="10.0818%" y="725" width="0.0781%" height="15" fill="rgb(222,74,54)" fg:x="8650" fg:w="67"/><text x="10.3318%" y="735.50"></text></g><g><title>[unknown] (67 samples, 0.08%)</title><rect x="10.0818%" y="709" width="0.0781%" height="15" fill="rgb(216,99,12)" fg:x="8650" fg:w="67"/><text x="10.3318%" y="719.50"></text></g><g><title>[unknown] (67 samples, 0.08%)</title><rect x="10.0818%" y="693" width="0.0781%" height="15" fill="rgb(226,22,26)" fg:x="8650" fg:w="67"/><text x="10.3318%" y="703.50"></text></g><g><title>[unknown] (67 samples, 0.08%)</title><rect x="10.0818%" y="677" width="0.0781%" height="15" fill="rgb(217,163,10)" fg:x="8650" fg:w="67"/><text x="10.3318%" y="687.50"></text></g><g><title>[unknown] (67 samples, 0.08%)</title><rect x="10.0818%" y="661" width="0.0781%" height="15" fill="rgb(213,25,53)" fg:x="8650" fg:w="67"/><text x="10.3318%" y="671.50"></text></g><g><title>[unknown] (67 samples, 0.08%)</title><rect x="10.0818%" y="645" width="0.0781%" height="15" fill="rgb(252,105,26)" fg:x="8650" fg:w="67"/><text x="10.3318%" y="655.50"></text></g><g><title>[unknown] (67 samples, 0.08%)</title><rect x="10.0818%" y="629" width="0.0781%" height="15" fill="rgb(220,39,43)" fg:x="8650" fg:w="67"/><text x="10.3318%" y="639.50"></text></g><g><title>[unknown] (67 samples, 0.08%)</title><rect x="10.0818%" y="613" width="0.0781%" height="15" fill="rgb(229,68,48)" fg:x="8650" fg:w="67"/><text x="10.3318%" y="623.50"></text></g><g><title>[unknown] (67 samples, 0.08%)</title><rect x="10.0818%" y="597" width="0.0781%" height="15" fill="rgb(252,8,32)" fg:x="8650" fg:w="67"/><text x="10.3318%" y="607.50"></text></g><g><title>[unknown] (67 samples, 0.08%)</title><rect x="10.0818%" y="581" width="0.0781%" height="15" fill="rgb(223,20,43)" fg:x="8650" fg:w="67"/><text x="10.3318%" y="591.50"></text></g><g><title>[unknown] (67 samples, 0.08%)</title><rect x="10.0818%" y="565" width="0.0781%" height="15" fill="rgb(229,81,49)" fg:x="8650" fg:w="67"/><text x="10.3318%" y="575.50"></text></g><g><title>[unknown] (50 samples, 0.06%)</title><rect x="10.1016%" y="549" width="0.0583%" height="15" fill="rgb(236,28,36)" fg:x="8667" fg:w="50"/><text x="10.3516%" y="559.50"></text></g><g><title>[unknown] (45 samples, 0.05%)</title><rect x="10.1075%" y="533" width="0.0524%" height="15" fill="rgb(249,185,26)" fg:x="8672" fg:w="45"/><text x="10.3575%" y="543.50"></text></g><g><title>[unknown] (45 samples, 0.05%)</title><rect x="10.1075%" y="517" width="0.0524%" height="15" fill="rgb(249,174,33)" fg:x="8672" fg:w="45"/><text x="10.3575%" y="527.50"></text></g><g><title>[unknown] (41 samples, 0.05%)</title><rect x="10.1121%" y="501" width="0.0478%" height="15" fill="rgb(233,201,37)" fg:x="8676" fg:w="41"/><text x="10.3621%" y="511.50"></text></g><g><title>[unknown] (37 samples, 0.04%)</title><rect x="10.1168%" y="485" width="0.0431%" height="15" fill="rgb(221,78,26)" fg:x="8680" fg:w="37"/><text x="10.3668%" y="495.50"></text></g><g><title>[unknown] (30 samples, 0.03%)</title><rect x="10.1249%" y="469" width="0.0350%" height="15" fill="rgb(250,127,30)" fg:x="8687" fg:w="30"/><text x="10.3749%" y="479.50"></text></g><g><title>[unknown] (23 samples, 0.03%)</title><rect x="10.1331%" y="453" width="0.0268%" height="15" fill="rgb(230,49,44)" fg:x="8694" fg:w="23"/><text x="10.3831%" y="463.50"></text></g><g><title>[unknown] (18 samples, 0.02%)</title><rect x="10.1389%" y="437" width="0.0210%" height="15" fill="rgb(229,67,23)" fg:x="8699" fg:w="18"/><text x="10.3889%" y="447.50"></text></g><g><title>__GI___libc_free (44 samples, 0.05%)</title><rect x="10.1599%" y="757" width="0.0513%" height="15" fill="rgb(249,83,47)" fg:x="8717" fg:w="44"/><text x="10.4099%" y="767.50"></text></g><g><title>__GI___libc_malloc (45 samples, 0.05%)</title><rect x="10.2112%" y="757" width="0.0524%" height="15" fill="rgb(215,43,3)" fg:x="8761" fg:w="45"/><text x="10.4612%" y="767.50"></text></g><g><title>__memcpy_avx_unaligned_erms (56 samples, 0.07%)</title><rect x="10.2636%" y="757" width="0.0653%" height="15" fill="rgb(238,154,13)" fg:x="8806" fg:w="56"/><text x="10.5136%" y="767.50"></text></g><g><title>_int_free (129 samples, 0.15%)</title><rect x="10.3301%" y="757" width="0.1504%" height="15" fill="rgb(219,56,2)" fg:x="8863" fg:w="129"/><text x="10.5801%" y="767.50"></text></g><g><title>_int_malloc (9 samples, 0.01%)</title><rect x="10.4804%" y="757" width="0.0105%" height="15" fill="rgb(233,0,4)" fg:x="8992" fg:w="9"/><text x="10.7304%" y="767.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (63 samples, 0.07%)</title><rect x="10.4909%" y="757" width="0.0734%" height="15" fill="rgb(235,30,7)" fg:x="9001" fg:w="63"/><text x="10.7409%" y="767.50"></text></g><g><title>alloc::alloc::alloc (63 samples, 0.07%)</title><rect x="10.4909%" y="741" width="0.0734%" height="15" fill="rgb(250,79,13)" fg:x="9001" fg:w="63"/><text x="10.7409%" y="751.50"></text></g><g><title>alloc::alloc::exchange_malloc (57 samples, 0.07%)</title><rect x="10.5643%" y="757" width="0.0664%" height="15" fill="rgb(211,146,34)" fg:x="9064" fg:w="57"/><text x="10.8143%" y="767.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (34 samples, 0.04%)</title><rect x="10.5912%" y="741" width="0.0396%" height="15" fill="rgb(228,22,38)" fg:x="9087" fg:w="34"/><text x="10.8412%" y="751.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (59 samples, 0.07%)</title><rect x="10.6308%" y="757" width="0.0688%" height="15" fill="rgb(235,168,5)" fg:x="9121" fg:w="59"/><text x="10.8808%" y="767.50"></text></g><g><title>core::alloc::layout::Layout::array (22 samples, 0.03%)</title><rect x="10.6739%" y="741" width="0.0256%" height="15" fill="rgb(221,155,16)" fg:x="9158" fg:w="22"/><text x="10.9239%" y="751.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::into_vec (18 samples, 0.02%)</title><rect x="10.6996%" y="757" width="0.0210%" height="15" fill="rgb(215,215,53)" fg:x="9180" fg:w="18"/><text x="10.9496%" y="767.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::is_empty (25 samples, 0.03%)</title><rect x="10.7205%" y="757" width="0.0291%" height="15" fill="rgb(223,4,10)" fg:x="9198" fg:w="25"/><text x="10.9705%" y="767.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::pop (37 samples, 0.04%)</title><rect x="10.7578%" y="757" width="0.0431%" height="15" fill="rgb(234,103,6)" fg:x="9230" fg:w="37"/><text x="11.0078%" y="767.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (110 samples, 0.13%)</title><rect x="10.8010%" y="757" width="0.1282%" height="15" fill="rgb(227,97,0)" fg:x="9267" fg:w="110"/><text x="11.0510%" y="767.50"></text></g><g><title>core::ptr::write (52 samples, 0.06%)</title><rect x="10.8686%" y="741" width="0.0606%" height="15" fill="rgb(234,150,53)" fg:x="9325" fg:w="52"/><text x="11.1186%" y="751.50"></text></g><g><title>coldbrew::profiler::Profiler::count_entry (21 samples, 0.02%)</title><rect x="10.9292%" y="757" width="0.0245%" height="15" fill="rgb(228,201,54)" fg:x="9377" fg:w="21"/><text x="11.1792%" y="767.50"></text></g><g><title>coldbrew::profiler::Profiler::is_hot (25 samples, 0.03%)</title><rect x="10.9536%" y="757" width="0.0291%" height="15" fill="rgb(222,22,37)" fg:x="9398" fg:w="25"/><text x="11.2036%" y="767.50"></text></g><g><title>coldbrew::program::Program::code (56 samples, 0.07%)</title><rect x="10.9828%" y="757" width="0.0653%" height="15" fill="rgb(237,53,32)" fg:x="9423" fg:w="56"/><text x="11.2328%" y="767.50"></text></g><g><title>coldbrew::runtime::Frame::inc_instruction_index (60 samples, 0.07%)</title><rect x="11.0515%" y="757" width="0.0699%" height="15" fill="rgb(233,25,53)" fg:x="9482" fg:w="60"/><text x="11.3015%" y="767.50"></text></g><g><title>coldbrew::runtime::Frame::instruction_index (50 samples, 0.06%)</title><rect x="11.1215%" y="757" width="0.0583%" height="15" fill="rgb(210,40,34)" fg:x="9542" fg:w="50"/><text x="11.3715%" y="767.50"></text></g><g><title>coldbrew::runtime::Frame::method_index (45 samples, 0.05%)</title><rect x="11.1797%" y="757" width="0.0524%" height="15" fill="rgb(241,220,44)" fg:x="9592" fg:w="45"/><text x="11.4297%" y="767.50"></text></g><g><title>coldbrew::runtime::ProgramCounter::inc_instruction_index (12 samples, 0.01%)</title><rect x="11.2520%" y="757" width="0.0140%" height="15" fill="rgb(235,28,35)" fg:x="9654" fg:w="12"/><text x="11.5020%" y="767.50"></text></g><g><title>coldbrew::runtime::Runtime::eval (51 samples, 0.06%)</title><rect x="11.2730%" y="757" width="0.0594%" height="15" fill="rgb(210,56,17)" fg:x="9672" fg:w="51"/><text x="11.5230%" y="767.50"></text></g><g><title>coldbrew::runtime::Runtime::fetch (54 samples, 0.06%)</title><rect x="11.3383%" y="757" width="0.0629%" height="15" fill="rgb(224,130,29)" fg:x="9728" fg:w="54"/><text x="11.5883%" y="767.50"></text></g><g><title>coldbrew::runtime::Runtime::next (249 samples, 0.29%)</title><rect x="11.4129%" y="757" width="0.2902%" height="15" fill="rgb(235,212,8)" fg:x="9792" fg:w="249"/><text x="11.6629%" y="767.50"></text></g><g><title>coldbrew::runtime::Runtime::pop (12 samples, 0.01%)</title><rect x="11.7031%" y="757" width="0.0140%" height="15" fill="rgb(223,33,50)" fg:x="10041" fg:w="12"/><text x="11.9531%" y="767.50"></text></g><g><title>coldbrew::runtime::Runtime::run (409 samples, 0.48%)</title><rect x="11.7252%" y="757" width="0.4767%" height="15" fill="rgb(219,149,13)" fg:x="10060" fg:w="409"/><text x="11.9752%" y="767.50"></text></g><g><title>coldbrew::trace::Recorder::flip_branch (29 samples, 0.03%)</title><rect x="12.2042%" y="757" width="0.0338%" height="15" fill="rgb(250,156,29)" fg:x="10471" fg:w="29"/><text x="12.4542%" y="767.50"></text></g><g><title>coldbrew::trace::Recorder::is_recording (27 samples, 0.03%)</title><rect x="12.2439%" y="757" width="0.0315%" height="15" fill="rgb(216,193,19)" fg:x="10505" fg:w="27"/><text x="12.4939%" y="767.50"></text></g><g><title>coldbrew::trace::Recorder::record (38 samples, 0.04%)</title><rect x="12.2753%" y="757" width="0.0443%" height="15" fill="rgb(216,135,14)" fg:x="10532" fg:w="38"/><text x="12.5253%" y="767.50"></text></g><g><title>core::alloc::layout::Layout::array::inner (32 samples, 0.04%)</title><rect x="12.3196%" y="757" width="0.0373%" height="15" fill="rgb(241,47,5)" fg:x="10570" fg:w="32"/><text x="12.5696%" y="767.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_cmpeq_epi8 (118 samples, 0.14%)</title><rect x="12.3593%" y="757" width="0.1375%" height="15" fill="rgb(233,42,35)" fg:x="10604" fg:w="118"/><text x="12.6093%" y="767.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (98 samples, 0.11%)</title><rect x="12.4968%" y="757" width="0.1142%" height="15" fill="rgb(231,13,6)" fg:x="10722" fg:w="98"/><text x="12.7468%" y="767.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (121 samples, 0.14%)</title><rect x="12.6110%" y="757" width="0.1410%" height="15" fill="rgb(207,181,40)" fg:x="10820" fg:w="121"/><text x="12.8610%" y="767.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_set1_epi8 (104 samples, 0.12%)</title><rect x="12.7520%" y="757" width="0.1212%" height="15" fill="rgb(254,173,49)" fg:x="10941" fg:w="104"/><text x="13.0020%" y="767.50"></text></g><g><title>core::hash::BuildHasher::hash_one (214 samples, 0.25%)</title><rect x="12.8733%" y="757" width="0.2494%" height="15" fill="rgb(221,1,38)" fg:x="11045" fg:w="214"/><text x="13.1233%" y="767.50"></text></g><g><title>core::hash::Hasher::write_usize (117 samples, 0.14%)</title><rect x="13.1227%" y="757" width="0.1364%" height="15" fill="rgb(206,124,46)" fg:x="11259" fg:w="117"/><text x="13.3727%" y="767.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (11 samples, 0.01%)</title><rect x="13.2591%" y="757" width="0.0128%" height="15" fill="rgb(249,21,11)" fg:x="11376" fg:w="11"/><text x="13.5091%" y="767.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for usize&gt;::hash (128 samples, 0.15%)</title><rect x="13.2719%" y="757" width="0.1492%" height="15" fill="rgb(222,201,40)" fg:x="11387" fg:w="128"/><text x="13.5219%" y="767.50"></text></g><g><title>core::hash::sip::u8to64_le (85 samples, 0.10%)</title><rect x="13.4211%" y="757" width="0.0991%" height="15" fill="rgb(235,61,29)" fg:x="11515" fg:w="85"/><text x="13.6711%" y="767.50"></text></g><g><title>core::option::Option&lt;T&gt;::map_or_else (19 samples, 0.02%)</title><rect x="13.5271%" y="757" width="0.0221%" height="15" fill="rgb(219,207,3)" fg:x="11606" fg:w="19"/><text x="13.7771%" y="767.50"></text></g><g><title>core::option::Option&lt;T&gt;::unwrap (31 samples, 0.04%)</title><rect x="13.5493%" y="757" width="0.0361%" height="15" fill="rgb(222,56,46)" fg:x="11625" fg:w="31"/><text x="13.7993%" y="767.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;coldbrew::runtime::Value&gt;&gt; (46 samples, 0.05%)</title><rect x="13.5854%" y="757" width="0.0536%" height="15" fill="rgb(239,76,54)" fg:x="11656" fg:w="46"/><text x="13.8354%" y="767.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;coldbrew::runtime::Value&gt;&gt; (45 samples, 0.05%)</title><rect x="13.6390%" y="757" width="0.0524%" height="15" fill="rgb(231,124,27)" fg:x="11702" fg:w="45"/><text x="13.8890%" y="767.50"></text></g><g><title>core::ptr::drop_in_place&lt;coldbrew::runtime::Instruction&gt; (82 samples, 0.10%)</title><rect x="13.6926%" y="757" width="0.0956%" height="15" fill="rgb(249,195,6)" fg:x="11748" fg:w="82"/><text x="13.9426%" y="767.50"></text></g><g><title>core::ptr::drop_in_place&lt;coldbrew::trace::RecordEntry&gt; (50 samples, 0.06%)</title><rect x="13.7882%" y="757" width="0.0583%" height="15" fill="rgb(237,174,47)" fg:x="11830" fg:w="50"/><text x="14.0382%" y="767.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;alloc::vec::Vec&lt;coldbrew::runtime::Value&gt;&gt;&gt; (18 samples, 0.02%)</title><rect x="13.8465%" y="757" width="0.0210%" height="15" fill="rgb(206,201,31)" fg:x="11880" fg:w="18"/><text x="14.0965%" y="767.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get (11 samples, 0.01%)</title><rect x="13.8675%" y="757" width="0.0128%" height="15" fill="rgb(231,57,52)" fg:x="11898" fg:w="11"/><text x="14.1175%" y="767.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::last (28 samples, 0.03%)</title><rect x="13.8826%" y="757" width="0.0326%" height="15" fill="rgb(248,177,22)" fg:x="11911" fg:w="28"/><text x="14.1326%" y="767.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::last_mut (29 samples, 0.03%)</title><rect x="13.9152%" y="757" width="0.0338%" height="15" fill="rgb(215,211,37)" fg:x="11939" fg:w="29"/><text x="14.1652%" y="767.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (198 samples, 0.23%)</title><rect x="13.9490%" y="757" width="0.2308%" height="15" fill="rgb(241,128,51)" fg:x="11968" fg:w="198"/><text x="14.1990%" y="767.50"></text></g><g><title>hashbrown::map::make_hash (51 samples, 0.06%)</title><rect x="14.1204%" y="741" width="0.0594%" height="15" fill="rgb(227,165,31)" fg:x="12115" fg:w="51"/><text x="14.3704%" y="751.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::bucket (71 samples, 0.08%)</title><rect x="14.1926%" y="757" width="0.0828%" height="15" fill="rgb(228,167,24)" fg:x="12177" fg:w="71"/><text x="14.4426%" y="767.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (77 samples, 0.09%)</title><rect x="14.2754%" y="757" width="0.0897%" height="15" fill="rgb(228,143,12)" fg:x="12248" fg:w="77"/><text x="14.5254%" y="767.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::{{closure}} (239 samples, 0.28%)</title><rect x="14.3651%" y="757" width="0.2786%" height="15" fill="rgb(249,149,8)" fg:x="12325" fg:w="239"/><text x="14.6151%" y="767.50"></text></g><g><title>hashbrown::raw::sse2::Group::load (159 samples, 0.19%)</title><rect x="14.9351%" y="725" width="0.1853%" height="15" fill="rgb(243,35,44)" fg:x="12814" fg:w="159"/><text x="15.1851%" y="735.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (425 samples, 0.50%)</title><rect x="14.6437%" y="757" width="0.4953%" height="15" fill="rgb(246,89,9)" fg:x="12564" fg:w="425"/><text x="14.8937%" y="767.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::find_inner (424 samples, 0.49%)</title><rect x="14.6449%" y="741" width="0.4942%" height="15" fill="rgb(233,213,13)" fg:x="12565" fg:w="424"/><text x="14.8949%" y="751.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_empty (16 samples, 0.02%)</title><rect x="15.1204%" y="725" width="0.0186%" height="15" fill="rgb(233,141,41)" fg:x="12973" fg:w="16"/><text x="15.3704%" y="735.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find_or_find_insert_slot (11 samples, 0.01%)</title><rect x="15.1390%" y="757" width="0.0128%" height="15" fill="rgb(239,167,4)" fg:x="12989" fg:w="11"/><text x="15.3890%" y="767.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find_or_find_insert_slot::{{closure}} (17 samples, 0.02%)</title><rect x="15.1519%" y="757" width="0.0198%" height="15" fill="rgb(209,217,16)" fg:x="13000" fg:w="17"/><text x="15.4019%" y="767.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get (58 samples, 0.07%)</title><rect x="15.1717%" y="757" width="0.0676%" height="15" fill="rgb(219,88,35)" fg:x="13017" fg:w="58"/><text x="15.4217%" y="767.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::find_or_find_insert_slot_inner (32 samples, 0.04%)</title><rect x="15.2486%" y="757" width="0.0373%" height="15" fill="rgb(220,193,23)" fg:x="13083" fg:w="32"/><text x="15.4986%" y="767.50"></text></g><g><title>hashbrown::raw::sse2::Group::load (9 samples, 0.01%)</title><rect x="15.2754%" y="741" width="0.0105%" height="15" fill="rgb(230,90,52)" fg:x="13106" fg:w="9"/><text x="15.5254%" y="751.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (104 samples, 0.12%)</title><rect x="15.2859%" y="757" width="0.1212%" height="15" fill="rgb(252,106,19)" fg:x="13115" fg:w="104"/><text x="15.5359%" y="767.50"></text></g><g><title>hashbrown::rustc_entry::RustcOccupiedEntry&lt;K,V,A&gt;::into_mut (9 samples, 0.01%)</title><rect x="15.4129%" y="757" width="0.0105%" height="15" fill="rgb(206,74,20)" fg:x="13224" fg:w="9"/><text x="15.6629%" y="767.50"></text></g><g><title>malloc_consolidate (26 samples, 0.03%)</title><rect x="15.4234%" y="757" width="0.0303%" height="15" fill="rgb(230,138,44)" fg:x="13233" fg:w="26"/><text x="15.6734%" y="767.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (651 samples, 0.76%)</title><rect x="15.4782%" y="757" width="0.7588%" height="15" fill="rgb(235,182,43)" fg:x="13280" fg:w="651"/><text x="15.7282%" y="767.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (651 samples, 0.76%)</title><rect x="15.4782%" y="741" width="0.7588%" height="15" fill="rgb(242,16,51)" fg:x="13280" fg:w="651"/><text x="15.7282%" y="751.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_class_open (651 samples, 0.76%)</title><rect x="15.4782%" y="725" width="0.7588%" height="15" fill="rgb(248,9,4)" fg:x="13280" fg:w="651"/><text x="15.7282%" y="735.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (651 samples, 0.76%)</title><rect x="15.4782%" y="709" width="0.7588%" height="15" fill="rgb(210,31,22)" fg:x="13280" fg:w="651"/><text x="15.7282%" y="719.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (651 samples, 0.76%)</title><rect x="15.4782%" y="693" width="0.7588%" height="15" fill="rgb(239,54,39)" fg:x="13280" fg:w="651"/><text x="15.7282%" y="703.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (651 samples, 0.76%)</title><rect x="15.4782%" y="677" width="0.7588%" height="15" fill="rgb(230,99,41)" fg:x="13280" fg:w="651"/><text x="15.7282%" y="687.50"></text></g><g><title>alloc::raw_vec::finish_grow (651 samples, 0.76%)</title><rect x="15.4782%" y="661" width="0.7588%" height="15" fill="rgb(253,106,12)" fg:x="13280" fg:w="651"/><text x="15.7282%" y="671.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (651 samples, 0.76%)</title><rect x="15.4782%" y="645" width="0.7588%" height="15" fill="rgb(213,46,41)" fg:x="13280" fg:w="651"/><text x="15.7282%" y="655.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (651 samples, 0.76%)</title><rect x="15.4782%" y="629" width="0.7588%" height="15" fill="rgb(215,133,35)" fg:x="13280" fg:w="651"/><text x="15.7282%" y="639.50"></text></g><g><title>alloc::alloc::alloc (651 samples, 0.76%)</title><rect x="15.4782%" y="613" width="0.7588%" height="15" fill="rgb(213,28,5)" fg:x="13280" fg:w="651"/><text x="15.7282%" y="623.50"></text></g><g><title>__GI___libc_malloc (651 samples, 0.76%)</title><rect x="15.4782%" y="597" width="0.7588%" height="15" fill="rgb(215,77,49)" fg:x="13280" fg:w="651"/><text x="15.7282%" y="607.50"></text></g><g><title>_int_malloc (651 samples, 0.76%)</title><rect x="15.4782%" y="581" width="0.7588%" height="15" fill="rgb(248,100,22)" fg:x="13280" fg:w="651"/><text x="15.7282%" y="591.50"></text></g><g><title>malloc_consolidate (651 samples, 0.76%)</title><rect x="15.4782%" y="565" width="0.7588%" height="15" fill="rgb(208,67,9)" fg:x="13280" fg:w="651"/><text x="15.7282%" y="575.50"></text></g><g><title>unlink_chunk (225 samples, 0.26%)</title><rect x="15.9747%" y="549" width="0.2622%" height="15" fill="rgb(219,133,21)" fg:x="13706" fg:w="225"/><text x="16.2247%" y="559.50"></text></g><g><title>std::collections::hash::map::Entry&lt;K,V&gt;::or_insert (10 samples, 0.01%)</title><rect x="16.2463%" y="757" width="0.0117%" height="15" fill="rgb(246,46,29)" fg:x="13939" fg:w="10"/><text x="16.4963%" y="767.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::entry (14 samples, 0.02%)</title><rect x="16.2580%" y="757" width="0.0163%" height="15" fill="rgb(246,185,52)" fg:x="13949" fg:w="14"/><text x="16.5080%" y="767.50"></text></g><g><title>[unknown] (7,357 samples, 8.57%)</title><rect x="7.7030%" y="773" width="8.5748%" height="15" fill="rgb(252,136,11)" fg:x="6609" fg:w="7357"/><text x="7.9530%" y="783.50">[unknown]</text></g><g><title>__GI___libc_malloc (24 samples, 0.03%)</title><rect x="16.2778%" y="773" width="0.0280%" height="15" fill="rgb(219,138,53)" fg:x="13966" fg:w="24"/><text x="16.5278%" y="783.50"></text></g><g><title>__rust_alloc_error_handler_should_panic (15 samples, 0.02%)</title><rect x="16.3069%" y="773" width="0.0175%" height="15" fill="rgb(211,51,23)" fg:x="13991" fg:w="15"/><text x="16.5569%" y="783.50"></text></g><g><title>__memcpy_avx_unaligned_erms (15 samples, 0.02%)</title><rect x="16.3069%" y="757" width="0.0175%" height="15" fill="rgb(247,221,28)" fg:x="13991" fg:w="15"/><text x="16.5569%" y="767.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_ptr (63 samples, 0.07%)</title><rect x="17.0540%" y="453" width="0.0734%" height="15" fill="rgb(251,222,45)" fg:x="14632" fg:w="63"/><text x="17.3040%" y="463.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (124 samples, 0.14%)</title><rect x="17.0540%" y="469" width="0.1445%" height="15" fill="rgb(217,162,53)" fg:x="14632" fg:w="124"/><text x="17.3040%" y="479.50"></text></g><g><title>core::slice::raw::from_raw_parts (61 samples, 0.07%)</title><rect x="17.1274%" y="453" width="0.0711%" height="15" fill="rgb(229,93,14)" fg:x="14695" fg:w="61"/><text x="17.3774%" y="463.50"></text></g><g><title>core::ptr::slice_from_raw_parts (61 samples, 0.07%)</title><rect x="17.1274%" y="437" width="0.0711%" height="15" fill="rgb(209,67,49)" fg:x="14695" fg:w="61"/><text x="17.3774%" y="447.50"></text></g><g><title>core::ptr::metadata::from_raw_parts (61 samples, 0.07%)</title><rect x="17.1274%" y="421" width="0.0711%" height="15" fill="rgb(213,87,29)" fg:x="14695" fg:w="61"/><text x="17.3774%" y="431.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_ptr (15 samples, 0.02%)</title><rect x="17.4853%" y="405" width="0.0175%" height="15" fill="rgb(205,151,52)" fg:x="15002" fg:w="15"/><text x="17.7353%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (15 samples, 0.02%)</title><rect x="17.4853%" y="389" width="0.0175%" height="15" fill="rgb(253,215,39)" fg:x="15002" fg:w="15"/><text x="17.7353%" y="399.50"></text></g><g><title>core::ptr::slice_from_raw_parts (46 samples, 0.05%)</title><rect x="17.5330%" y="389" width="0.0536%" height="15" fill="rgb(221,220,41)" fg:x="15043" fg:w="46"/><text x="17.7830%" y="399.50"></text></g><g><title>core::ptr::metadata::from_raw_parts (46 samples, 0.05%)</title><rect x="17.5330%" y="373" width="0.0536%" height="15" fill="rgb(218,133,21)" fg:x="15043" fg:w="46"/><text x="17.7830%" y="383.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (129 samples, 0.15%)</title><rect x="17.4619%" y="421" width="0.1504%" height="15" fill="rgb(221,193,43)" fg:x="14982" fg:w="129"/><text x="17.7119%" y="431.50"></text></g><g><title>core::slice::raw::from_raw_parts (94 samples, 0.11%)</title><rect x="17.5027%" y="405" width="0.1096%" height="15" fill="rgb(240,128,52)" fg:x="15017" fg:w="94"/><text x="17.7527%" y="415.50"></text></g><g><title>core::slice::raw::from_raw_parts::runtime (22 samples, 0.03%)</title><rect x="17.5867%" y="389" width="0.0256%" height="15" fill="rgb(253,114,12)" fg:x="15089" fg:w="22"/><text x="17.8367%" y="399.50"></text></g><g><title>core::intrinsics::is_valid_allocation_size (22 samples, 0.03%)</title><rect x="17.5867%" y="373" width="0.0256%" height="15" fill="rgb(215,223,47)" fg:x="15089" fg:w="22"/><text x="17.8367%" y="383.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_mut_ptr (39 samples, 0.05%)</title><rect x="17.7102%" y="373" width="0.0455%" height="15" fill="rgb(248,225,23)" fg:x="15195" fg:w="39"/><text x="17.9602%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (27 samples, 0.03%)</title><rect x="17.7242%" y="357" width="0.0315%" height="15" fill="rgb(250,108,0)" fg:x="15207" fg:w="27"/><text x="17.9742%" y="367.50"></text></g><g><title>core::ptr::unique::Unique&lt;T&gt;::as_ptr (17 samples, 0.02%)</title><rect x="17.7358%" y="341" width="0.0198%" height="15" fill="rgb(228,208,7)" fg:x="15217" fg:w="17"/><text x="17.9858%" y="351.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::as_ptr (17 samples, 0.02%)</title><rect x="17.7358%" y="325" width="0.0198%" height="15" fill="rgb(244,45,10)" fg:x="15217" fg:w="17"/><text x="17.9858%" y="335.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (47 samples, 0.05%)</title><rect x="18.3000%" y="293" width="0.0548%" height="15" fill="rgb(207,125,25)" fg:x="15701" fg:w="47"/><text x="18.5500%" y="303.50"></text></g><g><title>&lt;core::result::Result&lt;T,F&gt; as core::ops::try_trait::FromResidual&lt;core::result::Result&lt;core::convert::Infallible,E&gt;&gt;&gt;::from_residual (16 samples, 0.02%)</title><rect x="18.3547%" y="293" width="0.0186%" height="15" fill="rgb(210,195,18)" fg:x="15748" fg:w="16"/><text x="18.6047%" y="303.50"></text></g><g><title>&lt;T as core::convert::From&lt;T&gt;&gt;::from (16 samples, 0.02%)</title><rect x="18.3547%" y="277" width="0.0186%" height="15" fill="rgb(249,80,12)" fg:x="15748" fg:w="16"/><text x="18.6047%" y="287.50"></text></g><g><title>[unknown] (469 samples, 0.55%)</title><rect x="18.8699%" y="245" width="0.5466%" height="15" fill="rgb(221,65,9)" fg:x="16190" fg:w="469"/><text x="19.1199%" y="255.50"></text></g><g><title>[unknown] (423 samples, 0.49%)</title><rect x="18.9235%" y="229" width="0.4930%" height="15" fill="rgb(235,49,36)" fg:x="16236" fg:w="423"/><text x="19.1735%" y="239.50"></text></g><g><title>[unknown] (422 samples, 0.49%)</title><rect x="18.9247%" y="213" width="0.4919%" height="15" fill="rgb(225,32,20)" fg:x="16237" fg:w="422"/><text x="19.1747%" y="223.50"></text></g><g><title>[unknown] (417 samples, 0.49%)</title><rect x="18.9305%" y="197" width="0.4860%" height="15" fill="rgb(215,141,46)" fg:x="16242" fg:w="417"/><text x="19.1805%" y="207.50"></text></g><g><title>[unknown] (404 samples, 0.47%)</title><rect x="18.9457%" y="181" width="0.4709%" height="15" fill="rgb(250,160,47)" fg:x="16255" fg:w="404"/><text x="19.1957%" y="191.50"></text></g><g><title>[unknown] (385 samples, 0.45%)</title><rect x="18.9678%" y="165" width="0.4487%" height="15" fill="rgb(216,222,40)" fg:x="16274" fg:w="385"/><text x="19.2178%" y="175.50"></text></g><g><title>[unknown] (371 samples, 0.43%)</title><rect x="18.9841%" y="149" width="0.4324%" height="15" fill="rgb(234,217,39)" fg:x="16288" fg:w="371"/><text x="19.2341%" y="159.50"></text></g><g><title>[unknown] (269 samples, 0.31%)</title><rect x="19.1030%" y="133" width="0.3135%" height="15" fill="rgb(207,178,40)" fg:x="16390" fg:w="269"/><text x="19.3530%" y="143.50"></text></g><g><title>[unknown] (232 samples, 0.27%)</title><rect x="19.1461%" y="117" width="0.2704%" height="15" fill="rgb(221,136,13)" fg:x="16427" fg:w="232"/><text x="19.3961%" y="127.50"></text></g><g><title>[unknown] (173 samples, 0.20%)</title><rect x="19.2149%" y="101" width="0.2016%" height="15" fill="rgb(249,199,10)" fg:x="16486" fg:w="173"/><text x="19.4649%" y="111.50"></text></g><g><title>[unknown] (79 samples, 0.09%)</title><rect x="19.3245%" y="85" width="0.0921%" height="15" fill="rgb(249,222,13)" fg:x="16580" fg:w="79"/><text x="19.5745%" y="95.50"></text></g><g><title>[unknown] (59 samples, 0.07%)</title><rect x="19.3478%" y="69" width="0.0688%" height="15" fill="rgb(244,185,38)" fg:x="16600" fg:w="59"/><text x="19.5978%" y="79.50"></text></g><g><title>[unknown] (23 samples, 0.03%)</title><rect x="19.3897%" y="53" width="0.0268%" height="15" fill="rgb(236,202,9)" fg:x="16636" fg:w="23"/><text x="19.6397%" y="63.50"></text></g><g><title>alloc_perturb (11 samples, 0.01%)</title><rect x="19.4165%" y="245" width="0.0128%" height="15" fill="rgb(250,229,37)" fg:x="16659" fg:w="11"/><text x="19.6665%" y="255.50"></text></g><g><title>sysmalloc (11 samples, 0.01%)</title><rect x="19.4364%" y="245" width="0.0128%" height="15" fill="rgb(206,174,23)" fg:x="16676" fg:w="11"/><text x="19.6864%" y="255.50"></text></g><g><title>__glibc_morecore (9 samples, 0.01%)</title><rect x="19.4387%" y="229" width="0.0105%" height="15" fill="rgb(211,33,43)" fg:x="16678" fg:w="9"/><text x="19.6887%" y="239.50"></text></g><g><title>__GI___sbrk (9 samples, 0.01%)</title><rect x="19.4387%" y="213" width="0.0105%" height="15" fill="rgb(245,58,50)" fg:x="16678" fg:w="9"/><text x="19.6887%" y="223.50"></text></g><g><title>__GI___sbrk (9 samples, 0.01%)</title><rect x="19.4387%" y="197" width="0.0105%" height="15" fill="rgb(244,68,36)" fg:x="16678" fg:w="9"/><text x="19.6887%" y="207.50"></text></g><g><title>__brk (9 samples, 0.01%)</title><rect x="19.4387%" y="181" width="0.0105%" height="15" fill="rgb(232,229,15)" fg:x="16678" fg:w="9"/><text x="19.6887%" y="191.50"></text></g><g><title>[unknown] (9 samples, 0.01%)</title><rect x="19.4387%" y="165" width="0.0105%" height="15" fill="rgb(254,30,23)" fg:x="16678" fg:w="9"/><text x="19.6887%" y="175.50"></text></g><g><title>[unknown] (9 samples, 0.01%)</title><rect x="19.4387%" y="149" width="0.0105%" height="15" fill="rgb(235,160,14)" fg:x="16678" fg:w="9"/><text x="19.6887%" y="159.50"></text></g><g><title>[unknown] (9 samples, 0.01%)</title><rect x="19.4387%" y="133" width="0.0105%" height="15" fill="rgb(212,155,44)" fg:x="16678" fg:w="9"/><text x="19.6887%" y="143.50"></text></g><g><title>[unknown] (9 samples, 0.01%)</title><rect x="19.4387%" y="117" width="0.0105%" height="15" fill="rgb(226,2,50)" fg:x="16678" fg:w="9"/><text x="19.6887%" y="127.50"></text></g><g><title>[unknown] (9 samples, 0.01%)</title><rect x="19.4387%" y="101" width="0.0105%" height="15" fill="rgb(234,177,6)" fg:x="16678" fg:w="9"/><text x="19.6887%" y="111.50"></text></g><g><title>[unknown] (9 samples, 0.01%)</title><rect x="19.4387%" y="85" width="0.0105%" height="15" fill="rgb(217,24,9)" fg:x="16678" fg:w="9"/><text x="19.6887%" y="95.50"></text></g><g><title>_int_malloc (809 samples, 0.94%)</title><rect x="18.5086%" y="261" width="0.9429%" height="15" fill="rgb(220,13,46)" fg:x="15880" fg:w="809"/><text x="18.7586%" y="271.50"></text></g><g><title>checked_request2size (34 samples, 0.04%)</title><rect x="19.4608%" y="261" width="0.0396%" height="15" fill="rgb(239,221,27)" fg:x="16697" fg:w="34"/><text x="19.7108%" y="271.50"></text></g><g><title>__GI___libc_malloc (968 samples, 1.13%)</title><rect x="18.3734%" y="277" width="1.1282%" height="15" fill="rgb(222,198,25)" fg:x="15764" fg:w="968"/><text x="18.6234%" y="287.50"></text></g><g><title>__rdl_alloc (42 samples, 0.05%)</title><rect x="19.5016%" y="277" width="0.0490%" height="15" fill="rgb(211,99,13)" fg:x="16732" fg:w="42"/><text x="19.7516%" y="287.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (42 samples, 0.05%)</title><rect x="19.5016%" y="261" width="0.0490%" height="15" fill="rgb(232,111,31)" fg:x="16732" fg:w="42"/><text x="19.7516%" y="271.50"></text></g><g><title>__rust_alloc (22 samples, 0.03%)</title><rect x="19.5506%" y="277" width="0.0256%" height="15" fill="rgb(245,82,37)" fg:x="16774" fg:w="22"/><text x="19.8006%" y="287.50"></text></g><g><title>core::alloc::layout::Layout::align (11 samples, 0.01%)</title><rect x="19.5762%" y="277" width="0.0128%" height="15" fill="rgb(227,149,46)" fg:x="16796" fg:w="11"/><text x="19.8262%" y="287.50"></text></g><g><title>core::alloc::layout::Layout::size (14 samples, 0.02%)</title><rect x="19.5890%" y="277" width="0.0163%" height="15" fill="rgb(218,36,50)" fg:x="16807" fg:w="14"/><text x="19.8390%" y="287.50"></text></g><g><title>alloc::alloc::alloc (1,077 samples, 1.26%)</title><rect x="18.3734%" y="293" width="1.2553%" height="15" fill="rgb(226,80,48)" fg:x="15764" fg:w="1077"/><text x="18.6234%" y="303.50"></text></g><g><title>core::ptr::read_volatile (20 samples, 0.02%)</title><rect x="19.6054%" y="277" width="0.0233%" height="15" fill="rgb(238,224,15)" fg:x="16821" fg:w="20"/><text x="19.8554%" y="287.50"></text></g><g><title>core::alloc::layout::Layout::size (16 samples, 0.02%)</title><rect x="19.6287%" y="293" width="0.0186%" height="15" fill="rgb(241,136,10)" fg:x="16841" fg:w="16"/><text x="19.8787%" y="303.50"></text></g><g><title>core::option::Option&lt;T&gt;::ok_or (28 samples, 0.03%)</title><rect x="19.6473%" y="293" width="0.0326%" height="15" fill="rgb(208,32,45)" fg:x="16857" fg:w="28"/><text x="19.8973%" y="303.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::new (46 samples, 0.05%)</title><rect x="19.6799%" y="293" width="0.0536%" height="15" fill="rgb(207,135,9)" fg:x="16885" fg:w="46"/><text x="19.9299%" y="303.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::is_null (28 samples, 0.03%)</title><rect x="19.7009%" y="277" width="0.0326%" height="15" fill="rgb(206,86,44)" fg:x="16903" fg:w="28"/><text x="19.9509%" y="287.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::is_null::runtime_impl (10 samples, 0.01%)</title><rect x="19.7219%" y="261" width="0.0117%" height="15" fill="rgb(245,177,15)" fg:x="16921" fg:w="10"/><text x="19.9719%" y="271.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1,424 samples, 1.66%)</title><rect x="18.1414%" y="325" width="1.6597%" height="15" fill="rgb(206,64,50)" fg:x="15565" fg:w="1424"/><text x="18.3914%" y="335.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1,408 samples, 1.64%)</title><rect x="18.1601%" y="309" width="1.6411%" height="15" fill="rgb(234,36,40)" fg:x="15581" fg:w="1408"/><text x="18.4101%" y="319.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;[T]&gt;::slice_from_raw_parts (58 samples, 0.07%)</title><rect x="19.7336%" y="293" width="0.0676%" height="15" fill="rgb(213,64,8)" fg:x="16931" fg:w="58"/><text x="19.9836%" y="303.50"></text></g><g><title>core::ptr::slice_from_raw_parts_mut (39 samples, 0.05%)</title><rect x="19.7557%" y="277" width="0.0455%" height="15" fill="rgb(210,75,36)" fg:x="16950" fg:w="39"/><text x="20.0057%" y="287.50"></text></g><g><title>core::ptr::metadata::from_raw_parts_mut (39 samples, 0.05%)</title><rect x="19.7557%" y="261" width="0.0455%" height="15" fill="rgb(229,88,21)" fg:x="16950" fg:w="39"/><text x="20.0057%" y="271.50"></text></g><g><title>core::alloc::layout::Layout::max_size_for_align (35 samples, 0.04%)</title><rect x="20.0669%" y="293" width="0.0408%" height="15" fill="rgb(252,204,47)" fg:x="17217" fg:w="35"/><text x="20.3169%" y="303.50"></text></g><g><title>core::ptr::alignment::Alignment::as_usize (20 samples, 0.02%)</title><rect x="20.0844%" y="277" width="0.0233%" height="15" fill="rgb(208,77,27)" fg:x="17232" fg:w="20"/><text x="20.3344%" y="287.50"></text></g><g><title>core::alloc::layout::Layout::array::inner (244 samples, 0.28%)</title><rect x="19.8373%" y="309" width="0.2844%" height="15" fill="rgb(221,76,26)" fg:x="17020" fg:w="244"/><text x="20.0873%" y="319.50"></text></g><g><title>core::ptr::alignment::Alignment::as_usize (12 samples, 0.01%)</title><rect x="20.1077%" y="293" width="0.0140%" height="15" fill="rgb(225,139,18)" fg:x="17252" fg:w="12"/><text x="20.3577%" y="303.50"></text></g><g><title>core::alloc::layout::Layout::array (289 samples, 0.34%)</title><rect x="19.8012%" y="325" width="0.3368%" height="15" fill="rgb(230,137,11)" fg:x="16989" fg:w="289"/><text x="20.0512%" y="335.50"></text></g><g><title>core::ptr::alignment::Alignment::of (14 samples, 0.02%)</title><rect x="20.1217%" y="309" width="0.0163%" height="15" fill="rgb(212,28,1)" fg:x="17264" fg:w="14"/><text x="20.3717%" y="319.50"></text></g><g><title>core::mem::align_of (14 samples, 0.02%)</title><rect x="20.1217%" y="293" width="0.0163%" height="15" fill="rgb(248,164,17)" fg:x="17264" fg:w="14"/><text x="20.3717%" y="303.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::as_ptr (16 samples, 0.02%)</title><rect x="20.1380%" y="325" width="0.0186%" height="15" fill="rgb(222,171,42)" fg:x="17278" fg:w="16"/><text x="20.3880%" y="335.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (2,070 samples, 2.41%)</title><rect x="17.7557%" y="373" width="2.4126%" height="15" fill="rgb(243,84,45)" fg:x="15234" fg:w="2070"/><text x="18.0057%" y="383.50">al..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (2,067 samples, 2.41%)</title><rect x="17.7592%" y="357" width="2.4091%" height="15" fill="rgb(252,49,23)" fg:x="15237" fg:w="2067"/><text x="18.0092%" y="367.50">al..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (2,038 samples, 2.38%)</title><rect x="17.7930%" y="341" width="2.3753%" height="15" fill="rgb(215,19,7)" fg:x="15266" fg:w="2038"/><text x="18.0430%" y="351.50">al..</text></g><g><title>core::ptr::unique::Unique&lt;T&gt;::new_unchecked (10 samples, 0.01%)</title><rect x="20.1566%" y="325" width="0.0117%" height="15" fill="rgb(238,81,41)" fg:x="17294" fg:w="10"/><text x="20.4066%" y="335.50"></text></g><g><title>__memcpy_avx_unaligned_erms (34 samples, 0.04%)</title><rect x="20.1683%" y="341" width="0.0396%" height="15" fill="rgb(210,199,37)" fg:x="17304" fg:w="34"/><text x="20.4183%" y="351.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (43 samples, 0.05%)</title><rect x="20.1683%" y="373" width="0.0501%" height="15" fill="rgb(244,192,49)" fg:x="17304" fg:w="43"/><text x="20.4183%" y="383.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (43 samples, 0.05%)</title><rect x="20.1683%" y="357" width="0.0501%" height="15" fill="rgb(226,211,11)" fg:x="17304" fg:w="43"/><text x="20.4183%" y="367.50"></text></g><g><title>_init (9 samples, 0.01%)</title><rect x="20.2079%" y="341" width="0.0105%" height="15" fill="rgb(236,162,54)" fg:x="17338" fg:w="9"/><text x="20.4579%" y="351.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (2,392 samples, 2.79%)</title><rect x="17.4445%" y="437" width="2.7879%" height="15" fill="rgb(220,229,9)" fg:x="14967" fg:w="2392"/><text x="17.6945%" y="447.50">&lt;a..</text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (2,248 samples, 2.62%)</title><rect x="17.6123%" y="421" width="2.6201%" height="15" fill="rgb(250,87,22)" fg:x="15111" fg:w="2248"/><text x="17.8623%" y="431.50">al..</text></g><g><title>alloc::slice::hack::to_vec (2,248 samples, 2.62%)</title><rect x="17.6123%" y="405" width="2.6201%" height="15" fill="rgb(239,43,17)" fg:x="15111" fg:w="2248"/><text x="17.8623%" y="415.50">al..</text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (2,239 samples, 2.61%)</title><rect x="17.6228%" y="389" width="2.6096%" height="15" fill="rgb(231,177,25)" fg:x="15120" fg:w="2239"/><text x="17.8728%" y="399.50">&lt;T..</text></g><g><title>core::slice::&lt;impl [T]&gt;::as_ptr (12 samples, 0.01%)</title><rect x="20.2184%" y="373" width="0.0140%" height="15" fill="rgb(219,179,1)" fg:x="17347" fg:w="12"/><text x="20.4684%" y="383.50"></text></g><g><title>&lt;coldbrew::runtime::Instruction as core::clone::Clone&gt;::clone (2,605 samples, 3.04%)</title><rect x="17.1985%" y="469" width="3.0362%" height="15" fill="rgb(238,219,53)" fg:x="14756" fg:w="2605"/><text x="17.4485%" y="479.50">&lt;co..</text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::clone::Clone&gt;::clone (2,497 samples, 2.91%)</title><rect x="17.3244%" y="453" width="2.9103%" height="15" fill="rgb(232,167,36)" fg:x="14864" fg:w="2497"/><text x="17.5744%" y="463.50">&lt;c..</text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (108 samples, 0.13%)</title><rect x="20.2347%" y="469" width="0.1259%" height="15" fill="rgb(244,19,51)" fg:x="17361" fg:w="108"/><text x="20.4847%" y="479.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::is_empty (24 samples, 0.03%)</title><rect x="20.3629%" y="469" width="0.0280%" height="15" fill="rgb(224,6,22)" fg:x="17471" fg:w="24"/><text x="20.6129%" y="479.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (24 samples, 0.03%)</title><rect x="20.6765%" y="325" width="0.0280%" height="15" fill="rgb(224,145,5)" fg:x="17740" fg:w="24"/><text x="20.9265%" y="335.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (50 samples, 0.06%)</title><rect x="20.8711%" y="309" width="0.0583%" height="15" fill="rgb(234,130,49)" fg:x="17907" fg:w="50"/><text x="21.1211%" y="319.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::finish (227 samples, 0.26%)</title><rect x="20.6671%" y="373" width="0.2646%" height="15" fill="rgb(254,6,2)" fg:x="17732" fg:w="227"/><text x="20.9171%" y="383.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (227 samples, 0.26%)</title><rect x="20.6671%" y="357" width="0.2646%" height="15" fill="rgb(208,96,46)" fg:x="17732" fg:w="227"/><text x="20.9171%" y="367.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (227 samples, 0.26%)</title><rect x="20.6671%" y="341" width="0.2646%" height="15" fill="rgb(239,3,39)" fg:x="17732" fg:w="227"/><text x="20.9171%" y="351.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (195 samples, 0.23%)</title><rect x="20.7044%" y="325" width="0.2273%" height="15" fill="rgb(233,210,1)" fg:x="17764" fg:w="195"/><text x="20.9544%" y="335.50"></text></g><g><title>__memcpy_avx_unaligned_erms (44 samples, 0.05%)</title><rect x="20.9434%" y="357" width="0.0513%" height="15" fill="rgb(244,137,37)" fg:x="17969" fg:w="44"/><text x="21.1934%" y="367.50"></text></g><g><title>__memcpy_avx_unaligned_erms (41 samples, 0.05%)</title><rect x="20.9970%" y="341" width="0.0478%" height="15" fill="rgb(240,136,2)" fg:x="18015" fg:w="41"/><text x="21.2470%" y="351.50"></text></g><g><title>__memcpy_avx_unaligned_erms (43 samples, 0.05%)</title><rect x="21.0681%" y="325" width="0.0501%" height="15" fill="rgb(239,18,37)" fg:x="18076" fg:w="43"/><text x="21.3181%" y="335.50"></text></g><g><title>&lt;std::collections::hash::map::RandomState as core::hash::BuildHasher&gt;::build_hasher (169 samples, 0.20%)</title><rect x="20.9317%" y="373" width="0.1970%" height="15" fill="rgb(218,185,22)" fg:x="17959" fg:w="169"/><text x="21.1817%" y="383.50"></text></g><g><title>core::hash::sip::SipHasher13::new_with_keys (113 samples, 0.13%)</title><rect x="20.9970%" y="357" width="0.1317%" height="15" fill="rgb(225,218,4)" fg:x="18015" fg:w="113"/><text x="21.2470%" y="367.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::new_with_keys (68 samples, 0.08%)</title><rect x="21.0494%" y="341" width="0.0793%" height="15" fill="rgb(230,182,32)" fg:x="18060" fg:w="68"/><text x="21.2994%" y="351.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (24 samples, 0.03%)</title><rect x="21.3140%" y="245" width="0.0280%" height="15" fill="rgb(242,56,43)" fg:x="18287" fg:w="24"/><text x="21.5640%" y="255.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (103 samples, 0.12%)</title><rect x="21.2266%" y="261" width="0.1200%" height="15" fill="rgb(233,99,24)" fg:x="18212" fg:w="103"/><text x="21.4766%" y="271.50"></text></g><g><title>core::hash::sip::u8to64_le (24 samples, 0.03%)</title><rect x="21.3478%" y="261" width="0.0280%" height="15" fill="rgb(234,209,42)" fg:x="18316" fg:w="24"/><text x="21.5978%" y="271.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (220 samples, 0.26%)</title><rect x="21.1380%" y="309" width="0.2564%" height="15" fill="rgb(227,7,12)" fg:x="18136" fg:w="220"/><text x="21.3880%" y="319.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (217 samples, 0.25%)</title><rect x="21.1415%" y="293" width="0.2529%" height="15" fill="rgb(245,203,43)" fg:x="18139" fg:w="217"/><text x="21.3915%" y="303.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (217 samples, 0.25%)</title><rect x="21.1415%" y="277" width="0.2529%" height="15" fill="rgb(238,205,33)" fg:x="18139" fg:w="217"/><text x="21.3915%" y="287.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::as_ptr (9 samples, 0.01%)</title><rect x="21.3839%" y="261" width="0.0105%" height="15" fill="rgb(231,56,7)" fg:x="18347" fg:w="9"/><text x="21.6339%" y="271.50"></text></g><g><title>hashbrown::map::make_hash (641 samples, 0.75%)</title><rect x="20.6532%" y="405" width="0.7471%" height="15" fill="rgb(244,186,29)" fg:x="17720" fg:w="641"/><text x="20.9032%" y="415.50"></text></g><g><title>core::hash::BuildHasher::hash_one (638 samples, 0.74%)</title><rect x="20.6567%" y="389" width="0.7436%" height="15" fill="rgb(234,111,31)" fg:x="17723" fg:w="638"/><text x="20.9067%" y="399.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (233 samples, 0.27%)</title><rect x="21.1287%" y="373" width="0.2716%" height="15" fill="rgb(241,149,10)" fg:x="18128" fg:w="233"/><text x="21.3787%" y="383.50"></text></g><g><title>&lt;coldbrew::runtime::ProgramCounter as core::hash::Hash&gt;::hash (231 samples, 0.27%)</title><rect x="21.1310%" y="357" width="0.2692%" height="15" fill="rgb(249,206,44)" fg:x="18130" fg:w="231"/><text x="21.3810%" y="367.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for usize&gt;::hash (228 samples, 0.27%)</title><rect x="21.1345%" y="341" width="0.2657%" height="15" fill="rgb(251,153,30)" fg:x="18133" fg:w="228"/><text x="21.3845%" y="351.50"></text></g><g><title>core::hash::Hasher::write_usize (225 samples, 0.26%)</title><rect x="21.1380%" y="325" width="0.2622%" height="15" fill="rgb(239,152,38)" fg:x="18136" fg:w="225"/><text x="21.3880%" y="335.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_mut (13 samples, 0.02%)</title><rect x="21.4154%" y="389" width="0.0152%" height="15" fill="rgb(249,139,47)" fg:x="18374" fg:w="13"/><text x="21.6654%" y="399.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ptr (13 samples, 0.02%)</title><rect x="21.4154%" y="373" width="0.0152%" height="15" fill="rgb(244,64,35)" fg:x="18374" fg:w="13"/><text x="21.6654%" y="383.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::from_base_index (18 samples, 0.02%)</title><rect x="21.4504%" y="357" width="0.0210%" height="15" fill="rgb(216,46,15)" fg:x="18404" fg:w="18"/><text x="21.7004%" y="367.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::bucket (22 samples, 0.03%)</title><rect x="21.4504%" y="373" width="0.0256%" height="15" fill="rgb(250,74,19)" fg:x="18404" fg:w="22"/><text x="21.7004%" y="383.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (12 samples, 0.01%)</title><rect x="21.4760%" y="373" width="0.0140%" height="15" fill="rgb(249,42,33)" fg:x="18426" fg:w="12"/><text x="21.7260%" y="383.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMask as core::iter::traits::collect::IntoIterator&gt;::into_iter (20 samples, 0.02%)</title><rect x="21.6066%" y="357" width="0.0233%" height="15" fill="rgb(242,149,17)" fg:x="18538" fg:w="20"/><text x="21.8566%" y="367.50"></text></g><g><title>core::num::nonzero::NonZeroU16::new (30 samples, 0.03%)</title><rect x="21.6882%" y="325" width="0.0350%" height="15" fill="rgb(244,29,21)" fg:x="18608" fg:w="30"/><text x="21.9382%" y="335.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (76 samples, 0.09%)</title><rect x="21.6578%" y="341" width="0.0886%" height="15" fill="rgb(220,130,37)" fg:x="18582" fg:w="76"/><text x="21.9078%" y="351.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::nonzero_trailing_zeros (20 samples, 0.02%)</title><rect x="21.7231%" y="325" width="0.0233%" height="15" fill="rgb(211,67,2)" fg:x="18638" fg:w="20"/><text x="21.9731%" y="335.50"></text></g><g><title>core::num::nonzero::NonZeroU16::trailing_zeros (16 samples, 0.02%)</title><rect x="21.7278%" y="309" width="0.0186%" height="15" fill="rgb(235,68,52)" fg:x="18642" fg:w="16"/><text x="21.9778%" y="319.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (101 samples, 0.12%)</title><rect x="21.6299%" y="357" width="0.1177%" height="15" fill="rgb(246,142,3)" fg:x="18558" fg:w="101"/><text x="21.8799%" y="367.50"></text></g><g><title>hashbrown::map::equivalent_key::{{closure}} (49 samples, 0.06%)</title><rect x="21.7674%" y="341" width="0.0571%" height="15" fill="rgb(241,25,7)" fg:x="18676" fg:w="49"/><text x="22.0174%" y="351.50"></text></g><g><title>&lt;Q as hashbrown::Equivalent&lt;K&gt;&gt;::equivalent (40 samples, 0.05%)</title><rect x="21.7779%" y="325" width="0.0466%" height="15" fill="rgb(242,119,39)" fg:x="18685" fg:w="40"/><text x="22.0279%" y="335.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (28 samples, 0.03%)</title><rect x="21.7919%" y="309" width="0.0326%" height="15" fill="rgb(241,98,45)" fg:x="18697" fg:w="28"/><text x="22.0419%" y="319.50"></text></g><g><title>&lt;coldbrew::runtime::ProgramCounter as core::cmp::PartialEq&gt;::eq (25 samples, 0.03%)</title><rect x="21.7954%" y="293" width="0.0291%" height="15" fill="rgb(254,28,30)" fg:x="18700" fg:w="25"/><text x="22.0454%" y="303.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ref (14 samples, 0.02%)</title><rect x="21.8245%" y="341" width="0.0163%" height="15" fill="rgb(241,142,54)" fg:x="18725" fg:w="14"/><text x="22.0745%" y="351.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ptr (12 samples, 0.01%)</title><rect x="21.8268%" y="325" width="0.0140%" height="15" fill="rgb(222,85,15)" fg:x="18727" fg:w="12"/><text x="22.0768%" y="335.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::from_base_index (23 samples, 0.03%)</title><rect x="21.8455%" y="325" width="0.0268%" height="15" fill="rgb(210,85,47)" fg:x="18743" fg:w="23"/><text x="22.0955%" y="335.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::{{closure}} (111 samples, 0.13%)</title><rect x="21.7476%" y="357" width="0.1294%" height="15" fill="rgb(224,206,25)" fg:x="18659" fg:w="111"/><text x="21.9976%" y="367.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::bucket (31 samples, 0.04%)</title><rect x="21.8408%" y="341" width="0.0361%" height="15" fill="rgb(243,201,19)" fg:x="18739" fg:w="31"/><text x="22.0908%" y="351.50"></text></g><g><title>hashbrown::raw::sse2::Group::load (146 samples, 0.17%)</title><rect x="21.8898%" y="357" width="0.1702%" height="15" fill="rgb(236,59,4)" fg:x="18781" fg:w="146"/><text x="22.1398%" y="367.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (136 samples, 0.16%)</title><rect x="21.9014%" y="341" width="0.1585%" height="15" fill="rgb(254,179,45)" fg:x="18791" fg:w="136"/><text x="22.1514%" y="351.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_cmpeq_epi8 (33 samples, 0.04%)</title><rect x="22.1171%" y="341" width="0.0385%" height="15" fill="rgb(226,14,10)" fg:x="18976" fg:w="33"/><text x="22.3671%" y="351.50"></text></g><g><title>core::core_arch::simd::i8x16::splat (9 samples, 0.01%)</title><rect x="22.2534%" y="325" width="0.0105%" height="15" fill="rgb(244,27,41)" fg:x="19093" fg:w="9"/><text x="22.5034%" y="335.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (96 samples, 0.11%)</title><rect x="22.1555%" y="341" width="0.1119%" height="15" fill="rgb(235,35,32)" fg:x="19009" fg:w="96"/><text x="22.4055%" y="351.50"></text></g><g><title>coldbrew::profiler::Profiler::count_entry (1,671 samples, 1.95%)</title><rect x="20.3909%" y="469" width="1.9476%" height="15" fill="rgb(218,68,31)" fg:x="17495" fg:w="1671"/><text x="20.6409%" y="479.50">c..</text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get_mut (1,466 samples, 1.71%)</title><rect x="20.6299%" y="453" width="1.7087%" height="15" fill="rgb(207,120,37)" fg:x="17700" fg:w="1466"/><text x="20.8799%" y="463.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_mut (1,466 samples, 1.71%)</title><rect x="20.6299%" y="437" width="1.7087%" height="15" fill="rgb(227,98,0)" fg:x="17700" fg:w="1466"/><text x="20.8799%" y="447.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner_mut (1,453 samples, 1.69%)</title><rect x="20.6450%" y="421" width="1.6935%" height="15" fill="rgb(207,7,3)" fg:x="17713" fg:w="1453"/><text x="20.8950%" y="431.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get_mut (805 samples, 0.94%)</title><rect x="21.4003%" y="405" width="0.9383%" height="15" fill="rgb(206,98,19)" fg:x="18361" fg:w="805"/><text x="21.6503%" y="415.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (779 samples, 0.91%)</title><rect x="21.4306%" y="389" width="0.9079%" height="15" fill="rgb(217,5,26)" fg:x="18387" fg:w="779"/><text x="21.6806%" y="399.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::find_inner (728 samples, 0.85%)</title><rect x="21.4900%" y="373" width="0.8485%" height="15" fill="rgb(235,190,38)" fg:x="18438" fg:w="728"/><text x="21.7400%" y="383.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (239 samples, 0.28%)</title><rect x="22.0600%" y="357" width="0.2786%" height="15" fill="rgb(247,86,24)" fg:x="18927" fg:w="239"/><text x="22.3100%" y="367.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_set1_epi8 (61 samples, 0.07%)</title><rect x="22.2674%" y="341" width="0.0711%" height="15" fill="rgb(205,101,16)" fg:x="19105" fg:w="61"/><text x="22.5174%" y="351.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_set_epi8 (61 samples, 0.07%)</title><rect x="22.2674%" y="325" width="0.0711%" height="15" fill="rgb(246,168,33)" fg:x="19105" fg:w="61"/><text x="22.5174%" y="335.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (74 samples, 0.09%)</title><rect x="23.1905%" y="309" width="0.0862%" height="15" fill="rgb(231,114,1)" fg:x="19897" fg:w="74"/><text x="23.4405%" y="319.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (256 samples, 0.30%)</title><rect x="22.9807%" y="325" width="0.2984%" height="15" fill="rgb(207,184,53)" fg:x="19717" fg:w="256"/><text x="23.2307%" y="335.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (626 samples, 0.73%)</title><rect x="24.7675%" y="309" width="0.7296%" height="15" fill="rgb(224,95,51)" fg:x="21250" fg:w="626"/><text x="25.0175%" y="319.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::finish (2,263 samples, 2.64%)</title><rect x="22.8758%" y="373" width="2.6376%" height="15" fill="rgb(212,188,45)" fg:x="19627" fg:w="2263"/><text x="23.1258%" y="383.50">&lt;s..</text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (2,263 samples, 2.64%)</title><rect x="22.8758%" y="357" width="2.6376%" height="15" fill="rgb(223,154,38)" fg:x="19627" fg:w="2263"/><text x="23.1258%" y="367.50">&lt;c..</text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (2,263 samples, 2.64%)</title><rect x="22.8758%" y="341" width="2.6376%" height="15" fill="rgb(251,22,52)" fg:x="19627" fg:w="2263"/><text x="23.1258%" y="351.50">&lt;c..</text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (1,917 samples, 2.23%)</title><rect x="23.2791%" y="325" width="2.2343%" height="15" fill="rgb(229,209,22)" fg:x="19973" fg:w="1917"/><text x="23.5291%" y="335.50">&lt;..</text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (14 samples, 0.02%)</title><rect x="25.4971%" y="309" width="0.0163%" height="15" fill="rgb(234,138,34)" fg:x="21876" fg:w="14"/><text x="25.7471%" y="319.50"></text></g><g><title>__memcpy_avx_unaligned_erms (261 samples, 0.30%)</title><rect x="25.5694%" y="357" width="0.3042%" height="15" fill="rgb(212,95,11)" fg:x="21938" fg:w="261"/><text x="25.8194%" y="367.50"></text></g><g><title>__memcpy_avx_unaligned_erms (492 samples, 0.57%)</title><rect x="25.8829%" y="341" width="0.5734%" height="15" fill="rgb(240,179,47)" fg:x="22207" fg:w="492"/><text x="26.1329%" y="351.50"></text></g><g><title>_init (24 samples, 0.03%)</title><rect x="26.4563%" y="341" width="0.0280%" height="15" fill="rgb(240,163,11)" fg:x="22699" fg:w="24"/><text x="26.7063%" y="351.50"></text></g><g><title>__memcpy_avx_unaligned_erms (506 samples, 0.59%)</title><rect x="26.6486%" y="325" width="0.5898%" height="15" fill="rgb(236,37,12)" fg:x="22864" fg:w="506"/><text x="26.8986%" y="335.50"></text></g><g><title>_init (22 samples, 0.03%)</title><rect x="27.2384%" y="325" width="0.0256%" height="15" fill="rgb(232,164,16)" fg:x="23370" fg:w="22"/><text x="27.4884%" y="335.50"></text></g><g><title>&lt;std::collections::hash::map::RandomState as core::hash::BuildHasher&gt;::build_hasher (1,597 samples, 1.86%)</title><rect x="25.5134%" y="373" width="1.8613%" height="15" fill="rgb(244,205,15)" fg:x="21890" fg:w="1597"/><text x="25.7634%" y="383.50">&lt;..</text></g><g><title>core::hash::sip::SipHasher13::new_with_keys (1,280 samples, 1.49%)</title><rect x="25.8829%" y="357" width="1.4919%" height="15" fill="rgb(223,117,47)" fg:x="22207" fg:w="1280"/><text x="26.1329%" y="367.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::new_with_keys (764 samples, 0.89%)</title><rect x="26.4843%" y="341" width="0.8905%" height="15" fill="rgb(244,107,35)" fg:x="22723" fg:w="764"/><text x="26.7343%" y="351.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::reset (95 samples, 0.11%)</title><rect x="27.2640%" y="325" width="0.1107%" height="15" fill="rgb(205,140,8)" fg:x="23392" fg:w="95"/><text x="27.5140%" y="335.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (223 samples, 0.26%)</title><rect x="29.2233%" y="245" width="0.2599%" height="15" fill="rgb(228,84,46)" fg:x="25073" fg:w="223"/><text x="29.4733%" y="255.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (980 samples, 1.14%)</title><rect x="28.4051%" y="261" width="1.1422%" height="15" fill="rgb(254,188,9)" fg:x="24371" fg:w="980"/><text x="28.6551%" y="271.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (55 samples, 0.06%)</title><rect x="29.4832%" y="245" width="0.0641%" height="15" fill="rgb(206,112,54)" fg:x="25296" fg:w="55"/><text x="29.7332%" y="255.50"></text></g><g><title>core::hash::sip::u8to64_le (264 samples, 0.31%)</title><rect x="29.5496%" y="261" width="0.3077%" height="15" fill="rgb(216,84,49)" fg:x="25353" fg:w="264"/><text x="29.7996%" y="271.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (51 samples, 0.06%)</title><rect x="29.7979%" y="245" width="0.0594%" height="15" fill="rgb(214,194,35)" fg:x="25566" fg:w="51"/><text x="30.0479%" y="255.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (95 samples, 0.11%)</title><rect x="29.8573%" y="261" width="0.1107%" height="15" fill="rgb(249,28,3)" fg:x="25617" fg:w="95"/><text x="30.1073%" y="271.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::add (57 samples, 0.07%)</title><rect x="29.9681%" y="261" width="0.0664%" height="15" fill="rgb(222,56,52)" fg:x="25712" fg:w="57"/><text x="30.2181%" y="271.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (2,234 samples, 2.60%)</title><rect x="27.4902%" y="309" width="2.6038%" height="15" fill="rgb(245,217,50)" fg:x="23586" fg:w="2234"/><text x="27.7402%" y="319.50">&lt;s..</text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (2,186 samples, 2.55%)</title><rect x="27.5461%" y="293" width="2.5478%" height="15" fill="rgb(213,201,24)" fg:x="23634" fg:w="2186"/><text x="27.7961%" y="303.50">&lt;c..</text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (2,186 samples, 2.55%)</title><rect x="27.5461%" y="277" width="2.5478%" height="15" fill="rgb(248,116,28)" fg:x="23634" fg:w="2186"/><text x="27.7961%" y="287.50">&lt;c..</text></g><g><title>core::slice::&lt;impl [T]&gt;::as_ptr (51 samples, 0.06%)</title><rect x="30.0345%" y="261" width="0.0594%" height="15" fill="rgb(219,72,43)" fg:x="25769" fg:w="51"/><text x="30.2845%" y="271.50"></text></g><g><title>hashbrown::map::make_hash (6,358 samples, 7.41%)</title><rect x="22.7220%" y="405" width="7.4104%" height="15" fill="rgb(209,138,14)" fg:x="19495" fg:w="6358"/><text x="22.9720%" y="415.50">hashbrown:..</text></g><g><title>core::hash::BuildHasher::hash_one (6,330 samples, 7.38%)</title><rect x="22.7546%" y="389" width="7.3778%" height="15" fill="rgb(222,18,33)" fg:x="19523" fg:w="6330"/><text x="23.0046%" y="399.50">core::hash..</text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (2,365 samples, 2.76%)</title><rect x="27.3759%" y="373" width="2.7565%" height="15" fill="rgb(213,199,7)" fg:x="23488" fg:w="2365"/><text x="27.6259%" y="383.50">co..</text></g><g><title>&lt;coldbrew::runtime::ProgramCounter as core::hash::Hash&gt;::hash (2,336 samples, 2.72%)</title><rect x="27.4097%" y="357" width="2.7227%" height="15" fill="rgb(250,110,10)" fg:x="23517" fg:w="2336"/><text x="27.6597%" y="367.50">&lt;c..</text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for usize&gt;::hash (2,314 samples, 2.70%)</title><rect x="27.4354%" y="341" width="2.6970%" height="15" fill="rgb(248,123,6)" fg:x="23539" fg:w="2314"/><text x="27.6854%" y="351.50">co..</text></g><g><title>core::hash::Hasher::write_usize (2,268 samples, 2.64%)</title><rect x="27.4890%" y="325" width="2.6434%" height="15" fill="rgb(206,91,31)" fg:x="23585" fg:w="2268"/><text x="27.7390%" y="335.50">co..</text></g><g><title>core::num::&lt;impl usize&gt;::to_ne_bytes (32 samples, 0.04%)</title><rect x="30.0951%" y="309" width="0.0373%" height="15" fill="rgb(211,154,13)" fg:x="25821" fg:w="32"/><text x="30.3451%" y="319.50"></text></g><g><title>core::num::&lt;impl isize&gt;::wrapping_neg (25 samples, 0.03%)</title><rect x="30.2128%" y="341" width="0.0291%" height="15" fill="rgb(225,148,7)" fg:x="25922" fg:w="25"/><text x="30.4628%" y="351.50"></text></g><g><title>core::num::&lt;impl isize&gt;::wrapping_sub (25 samples, 0.03%)</title><rect x="30.2128%" y="325" width="0.0291%" height="15" fill="rgb(220,160,43)" fg:x="25922" fg:w="25"/><text x="30.4628%" y="335.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ref (62 samples, 0.07%)</title><rect x="30.2035%" y="389" width="0.0723%" height="15" fill="rgb(213,52,39)" fg:x="25914" fg:w="62"/><text x="30.4535%" y="399.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ptr (62 samples, 0.07%)</title><rect x="30.2035%" y="373" width="0.0723%" height="15" fill="rgb(243,137,7)" fg:x="25914" fg:w="62"/><text x="30.4535%" y="383.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (54 samples, 0.06%)</title><rect x="30.2128%" y="357" width="0.0629%" height="15" fill="rgb(230,79,13)" fg:x="25922" fg:w="54"/><text x="30.4628%" y="367.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (29 samples, 0.03%)</title><rect x="30.2420%" y="341" width="0.0338%" height="15" fill="rgb(247,105,23)" fg:x="25947" fg:w="29"/><text x="30.4920%" y="351.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::bucket (12 samples, 0.01%)</title><rect x="30.4040%" y="373" width="0.0140%" height="15" fill="rgb(223,179,41)" fg:x="26086" fg:w="12"/><text x="30.6540%" y="383.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (80 samples, 0.09%)</title><rect x="30.4180%" y="373" width="0.0932%" height="15" fill="rgb(218,9,34)" fg:x="26098" fg:w="80"/><text x="30.6680%" y="383.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMask as core::iter::traits::collect::IntoIterator&gt;::into_iter (127 samples, 0.15%)</title><rect x="31.2245%" y="357" width="0.1480%" height="15" fill="rgb(222,106,8)" fg:x="26790" fg:w="127"/><text x="31.4745%" y="367.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::ops::try_trait::Try&gt;::branch (48 samples, 0.06%)</title><rect x="31.5240%" y="341" width="0.0559%" height="15" fill="rgb(211,220,0)" fg:x="27047" fg:w="48"/><text x="31.7740%" y="351.50"></text></g><g><title>core::num::nonzero::NonZeroU16::new (40 samples, 0.05%)</title><rect x="31.6744%" y="325" width="0.0466%" height="15" fill="rgb(229,52,16)" fg:x="27176" fg:w="40"/><text x="31.9244%" y="335.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (143 samples, 0.17%)</title><rect x="31.5800%" y="341" width="0.1667%" height="15" fill="rgb(212,155,18)" fg:x="27095" fg:w="143"/><text x="31.8300%" y="351.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::nonzero_trailing_zeros (22 samples, 0.03%)</title><rect x="31.7210%" y="325" width="0.0256%" height="15" fill="rgb(242,21,14)" fg:x="27216" fg:w="22"/><text x="31.9710%" y="335.50"></text></g><g><title>core::num::nonzero::NonZeroU16::trailing_zeros (17 samples, 0.02%)</title><rect x="31.7268%" y="309" width="0.0198%" height="15" fill="rgb(222,19,48)" fg:x="27221" fg:w="17"/><text x="31.9768%" y="319.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (323 samples, 0.38%)</title><rect x="31.3725%" y="357" width="0.3765%" height="15" fill="rgb(232,45,27)" fg:x="26917" fg:w="323"/><text x="31.6225%" y="367.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (62 samples, 0.07%)</title><rect x="31.7490%" y="357" width="0.0723%" height="15" fill="rgb(249,103,42)" fg:x="27240" fg:w="62"/><text x="31.9990%" y="367.50"></text></g><g><title>hashbrown::map::equivalent_key::{{closure}} (33 samples, 0.04%)</title><rect x="31.8329%" y="341" width="0.0385%" height="15" fill="rgb(246,81,33)" fg:x="27312" fg:w="33"/><text x="32.0829%" y="351.50"></text></g><g><title>&lt;Q as hashbrown::Equivalent&lt;K&gt;&gt;::equivalent (30 samples, 0.03%)</title><rect x="31.8364%" y="325" width="0.0350%" height="15" fill="rgb(252,33,42)" fg:x="27315" fg:w="30"/><text x="32.0864%" y="335.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (20 samples, 0.02%)</title><rect x="31.8481%" y="309" width="0.0233%" height="15" fill="rgb(209,212,41)" fg:x="27325" fg:w="20"/><text x="32.0981%" y="319.50"></text></g><g><title>&lt;coldbrew::runtime::ProgramCounter as core::cmp::PartialEq&gt;::eq (19 samples, 0.02%)</title><rect x="31.8492%" y="293" width="0.0221%" height="15" fill="rgb(207,154,6)" fg:x="27326" fg:w="19"/><text x="32.0992%" y="303.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ref (22 samples, 0.03%)</title><rect x="31.8714%" y="341" width="0.0256%" height="15" fill="rgb(223,64,47)" fg:x="27345" fg:w="22"/><text x="32.1214%" y="351.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ptr (20 samples, 0.02%)</title><rect x="31.8737%" y="325" width="0.0233%" height="15" fill="rgb(211,161,38)" fg:x="27347" fg:w="20"/><text x="32.1237%" y="335.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (10 samples, 0.01%)</title><rect x="31.8854%" y="309" width="0.0117%" height="15" fill="rgb(219,138,40)" fg:x="27357" fg:w="10"/><text x="32.1354%" y="319.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (10 samples, 0.01%)</title><rect x="31.9157%" y="309" width="0.0117%" height="15" fill="rgb(241,228,46)" fg:x="27383" fg:w="10"/><text x="32.1657%" y="319.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::from_base_index (27 samples, 0.03%)</title><rect x="31.8982%" y="325" width="0.0315%" height="15" fill="rgb(223,209,38)" fg:x="27368" fg:w="27"/><text x="32.1482%" y="335.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::{{closure}} (94 samples, 0.11%)</title><rect x="31.8213%" y="357" width="0.1096%" height="15" fill="rgb(236,164,45)" fg:x="27302" fg:w="94"/><text x="32.0713%" y="367.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::bucket (29 samples, 0.03%)</title><rect x="31.8970%" y="341" width="0.0338%" height="15" fill="rgb(231,15,5)" fg:x="27367" fg:w="29"/><text x="32.1470%" y="351.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::ctrl (19 samples, 0.02%)</title><rect x="31.9308%" y="357" width="0.0221%" height="15" fill="rgb(252,35,15)" fg:x="27396" fg:w="19"/><text x="32.1808%" y="367.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::as_ptr (17 samples, 0.02%)</title><rect x="31.9331%" y="341" width="0.0198%" height="15" fill="rgb(248,181,18)" fg:x="27398" fg:w="17"/><text x="32.1831%" y="351.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::probe_seq (18 samples, 0.02%)</title><rect x="31.9530%" y="357" width="0.0210%" height="15" fill="rgb(233,39,42)" fg:x="27415" fg:w="18"/><text x="32.2030%" y="367.50"></text></g><g><title>hashbrown::raw::h2 (31 samples, 0.04%)</title><rect x="31.9739%" y="357" width="0.0361%" height="15" fill="rgb(238,110,33)" fg:x="27433" fg:w="31"/><text x="32.2239%" y="367.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_undefined_si128 (27 samples, 0.03%)</title><rect x="33.5905%" y="325" width="0.0315%" height="15" fill="rgb(233,195,10)" fg:x="28820" fg:w="27"/><text x="33.8405%" y="335.50"></text></g><g><title>hashbrown::raw::sse2::Group::load (1,429 samples, 1.67%)</title><rect x="32.0101%" y="357" width="1.6655%" height="15" fill="rgb(254,105,3)" fg:x="27464" fg:w="1429"/><text x="32.2601%" y="367.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (1,304 samples, 1.52%)</title><rect x="32.1558%" y="341" width="1.5198%" height="15" fill="rgb(221,225,9)" fg:x="27589" fg:w="1304"/><text x="32.4058%" y="351.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (46 samples, 0.05%)</title><rect x="33.6220%" y="325" width="0.0536%" height="15" fill="rgb(224,227,45)" fg:x="28847" fg:w="46"/><text x="33.8720%" y="335.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_cmpeq_epi8 (411 samples, 0.48%)</title><rect x="34.2724%" y="341" width="0.4790%" height="15" fill="rgb(229,198,43)" fg:x="29405" fg:w="411"/><text x="34.5224%" y="351.50"></text></g><g><title>core::core_arch::x86::m128iExt::as_i8x16 (104 samples, 0.12%)</title><rect x="34.6302%" y="325" width="0.1212%" height="15" fill="rgb(206,209,35)" fg:x="29712" fg:w="104"/><text x="34.8802%" y="335.50"></text></g><g><title>core::core_arch::simd::i8x16::splat (100 samples, 0.12%)</title><rect x="35.7852%" y="325" width="0.1166%" height="15" fill="rgb(245,195,53)" fg:x="30703" fg:w="100"/><text x="36.0352%" y="335.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (1,014 samples, 1.18%)</title><rect x="34.7514%" y="341" width="1.1818%" height="15" fill="rgb(240,92,26)" fg:x="29816" fg:w="1014"/><text x="35.0014%" y="351.50"></text></g><g><title>core::core_arch::x86::m128iExt::as_i8x16 (27 samples, 0.03%)</title><rect x="35.9018%" y="325" width="0.0315%" height="15" fill="rgb(207,40,23)" fg:x="30803" fg:w="27"/><text x="36.1518%" y="335.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (2,657 samples, 3.10%)</title><rect x="33.6756%" y="357" width="3.0968%" height="15" fill="rgb(223,111,35)" fg:x="28893" fg:w="2657"/><text x="33.9256%" y="367.50">has..</text></g><g><title>core::core_arch::x86::sse2::_mm_set1_epi8 (720 samples, 0.84%)</title><rect x="35.9332%" y="341" width="0.8392%" height="15" fill="rgb(229,147,28)" fg:x="30830" fg:w="720"/><text x="36.1832%" y="351.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_set_epi8 (720 samples, 0.84%)</title><rect x="35.9332%" y="325" width="0.8392%" height="15" fill="rgb(211,29,28)" fg:x="30830" fg:w="720"/><text x="36.1832%" y="335.50"></text></g><g><title>core::core_arch::simd::i8x16::new (99 samples, 0.12%)</title><rect x="36.6570%" y="309" width="0.1154%" height="15" fill="rgb(228,72,33)" fg:x="31451" fg:w="99"/><text x="36.9070%" y="319.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_cmpeq_epi8 (361 samples, 0.42%)</title><rect x="37.3039%" y="325" width="0.4208%" height="15" fill="rgb(205,214,31)" fg:x="32006" fg:w="361"/><text x="37.5539%" y="335.50"></text></g><g><title>core::core_arch::x86::m128iExt::as_i8x16 (94 samples, 0.11%)</title><rect x="37.6151%" y="309" width="0.1096%" height="15" fill="rgb(224,111,15)" fg:x="32273" fg:w="94"/><text x="37.8651%" y="319.50"></text></g><g><title>core::core_arch::simd::i8x16::splat (100 samples, 0.12%)</title><rect x="38.6536%" y="309" width="0.1166%" height="15" fill="rgb(253,21,26)" fg:x="33164" fg:w="100"/><text x="38.9036%" y="319.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (929 samples, 1.08%)</title><rect x="37.7247%" y="325" width="1.0828%" height="15" fill="rgb(245,139,43)" fg:x="32367" fg:w="929"/><text x="37.9747%" y="335.50"></text></g><g><title>core::core_arch::x86::m128iExt::as_i8x16 (32 samples, 0.04%)</title><rect x="38.7701%" y="309" width="0.0373%" height="15" fill="rgb(252,170,7)" fg:x="33264" fg:w="32"/><text x="39.0201%" y="319.50"></text></g><g><title>coldbrew::profiler::Profiler::is_hot (14,709 samples, 17.14%)</title><rect x="22.3385%" y="469" width="17.1438%" height="15" fill="rgb(231,118,14)" fg:x="19166" fg:w="14709"/><text x="22.5885%" y="479.50">coldbrew::profiler::Profile..</text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (14,586 samples, 17.00%)</title><rect x="22.4819%" y="453" width="17.0004%" height="15" fill="rgb(238,83,0)" fg:x="19289" fg:w="14586"/><text x="22.7319%" y="463.50">std::collections::hash::ma..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (14,556 samples, 16.97%)</title><rect x="22.5168%" y="437" width="16.9654%" height="15" fill="rgb(221,39,39)" fg:x="19319" fg:w="14556"/><text x="22.7668%" y="447.50">hashbrown::map::HashMap&lt;K,..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (14,475 samples, 16.87%)</title><rect x="22.6112%" y="421" width="16.8710%" height="15" fill="rgb(222,119,46)" fg:x="19400" fg:w="14475"/><text x="22.8612%" y="431.50">hashbrown::map::HashMap&lt;K,..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get (8,022 samples, 9.35%)</title><rect x="30.1324%" y="405" width="9.3499%" height="15" fill="rgb(222,165,49)" fg:x="25853" fg:w="8022"/><text x="30.3824%" y="415.50">hashbrown::ra..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (7,899 samples, 9.21%)</title><rect x="30.2758%" y="389" width="9.2065%" height="15" fill="rgb(219,113,52)" fg:x="25976" fg:w="7899"/><text x="30.5258%" y="399.50">hashbrown::ra..</text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::find_inner (7,697 samples, 8.97%)</title><rect x="30.5112%" y="373" width="8.9711%" height="15" fill="rgb(214,7,15)" fg:x="26178" fg:w="7697"/><text x="30.7612%" y="383.50">hashbrown::ra..</text></g><g><title>hashbrown::raw::sse2::Group::match_empty (2,325 samples, 2.71%)</title><rect x="36.7724%" y="357" width="2.7099%" height="15" fill="rgb(235,32,4)" fg:x="31550" fg:w="2325"/><text x="37.0224%" y="367.50">ha..</text></g><g><title>hashbrown::raw::sse2::Group::match_byte (2,218 samples, 2.59%)</title><rect x="36.8971%" y="341" width="2.5851%" height="15" fill="rgb(238,90,54)" fg:x="31657" fg:w="2218"/><text x="37.1471%" y="351.50">ha..</text></g><g><title>core::core_arch::x86::sse2::_mm_set1_epi8 (579 samples, 0.67%)</title><rect x="38.8074%" y="325" width="0.6748%" height="15" fill="rgb(213,208,19)" fg:x="33296" fg:w="579"/><text x="39.0574%" y="335.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_set_epi8 (578 samples, 0.67%)</title><rect x="38.8086%" y="309" width="0.6737%" height="15" fill="rgb(233,156,4)" fg:x="33297" fg:w="578"/><text x="39.0586%" y="319.50"></text></g><g><title>core::core_arch::simd::i8x16::new (73 samples, 0.09%)</title><rect x="39.3972%" y="293" width="0.0851%" height="15" fill="rgb(207,194,5)" fg:x="33802" fg:w="73"/><text x="39.6472%" y="303.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_mut_ptr (31 samples, 0.04%)</title><rect x="39.9427%" y="437" width="0.0361%" height="15" fill="rgb(206,111,30)" fg:x="34270" fg:w="31"/><text x="40.1927%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (31 samples, 0.04%)</title><rect x="39.9427%" y="421" width="0.0361%" height="15" fill="rgb(243,70,54)" fg:x="34270" fg:w="31"/><text x="40.1927%" y="431.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::DerefMut&gt;::deref_mut (121 samples, 0.14%)</title><rect x="39.9124%" y="453" width="0.1410%" height="15" fill="rgb(242,28,8)" fg:x="34244" fg:w="121"/><text x="40.1624%" y="463.50"></text></g><g><title>core::slice::raw::from_raw_parts_mut (64 samples, 0.07%)</title><rect x="39.9788%" y="437" width="0.0746%" height="15" fill="rgb(219,106,18)" fg:x="34301" fg:w="64"/><text x="40.2288%" y="447.50"></text></g><g><title>core::ptr::slice_from_raw_parts_mut (64 samples, 0.07%)</title><rect x="39.9788%" y="421" width="0.0746%" height="15" fill="rgb(244,222,10)" fg:x="34301" fg:w="64"/><text x="40.2288%" y="431.50"></text></g><g><title>core::ptr::metadata::from_raw_parts_mut (64 samples, 0.07%)</title><rect x="39.9788%" y="405" width="0.0746%" height="15" fill="rgb(236,179,52)" fg:x="34301" fg:w="64"/><text x="40.2288%" y="415.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_ptr (18 samples, 0.02%)</title><rect x="40.1105%" y="421" width="0.0210%" height="15" fill="rgb(213,23,39)" fg:x="34414" fg:w="18"/><text x="40.3605%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (18 samples, 0.02%)</title><rect x="40.1105%" y="405" width="0.0210%" height="15" fill="rgb(238,48,10)" fg:x="34414" fg:w="18"/><text x="40.3605%" y="415.50"></text></g><g><title>core::ptr::slice_from_raw_parts (40 samples, 0.05%)</title><rect x="40.1350%" y="405" width="0.0466%" height="15" fill="rgb(251,196,23)" fg:x="34435" fg:w="40"/><text x="40.3850%" y="415.50"></text></g><g><title>core::ptr::metadata::from_raw_parts (40 samples, 0.05%)</title><rect x="40.1350%" y="389" width="0.0466%" height="15" fill="rgb(250,152,24)" fg:x="34435" fg:w="40"/><text x="40.3850%" y="399.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (93 samples, 0.11%)</title><rect x="40.0907%" y="437" width="0.1084%" height="15" fill="rgb(209,150,17)" fg:x="34397" fg:w="93"/><text x="40.3407%" y="447.50"></text></g><g><title>core::slice::raw::from_raw_parts (58 samples, 0.07%)</title><rect x="40.1315%" y="421" width="0.0676%" height="15" fill="rgb(234,202,34)" fg:x="34432" fg:w="58"/><text x="40.3815%" y="431.50"></text></g><g><title>core::slice::raw::from_raw_parts::runtime (15 samples, 0.02%)</title><rect x="40.1816%" y="405" width="0.0175%" height="15" fill="rgb(253,148,53)" fg:x="34475" fg:w="15"/><text x="40.4316%" y="415.50"></text></g><g><title>core::intrinsics::is_valid_allocation_size (15 samples, 0.02%)</title><rect x="40.1816%" y="389" width="0.0175%" height="15" fill="rgb(218,129,16)" fg:x="34475" fg:w="15"/><text x="40.4316%" y="399.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (200 samples, 0.23%)</title><rect x="40.0534%" y="453" width="0.2331%" height="15" fill="rgb(216,85,19)" fg:x="34365" fg:w="200"/><text x="40.3034%" y="463.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (75 samples, 0.09%)</title><rect x="40.1991%" y="437" width="0.0874%" height="15" fill="rgb(235,228,7)" fg:x="34490" fg:w="75"/><text x="40.4491%" y="447.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (60 samples, 0.07%)</title><rect x="40.2166%" y="421" width="0.0699%" height="15" fill="rgb(245,175,0)" fg:x="34505" fg:w="60"/><text x="40.4666%" y="431.50"></text></g><g><title>coldbrew::runtime::Runtime::invoke (10 samples, 0.01%)</title><rect x="40.2865%" y="453" width="0.0117%" height="15" fill="rgb(208,168,36)" fg:x="34565" fg:w="10"/><text x="40.5365%" y="463.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::DerefMut&gt;::deref_mut (43 samples, 0.05%)</title><rect x="40.3576%" y="437" width="0.0501%" height="15" fill="rgb(246,171,24)" fg:x="34626" fg:w="43"/><text x="40.6076%" y="447.50"></text></g><g><title>core::slice::raw::from_raw_parts_mut (29 samples, 0.03%)</title><rect x="40.3739%" y="421" width="0.0338%" height="15" fill="rgb(215,142,24)" fg:x="34640" fg:w="29"/><text x="40.6239%" y="431.50"></text></g><g><title>core::ptr::slice_from_raw_parts_mut (29 samples, 0.03%)</title><rect x="40.3739%" y="405" width="0.0338%" height="15" fill="rgb(250,187,7)" fg:x="34640" fg:w="29"/><text x="40.6239%" y="415.50"></text></g><g><title>core::ptr::metadata::from_raw_parts_mut (29 samples, 0.03%)</title><rect x="40.3739%" y="389" width="0.0338%" height="15" fill="rgb(228,66,33)" fg:x="34640" fg:w="29"/><text x="40.6239%" y="399.50"></text></g><g><title>coldbrew::runtime::Runtime::jump (118 samples, 0.14%)</title><rect x="40.2981%" y="453" width="0.1375%" height="15" fill="rgb(234,215,21)" fg:x="34575" fg:w="118"/><text x="40.5481%" y="463.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::last_mut (24 samples, 0.03%)</title><rect x="40.4077%" y="437" width="0.0280%" height="15" fill="rgb(222,191,20)" fg:x="34669" fg:w="24"/><text x="40.6577%" y="447.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::DerefMut&gt;::deref_mut (15 samples, 0.02%)</title><rect x="40.4940%" y="437" width="0.0175%" height="15" fill="rgb(245,79,54)" fg:x="34743" fg:w="15"/><text x="40.7440%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::capacity (15 samples, 0.02%)</title><rect x="40.5347%" y="421" width="0.0175%" height="15" fill="rgb(240,10,37)" fg:x="34778" fg:w="15"/><text x="40.7847%" y="431.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (53 samples, 0.06%)</title><rect x="40.5114%" y="437" width="0.0618%" height="15" fill="rgb(214,192,32)" fg:x="34758" fg:w="53"/><text x="40.7614%" y="447.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::last_mut (16 samples, 0.02%)</title><rect x="40.5732%" y="437" width="0.0186%" height="15" fill="rgb(209,36,54)" fg:x="34811" fg:w="16"/><text x="40.8232%" y="447.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (45 samples, 0.05%)</title><rect x="40.7725%" y="293" width="0.0524%" height="15" fill="rgb(220,10,11)" fg:x="34982" fg:w="45"/><text x="41.0225%" y="303.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (115 samples, 0.13%)</title><rect x="40.6956%" y="309" width="0.1340%" height="15" fill="rgb(221,106,17)" fg:x="34916" fg:w="115"/><text x="40.9456%" y="319.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (90 samples, 0.10%)</title><rect x="41.0849%" y="293" width="0.1049%" height="15" fill="rgb(251,142,44)" fg:x="35250" fg:w="90"/><text x="41.3349%" y="303.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::finish (459 samples, 0.53%)</title><rect x="40.6595%" y="357" width="0.5350%" height="15" fill="rgb(238,13,15)" fg:x="34885" fg:w="459"/><text x="40.9095%" y="367.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (459 samples, 0.53%)</title><rect x="40.6595%" y="341" width="0.5350%" height="15" fill="rgb(208,107,27)" fg:x="34885" fg:w="459"/><text x="40.9095%" y="351.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (459 samples, 0.53%)</title><rect x="40.6595%" y="325" width="0.5350%" height="15" fill="rgb(205,136,37)" fg:x="34885" fg:w="459"/><text x="40.9095%" y="335.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (313 samples, 0.36%)</title><rect x="40.8296%" y="309" width="0.3648%" height="15" fill="rgb(250,205,27)" fg:x="35031" fg:w="313"/><text x="41.0796%" y="319.50"></text></g><g><title>__memcpy_avx_unaligned_erms (50 samples, 0.06%)</title><rect x="41.2003%" y="341" width="0.0583%" height="15" fill="rgb(210,80,43)" fg:x="35349" fg:w="50"/><text x="41.4503%" y="351.50"></text></g><g><title>__memcpy_avx_unaligned_erms (101 samples, 0.12%)</title><rect x="41.2632%" y="325" width="0.1177%" height="15" fill="rgb(247,160,36)" fg:x="35403" fg:w="101"/><text x="41.5132%" y="335.50"></text></g><g><title>__memcpy_avx_unaligned_erms (123 samples, 0.14%)</title><rect x="41.4159%" y="309" width="0.1434%" height="15" fill="rgb(234,13,49)" fg:x="35534" fg:w="123"/><text x="41.6659%" y="319.50"></text></g><g><title>&lt;std::collections::hash::map::RandomState as core::hash::BuildHasher&gt;::build_hasher (342 samples, 0.40%)</title><rect x="41.1944%" y="357" width="0.3986%" height="15" fill="rgb(234,122,0)" fg:x="35344" fg:w="342"/><text x="41.4444%" y="367.50"></text></g><g><title>core::hash::sip::SipHasher13::new_with_keys (283 samples, 0.33%)</title><rect x="41.2632%" y="341" width="0.3298%" height="15" fill="rgb(207,146,38)" fg:x="35403" fg:w="283"/><text x="41.5132%" y="351.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::new_with_keys (177 samples, 0.21%)</title><rect x="41.3867%" y="325" width="0.2063%" height="15" fill="rgb(207,177,25)" fg:x="35509" fg:w="177"/><text x="41.6367%" y="335.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::reset (23 samples, 0.03%)</title><rect x="41.5662%" y="309" width="0.0268%" height="15" fill="rgb(211,178,42)" fg:x="35663" fg:w="23"/><text x="41.8162%" y="319.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (26 samples, 0.03%)</title><rect x="41.8040%" y="245" width="0.0303%" height="15" fill="rgb(230,69,54)" fg:x="35867" fg:w="26"/><text x="42.0540%" y="255.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (122 samples, 0.14%)</title><rect x="41.7003%" y="261" width="0.1422%" height="15" fill="rgb(214,135,41)" fg:x="35778" fg:w="122"/><text x="41.9503%" y="271.50"></text></g><g><title>core::hash::sip::u8to64_le (27 samples, 0.03%)</title><rect x="41.8425%" y="261" width="0.0315%" height="15" fill="rgb(237,67,25)" fg:x="35900" fg:w="27"/><text x="42.0925%" y="271.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (10 samples, 0.01%)</title><rect x="41.8739%" y="261" width="0.0117%" height="15" fill="rgb(222,189,50)" fg:x="35927" fg:w="10"/><text x="42.1239%" y="271.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (255 samples, 0.30%)</title><rect x="41.6024%" y="309" width="0.2972%" height="15" fill="rgb(245,148,34)" fg:x="35694" fg:w="255"/><text x="41.8524%" y="319.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (245 samples, 0.29%)</title><rect x="41.6140%" y="293" width="0.2856%" height="15" fill="rgb(222,29,6)" fg:x="35704" fg:w="245"/><text x="41.8640%" y="303.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (245 samples, 0.29%)</title><rect x="41.6140%" y="277" width="0.2856%" height="15" fill="rgb(221,189,43)" fg:x="35704" fg:w="245"/><text x="41.8640%" y="287.50"></text></g><g><title>hashbrown::map::make_hash (1,097 samples, 1.28%)</title><rect x="40.6257%" y="389" width="1.2786%" height="15" fill="rgb(207,36,27)" fg:x="34856" fg:w="1097"/><text x="40.8757%" y="399.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1,094 samples, 1.28%)</title><rect x="40.6292%" y="373" width="1.2751%" height="15" fill="rgb(217,90,24)" fg:x="34859" fg:w="1094"/><text x="40.8792%" y="383.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (267 samples, 0.31%)</title><rect x="41.5930%" y="357" width="0.3112%" height="15" fill="rgb(224,66,35)" fg:x="35686" fg:w="267"/><text x="41.8430%" y="367.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for usize&gt;::hash (263 samples, 0.31%)</title><rect x="41.5977%" y="341" width="0.3065%" height="15" fill="rgb(221,13,50)" fg:x="35690" fg:w="263"/><text x="41.8477%" y="351.50"></text></g><g><title>core::hash::Hasher::write_usize (259 samples, 0.30%)</title><rect x="41.6024%" y="325" width="0.3019%" height="15" fill="rgb(236,68,49)" fg:x="35694" fg:w="259"/><text x="41.8524%" y="335.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ref (23 samples, 0.03%)</title><rect x="41.9357%" y="373" width="0.0268%" height="15" fill="rgb(229,146,28)" fg:x="35980" fg:w="23"/><text x="42.1857%" y="383.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ptr (23 samples, 0.03%)</title><rect x="41.9357%" y="357" width="0.0268%" height="15" fill="rgb(225,31,38)" fg:x="35980" fg:w="23"/><text x="42.1857%" y="367.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (17 samples, 0.02%)</title><rect x="41.9427%" y="341" width="0.0198%" height="15" fill="rgb(250,208,3)" fg:x="35986" fg:w="17"/><text x="42.1927%" y="351.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (14 samples, 0.02%)</title><rect x="41.9462%" y="325" width="0.0163%" height="15" fill="rgb(246,54,23)" fg:x="35989" fg:w="14"/><text x="42.1962%" y="335.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::from_base_index (28 samples, 0.03%)</title><rect x="42.0080%" y="341" width="0.0326%" height="15" fill="rgb(243,76,11)" fg:x="36042" fg:w="28"/><text x="42.2580%" y="351.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::bucket (38 samples, 0.04%)</title><rect x="42.0068%" y="357" width="0.0443%" height="15" fill="rgb(245,21,50)" fg:x="36041" fg:w="38"/><text x="42.2568%" y="367.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::data_end (9 samples, 0.01%)</title><rect x="42.0406%" y="341" width="0.0105%" height="15" fill="rgb(228,9,43)" fg:x="36070" fg:w="9"/><text x="42.2906%" y="351.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (25 samples, 0.03%)</title><rect x="42.0511%" y="357" width="0.0291%" height="15" fill="rgb(208,100,47)" fg:x="36079" fg:w="25"/><text x="42.3011%" y="367.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMask as core::iter::traits::collect::IntoIterator&gt;::into_iter (42 samples, 0.05%)</title><rect x="42.3005%" y="341" width="0.0490%" height="15" fill="rgb(232,26,8)" fg:x="36293" fg:w="42"/><text x="42.5505%" y="351.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::ops::try_trait::Try&gt;::branch (12 samples, 0.01%)</title><rect x="42.3949%" y="325" width="0.0140%" height="15" fill="rgb(216,166,38)" fg:x="36374" fg:w="12"/><text x="42.6449%" y="335.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (11 samples, 0.01%)</title><rect x="42.4742%" y="309" width="0.0128%" height="15" fill="rgb(251,202,51)" fg:x="36442" fg:w="11"/><text x="42.7242%" y="319.50"></text></g><g><title>core::num::nonzero::NonZeroU16::new (52 samples, 0.06%)</title><rect x="42.4870%" y="309" width="0.0606%" height="15" fill="rgb(254,216,34)" fg:x="36453" fg:w="52"/><text x="42.7370%" y="319.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (174 samples, 0.20%)</title><rect x="42.4089%" y="325" width="0.2028%" height="15" fill="rgb(251,32,27)" fg:x="36386" fg:w="174"/><text x="42.6589%" y="335.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::nonzero_trailing_zeros (55 samples, 0.06%)</title><rect x="42.5476%" y="309" width="0.0641%" height="15" fill="rgb(208,127,28)" fg:x="36505" fg:w="55"/><text x="42.7976%" y="319.50"></text></g><g><title>core::num::nonzero::NonZeroU16::trailing_zeros (46 samples, 0.05%)</title><rect x="42.5581%" y="293" width="0.0536%" height="15" fill="rgb(224,137,22)" fg:x="36514" fg:w="46"/><text x="42.8081%" y="303.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (229 samples, 0.27%)</title><rect x="42.3495%" y="341" width="0.2669%" height="15" fill="rgb(254,70,32)" fg:x="36335" fg:w="229"/><text x="42.5995%" y="351.50"></text></g><g><title>hashbrown::map::equivalent_key::{{closure}} (72 samples, 0.08%)</title><rect x="42.6374%" y="325" width="0.0839%" height="15" fill="rgb(229,75,37)" fg:x="36582" fg:w="72"/><text x="42.8874%" y="335.50"></text></g><g><title>&lt;Q as hashbrown::Equivalent&lt;K&gt;&gt;::equivalent (54 samples, 0.06%)</title><rect x="42.6583%" y="309" width="0.0629%" height="15" fill="rgb(252,64,23)" fg:x="36600" fg:w="54"/><text x="42.9083%" y="319.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (34 samples, 0.04%)</title><rect x="42.6816%" y="293" width="0.0396%" height="15" fill="rgb(232,162,48)" fg:x="36620" fg:w="34"/><text x="42.9316%" y="303.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq for usize&gt;::eq (28 samples, 0.03%)</title><rect x="42.6886%" y="277" width="0.0326%" height="15" fill="rgb(246,160,12)" fg:x="36626" fg:w="28"/><text x="42.9386%" y="287.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ref (30 samples, 0.03%)</title><rect x="42.7213%" y="325" width="0.0350%" height="15" fill="rgb(247,166,0)" fg:x="36654" fg:w="30"/><text x="42.9713%" y="335.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ptr (25 samples, 0.03%)</title><rect x="42.7271%" y="309" width="0.0291%" height="15" fill="rgb(249,219,21)" fg:x="36659" fg:w="25"/><text x="42.9771%" y="319.50"></text></g><g><title>core::num::&lt;impl isize&gt;::wrapping_neg (13 samples, 0.02%)</title><rect x="42.7912%" y="277" width="0.0152%" height="15" fill="rgb(205,209,3)" fg:x="36714" fg:w="13"/><text x="43.0412%" y="287.50"></text></g><g><title>core::num::&lt;impl isize&gt;::wrapping_sub (13 samples, 0.02%)</title><rect x="42.7912%" y="261" width="0.0152%" height="15" fill="rgb(243,44,1)" fg:x="36714" fg:w="13"/><text x="43.0412%" y="271.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (22 samples, 0.03%)</title><rect x="42.7889%" y="293" width="0.0256%" height="15" fill="rgb(206,159,16)" fg:x="36712" fg:w="22"/><text x="43.0389%" y="303.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::from_base_index (51 samples, 0.06%)</title><rect x="42.7586%" y="309" width="0.0594%" height="15" fill="rgb(244,77,30)" fg:x="36686" fg:w="51"/><text x="43.0086%" y="319.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::{{closure}} (181 samples, 0.21%)</title><rect x="42.6164%" y="341" width="0.2110%" height="15" fill="rgb(218,69,12)" fg:x="36564" fg:w="181"/><text x="42.8664%" y="351.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::bucket (61 samples, 0.07%)</title><rect x="42.7562%" y="325" width="0.0711%" height="15" fill="rgb(212,87,7)" fg:x="36684" fg:w="61"/><text x="43.0062%" y="335.50"></text></g><g><title>hashbrown::raw::sse2::Group::load (335 samples, 0.39%)</title><rect x="42.8483%" y="341" width="0.3905%" height="15" fill="rgb(245,114,25)" fg:x="36763" fg:w="335"/><text x="43.0983%" y="351.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (314 samples, 0.37%)</title><rect x="42.8728%" y="325" width="0.3660%" height="15" fill="rgb(210,61,42)" fg:x="36784" fg:w="314"/><text x="43.1228%" y="335.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (11 samples, 0.01%)</title><rect x="43.2259%" y="309" width="0.0128%" height="15" fill="rgb(211,52,33)" fg:x="37087" fg:w="11"/><text x="43.4759%" y="319.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_cmpeq_epi8 (80 samples, 0.09%)</title><rect x="43.3600%" y="325" width="0.0932%" height="15" fill="rgb(234,58,33)" fg:x="37202" fg:w="80"/><text x="43.6100%" y="335.50"></text></g><g><title>core::core_arch::x86::m128iExt::as_i8x16 (20 samples, 0.02%)</title><rect x="43.4299%" y="309" width="0.0233%" height="15" fill="rgb(220,115,36)" fg:x="37262" fg:w="20"/><text x="43.6799%" y="319.50"></text></g><g><title>core::core_arch::simd::i8x16::splat (27 samples, 0.03%)</title><rect x="43.6968%" y="309" width="0.0315%" height="15" fill="rgb(243,153,54)" fg:x="37491" fg:w="27"/><text x="43.9468%" y="319.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (239 samples, 0.28%)</title><rect x="43.4532%" y="325" width="0.2786%" height="15" fill="rgb(251,47,18)" fg:x="37282" fg:w="239"/><text x="43.7032%" y="335.50"></text></g><g><title>coldbrew::runtime::Runtime::load (2,971 samples, 3.46%)</title><rect x="40.4357%" y="453" width="3.4628%" height="15" fill="rgb(242,102,42)" fg:x="34693" fg:w="2971"/><text x="40.6857%" y="463.50">col..</text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (2,837 samples, 3.31%)</title><rect x="40.5919%" y="437" width="3.3066%" height="15" fill="rgb(234,31,38)" fg:x="34827" fg:w="2837"/><text x="40.8419%" y="447.50">std..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (2,836 samples, 3.31%)</title><rect x="40.5930%" y="421" width="3.3054%" height="15" fill="rgb(221,117,51)" fg:x="34828" fg:w="2836"/><text x="40.8430%" y="431.50">has..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (2,822 samples, 3.29%)</title><rect x="40.6093%" y="405" width="3.2891%" height="15" fill="rgb(212,20,18)" fg:x="34842" fg:w="2822"/><text x="40.8593%" y="415.50">has..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get (1,711 samples, 1.99%)</title><rect x="41.9042%" y="389" width="1.9942%" height="15" fill="rgb(245,133,36)" fg:x="35953" fg:w="1711"/><text x="42.1542%" y="399.50">h..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (1,661 samples, 1.94%)</title><rect x="41.9625%" y="373" width="1.9359%" height="15" fill="rgb(212,6,19)" fg:x="36003" fg:w="1661"/><text x="42.2125%" y="383.50">h..</text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::find_inner (1,560 samples, 1.82%)</title><rect x="42.0802%" y="357" width="1.8182%" height="15" fill="rgb(218,1,36)" fg:x="36104" fg:w="1560"/><text x="42.3302%" y="367.50">h..</text></g><g><title>hashbrown::raw::sse2::Group::match_byte (566 samples, 0.66%)</title><rect x="43.2388%" y="341" width="0.6597%" height="15" fill="rgb(246,84,54)" fg:x="37098" fg:w="566"/><text x="43.4888%" y="351.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_set1_epi8 (143 samples, 0.17%)</title><rect x="43.7318%" y="325" width="0.1667%" height="15" fill="rgb(242,110,6)" fg:x="37521" fg:w="143"/><text x="43.9818%" y="335.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_set_epi8 (143 samples, 0.17%)</title><rect x="43.7318%" y="309" width="0.1667%" height="15" fill="rgb(214,47,5)" fg:x="37521" fg:w="143"/><text x="43.9818%" y="319.50"></text></g><g><title>core::core_arch::simd::i8x16::new (16 samples, 0.02%)</title><rect x="43.8798%" y="293" width="0.0186%" height="15" fill="rgb(218,159,25)" fg:x="37648" fg:w="16"/><text x="44.1298%" y="303.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_mut_ptr (13 samples, 0.02%)</title><rect x="44.0162%" y="421" width="0.0152%" height="15" fill="rgb(215,211,28)" fg:x="37765" fg:w="13"/><text x="44.2662%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (13 samples, 0.02%)</title><rect x="44.0162%" y="405" width="0.0152%" height="15" fill="rgb(238,59,32)" fg:x="37765" fg:w="13"/><text x="44.2662%" y="415.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::DerefMut&gt;::deref_mut (53 samples, 0.06%)</title><rect x="44.0010%" y="437" width="0.0618%" height="15" fill="rgb(226,82,3)" fg:x="37752" fg:w="53"/><text x="44.2510%" y="447.50"></text></g><g><title>core::slice::raw::from_raw_parts_mut (27 samples, 0.03%)</title><rect x="44.0313%" y="421" width="0.0315%" height="15" fill="rgb(240,164,32)" fg:x="37778" fg:w="27"/><text x="44.2813%" y="431.50"></text></g><g><title>core::ptr::slice_from_raw_parts_mut (27 samples, 0.03%)</title><rect x="44.0313%" y="405" width="0.0315%" height="15" fill="rgb(232,46,7)" fg:x="37778" fg:w="27"/><text x="44.2813%" y="415.50"></text></g><g><title>core::ptr::metadata::from_raw_parts_mut (27 samples, 0.03%)</title><rect x="44.0313%" y="389" width="0.0315%" height="15" fill="rgb(229,129,53)" fg:x="37778" fg:w="27"/><text x="44.2813%" y="399.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_ptr (16 samples, 0.02%)</title><rect x="44.1700%" y="421" width="0.0186%" height="15" fill="rgb(234,188,29)" fg:x="37897" fg:w="16"/><text x="44.4200%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (15 samples, 0.02%)</title><rect x="44.1712%" y="405" width="0.0175%" height="15" fill="rgb(246,141,4)" fg:x="37898" fg:w="15"/><text x="44.4212%" y="415.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::len (9 samples, 0.01%)</title><rect x="44.1887%" y="421" width="0.0105%" height="15" fill="rgb(229,23,39)" fg:x="37913" fg:w="9"/><text x="44.4387%" y="431.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::add (14 samples, 0.02%)</title><rect x="44.1992%" y="421" width="0.0163%" height="15" fill="rgb(206,12,3)" fg:x="37922" fg:w="14"/><text x="44.4492%" y="431.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::pop (152 samples, 0.18%)</title><rect x="44.0628%" y="437" width="0.1772%" height="15" fill="rgb(252,226,20)" fg:x="37805" fg:w="152"/><text x="44.3128%" y="447.50"></text></g><g><title>core::ptr::read (21 samples, 0.02%)</title><rect x="44.2155%" y="421" width="0.0245%" height="15" fill="rgb(216,123,35)" fg:x="37936" fg:w="21"/><text x="44.4655%" y="431.50"></text></g><g><title>coldbrew::runtime::Runtime::pop (351 samples, 0.41%)</title><rect x="43.8985%" y="453" width="0.4091%" height="15" fill="rgb(212,68,40)" fg:x="37664" fg:w="351"/><text x="44.1485%" y="463.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::last_mut (58 samples, 0.07%)</title><rect x="44.2400%" y="437" width="0.0676%" height="15" fill="rgb(254,125,32)" fg:x="37957" fg:w="58"/><text x="44.4900%" y="447.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::DerefMut&gt;::deref_mut (10 samples, 0.01%)</title><rect x="44.3414%" y="437" width="0.0117%" height="15" fill="rgb(253,97,22)" fg:x="38044" fg:w="10"/><text x="44.5914%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::capacity (31 samples, 0.04%)</title><rect x="44.3973%" y="421" width="0.0361%" height="15" fill="rgb(241,101,14)" fg:x="38092" fg:w="31"/><text x="44.6473%" y="431.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (90 samples, 0.10%)</title><rect x="44.3530%" y="437" width="0.1049%" height="15" fill="rgb(238,103,29)" fg:x="38054" fg:w="90"/><text x="44.6030%" y="447.50"></text></g><g><title>core::ptr::write (12 samples, 0.01%)</title><rect x="44.4439%" y="421" width="0.0140%" height="15" fill="rgb(233,195,47)" fg:x="38132" fg:w="12"/><text x="44.6939%" y="431.50"></text></g><g><title>coldbrew::runtime::Runtime::push (156 samples, 0.18%)</title><rect x="44.3076%" y="453" width="0.1818%" height="15" fill="rgb(246,218,30)" fg:x="38015" fg:w="156"/><text x="44.5576%" y="463.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::last_mut (27 samples, 0.03%)</title><rect x="44.4579%" y="437" width="0.0315%" height="15" fill="rgb(219,145,47)" fg:x="38144" fg:w="27"/><text x="44.7079%" y="447.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::finish (17 samples, 0.02%)</title><rect x="44.5057%" y="373" width="0.0198%" height="15" fill="rgb(243,12,26)" fg:x="38185" fg:w="17"/><text x="44.7557%" y="383.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (17 samples, 0.02%)</title><rect x="44.5057%" y="357" width="0.0198%" height="15" fill="rgb(214,87,16)" fg:x="38185" fg:w="17"/><text x="44.7557%" y="367.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (17 samples, 0.02%)</title><rect x="44.5057%" y="341" width="0.0198%" height="15" fill="rgb(208,99,42)" fg:x="38185" fg:w="17"/><text x="44.7557%" y="351.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (12 samples, 0.01%)</title><rect x="44.5115%" y="325" width="0.0140%" height="15" fill="rgb(253,99,2)" fg:x="38190" fg:w="12"/><text x="44.7615%" y="335.50"></text></g><g><title>&lt;std::collections::hash::map::RandomState as core::hash::BuildHasher&gt;::build_hasher (14 samples, 0.02%)</title><rect x="44.5255%" y="373" width="0.0163%" height="15" fill="rgb(220,168,23)" fg:x="38202" fg:w="14"/><text x="44.7755%" y="383.50"></text></g><g><title>core::hash::sip::SipHasher13::new_with_keys (9 samples, 0.01%)</title><rect x="44.5313%" y="357" width="0.0105%" height="15" fill="rgb(242,38,24)" fg:x="38207" fg:w="9"/><text x="44.7813%" y="367.50"></text></g><g><title>hashbrown::map::make_hash (45 samples, 0.05%)</title><rect x="44.5045%" y="405" width="0.0524%" height="15" fill="rgb(225,182,9)" fg:x="38184" fg:w="45"/><text x="44.7545%" y="415.50"></text></g><g><title>core::hash::BuildHasher::hash_one (45 samples, 0.05%)</title><rect x="44.5045%" y="389" width="0.0524%" height="15" fill="rgb(243,178,37)" fg:x="38184" fg:w="45"/><text x="44.7545%" y="399.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (13 samples, 0.02%)</title><rect x="44.5418%" y="373" width="0.0152%" height="15" fill="rgb(232,139,19)" fg:x="38216" fg:w="13"/><text x="44.7918%" y="383.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for usize&gt;::hash (13 samples, 0.02%)</title><rect x="44.5418%" y="357" width="0.0152%" height="15" fill="rgb(225,201,24)" fg:x="38216" fg:w="13"/><text x="44.7918%" y="367.50"></text></g><g><title>core::hash::Hasher::write_usize (13 samples, 0.02%)</title><rect x="44.5418%" y="341" width="0.0152%" height="15" fill="rgb(221,47,46)" fg:x="38216" fg:w="13"/><text x="44.7918%" y="351.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (13 samples, 0.02%)</title><rect x="44.5418%" y="325" width="0.0152%" height="15" fill="rgb(249,23,13)" fg:x="38216" fg:w="13"/><text x="44.7918%" y="335.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (13 samples, 0.02%)</title><rect x="44.5418%" y="309" width="0.0152%" height="15" fill="rgb(219,9,5)" fg:x="38216" fg:w="13"/><text x="44.7918%" y="319.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (13 samples, 0.02%)</title><rect x="44.5418%" y="293" width="0.0152%" height="15" fill="rgb(254,171,16)" fg:x="38216" fg:w="13"/><text x="44.7918%" y="303.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (12 samples, 0.01%)</title><rect x="44.5710%" y="373" width="0.0140%" height="15" fill="rgb(230,171,20)" fg:x="38241" fg:w="12"/><text x="44.8210%" y="383.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (11 samples, 0.01%)</title><rect x="44.5721%" y="357" width="0.0128%" height="15" fill="rgb(210,71,41)" fg:x="38242" fg:w="11"/><text x="44.8221%" y="367.50"></text></g><g><title>coldbrew::runtime::Runtime::store (118 samples, 0.14%)</title><rect x="44.4894%" y="453" width="0.1375%" height="15" fill="rgb(206,173,20)" fg:x="38171" fg:w="118"/><text x="44.7394%" y="463.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::insert (108 samples, 0.13%)</title><rect x="44.5010%" y="437" width="0.1259%" height="15" fill="rgb(233,88,34)" fg:x="38181" fg:w="108"/><text x="44.7510%" y="447.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (107 samples, 0.12%)</title><rect x="44.5022%" y="421" width="0.1247%" height="15" fill="rgb(223,209,46)" fg:x="38182" fg:w="107"/><text x="44.7522%" y="431.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find_or_find_insert_slot (60 samples, 0.07%)</title><rect x="44.5570%" y="405" width="0.0699%" height="15" fill="rgb(250,43,18)" fg:x="38229" fg:w="60"/><text x="44.8070%" y="415.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::find_or_find_insert_slot_inner (55 samples, 0.06%)</title><rect x="44.5628%" y="389" width="0.0641%" height="15" fill="rgb(208,13,10)" fg:x="38234" fg:w="55"/><text x="44.8128%" y="399.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (23 samples, 0.03%)</title><rect x="44.6001%" y="373" width="0.0268%" height="15" fill="rgb(212,200,36)" fg:x="38266" fg:w="23"/><text x="44.8501%" y="383.50"></text></g><g><title>coldbrew::runtime::Value::rem (27 samples, 0.03%)</title><rect x="44.6292%" y="453" width="0.0315%" height="15" fill="rgb(225,90,30)" fg:x="38291" fg:w="27"/><text x="44.8792%" y="463.50"></text></g><g><title>&lt;&amp;i32 as core::ops::arith::Rem&lt;&amp;i32&gt;&gt;::rem (17 samples, 0.02%)</title><rect x="44.6409%" y="437" width="0.0198%" height="15" fill="rgb(236,182,39)" fg:x="38301" fg:w="17"/><text x="44.8909%" y="447.50"></text></g><g><title>&lt;i32 as core::ops::arith::Rem&gt;::rem (13 samples, 0.02%)</title><rect x="44.6456%" y="421" width="0.0152%" height="15" fill="rgb(212,144,35)" fg:x="38305" fg:w="13"/><text x="44.8956%" y="431.50"></text></g><g><title>core::cmp::PartialOrd::ge (53 samples, 0.06%)</title><rect x="44.6630%" y="453" width="0.0618%" height="15" fill="rgb(228,63,44)" fg:x="38320" fg:w="53"/><text x="44.9130%" y="463.50"></text></g><g><title>&lt;coldbrew::runtime::Value as core::cmp::PartialOrd&gt;::partial_cmp (40 samples, 0.05%)</title><rect x="44.6782%" y="437" width="0.0466%" height="15" fill="rgb(228,109,6)" fg:x="38333" fg:w="40"/><text x="44.9282%" y="447.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for i32&gt;::partial_cmp (12 samples, 0.01%)</title><rect x="44.7108%" y="421" width="0.0140%" height="15" fill="rgb(238,117,24)" fg:x="38361" fg:w="12"/><text x="44.9608%" y="431.50"></text></g><g><title>core::option::Option&lt;T&gt;::as_ref (21 samples, 0.02%)</title><rect x="44.7260%" y="453" width="0.0245%" height="15" fill="rgb(242,26,26)" fg:x="38374" fg:w="21"/><text x="44.9760%" y="463.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_ptr (16 samples, 0.02%)</title><rect x="44.8309%" y="405" width="0.0186%" height="15" fill="rgb(221,92,48)" fg:x="38464" fg:w="16"/><text x="45.0809%" y="415.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (54 samples, 0.06%)</title><rect x="44.8274%" y="421" width="0.0629%" height="15" fill="rgb(209,209,32)" fg:x="38461" fg:w="54"/><text x="45.0774%" y="431.50"></text></g><g><title>core::slice::raw::from_raw_parts (35 samples, 0.04%)</title><rect x="44.8495%" y="405" width="0.0408%" height="15" fill="rgb(221,70,22)" fg:x="38480" fg:w="35"/><text x="45.0995%" y="415.50"></text></g><g><title>core::ptr::slice_from_raw_parts (35 samples, 0.04%)</title><rect x="44.8495%" y="389" width="0.0408%" height="15" fill="rgb(248,145,5)" fg:x="38480" fg:w="35"/><text x="45.0995%" y="399.50"></text></g><g><title>core::ptr::metadata::from_raw_parts (35 samples, 0.04%)</title><rect x="44.8495%" y="373" width="0.0408%" height="15" fill="rgb(226,116,26)" fg:x="38480" fg:w="35"/><text x="45.0995%" y="383.50"></text></g><g><title>&lt;&amp;i32 as core::ops::arith::Sub&lt;i32&gt;&gt;::sub (14 samples, 0.02%)</title><rect x="44.9276%" y="405" width="0.0163%" height="15" fill="rgb(244,5,17)" fg:x="38547" fg:w="14"/><text x="45.1776%" y="415.50"></text></g><g><title>core::option::Option&lt;T&gt;::map_or_else (217 samples, 0.25%)</title><rect x="44.7505%" y="453" width="0.2529%" height="15" fill="rgb(252,159,33)" fg:x="38395" fg:w="217"/><text x="45.0005%" y="463.50"></text></g><g><title>coldbrew::runtime::Runtime::eval::{{closure}} (151 samples, 0.18%)</title><rect x="44.8274%" y="437" width="0.1760%" height="15" fill="rgb(206,71,0)" fg:x="38461" fg:w="151"/><text x="45.0774%" y="447.50"></text></g><g><title>coldbrew::runtime::Runtime::get_relative_offset (97 samples, 0.11%)</title><rect x="44.8903%" y="421" width="0.1131%" height="15" fill="rgb(233,118,54)" fg:x="38515" fg:w="97"/><text x="45.1403%" y="431.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get (51 samples, 0.06%)</title><rect x="44.9439%" y="405" width="0.0594%" height="15" fill="rgb(234,83,48)" fg:x="38561" fg:w="51"/><text x="45.1939%" y="415.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get (40 samples, 0.05%)</title><rect x="44.9568%" y="389" width="0.0466%" height="15" fill="rgb(228,3,54)" fg:x="38572" fg:w="40"/><text x="45.2068%" y="399.50"></text></g><g><title>core::option::Option&lt;T&gt;::unwrap (16 samples, 0.02%)</title><rect x="45.0034%" y="453" width="0.0186%" height="15" fill="rgb(226,155,13)" fg:x="38612" fg:w="16"/><text x="45.2534%" y="463.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::last_mut (132 samples, 0.15%)</title><rect x="45.0220%" y="453" width="0.1538%" height="15" fill="rgb(241,28,37)" fg:x="38628" fg:w="132"/><text x="45.2720%" y="463.50"></text></g><g><title>coldbrew::runtime::Runtime::eval::{{closure}} (245 samples, 0.29%)</title><rect x="45.3262%" y="437" width="0.2856%" height="15" fill="rgb(233,93,10)" fg:x="38889" fg:w="245"/><text x="45.5762%" y="447.50"></text></g><g><title>coldbrew::runtime::Value::add (145 samples, 0.17%)</title><rect x="45.4428%" y="421" width="0.1690%" height="15" fill="rgb(225,113,19)" fg:x="38989" fg:w="145"/><text x="45.6928%" y="431.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ptr (17 samples, 0.02%)</title><rect x="45.6316%" y="389" width="0.0198%" height="15" fill="rgb(241,2,18)" fg:x="39151" fg:w="17"/><text x="45.8816%" y="399.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (10 samples, 0.01%)</title><rect x="45.6398%" y="373" width="0.0117%" height="15" fill="rgb(228,207,21)" fg:x="39158" fg:w="10"/><text x="45.8898%" y="383.50"></text></g><g><title>std::collections::hash::map::Entry&lt;K,V&gt;::and_modify (412 samples, 0.48%)</title><rect x="45.1759%" y="453" width="0.4802%" height="15" fill="rgb(213,211,35)" fg:x="38760" fg:w="412"/><text x="45.4259%" y="463.50"></text></g><g><title>std::collections::hash::map::OccupiedEntry&lt;K,V&gt;::get_mut (38 samples, 0.04%)</title><rect x="45.6118%" y="437" width="0.0443%" height="15" fill="rgb(209,83,10)" fg:x="39134" fg:w="38"/><text x="45.8618%" y="447.50"></text></g><g><title>hashbrown::rustc_entry::RustcOccupiedEntry&lt;K,V,A&gt;::get_mut (31 samples, 0.04%)</title><rect x="45.6199%" y="421" width="0.0361%" height="15" fill="rgb(209,164,1)" fg:x="39141" fg:w="31"/><text x="45.8699%" y="431.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_mut (26 samples, 0.03%)</title><rect x="45.6258%" y="405" width="0.0303%" height="15" fill="rgb(213,184,43)" fg:x="39146" fg:w="26"/><text x="45.8758%" y="415.50"></text></g><g><title>std::collections::hash::map::Entry&lt;K,V&gt;::or_insert (174 samples, 0.20%)</title><rect x="45.6561%" y="453" width="0.2028%" height="15" fill="rgb(231,61,34)" fg:x="39172" fg:w="174"/><text x="45.9061%" y="463.50"></text></g><g><title>std::collections::hash::map::OccupiedEntry&lt;K,V&gt;::into_mut (85 samples, 0.10%)</title><rect x="45.7598%" y="437" width="0.0991%" height="15" fill="rgb(235,75,3)" fg:x="39261" fg:w="85"/><text x="46.0098%" y="447.50"></text></g><g><title>hashbrown::rustc_entry::RustcOccupiedEntry&lt;K,V,A&gt;::into_mut (45 samples, 0.05%)</title><rect x="45.8064%" y="421" width="0.0524%" height="15" fill="rgb(220,106,47)" fg:x="39301" fg:w="45"/><text x="46.0564%" y="431.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_mut (35 samples, 0.04%)</title><rect x="45.8181%" y="405" width="0.0408%" height="15" fill="rgb(210,196,33)" fg:x="39311" fg:w="35"/><text x="46.0681%" y="415.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ptr (26 samples, 0.03%)</title><rect x="45.8286%" y="389" width="0.0303%" height="15" fill="rgb(229,154,42)" fg:x="39320" fg:w="26"/><text x="46.0786%" y="399.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (11 samples, 0.01%)</title><rect x="45.8461%" y="373" width="0.0128%" height="15" fill="rgb(228,114,26)" fg:x="39335" fg:w="11"/><text x="46.0961%" y="383.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (26 samples, 0.03%)</title><rect x="46.1083%" y="325" width="0.0303%" height="15" fill="rgb(208,144,1)" fg:x="39560" fg:w="26"/><text x="46.3583%" y="335.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (94 samples, 0.11%)</title><rect x="46.0325%" y="341" width="0.1096%" height="15" fill="rgb(239,112,37)" fg:x="39495" fg:w="94"/><text x="46.2825%" y="351.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (60 samples, 0.07%)</title><rect x="46.4183%" y="325" width="0.0699%" height="15" fill="rgb(210,96,50)" fg:x="39826" fg:w="60"/><text x="46.6683%" y="335.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::finish (425 samples, 0.50%)</title><rect x="45.9952%" y="389" width="0.4953%" height="15" fill="rgb(222,178,2)" fg:x="39463" fg:w="425"/><text x="46.2452%" y="399.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (425 samples, 0.50%)</title><rect x="45.9952%" y="373" width="0.4953%" height="15" fill="rgb(226,74,18)" fg:x="39463" fg:w="425"/><text x="46.2452%" y="383.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (425 samples, 0.50%)</title><rect x="45.9952%" y="357" width="0.4953%" height="15" fill="rgb(225,67,54)" fg:x="39463" fg:w="425"/><text x="46.2452%" y="367.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (299 samples, 0.35%)</title><rect x="46.1421%" y="341" width="0.3485%" height="15" fill="rgb(251,92,32)" fg:x="39589" fg:w="299"/><text x="46.3921%" y="351.50"></text></g><g><title>__memcpy_avx_unaligned_erms (59 samples, 0.07%)</title><rect x="46.5069%" y="373" width="0.0688%" height="15" fill="rgb(228,149,22)" fg:x="39902" fg:w="59"/><text x="46.7569%" y="383.50"></text></g><g><title>__memcpy_avx_unaligned_erms (74 samples, 0.09%)</title><rect x="46.5803%" y="357" width="0.0862%" height="15" fill="rgb(243,54,13)" fg:x="39965" fg:w="74"/><text x="46.8303%" y="367.50"></text></g><g><title>__memcpy_avx_unaligned_erms (76 samples, 0.09%)</title><rect x="46.6946%" y="341" width="0.0886%" height="15" fill="rgb(243,180,28)" fg:x="40063" fg:w="76"/><text x="46.9446%" y="351.50"></text></g><g><title>_init (9 samples, 0.01%)</title><rect x="46.7831%" y="341" width="0.0105%" height="15" fill="rgb(208,167,24)" fg:x="40139" fg:w="9"/><text x="47.0331%" y="351.50"></text></g><g><title>&lt;std::collections::hash::map::RandomState as core::hash::BuildHasher&gt;::build_hasher (281 samples, 0.33%)</title><rect x="46.4906%" y="389" width="0.3275%" height="15" fill="rgb(245,73,45)" fg:x="39888" fg:w="281"/><text x="46.7406%" y="399.50"></text></g><g><title>core::hash::sip::SipHasher13::new_with_keys (204 samples, 0.24%)</title><rect x="46.5803%" y="373" width="0.2378%" height="15" fill="rgb(237,203,48)" fg:x="39965" fg:w="204"/><text x="46.8303%" y="383.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::new_with_keys (127 samples, 0.15%)</title><rect x="46.6701%" y="357" width="0.1480%" height="15" fill="rgb(211,197,16)" fg:x="40042" fg:w="127"/><text x="46.9201%" y="367.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::reset (21 samples, 0.02%)</title><rect x="46.7936%" y="341" width="0.0245%" height="15" fill="rgb(243,99,51)" fg:x="40148" fg:w="21"/><text x="47.0436%" y="351.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (35 samples, 0.04%)</title><rect x="46.9859%" y="277" width="0.0408%" height="15" fill="rgb(215,123,29)" fg:x="40313" fg:w="35"/><text x="47.2359%" y="287.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (98 samples, 0.11%)</title><rect x="46.9195%" y="293" width="0.1142%" height="15" fill="rgb(239,186,37)" fg:x="40256" fg:w="98"/><text x="47.1695%" y="303.50"></text></g><g><title>core::hash::sip::u8to64_le (32 samples, 0.04%)</title><rect x="47.0337%" y="293" width="0.0373%" height="15" fill="rgb(252,136,39)" fg:x="40354" fg:w="32"/><text x="47.2837%" y="303.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (13 samples, 0.02%)</title><rect x="47.0710%" y="293" width="0.0152%" height="15" fill="rgb(223,213,32)" fg:x="40386" fg:w="13"/><text x="47.3210%" y="303.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (232 samples, 0.27%)</title><rect x="46.8286%" y="341" width="0.2704%" height="15" fill="rgb(233,115,5)" fg:x="40178" fg:w="232"/><text x="47.0786%" y="351.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (228 samples, 0.27%)</title><rect x="46.8333%" y="325" width="0.2657%" height="15" fill="rgb(207,226,44)" fg:x="40182" fg:w="228"/><text x="47.0833%" y="335.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (228 samples, 0.27%)</title><rect x="46.8333%" y="309" width="0.2657%" height="15" fill="rgb(208,126,0)" fg:x="40182" fg:w="228"/><text x="47.0833%" y="319.50"></text></g><g><title>hashbrown::map::make_hash (983 samples, 1.15%)</title><rect x="45.9568%" y="421" width="1.1457%" height="15" fill="rgb(244,66,21)" fg:x="39430" fg:w="983"/><text x="46.2068%" y="431.50"></text></g><g><title>core::hash::BuildHasher::hash_one (975 samples, 1.14%)</title><rect x="45.9661%" y="405" width="1.1364%" height="15" fill="rgb(222,97,12)" fg:x="39438" fg:w="975"/><text x="46.2161%" y="415.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (244 samples, 0.28%)</title><rect x="46.8181%" y="389" width="0.2844%" height="15" fill="rgb(219,213,19)" fg:x="40169" fg:w="244"/><text x="47.0681%" y="399.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for usize&gt;::hash (241 samples, 0.28%)</title><rect x="46.8216%" y="373" width="0.2809%" height="15" fill="rgb(252,169,30)" fg:x="40172" fg:w="241"/><text x="47.0716%" y="383.50"></text></g><g><title>core::hash::Hasher::write_usize (235 samples, 0.27%)</title><rect x="46.8286%" y="357" width="0.2739%" height="15" fill="rgb(206,32,51)" fg:x="40178" fg:w="235"/><text x="47.0786%" y="367.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (11 samples, 0.01%)</title><rect x="47.1783%" y="373" width="0.0128%" height="15" fill="rgb(250,172,42)" fg:x="40478" fg:w="11"/><text x="47.4283%" y="383.50"></text></g><g><title>core::num::&lt;impl isize&gt;::wrapping_neg (11 samples, 0.01%)</title><rect x="47.1783%" y="357" width="0.0128%" height="15" fill="rgb(209,34,43)" fg:x="40478" fg:w="11"/><text x="47.4283%" y="367.50"></text></g><g><title>core::num::&lt;impl isize&gt;::wrapping_sub (11 samples, 0.01%)</title><rect x="47.1783%" y="341" width="0.0128%" height="15" fill="rgb(223,11,35)" fg:x="40478" fg:w="11"/><text x="47.4283%" y="351.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::from_base_index (31 samples, 0.04%)</title><rect x="47.1561%" y="389" width="0.0361%" height="15" fill="rgb(251,219,26)" fg:x="40459" fg:w="31"/><text x="47.4061%" y="399.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::bucket (33 samples, 0.04%)</title><rect x="47.1561%" y="405" width="0.0385%" height="15" fill="rgb(231,119,3)" fg:x="40459" fg:w="33"/><text x="47.4061%" y="415.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (37 samples, 0.04%)</title><rect x="47.1946%" y="405" width="0.0431%" height="15" fill="rgb(216,97,11)" fg:x="40492" fg:w="37"/><text x="47.4446%" y="415.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMask as core::iter::traits::collect::IntoIterator&gt;::into_iter (30 samples, 0.03%)</title><rect x="47.4463%" y="389" width="0.0350%" height="15" fill="rgb(223,59,9)" fg:x="40708" fg:w="30"/><text x="47.6963%" y="399.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::ops::try_trait::Try&gt;::branch (15 samples, 0.02%)</title><rect x="47.5372%" y="373" width="0.0175%" height="15" fill="rgb(233,93,31)" fg:x="40786" fg:w="15"/><text x="47.7872%" y="383.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (17 samples, 0.02%)</title><rect x="47.6002%" y="357" width="0.0198%" height="15" fill="rgb(239,81,33)" fg:x="40840" fg:w="17"/><text x="47.8502%" y="367.50"></text></g><g><title>core::num::nonzero::NonZeroU16::new (43 samples, 0.05%)</title><rect x="47.6200%" y="357" width="0.0501%" height="15" fill="rgb(213,120,34)" fg:x="40857" fg:w="43"/><text x="47.8700%" y="367.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (141 samples, 0.16%)</title><rect x="47.5547%" y="373" width="0.1643%" height="15" fill="rgb(243,49,53)" fg:x="40801" fg:w="141"/><text x="47.8047%" y="383.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::nonzero_trailing_zeros (42 samples, 0.05%)</title><rect x="47.6701%" y="357" width="0.0490%" height="15" fill="rgb(247,216,33)" fg:x="40900" fg:w="42"/><text x="47.9201%" y="367.50"></text></g><g><title>core::num::nonzero::NonZeroU16::trailing_zeros (35 samples, 0.04%)</title><rect x="47.6783%" y="341" width="0.0408%" height="15" fill="rgb(226,26,14)" fg:x="40907" fg:w="35"/><text x="47.9283%" y="351.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (209 samples, 0.24%)</title><rect x="47.4813%" y="389" width="0.2436%" height="15" fill="rgb(215,49,53)" fg:x="40738" fg:w="209"/><text x="47.7313%" y="399.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (9 samples, 0.01%)</title><rect x="47.7808%" y="341" width="0.0105%" height="15" fill="rgb(245,162,40)" fg:x="40995" fg:w="9"/><text x="48.0308%" y="351.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ref (39 samples, 0.05%)</title><rect x="47.7482%" y="373" width="0.0455%" height="15" fill="rgb(229,68,17)" fg:x="40967" fg:w="39"/><text x="47.9982%" y="383.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ptr (34 samples, 0.04%)</title><rect x="47.7540%" y="357" width="0.0396%" height="15" fill="rgb(213,182,10)" fg:x="40972" fg:w="34"/><text x="48.0040%" y="367.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (12 samples, 0.01%)</title><rect x="47.8205%" y="341" width="0.0140%" height="15" fill="rgb(245,125,30)" fg:x="41029" fg:w="12"/><text x="48.0705%" y="351.50"></text></g><g><title>core::num::&lt;impl isize&gt;::wrapping_neg (12 samples, 0.01%)</title><rect x="47.8205%" y="325" width="0.0140%" height="15" fill="rgb(232,202,2)" fg:x="41029" fg:w="12"/><text x="48.0705%" y="335.50"></text></g><g><title>core::num::&lt;impl isize&gt;::wrapping_sub (12 samples, 0.01%)</title><rect x="47.8205%" y="309" width="0.0140%" height="15" fill="rgb(237,140,51)" fg:x="41029" fg:w="12"/><text x="48.0705%" y="319.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::from_base_index (36 samples, 0.04%)</title><rect x="47.7948%" y="357" width="0.0420%" height="15" fill="rgb(236,157,25)" fg:x="41007" fg:w="36"/><text x="48.0448%" y="367.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::bucket (42 samples, 0.05%)</title><rect x="47.7937%" y="373" width="0.0490%" height="15" fill="rgb(219,209,0)" fg:x="41006" fg:w="42"/><text x="48.0437%" y="383.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::{{closure}} (152 samples, 0.18%)</title><rect x="47.7249%" y="389" width="0.1772%" height="15" fill="rgb(240,116,54)" fg:x="40947" fg:w="152"/><text x="47.9749%" y="399.50"></text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry::{{closure}} (51 samples, 0.06%)</title><rect x="47.8426%" y="373" width="0.0594%" height="15" fill="rgb(216,10,36)" fg:x="41048" fg:w="51"/><text x="48.0926%" y="383.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq for usize&gt;::eq (25 samples, 0.03%)</title><rect x="47.8729%" y="357" width="0.0291%" height="15" fill="rgb(222,72,44)" fg:x="41074" fg:w="25"/><text x="48.1229%" y="367.50"></text></g><g><title>hashbrown::raw::sse2::Group::load (286 samples, 0.33%)</title><rect x="47.9219%" y="389" width="0.3333%" height="15" fill="rgb(232,159,9)" fg:x="41116" fg:w="286"/><text x="48.1719%" y="399.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (264 samples, 0.31%)</title><rect x="47.9475%" y="373" width="0.3077%" height="15" fill="rgb(210,39,32)" fg:x="41138" fg:w="264"/><text x="48.1975%" y="383.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (11 samples, 0.01%)</title><rect x="48.2424%" y="357" width="0.0128%" height="15" fill="rgb(216,194,45)" fg:x="41391" fg:w="11"/><text x="48.4924%" y="367.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_cmpeq_epi8 (79 samples, 0.09%)</title><rect x="48.3683%" y="373" width="0.0921%" height="15" fill="rgb(218,18,35)" fg:x="41499" fg:w="79"/><text x="48.6183%" y="383.50"></text></g><g><title>core::core_arch::x86::m128iExt::as_i8x16 (25 samples, 0.03%)</title><rect x="48.4312%" y="357" width="0.0291%" height="15" fill="rgb(207,83,51)" fg:x="41553" fg:w="25"/><text x="48.6812%" y="367.50"></text></g><g><title>core::core_arch::simd::i8x16::splat (24 samples, 0.03%)</title><rect x="48.6736%" y="357" width="0.0280%" height="15" fill="rgb(225,63,43)" fg:x="41761" fg:w="24"/><text x="48.9236%" y="367.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (209 samples, 0.24%)</title><rect x="48.4603%" y="373" width="0.2436%" height="15" fill="rgb(207,57,36)" fg:x="41578" fg:w="209"/><text x="48.7103%" y="383.50"></text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (2,561 samples, 2.98%)</title><rect x="45.8682%" y="437" width="2.9849%" height="15" fill="rgb(216,99,33)" fg:x="39354" fg:w="2561"/><text x="46.1182%" y="447.50">has..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (1,502 samples, 1.75%)</title><rect x="47.1025%" y="421" width="1.7506%" height="15" fill="rgb(225,42,16)" fg:x="40413" fg:w="1502"/><text x="47.3525%" y="431.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::find_inner (1,386 samples, 1.62%)</title><rect x="47.2377%" y="405" width="1.6154%" height="15" fill="rgb(220,201,45)" fg:x="40529" fg:w="1386"/><text x="47.4877%" y="415.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (513 samples, 0.60%)</title><rect x="48.2552%" y="389" width="0.5979%" height="15" fill="rgb(225,33,4)" fg:x="41402" fg:w="513"/><text x="48.5052%" y="399.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_set1_epi8 (128 samples, 0.15%)</title><rect x="48.7039%" y="373" width="0.1492%" height="15" fill="rgb(224,33,50)" fg:x="41787" fg:w="128"/><text x="48.9539%" y="383.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_set_epi8 (128 samples, 0.15%)</title><rect x="48.7039%" y="357" width="0.1492%" height="15" fill="rgb(246,198,51)" fg:x="41787" fg:w="128"/><text x="48.9539%" y="367.50"></text></g><g><title>core::core_arch::simd::i8x16::new (22 samples, 0.03%)</title><rect x="48.8275%" y="341" width="0.0256%" height="15" fill="rgb(205,22,4)" fg:x="41893" fg:w="22"/><text x="49.0775%" y="351.50"></text></g><g><title>coldbrew::runtime::Runtime::eval (8,086 samples, 9.42%)</title><rect x="39.4823%" y="469" width="9.4245%" height="15" fill="rgb(206,3,8)" fg:x="33875" fg:w="8086"/><text x="39.7323%" y="479.50">coldbrew::run..</text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::entry (2,615 samples, 3.05%)</title><rect x="45.8589%" y="453" width="3.0479%" height="15" fill="rgb(251,23,15)" fg:x="39346" fg:w="2615"/><text x="46.1089%" y="463.50">std..</text></g><g><title>std::collections::hash::map::map_entry (46 samples, 0.05%)</title><rect x="48.8531%" y="437" width="0.0536%" height="15" fill="rgb(252,88,28)" fg:x="41915" fg:w="46"/><text x="49.1031%" y="447.50"></text></g><g><title>core::ptr::slice_from_raw_parts (19 samples, 0.02%)</title><rect x="50.5140%" y="405" width="0.0221%" height="15" fill="rgb(212,127,14)" fg:x="43340" fg:w="19"/><text x="50.7640%" y="415.50"></text></g><g><title>core::ptr::metadata::from_raw_parts (19 samples, 0.02%)</title><rect x="50.5140%" y="389" width="0.0221%" height="15" fill="rgb(247,145,37)" fg:x="43340" fg:w="19"/><text x="50.7640%" y="399.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (26 samples, 0.03%)</title><rect x="50.5070%" y="437" width="0.0303%" height="15" fill="rgb(209,117,53)" fg:x="43334" fg:w="26"/><text x="50.7570%" y="447.50"></text></g><g><title>core::slice::raw::from_raw_parts (20 samples, 0.02%)</title><rect x="50.5140%" y="421" width="0.0233%" height="15" fill="rgb(212,90,42)" fg:x="43340" fg:w="20"/><text x="50.7640%" y="431.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (52 samples, 0.06%)</title><rect x="50.4953%" y="453" width="0.0606%" height="15" fill="rgb(218,164,37)" fg:x="43324" fg:w="52"/><text x="50.7453%" y="463.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (16 samples, 0.02%)</title><rect x="50.5373%" y="437" width="0.0186%" height="15" fill="rgb(246,65,34)" fg:x="43360" fg:w="16"/><text x="50.7873%" y="447.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (13 samples, 0.02%)</title><rect x="50.5408%" y="421" width="0.0152%" height="15" fill="rgb(231,100,33)" fg:x="43363" fg:w="13"/><text x="50.7908%" y="431.50"></text></g><g><title>&lt;coldbrew::bytecode::OPCode as core::convert::From&lt;u8&gt;&gt;::from (227 samples, 0.26%)</title><rect x="50.5560%" y="453" width="0.2646%" height="15" fill="rgb(228,126,14)" fg:x="43376" fg:w="227"/><text x="50.8060%" y="463.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (87 samples, 0.10%)</title><rect x="51.0548%" y="405" width="0.1014%" height="15" fill="rgb(215,173,21)" fg:x="43804" fg:w="87"/><text x="51.3048%" y="415.50"></text></g><g><title>[unknown] (57 samples, 0.07%)</title><rect x="51.3159%" y="357" width="0.0664%" height="15" fill="rgb(210,6,40)" fg:x="44028" fg:w="57"/><text x="51.5659%" y="367.50"></text></g><g><title>[unknown] (50 samples, 0.06%)</title><rect x="51.3240%" y="341" width="0.0583%" height="15" fill="rgb(212,48,18)" fg:x="44035" fg:w="50"/><text x="51.5740%" y="351.50"></text></g><g><title>[unknown] (50 samples, 0.06%)</title><rect x="51.3240%" y="325" width="0.0583%" height="15" fill="rgb(230,214,11)" fg:x="44035" fg:w="50"/><text x="51.5740%" y="335.50"></text></g><g><title>[unknown] (50 samples, 0.06%)</title><rect x="51.3240%" y="309" width="0.0583%" height="15" fill="rgb(254,105,39)" fg:x="44035" fg:w="50"/><text x="51.5740%" y="319.50"></text></g><g><title>[unknown] (47 samples, 0.05%)</title><rect x="51.3275%" y="293" width="0.0548%" height="15" fill="rgb(245,158,5)" fg:x="44038" fg:w="47"/><text x="51.5775%" y="303.50"></text></g><g><title>[unknown] (42 samples, 0.05%)</title><rect x="51.3334%" y="277" width="0.0490%" height="15" fill="rgb(249,208,11)" fg:x="44043" fg:w="42"/><text x="51.5834%" y="287.50"></text></g><g><title>[unknown] (41 samples, 0.05%)</title><rect x="51.3345%" y="261" width="0.0478%" height="15" fill="rgb(210,39,28)" fg:x="44044" fg:w="41"/><text x="51.5845%" y="271.50"></text></g><g><title>[unknown] (28 samples, 0.03%)</title><rect x="51.3497%" y="245" width="0.0326%" height="15" fill="rgb(211,56,53)" fg:x="44057" fg:w="28"/><text x="51.5997%" y="255.50"></text></g><g><title>[unknown] (25 samples, 0.03%)</title><rect x="51.3532%" y="229" width="0.0291%" height="15" fill="rgb(226,201,30)" fg:x="44060" fg:w="25"/><text x="51.6032%" y="239.50"></text></g><g><title>[unknown] (23 samples, 0.03%)</title><rect x="51.3555%" y="213" width="0.0268%" height="15" fill="rgb(239,101,34)" fg:x="44062" fg:w="23"/><text x="51.6055%" y="223.50"></text></g><g><title>[unknown] (11 samples, 0.01%)</title><rect x="51.3695%" y="197" width="0.0128%" height="15" fill="rgb(226,209,5)" fg:x="44074" fg:w="11"/><text x="51.6195%" y="207.50"></text></g><g><title>_int_malloc (118 samples, 0.14%)</title><rect x="51.2553%" y="373" width="0.1375%" height="15" fill="rgb(250,105,47)" fg:x="43976" fg:w="118"/><text x="51.5053%" y="383.50"></text></g><g><title>checked_request2size (38 samples, 0.04%)</title><rect x="51.3940%" y="373" width="0.0443%" height="15" fill="rgb(230,72,3)" fg:x="44095" fg:w="38"/><text x="51.6440%" y="383.50"></text></g><g><title>__GI___libc_malloc (275 samples, 0.32%)</title><rect x="51.1632%" y="389" width="0.3205%" height="15" fill="rgb(232,218,39)" fg:x="43897" fg:w="275"/><text x="51.4132%" y="399.50"></text></g><g><title>tcache_get (39 samples, 0.05%)</title><rect x="51.4383%" y="373" width="0.0455%" height="15" fill="rgb(248,166,6)" fg:x="44133" fg:w="39"/><text x="51.6883%" y="383.50"></text></g><g><title>__rdl_alloc (39 samples, 0.05%)</title><rect x="51.4837%" y="389" width="0.0455%" height="15" fill="rgb(247,89,20)" fg:x="44172" fg:w="39"/><text x="51.7337%" y="399.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (39 samples, 0.05%)</title><rect x="51.4837%" y="373" width="0.0455%" height="15" fill="rgb(248,130,54)" fg:x="44172" fg:w="39"/><text x="51.7337%" y="383.50"></text></g><g><title>core::alloc::layout::Layout::align (20 samples, 0.02%)</title><rect x="51.5385%" y="389" width="0.0233%" height="15" fill="rgb(234,196,4)" fg:x="44219" fg:w="20"/><text x="51.7885%" y="399.50"></text></g><g><title>core::alloc::layout::Layout::size (16 samples, 0.02%)</title><rect x="51.5618%" y="389" width="0.0186%" height="15" fill="rgb(250,143,31)" fg:x="44239" fg:w="16"/><text x="51.8118%" y="399.50"></text></g><g><title>alloc::alloc::alloc (371 samples, 0.43%)</title><rect x="51.1632%" y="405" width="0.4324%" height="15" fill="rgb(211,110,34)" fg:x="43897" fg:w="371"/><text x="51.4132%" y="415.50"></text></g><g><title>core::ptr::read_volatile (13 samples, 0.02%)</title><rect x="51.5805%" y="389" width="0.0152%" height="15" fill="rgb(215,124,48)" fg:x="44255" fg:w="13"/><text x="51.8305%" y="399.50"></text></g><g><title>core::alloc::layout::Layout::size (16 samples, 0.02%)</title><rect x="51.5956%" y="405" width="0.0186%" height="15" fill="rgb(216,46,13)" fg:x="44268" fg:w="16"/><text x="51.8456%" y="415.50"></text></g><g><title>core::option::Option&lt;T&gt;::ok_or (29 samples, 0.03%)</title><rect x="51.6143%" y="405" width="0.0338%" height="15" fill="rgb(205,184,25)" fg:x="44284" fg:w="29"/><text x="51.8643%" y="415.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::new (68 samples, 0.08%)</title><rect x="51.6481%" y="405" width="0.0793%" height="15" fill="rgb(228,1,10)" fg:x="44313" fg:w="68"/><text x="51.8981%" y="415.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::is_null (38 samples, 0.04%)</title><rect x="51.6830%" y="389" width="0.0443%" height="15" fill="rgb(213,116,27)" fg:x="44343" fg:w="38"/><text x="51.9330%" y="399.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::is_null::runtime_impl (22 samples, 0.03%)</title><rect x="51.7017%" y="373" width="0.0256%" height="15" fill="rgb(241,95,50)" fg:x="44359" fg:w="22"/><text x="51.9517%" y="383.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (805 samples, 0.94%)</title><rect x="50.8741%" y="437" width="0.9383%" height="15" fill="rgb(238,48,32)" fg:x="43649" fg:w="805"/><text x="51.1241%" y="447.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (789 samples, 0.92%)</title><rect x="50.8928%" y="421" width="0.9196%" height="15" fill="rgb(235,113,49)" fg:x="43665" fg:w="789"/><text x="51.1428%" y="431.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;[T]&gt;::slice_from_raw_parts (73 samples, 0.09%)</title><rect x="51.7273%" y="405" width="0.0851%" height="15" fill="rgb(205,127,43)" fg:x="44381" fg:w="73"/><text x="51.9773%" y="415.50"></text></g><g><title>core::ptr::slice_from_raw_parts_mut (58 samples, 0.07%)</title><rect x="51.7448%" y="389" width="0.0676%" height="15" fill="rgb(250,162,2)" fg:x="44396" fg:w="58"/><text x="51.9948%" y="399.50"></text></g><g><title>core::ptr::metadata::from_raw_parts_mut (58 samples, 0.07%)</title><rect x="51.7448%" y="373" width="0.0676%" height="15" fill="rgb(220,13,41)" fg:x="44396" fg:w="58"/><text x="51.9948%" y="383.50"></text></g><g><title>core::alloc::layout::Layout::from_size_align_unchecked (17 samples, 0.02%)</title><rect x="51.8124%" y="437" width="0.0198%" height="15" fill="rgb(249,221,25)" fg:x="44454" fg:w="17"/><text x="52.0624%" y="447.50"></text></g><g><title>alloc::alloc::exchange_malloc (878 samples, 1.02%)</title><rect x="50.8299%" y="453" width="1.0233%" height="15" fill="rgb(215,208,19)" fg:x="43611" fg:w="878"/><text x="51.0799%" y="463.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;[T]&gt;::as_mut_ptr (18 samples, 0.02%)</title><rect x="51.8322%" y="437" width="0.0210%" height="15" fill="rgb(236,175,2)" fg:x="44471" fg:w="18"/><text x="52.0822%" y="447.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;[T]&gt;::as_non_null_ptr (17 samples, 0.02%)</title><rect x="51.8334%" y="421" width="0.0198%" height="15" fill="rgb(241,52,2)" fg:x="44472" fg:w="17"/><text x="52.0834%" y="431.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::new_unchecked (16 samples, 0.02%)</title><rect x="51.8345%" y="405" width="0.0186%" height="15" fill="rgb(248,140,14)" fg:x="44473" fg:w="16"/><text x="52.0845%" y="415.50"></text></g><g><title>&lt;core::ptr::unique::Unique&lt;T&gt; as core::convert::From&lt;&amp;mut T&gt;&gt;::from (10 samples, 0.01%)</title><rect x="51.9744%" y="389" width="0.0117%" height="15" fill="rgb(253,22,42)" fg:x="44593" fg:w="10"/><text x="52.2244%" y="399.50"></text></g><g><title>&lt;core::ptr::unique::Unique&lt;T&gt; as core::convert::From&lt;core::ptr::non_null::NonNull&lt;T&gt;&gt;&gt;::from (10 samples, 0.01%)</title><rect x="51.9744%" y="373" width="0.0117%" height="15" fill="rgb(234,61,47)" fg:x="44593" fg:w="10"/><text x="52.2244%" y="383.50"></text></g><g><title>alloc::boxed::Box&lt;T,A&gt;::into_unique (101 samples, 0.12%)</title><rect x="51.9313%" y="405" width="0.1177%" height="15" fill="rgb(208,226,15)" fg:x="44556" fg:w="101"/><text x="52.1813%" y="415.50"></text></g><g><title>alloc::boxed::Box&lt;T,A&gt;::leak (54 samples, 0.06%)</title><rect x="51.9861%" y="389" width="0.0629%" height="15" fill="rgb(217,221,4)" fg:x="44603" fg:w="54"/><text x="52.2361%" y="399.50"></text></g><g><title>alloc::boxed::Box&lt;T,A&gt;::into_raw_with_allocator (130 samples, 0.15%)</title><rect x="51.9173%" y="421" width="0.1515%" height="15" fill="rgb(212,174,34)" fg:x="44544" fg:w="130"/><text x="52.1673%" y="431.50"></text></g><g><title>core::ptr::unique::Unique&lt;T&gt;::as_ptr (17 samples, 0.02%)</title><rect x="52.0490%" y="405" width="0.0198%" height="15" fill="rgb(253,83,4)" fg:x="44657" fg:w="17"/><text x="52.2990%" y="415.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::into_vec (231 samples, 0.27%)</title><rect x="51.8532%" y="453" width="0.2692%" height="15" fill="rgb(250,195,49)" fg:x="44489" fg:w="231"/><text x="52.1032%" y="463.50"></text></g><g><title>alloc::slice::hack::into_vec (220 samples, 0.26%)</title><rect x="51.8660%" y="437" width="0.2564%" height="15" fill="rgb(241,192,25)" fg:x="44500" fg:w="220"/><text x="52.1160%" y="447.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::from_raw_parts_in (46 samples, 0.05%)</title><rect x="52.0688%" y="421" width="0.0536%" height="15" fill="rgb(208,124,10)" fg:x="44674" fg:w="46"/><text x="52.3188%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::from_raw_parts_in (23 samples, 0.03%)</title><rect x="52.0956%" y="405" width="0.0268%" height="15" fill="rgb(222,33,0)" fg:x="44697" fg:w="23"/><text x="52.3456%" y="415.50"></text></g><g><title>__memcpy_avx_unaligned_erms (426 samples, 0.50%)</title><rect x="52.1912%" y="437" width="0.4965%" height="15" fill="rgb(234,209,28)" fg:x="44779" fg:w="426"/><text x="52.4412%" y="447.50"></text></g><g><title>_init (18 samples, 0.02%)</title><rect x="52.6877%" y="437" width="0.0210%" height="15" fill="rgb(224,11,23)" fg:x="45205" fg:w="18"/><text x="52.9377%" y="447.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_ptr (16 samples, 0.02%)</title><rect x="52.7087%" y="437" width="0.0186%" height="15" fill="rgb(232,99,1)" fg:x="45223" fg:w="16"/><text x="52.9587%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (16 samples, 0.02%)</title><rect x="52.7087%" y="421" width="0.0186%" height="15" fill="rgb(237,95,45)" fg:x="45223" fg:w="16"/><text x="52.9587%" y="431.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::len (20 samples, 0.02%)</title><rect x="52.7273%" y="437" width="0.0233%" height="15" fill="rgb(208,109,11)" fg:x="45239" fg:w="20"/><text x="52.9773%" y="447.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::add (26 samples, 0.03%)</title><rect x="52.7506%" y="437" width="0.0303%" height="15" fill="rgb(216,190,48)" fg:x="45259" fg:w="26"/><text x="53.0006%" y="447.50"></text></g><g><title>__memcpy_avx_unaligned_erms (142 samples, 0.17%)</title><rect x="52.7810%" y="421" width="0.1655%" height="15" fill="rgb(251,171,36)" fg:x="45285" fg:w="142"/><text x="53.0310%" y="431.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::pop (731 samples, 0.85%)</title><rect x="52.1224%" y="453" width="0.8520%" height="15" fill="rgb(230,62,22)" fg:x="44720" fg:w="731"/><text x="52.3724%" y="463.50"></text></g><g><title>core::ptr::read (166 samples, 0.19%)</title><rect x="52.7810%" y="437" width="0.1935%" height="15" fill="rgb(225,114,35)" fg:x="45285" fg:w="166"/><text x="53.0310%" y="447.50"></text></g><g><title>_init (24 samples, 0.03%)</title><rect x="52.9465%" y="421" width="0.0280%" height="15" fill="rgb(215,118,42)" fg:x="45427" fg:w="24"/><text x="53.1965%" y="431.50"></text></g><g><title>__memcpy_avx_unaligned_erms (313 samples, 0.36%)</title><rect x="53.1003%" y="437" width="0.3648%" height="15" fill="rgb(243,119,21)" fg:x="45559" fg:w="313"/><text x="53.3503%" y="447.50"></text></g><g><title>_init (26 samples, 0.03%)</title><rect x="53.4651%" y="437" width="0.0303%" height="15" fill="rgb(252,177,53)" fg:x="45872" fg:w="26"/><text x="53.7151%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::capacity (75 samples, 0.09%)</title><rect x="53.4954%" y="437" width="0.0874%" height="15" fill="rgb(237,209,29)" fg:x="45898" fg:w="75"/><text x="53.7454%" y="447.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_mut_ptr (26 samples, 0.03%)</title><rect x="53.5828%" y="437" width="0.0303%" height="15" fill="rgb(212,65,23)" fg:x="45973" fg:w="26"/><text x="53.8328%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (26 samples, 0.03%)</title><rect x="53.5828%" y="421" width="0.0303%" height="15" fill="rgb(230,222,46)" fg:x="45973" fg:w="26"/><text x="53.8328%" y="431.50"></text></g><g><title>core::ptr::unique::Unique&lt;T&gt;::as_ptr (24 samples, 0.03%)</title><rect x="53.5852%" y="405" width="0.0280%" height="15" fill="rgb(215,135,32)" fg:x="45975" fg:w="24"/><text x="53.8352%" y="415.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (23 samples, 0.03%)</title><rect x="53.6166%" y="437" width="0.0268%" height="15" fill="rgb(246,101,22)" fg:x="46002" fg:w="23"/><text x="53.8666%" y="447.50"></text></g><g><title>__memcpy_avx_unaligned_erms (456 samples, 0.53%)</title><rect x="53.6434%" y="421" width="0.5315%" height="15" fill="rgb(206,107,13)" fg:x="46025" fg:w="456"/><text x="53.8934%" y="431.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (1,055 samples, 1.23%)</title><rect x="52.9744%" y="453" width="1.2296%" height="15" fill="rgb(250,100,44)" fg:x="45451" fg:w="1055"/><text x="53.2244%" y="463.50"></text></g><g><title>core::ptr::write (481 samples, 0.56%)</title><rect x="53.6434%" y="437" width="0.5606%" height="15" fill="rgb(231,147,38)" fg:x="46025" fg:w="481"/><text x="53.8934%" y="447.50"></text></g><g><title>_init (25 samples, 0.03%)</title><rect x="54.1749%" y="421" width="0.0291%" height="15" fill="rgb(229,8,40)" fg:x="46481" fg:w="25"/><text x="54.4249%" y="431.50"></text></g><g><title>coldbrew::runtime::Runtime::encode_arg (15 samples, 0.02%)</title><rect x="54.2041%" y="453" width="0.0175%" height="15" fill="rgb(221,135,30)" fg:x="46506" fg:w="15"/><text x="54.4541%" y="463.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_ptr (100 samples, 0.12%)</title><rect x="54.6516%" y="405" width="0.1166%" height="15" fill="rgb(249,193,18)" fg:x="46890" fg:w="100"/><text x="54.9016%" y="415.50"></text></g><g><title>core::ptr::slice_from_raw_parts (118 samples, 0.14%)</title><rect x="54.7682%" y="389" width="0.1375%" height="15" fill="rgb(209,133,39)" fg:x="46990" fg:w="118"/><text x="55.0182%" y="399.50"></text></g><g><title>core::ptr::metadata::from_raw_parts (117 samples, 0.14%)</title><rect x="54.7693%" y="373" width="0.1364%" height="15" fill="rgb(232,100,14)" fg:x="46991" fg:w="117"/><text x="55.0193%" y="383.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (219 samples, 0.26%)</title><rect x="54.6516%" y="421" width="0.2553%" height="15" fill="rgb(224,185,1)" fg:x="46890" fg:w="219"/><text x="54.9016%" y="431.50"></text></g><g><title>core::slice::raw::from_raw_parts (119 samples, 0.14%)</title><rect x="54.7682%" y="405" width="0.1387%" height="15" fill="rgb(223,139,8)" fg:x="46990" fg:w="119"/><text x="55.0182%" y="415.50"></text></g><g><title>core::option::Option&lt;T&gt;::expect (142 samples, 0.17%)</title><rect x="54.9069%" y="405" width="0.1655%" height="15" fill="rgb(232,213,38)" fg:x="47109" fg:w="142"/><text x="55.1569%" y="415.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (276 samples, 0.32%)</title><rect x="57.0654%" y="261" width="0.3217%" height="15" fill="rgb(207,94,22)" fg:x="48961" fg:w="276"/><text x="57.3154%" y="271.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (1,082 samples, 1.26%)</title><rect x="56.1820%" y="277" width="1.2611%" height="15" fill="rgb(219,183,54)" fg:x="48203" fg:w="1082"/><text x="56.4320%" y="287.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (48 samples, 0.06%)</title><rect x="57.3871%" y="261" width="0.0559%" height="15" fill="rgb(216,185,54)" fg:x="49237" fg:w="48"/><text x="57.6371%" y="271.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (773 samples, 0.90%)</title><rect x="59.7741%" y="261" width="0.9010%" height="15" fill="rgb(254,217,39)" fg:x="51285" fg:w="773"/><text x="60.0241%" y="271.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::finish (4,175 samples, 4.87%)</title><rect x="55.8684%" y="325" width="4.8661%" height="15" fill="rgb(240,178,23)" fg:x="47934" fg:w="4175"/><text x="56.1184%" y="335.50">&lt;std::..</text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (4,175 samples, 4.87%)</title><rect x="55.8684%" y="309" width="4.8661%" height="15" fill="rgb(218,11,47)" fg:x="47934" fg:w="4175"/><text x="56.1184%" y="319.50">&lt;core:..</text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (4,175 samples, 4.87%)</title><rect x="55.8684%" y="293" width="4.8661%" height="15" fill="rgb(218,51,51)" fg:x="47934" fg:w="4175"/><text x="56.1184%" y="303.50">&lt;core:..</text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (2,824 samples, 3.29%)</title><rect x="57.4431%" y="277" width="3.2915%" height="15" fill="rgb(238,126,27)" fg:x="49285" fg:w="2824"/><text x="57.6931%" y="287.50">&lt;co..</text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (51 samples, 0.06%)</title><rect x="60.6751%" y="261" width="0.0594%" height="15" fill="rgb(249,202,22)" fg:x="52058" fg:w="51"/><text x="60.9251%" y="271.50"></text></g><g><title>__memcpy_avx_unaligned_erms (955 samples, 1.11%)</title><rect x="60.8394%" y="309" width="1.1131%" height="15" fill="rgb(254,195,49)" fg:x="52199" fg:w="955"/><text x="61.0894%" y="319.50"></text></g><g><title>_init (65 samples, 0.08%)</title><rect x="61.9525%" y="309" width="0.0758%" height="15" fill="rgb(208,123,14)" fg:x="53154" fg:w="65"/><text x="62.2025%" y="319.50"></text></g><g><title>__memcpy_avx_unaligned_erms (863 samples, 1.01%)</title><rect x="62.0283%" y="293" width="1.0059%" height="15" fill="rgb(224,200,8)" fg:x="53219" fg:w="863"/><text x="62.2783%" y="303.50"></text></g><g><title>_init (49 samples, 0.06%)</title><rect x="63.0341%" y="293" width="0.0571%" height="15" fill="rgb(217,61,36)" fg:x="54082" fg:w="49"/><text x="63.2841%" y="303.50"></text></g><g><title>__memcpy_avx_unaligned_erms (1,436 samples, 1.67%)</title><rect x="63.3267%" y="277" width="1.6737%" height="15" fill="rgb(206,35,45)" fg:x="54333" fg:w="1436"/><text x="63.5767%" y="287.50"></text></g><g><title>_init (42 samples, 0.05%)</title><rect x="65.0003%" y="277" width="0.0490%" height="15" fill="rgb(217,65,33)" fg:x="55769" fg:w="42"/><text x="65.2503%" y="287.50"></text></g><g><title>&lt;std::collections::hash::map::RandomState as core::hash::BuildHasher&gt;::build_hasher (3,890 samples, 4.53%)</title><rect x="60.7345%" y="325" width="4.5339%" height="15" fill="rgb(222,158,48)" fg:x="52109" fg:w="3890"/><text x="60.9845%" y="335.50">&lt;std:..</text></g><g><title>core::hash::sip::SipHasher13::new_with_keys (2,780 samples, 3.24%)</title><rect x="62.0283%" y="309" width="3.2402%" height="15" fill="rgb(254,2,54)" fg:x="53219" fg:w="2780"/><text x="62.2783%" y="319.50">cor..</text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::new_with_keys (1,868 samples, 2.18%)</title><rect x="63.0912%" y="293" width="2.1772%" height="15" fill="rgb(250,143,38)" fg:x="54131" fg:w="1868"/><text x="63.3412%" y="303.50">c..</text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::reset (188 samples, 0.22%)</title><rect x="65.0493%" y="277" width="0.2191%" height="15" fill="rgb(248,25,0)" fg:x="55811" fg:w="188"/><text x="65.2993%" y="287.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (279 samples, 0.33%)</title><rect x="67.2964%" y="213" width="0.3252%" height="15" fill="rgb(206,152,27)" fg:x="57739" fg:w="279"/><text x="67.5464%" y="223.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (1,118 samples, 1.30%)</title><rect x="66.3850%" y="229" width="1.3031%" height="15" fill="rgb(240,77,30)" fg:x="56957" fg:w="1118"/><text x="66.6350%" y="239.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (57 samples, 0.07%)</title><rect x="67.6216%" y="213" width="0.0664%" height="15" fill="rgb(231,5,3)" fg:x="58018" fg:w="57"/><text x="67.8716%" y="223.50"></text></g><g><title>core::hash::sip::u8to64_le (309 samples, 0.36%)</title><rect x="67.6892%" y="229" width="0.3601%" height="15" fill="rgb(207,226,32)" fg:x="58076" fg:w="309"/><text x="67.9392%" y="239.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (57 samples, 0.07%)</title><rect x="67.9829%" y="213" width="0.0664%" height="15" fill="rgb(222,207,47)" fg:x="58328" fg:w="57"/><text x="68.2329%" y="223.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (119 samples, 0.14%)</title><rect x="68.0494%" y="229" width="0.1387%" height="15" fill="rgb(229,115,45)" fg:x="58385" fg:w="119"/><text x="68.2994%" y="239.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::add (59 samples, 0.07%)</title><rect x="68.1881%" y="229" width="0.0688%" height="15" fill="rgb(224,191,6)" fg:x="58504" fg:w="59"/><text x="68.4381%" y="239.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (2,504 samples, 2.92%)</title><rect x="65.3931%" y="277" width="2.9185%" height="15" fill="rgb(230,227,24)" fg:x="56106" fg:w="2504"/><text x="65.6431%" y="287.50">&lt;s..</text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (2,442 samples, 2.85%)</title><rect x="65.4654%" y="261" width="2.8462%" height="15" fill="rgb(228,80,19)" fg:x="56168" fg:w="2442"/><text x="65.7154%" y="271.50">&lt;c..</text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (2,442 samples, 2.85%)</title><rect x="65.4654%" y="245" width="2.8462%" height="15" fill="rgb(247,229,0)" fg:x="56168" fg:w="2442"/><text x="65.7154%" y="255.50">&lt;c..</text></g><g><title>core::slice::&lt;impl [T]&gt;::as_ptr (47 samples, 0.05%)</title><rect x="68.2568%" y="229" width="0.0548%" height="15" fill="rgb(237,194,15)" fg:x="58563" fg:w="47"/><text x="68.5068%" y="239.50"></text></g><g><title>hashbrown::map::make_hash (11,043 samples, 12.87%)</title><rect x="55.5048%" y="357" width="12.8709%" height="15" fill="rgb(219,203,20)" fg:x="47622" fg:w="11043"/><text x="55.7548%" y="367.50">hashbrown::map::mak..</text></g><g><title>core::hash::BuildHasher::hash_one (11,001 samples, 12.82%)</title><rect x="55.5537%" y="341" width="12.8220%" height="15" fill="rgb(234,128,8)" fg:x="47664" fg:w="11001"/><text x="55.8037%" y="351.50">core::hash::BuildHa..</text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (2,665 samples, 3.11%)</title><rect x="65.2696%" y="325" width="3.1061%" height="15" fill="rgb(248,202,8)" fg:x="56000" fg:w="2665"/><text x="65.5196%" y="335.50">cor..</text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for usize&gt;::hash (2,611 samples, 3.04%)</title><rect x="65.3325%" y="309" width="3.0432%" height="15" fill="rgb(206,104,37)" fg:x="56054" fg:w="2611"/><text x="65.5825%" y="319.50">cor..</text></g><g><title>core::hash::Hasher::write_usize (2,559 samples, 2.98%)</title><rect x="65.3931%" y="293" width="2.9826%" height="15" fill="rgb(223,8,27)" fg:x="56106" fg:w="2559"/><text x="65.6431%" y="303.50">cor..</text></g><g><title>core::num::&lt;impl usize&gt;::to_ne_bytes (55 samples, 0.06%)</title><rect x="68.3116%" y="277" width="0.0641%" height="15" fill="rgb(216,217,28)" fg:x="58610" fg:w="55"/><text x="68.5616%" y="287.50"></text></g><g><title>core::num::&lt;impl isize&gt;::wrapping_neg (57 samples, 0.07%)</title><rect x="68.8011%" y="293" width="0.0664%" height="15" fill="rgb(249,199,1)" fg:x="59030" fg:w="57"/><text x="69.0511%" y="303.50"></text></g><g><title>core::num::&lt;impl isize&gt;::wrapping_sub (57 samples, 0.07%)</title><rect x="68.8011%" y="277" width="0.0664%" height="15" fill="rgb(240,85,17)" fg:x="59030" fg:w="57"/><text x="69.0511%" y="287.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ref (289 samples, 0.34%)</title><rect x="68.6554%" y="341" width="0.3368%" height="15" fill="rgb(206,108,45)" fg:x="58905" fg:w="289"/><text x="68.9054%" y="351.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ptr (289 samples, 0.34%)</title><rect x="68.6554%" y="325" width="0.3368%" height="15" fill="rgb(245,210,41)" fg:x="58905" fg:w="289"/><text x="68.9054%" y="335.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (164 samples, 0.19%)</title><rect x="68.8011%" y="309" width="0.1911%" height="15" fill="rgb(206,13,37)" fg:x="59030" fg:w="164"/><text x="69.0511%" y="319.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (107 samples, 0.12%)</title><rect x="68.8676%" y="293" width="0.1247%" height="15" fill="rgb(250,61,18)" fg:x="59087" fg:w="107"/><text x="69.1176%" y="303.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (106 samples, 0.12%)</title><rect x="69.6834%" y="293" width="0.1235%" height="15" fill="rgb(235,172,48)" fg:x="59787" fg:w="106"/><text x="69.9334%" y="303.50"></text></g><g><title>core::num::&lt;impl isize&gt;::wrapping_neg (106 samples, 0.12%)</title><rect x="69.6834%" y="277" width="0.1235%" height="15" fill="rgb(249,201,17)" fg:x="59787" fg:w="106"/><text x="69.9334%" y="287.50"></text></g><g><title>core::num::&lt;impl isize&gt;::wrapping_sub (106 samples, 0.12%)</title><rect x="69.6834%" y="261" width="0.1235%" height="15" fill="rgb(219,208,6)" fg:x="59787" fg:w="106"/><text x="69.9334%" y="271.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::from_base_index (331 samples, 0.39%)</title><rect x="69.4888%" y="309" width="0.3858%" height="15" fill="rgb(248,31,23)" fg:x="59620" fg:w="331"/><text x="69.7388%" y="319.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::as_ptr (58 samples, 0.07%)</title><rect x="69.8070%" y="293" width="0.0676%" height="15" fill="rgb(245,15,42)" fg:x="59893" fg:w="58"/><text x="70.0570%" y="303.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::bucket (370 samples, 0.43%)</title><rect x="69.4888%" y="325" width="0.4312%" height="15" fill="rgb(222,217,39)" fg:x="59620" fg:w="370"/><text x="69.7388%" y="335.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::data_end (39 samples, 0.05%)</title><rect x="69.8746%" y="309" width="0.0455%" height="15" fill="rgb(210,219,27)" fg:x="59951" fg:w="39"/><text x="70.1246%" y="319.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (179 samples, 0.21%)</title><rect x="69.9200%" y="325" width="0.2086%" height="15" fill="rgb(252,166,36)" fg:x="59990" fg:w="179"/><text x="70.1700%" y="335.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMask as core::iter::traits::collect::IntoIterator&gt;::into_iter (350 samples, 0.41%)</title><rect x="71.9924%" y="309" width="0.4079%" height="15" fill="rgb(245,132,34)" fg:x="61768" fg:w="350"/><text x="72.2424%" y="319.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::ops::try_trait::Try&gt;::branch (109 samples, 0.13%)</title><rect x="72.8921%" y="293" width="0.1270%" height="15" fill="rgb(236,54,3)" fg:x="62540" fg:w="109"/><text x="73.1421%" y="303.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (132 samples, 0.15%)</title><rect x="73.6381%" y="277" width="0.1538%" height="15" fill="rgb(241,173,43)" fg:x="63180" fg:w="132"/><text x="73.8881%" y="287.50"></text></g><g><title>core::num::nonzero::NonZeroU16::new (448 samples, 0.52%)</title><rect x="73.7931%" y="277" width="0.5222%" height="15" fill="rgb(215,190,9)" fg:x="63313" fg:w="448"/><text x="74.0431%" y="287.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (1,666 samples, 1.94%)</title><rect x="73.0192%" y="293" width="1.9418%" height="15" fill="rgb(242,101,16)" fg:x="62649" fg:w="1666"/><text x="73.2692%" y="303.50">h..</text></g><g><title>hashbrown::raw::bitmask::BitMask::nonzero_trailing_zeros (554 samples, 0.65%)</title><rect x="74.3153%" y="277" width="0.6457%" height="15" fill="rgb(223,190,21)" fg:x="63761" fg:w="554"/><text x="74.5653%" y="287.50"></text></g><g><title>core::num::nonzero::NonZeroU16::trailing_zeros (438 samples, 0.51%)</title><rect x="74.4505%" y="261" width="0.5105%" height="15" fill="rgb(215,228,25)" fg:x="63877" fg:w="438"/><text x="74.7005%" y="271.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (2,253 samples, 2.63%)</title><rect x="72.4003%" y="309" width="2.6259%" height="15" fill="rgb(225,36,22)" fg:x="62118" fg:w="2253"/><text x="72.6503%" y="319.50">&lt;h..</text></g><g><title>hashbrown::raw::bitmask::BitMask::remove_lowest_bit (56 samples, 0.07%)</title><rect x="74.9610%" y="293" width="0.0653%" height="15" fill="rgb(251,106,46)" fg:x="64315" fg:w="56"/><text x="75.2110%" y="303.50"></text></g><g><title>hashbrown::map::equivalent_key::{{closure}} (367 samples, 0.43%)</title><rect x="75.1521%" y="293" width="0.4277%" height="15" fill="rgb(208,90,1)" fg:x="64479" fg:w="367"/><text x="75.4021%" y="303.50"></text></g><g><title>&lt;Q as hashbrown::Equivalent&lt;K&gt;&gt;::equivalent (302 samples, 0.35%)</title><rect x="75.2279%" y="277" width="0.3520%" height="15" fill="rgb(243,10,4)" fg:x="64544" fg:w="302"/><text x="75.4779%" y="287.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (162 samples, 0.19%)</title><rect x="75.3910%" y="261" width="0.1888%" height="15" fill="rgb(212,137,27)" fg:x="64684" fg:w="162"/><text x="75.6410%" y="271.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq for usize&gt;::eq (108 samples, 0.13%)</title><rect x="75.4540%" y="245" width="0.1259%" height="15" fill="rgb(231,220,49)" fg:x="64738" fg:w="108"/><text x="75.7040%" y="255.50"></text></g><g><title>core::num::&lt;impl isize&gt;::wrapping_neg (49 samples, 0.06%)</title><rect x="75.7419%" y="245" width="0.0571%" height="15" fill="rgb(237,96,20)" fg:x="64985" fg:w="49"/><text x="75.9919%" y="255.50"></text></g><g><title>core::num::&lt;impl isize&gt;::wrapping_sub (49 samples, 0.06%)</title><rect x="75.7419%" y="229" width="0.0571%" height="15" fill="rgb(239,229,30)" fg:x="64985" fg:w="49"/><text x="75.9919%" y="239.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (111 samples, 0.13%)</title><rect x="75.7419%" y="261" width="0.1294%" height="15" fill="rgb(219,65,33)" fg:x="64985" fg:w="111"/><text x="75.9919%" y="271.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (62 samples, 0.07%)</title><rect x="75.7990%" y="245" width="0.0723%" height="15" fill="rgb(243,134,7)" fg:x="65034" fg:w="62"/><text x="76.0490%" y="255.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ref (304 samples, 0.35%)</title><rect x="75.5799%" y="293" width="0.3543%" height="15" fill="rgb(216,177,54)" fg:x="64846" fg:w="304"/><text x="75.8299%" y="303.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ptr (294 samples, 0.34%)</title><rect x="75.5915%" y="277" width="0.3427%" height="15" fill="rgb(211,160,20)" fg:x="64856" fg:w="294"/><text x="75.8415%" y="287.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::as_ptr (54 samples, 0.06%)</title><rect x="75.8712%" y="261" width="0.0629%" height="15" fill="rgb(239,85,39)" fg:x="65096" fg:w="54"/><text x="76.1212%" y="271.50"></text></g><g><title>core::num::&lt;impl isize&gt;::wrapping_neg (126 samples, 0.15%)</title><rect x="76.1883%" y="245" width="0.1469%" height="15" fill="rgb(232,125,22)" fg:x="65368" fg:w="126"/><text x="76.4383%" y="255.50"></text></g><g><title>core::num::&lt;impl isize&gt;::wrapping_sub (126 samples, 0.15%)</title><rect x="76.1883%" y="229" width="0.1469%" height="15" fill="rgb(244,57,34)" fg:x="65368" fg:w="126"/><text x="76.4383%" y="239.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (135 samples, 0.16%)</title><rect x="76.1883%" y="261" width="0.1573%" height="15" fill="rgb(214,203,32)" fg:x="65368" fg:w="135"/><text x="76.4383%" y="271.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (9 samples, 0.01%)</title><rect x="76.3351%" y="245" width="0.0105%" height="15" fill="rgb(207,58,43)" fg:x="65494" fg:w="9"/><text x="76.5851%" y="255.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::as_ptr (58 samples, 0.07%)</title><rect x="76.3456%" y="261" width="0.0676%" height="15" fill="rgb(215,193,15)" fg:x="65503" fg:w="58"/><text x="76.5956%" y="271.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::from_base_index (403 samples, 0.47%)</title><rect x="75.9482%" y="277" width="0.4697%" height="15" fill="rgb(232,15,44)" fg:x="65162" fg:w="403"/><text x="76.1982%" y="287.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::{{closure}} (1,232 samples, 1.44%)</title><rect x="75.0321%" y="309" width="1.4359%" height="15" fill="rgb(212,3,48)" fg:x="64376" fg:w="1232"/><text x="75.2821%" y="319.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::bucket (458 samples, 0.53%)</title><rect x="75.9342%" y="293" width="0.5338%" height="15" fill="rgb(218,128,7)" fg:x="65150" fg:w="458"/><text x="76.1842%" y="303.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::data_end (43 samples, 0.05%)</title><rect x="76.4179%" y="277" width="0.0501%" height="15" fill="rgb(226,216,39)" fg:x="65565" fg:w="43"/><text x="76.6679%" y="287.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::ctrl (61 samples, 0.07%)</title><rect x="76.4680%" y="309" width="0.0711%" height="15" fill="rgb(243,47,51)" fg:x="65608" fg:w="61"/><text x="76.7180%" y="319.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::as_ptr (50 samples, 0.06%)</title><rect x="76.4808%" y="293" width="0.0583%" height="15" fill="rgb(241,183,40)" fg:x="65619" fg:w="50"/><text x="76.7308%" y="303.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::probe_seq (57 samples, 0.07%)</title><rect x="76.5391%" y="309" width="0.0664%" height="15" fill="rgb(231,217,32)" fg:x="65669" fg:w="57"/><text x="76.7891%" y="319.50"></text></g><g><title>hashbrown::raw::h2 (57 samples, 0.07%)</title><rect x="76.6055%" y="309" width="0.0664%" height="15" fill="rgb(229,61,38)" fg:x="65726" fg:w="57"/><text x="76.8555%" y="319.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_undefined_si128 (42 samples, 0.05%)</title><rect x="80.0869%" y="277" width="0.0490%" height="15" fill="rgb(225,210,5)" fg:x="68713" fg:w="42"/><text x="80.3369%" y="287.50"></text></g><g><title>hashbrown::raw::sse2::Group::load (3,034 samples, 3.54%)</title><rect x="76.6720%" y="309" width="3.5362%" height="15" fill="rgb(231,79,45)" fg:x="65783" fg:w="3034"/><text x="76.9220%" y="319.50">has..</text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (2,747 samples, 3.20%)</title><rect x="77.0065%" y="293" width="3.2017%" height="15" fill="rgb(224,100,7)" fg:x="66070" fg:w="2747"/><text x="77.2565%" y="303.50">cor..</text></g><g><title>core::intrinsics::copy_nonoverlapping (62 samples, 0.07%)</title><rect x="80.1359%" y="277" width="0.0723%" height="15" fill="rgb(241,198,18)" fg:x="68755" fg:w="62"/><text x="80.3859%" y="287.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_cmpeq_epi8 (788 samples, 0.92%)</title><rect x="81.4553%" y="293" width="0.9184%" height="15" fill="rgb(252,97,53)" fg:x="69887" fg:w="788"/><text x="81.7053%" y="303.50"></text></g><g><title>core::core_arch::x86::m128iExt::as_i8x16 (198 samples, 0.23%)</title><rect x="82.1429%" y="277" width="0.2308%" height="15" fill="rgb(220,88,7)" fg:x="70477" fg:w="198"/><text x="82.3929%" y="287.50"></text></g><g><title>core::core_arch::simd::i8x16::splat (215 samples, 0.25%)</title><rect x="84.4623%" y="277" width="0.2506%" height="15" fill="rgb(213,176,14)" fg:x="72467" fg:w="215"/><text x="84.7123%" y="287.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (2,067 samples, 2.41%)</title><rect x="82.3737%" y="293" width="2.4091%" height="15" fill="rgb(246,73,7)" fg:x="70675" fg:w="2067"/><text x="82.6237%" y="303.50">co..</text></g><g><title>core::core_arch::x86::m128iExt::as_i8x16 (60 samples, 0.07%)</title><rect x="84.7129%" y="277" width="0.0699%" height="15" fill="rgb(245,64,36)" fg:x="72682" fg:w="60"/><text x="84.9629%" y="287.50"></text></g><g><title>coldbrew::program::Program::code (27,328 samples, 31.85%)</title><rect x="54.6108%" y="437" width="31.8516%" height="15" fill="rgb(245,80,10)" fg:x="46855" fg:w="27328"/><text x="54.8608%" y="447.50">coldbrew::program::Program::code</text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::ops::index::Index&lt;&amp;Q&gt;&gt;::index (27,074 samples, 31.56%)</title><rect x="54.9069%" y="421" width="31.5555%" height="15" fill="rgb(232,107,50)" fg:x="47109" fg:w="27074"/><text x="55.1569%" y="431.50">&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as cor..</text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (26,932 samples, 31.39%)</title><rect x="55.0724%" y="405" width="31.3900%" height="15" fill="rgb(253,3,0)" fg:x="47251" fg:w="26932"/><text x="55.3224%" y="415.50">std::collections::hash::map::HashMap&lt;K,V,S&gt;::get</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (26,883 samples, 31.33%)</title><rect x="55.1295%" y="389" width="31.3329%" height="15" fill="rgb(212,99,53)" fg:x="47300" fg:w="26883"/><text x="55.3795%" y="399.50">hashbrown::map::HashMap&lt;K,V,S,A&gt;::get</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (26,700 samples, 31.12%)</title><rect x="55.3428%" y="373" width="31.1196%" height="15" fill="rgb(249,111,54)" fg:x="47483" fg:w="26700"/><text x="55.5928%" y="383.50">hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get (15,518 samples, 18.09%)</title><rect x="68.3757%" y="357" width="18.0867%" height="15" fill="rgb(249,55,30)" fg:x="58665" fg:w="15518"/><text x="68.6257%" y="367.50">hashbrown::raw::RawTable&lt;T,A..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (14,989 samples, 17.47%)</title><rect x="68.9923%" y="341" width="17.4701%" height="15" fill="rgb(237,47,42)" fg:x="59194" fg:w="14989"/><text x="69.2423%" y="351.50">hashbrown::raw::RawTable&lt;T,..</text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::find_inner (14,014 samples, 16.33%)</title><rect x="70.1287%" y="325" width="16.3337%" height="15" fill="rgb(211,20,18)" fg:x="60169" fg:w="14014"/><text x="70.3787%" y="335.50">hashbrown::raw::RawTableI..</text></g><g><title>hashbrown::raw::sse2::Group::match_byte (5,366 samples, 6.25%)</title><rect x="80.2082%" y="309" width="6.2542%" height="15" fill="rgb(231,203,46)" fg:x="68817" fg:w="5366"/><text x="80.4582%" y="319.50">hashbrow..</text></g><g><title>core::core_arch::x86::sse2::_mm_set1_epi8 (1,441 samples, 1.68%)</title><rect x="84.7829%" y="293" width="1.6795%" height="15" fill="rgb(237,142,3)" fg:x="72742" fg:w="1441"/><text x="85.0329%" y="303.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_set_epi8 (1,441 samples, 1.68%)</title><rect x="84.7829%" y="277" width="1.6795%" height="15" fill="rgb(241,107,1)" fg:x="72742" fg:w="1441"/><text x="85.0329%" y="287.50"></text></g><g><title>core::core_arch::simd::i8x16::new (223 samples, 0.26%)</title><rect x="86.2025%" y="261" width="0.2599%" height="15" fill="rgb(229,83,13)" fg:x="73960" fg:w="223"/><text x="86.4525%" y="271.50"></text></g><g><title>coldbrew::runtime::Runtime::next (27,788 samples, 32.39%)</title><rect x="54.2215%" y="453" width="32.3877%" height="15" fill="rgb(241,91,40)" fg:x="46521" fg:w="27788"/><text x="54.4715%" y="463.50">coldbrew::runtime::Runtime::next</text></g><g><title>coldbrew::runtime::Frame::inc_instruction_index (126 samples, 0.15%)</title><rect x="86.4624%" y="437" width="0.1469%" height="15" fill="rgb(225,3,45)" fg:x="74183" fg:w="126"/><text x="86.7124%" y="447.50"></text></g><g><title>coldbrew::runtime::Runtime::fetch (32,359 samples, 37.72%)</title><rect x="48.9067%" y="469" width="37.7153%" height="15" fill="rgb(244,223,14)" fg:x="41961" fg:w="32359"/><text x="49.1567%" y="479.50">coldbrew::runtime::Runtime::fetch</text></g><g><title>core::convert::num::&lt;impl core::convert::From&lt;u8&gt; for i32&gt;::from (11 samples, 0.01%)</title><rect x="86.6092%" y="453" width="0.0128%" height="15" fill="rgb(224,124,37)" fg:x="74309" fg:w="11"/><text x="86.8592%" y="463.50"></text></g><g><title>coldbrew::trace::Recorder::init (27 samples, 0.03%)</title><rect x="86.6221%" y="469" width="0.0315%" height="15" fill="rgb(251,171,30)" fg:x="74320" fg:w="27"/><text x="86.8721%" y="479.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::clear (10 samples, 0.01%)</title><rect x="86.6419%" y="453" width="0.0117%" height="15" fill="rgb(236,46,54)" fg:x="74337" fg:w="10"/><text x="86.8919%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;[coldbrew::trace::RecordEntry]&gt; (10 samples, 0.01%)</title><rect x="86.6419%" y="437" width="0.0117%" height="15" fill="rgb(245,213,5)" fg:x="74337" fg:w="10"/><text x="86.8919%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;coldbrew::trace::RecordEntry&gt; (10 samples, 0.01%)</title><rect x="86.6419%" y="421" width="0.0117%" height="15" fill="rgb(230,144,27)" fg:x="74337" fg:w="10"/><text x="86.8919%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;coldbrew::runtime::Instruction&gt; (10 samples, 0.01%)</title><rect x="86.6419%" y="405" width="0.0117%" height="15" fill="rgb(220,86,6)" fg:x="74337" fg:w="10"/><text x="86.8919%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;alloc::vec::Vec&lt;coldbrew::runtime::Value&gt;&gt;&gt; (10 samples, 0.01%)</title><rect x="86.6419%" y="389" width="0.0117%" height="15" fill="rgb(240,20,13)" fg:x="74337" fg:w="10"/><text x="86.8919%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;coldbrew::runtime::Value&gt;&gt; (10 samples, 0.01%)</title><rect x="86.6419%" y="373" width="0.0117%" height="15" fill="rgb(217,89,34)" fg:x="74337" fg:w="10"/><text x="86.8919%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;coldbrew::runtime::Value&gt;&gt; (9 samples, 0.01%)</title><rect x="86.6430%" y="357" width="0.0105%" height="15" fill="rgb(229,13,5)" fg:x="74338" fg:w="9"/><text x="86.8930%" y="367.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (9 samples, 0.01%)</title><rect x="86.6430%" y="341" width="0.0105%" height="15" fill="rgb(244,67,35)" fg:x="74338" fg:w="9"/><text x="86.8930%" y="351.50"></text></g><g><title>coldbrew::trace::Recorder::is_recording (32 samples, 0.04%)</title><rect x="86.6535%" y="469" width="0.0373%" height="15" fill="rgb(221,40,2)" fg:x="74347" fg:w="32"/><text x="86.9035%" y="479.50"></text></g><g><title>&lt;coldbrew::runtime::ProgramCounter as core::cmp::PartialEq&gt;::eq (9 samples, 0.01%)</title><rect x="87.9286%" y="453" width="0.0105%" height="15" fill="rgb(237,157,21)" fg:x="75441" fg:w="9"/><text x="88.1786%" y="463.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (13 samples, 0.02%)</title><rect x="88.0242%" y="405" width="0.0152%" height="15" fill="rgb(222,94,11)" fg:x="75523" fg:w="13"/><text x="88.2742%" y="415.50"></text></g><g><title>_int_malloc (13 samples, 0.02%)</title><rect x="88.0685%" y="373" width="0.0152%" height="15" fill="rgb(249,113,6)" fg:x="75561" fg:w="13"/><text x="88.3185%" y="383.50"></text></g><g><title>[unknown] (10 samples, 0.01%)</title><rect x="88.0720%" y="357" width="0.0117%" height="15" fill="rgb(238,137,36)" fg:x="75564" fg:w="10"/><text x="88.3220%" y="367.50"></text></g><g><title>[unknown] (9 samples, 0.01%)</title><rect x="88.0731%" y="341" width="0.0105%" height="15" fill="rgb(210,102,26)" fg:x="75565" fg:w="9"/><text x="88.3231%" y="351.50"></text></g><g><title>[unknown] (9 samples, 0.01%)</title><rect x="88.0731%" y="325" width="0.0105%" height="15" fill="rgb(218,30,30)" fg:x="75565" fg:w="9"/><text x="88.3231%" y="335.50"></text></g><g><title>[unknown] (9 samples, 0.01%)</title><rect x="88.0731%" y="309" width="0.0105%" height="15" fill="rgb(214,67,26)" fg:x="75565" fg:w="9"/><text x="88.3231%" y="319.50"></text></g><g><title>[unknown] (9 samples, 0.01%)</title><rect x="88.0731%" y="293" width="0.0105%" height="15" fill="rgb(251,9,53)" fg:x="75565" fg:w="9"/><text x="88.3231%" y="303.50"></text></g><g><title>[unknown] (9 samples, 0.01%)</title><rect x="88.0731%" y="277" width="0.0105%" height="15" fill="rgb(228,204,25)" fg:x="75565" fg:w="9"/><text x="88.3231%" y="287.50"></text></g><g><title>[unknown] (9 samples, 0.01%)</title><rect x="88.0731%" y="261" width="0.0105%" height="15" fill="rgb(207,153,8)" fg:x="75565" fg:w="9"/><text x="88.3231%" y="271.50"></text></g><g><title>checked_request2size (9 samples, 0.01%)</title><rect x="88.0836%" y="373" width="0.0105%" height="15" fill="rgb(242,9,16)" fg:x="75574" fg:w="9"/><text x="88.3336%" y="383.50"></text></g><g><title>__GI___libc_malloc (63 samples, 0.07%)</title><rect x="88.0417%" y="389" width="0.0734%" height="15" fill="rgb(217,211,10)" fg:x="75538" fg:w="63"/><text x="88.2917%" y="399.50"></text></g><g><title>tcache_get (18 samples, 0.02%)</title><rect x="88.0941%" y="373" width="0.0210%" height="15" fill="rgb(219,228,52)" fg:x="75583" fg:w="18"/><text x="88.3441%" y="383.50"></text></g><g><title>__rust_alloc (10 samples, 0.01%)</title><rect x="88.1233%" y="389" width="0.0117%" height="15" fill="rgb(231,92,29)" fg:x="75608" fg:w="10"/><text x="88.3733%" y="399.50"></text></g><g><title>core::alloc::layout::Layout::align (9 samples, 0.01%)</title><rect x="88.1349%" y="389" width="0.0105%" height="15" fill="rgb(232,8,23)" fg:x="75618" fg:w="9"/><text x="88.3849%" y="399.50"></text></g><g><title>alloc::alloc::alloc (96 samples, 0.11%)</title><rect x="88.0417%" y="405" width="0.1119%" height="15" fill="rgb(216,211,34)" fg:x="75538" fg:w="96"/><text x="88.2917%" y="415.50"></text></g><g><title>core::option::Option&lt;T&gt;::ok_or (9 samples, 0.01%)</title><rect x="88.1559%" y="405" width="0.0105%" height="15" fill="rgb(236,151,0)" fg:x="75636" fg:w="9"/><text x="88.4059%" y="415.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::new (15 samples, 0.02%)</title><rect x="88.1664%" y="405" width="0.0175%" height="15" fill="rgb(209,168,3)" fg:x="75645" fg:w="15"/><text x="88.4164%" y="415.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::is_null (9 samples, 0.01%)</title><rect x="88.1734%" y="389" width="0.0105%" height="15" fill="rgb(208,129,28)" fg:x="75651" fg:w="9"/><text x="88.4234%" y="399.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (211 samples, 0.25%)</title><rect x="87.9694%" y="437" width="0.2459%" height="15" fill="rgb(229,78,22)" fg:x="75476" fg:w="211"/><text x="88.2194%" y="447.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (207 samples, 0.24%)</title><rect x="87.9741%" y="421" width="0.2413%" height="15" fill="rgb(228,187,13)" fg:x="75480" fg:w="207"/><text x="88.2241%" y="431.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;[T]&gt;::slice_from_raw_parts (27 samples, 0.03%)</title><rect x="88.1839%" y="405" width="0.0315%" height="15" fill="rgb(240,119,24)" fg:x="75660" fg:w="27"/><text x="88.4339%" y="415.50"></text></g><g><title>core::ptr::slice_from_raw_parts_mut (23 samples, 0.03%)</title><rect x="88.1885%" y="389" width="0.0268%" height="15" fill="rgb(209,194,42)" fg:x="75664" fg:w="23"/><text x="88.4385%" y="399.50"></text></g><g><title>core::ptr::metadata::from_raw_parts_mut (23 samples, 0.03%)</title><rect x="88.1885%" y="373" width="0.0268%" height="15" fill="rgb(247,200,46)" fg:x="75664" fg:w="23"/><text x="88.4385%" y="383.50"></text></g><g><title>alloc::alloc::exchange_malloc (250 samples, 0.29%)</title><rect x="87.9438%" y="453" width="0.2914%" height="15" fill="rgb(218,76,16)" fg:x="75454" fg:w="250"/><text x="88.1938%" y="463.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;[T]&gt;::as_mut_ptr (12 samples, 0.01%)</title><rect x="88.2212%" y="437" width="0.0140%" height="15" fill="rgb(225,21,48)" fg:x="75692" fg:w="12"/><text x="88.4712%" y="447.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;[T]&gt;::as_non_null_ptr (12 samples, 0.01%)</title><rect x="88.2212%" y="421" width="0.0140%" height="15" fill="rgb(239,223,50)" fg:x="75692" fg:w="12"/><text x="88.4712%" y="431.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::new_unchecked (12 samples, 0.01%)</title><rect x="88.2212%" y="405" width="0.0140%" height="15" fill="rgb(244,45,21)" fg:x="75692" fg:w="12"/><text x="88.4712%" y="415.50"></text></g><g><title>alloc::boxed::Box&lt;T,A&gt;::into_unique (60 samples, 0.07%)</title><rect x="88.2888%" y="405" width="0.0699%" height="15" fill="rgb(232,33,43)" fg:x="75750" fg:w="60"/><text x="88.5388%" y="415.50"></text></g><g><title>alloc::boxed::Box&lt;T,A&gt;::leak (23 samples, 0.03%)</title><rect x="88.3319%" y="389" width="0.0268%" height="15" fill="rgb(209,8,3)" fg:x="75787" fg:w="23"/><text x="88.5819%" y="399.50"></text></g><g><title>alloc::boxed::Box&lt;T,A&gt;::into_raw_with_allocator (79 samples, 0.09%)</title><rect x="88.2748%" y="421" width="0.0921%" height="15" fill="rgb(214,25,53)" fg:x="75738" fg:w="79"/><text x="88.5248%" y="431.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::into_vec (129 samples, 0.15%)</title><rect x="88.2352%" y="453" width="0.1504%" height="15" fill="rgb(254,186,54)" fg:x="75704" fg:w="129"/><text x="88.4852%" y="463.50"></text></g><g><title>alloc::slice::hack::into_vec (122 samples, 0.14%)</title><rect x="88.2433%" y="437" width="0.1422%" height="15" fill="rgb(208,174,49)" fg:x="75711" fg:w="122"/><text x="88.4933%" y="447.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::from_raw_parts_in (16 samples, 0.02%)</title><rect x="88.3669%" y="421" width="0.0186%" height="15" fill="rgb(233,191,51)" fg:x="75817" fg:w="16"/><text x="88.6169%" y="431.50"></text></g><g><title>__memcpy_avx_unaligned_erms (219 samples, 0.26%)</title><rect x="88.4974%" y="437" width="0.2553%" height="15" fill="rgb(222,134,10)" fg:x="75929" fg:w="219"/><text x="88.7474%" y="447.50"></text></g><g><title>_init (18 samples, 0.02%)</title><rect x="88.7527%" y="437" width="0.0210%" height="15" fill="rgb(230,226,20)" fg:x="76148" fg:w="18"/><text x="89.0027%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::capacity (76 samples, 0.09%)</title><rect x="88.7736%" y="437" width="0.0886%" height="15" fill="rgb(251,111,25)" fg:x="76166" fg:w="76"/><text x="89.0236%" y="447.50"></text></g><g><title>_int_realloc (44 samples, 0.05%)</title><rect x="88.8622%" y="325" width="0.0513%" height="15" fill="rgb(224,40,46)" fg:x="76242" fg:w="44"/><text x="89.1122%" y="335.50"></text></g><g><title>__memcpy_avx_unaligned_erms (44 samples, 0.05%)</title><rect x="88.8622%" y="309" width="0.0513%" height="15" fill="rgb(236,108,47)" fg:x="76242" fg:w="44"/><text x="89.1122%" y="319.50"></text></g><g><title>[unknown] (28 samples, 0.03%)</title><rect x="88.8809%" y="293" width="0.0326%" height="15" fill="rgb(234,93,0)" fg:x="76258" fg:w="28"/><text x="89.1309%" y="303.50"></text></g><g><title>[unknown] (24 samples, 0.03%)</title><rect x="88.8855%" y="277" width="0.0280%" height="15" fill="rgb(224,213,32)" fg:x="76262" fg:w="24"/><text x="89.1355%" y="287.50"></text></g><g><title>[unknown] (24 samples, 0.03%)</title><rect x="88.8855%" y="261" width="0.0280%" height="15" fill="rgb(251,11,48)" fg:x="76262" fg:w="24"/><text x="89.1355%" y="271.50"></text></g><g><title>[unknown] (23 samples, 0.03%)</title><rect x="88.8867%" y="245" width="0.0268%" height="15" fill="rgb(236,173,5)" fg:x="76263" fg:w="23"/><text x="89.1367%" y="255.50"></text></g><g><title>[unknown] (22 samples, 0.03%)</title><rect x="88.8879%" y="229" width="0.0256%" height="15" fill="rgb(230,95,12)" fg:x="76264" fg:w="22"/><text x="89.1379%" y="239.50"></text></g><g><title>[unknown] (19 samples, 0.02%)</title><rect x="88.8913%" y="213" width="0.0221%" height="15" fill="rgb(232,209,1)" fg:x="76267" fg:w="19"/><text x="89.1413%" y="223.50"></text></g><g><title>[unknown] (19 samples, 0.02%)</title><rect x="88.8913%" y="197" width="0.0221%" height="15" fill="rgb(232,6,1)" fg:x="76267" fg:w="19"/><text x="89.1413%" y="207.50"></text></g><g><title>[unknown] (15 samples, 0.02%)</title><rect x="88.8960%" y="181" width="0.0175%" height="15" fill="rgb(210,224,50)" fg:x="76271" fg:w="15"/><text x="89.1460%" y="191.50"></text></g><g><title>[unknown] (12 samples, 0.01%)</title><rect x="88.8995%" y="165" width="0.0140%" height="15" fill="rgb(228,127,35)" fg:x="76274" fg:w="12"/><text x="89.1495%" y="175.50"></text></g><g><title>[unknown] (9 samples, 0.01%)</title><rect x="88.9030%" y="149" width="0.0105%" height="15" fill="rgb(245,102,45)" fg:x="76277" fg:w="9"/><text x="89.1530%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (57 samples, 0.07%)</title><rect x="88.8622%" y="437" width="0.0664%" height="15" fill="rgb(214,1,49)" fg:x="76242" fg:w="57"/><text x="89.1122%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (57 samples, 0.07%)</title><rect x="88.8622%" y="421" width="0.0664%" height="15" fill="rgb(226,163,40)" fg:x="76242" fg:w="57"/><text x="89.1122%" y="431.50"></text></g><g><title>alloc::raw_vec::finish_grow (57 samples, 0.07%)</title><rect x="88.8622%" y="405" width="0.0664%" height="15" fill="rgb(239,212,28)" fg:x="76242" fg:w="57"/><text x="89.1122%" y="415.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (57 samples, 0.07%)</title><rect x="88.8622%" y="389" width="0.0664%" height="15" fill="rgb(220,20,13)" fg:x="76242" fg:w="57"/><text x="89.1122%" y="399.50"></text></g><g><title>alloc::alloc::Global::grow_impl (57 samples, 0.07%)</title><rect x="88.8622%" y="373" width="0.0664%" height="15" fill="rgb(210,164,35)" fg:x="76242" fg:w="57"/><text x="89.1122%" y="383.50"></text></g><g><title>alloc::alloc::realloc (57 samples, 0.07%)</title><rect x="88.8622%" y="357" width="0.0664%" height="15" fill="rgb(248,109,41)" fg:x="76242" fg:w="57"/><text x="89.1122%" y="367.50"></text></g><g><title>__GI___libc_realloc (57 samples, 0.07%)</title><rect x="88.8622%" y="341" width="0.0664%" height="15" fill="rgb(238,23,50)" fg:x="76242" fg:w="57"/><text x="89.1122%" y="351.50"></text></g><g><title>mremap_chunk (13 samples, 0.02%)</title><rect x="88.9135%" y="325" width="0.0152%" height="15" fill="rgb(211,48,49)" fg:x="76286" fg:w="13"/><text x="89.1635%" y="335.50"></text></g><g><title>__GI___mremap (13 samples, 0.02%)</title><rect x="88.9135%" y="309" width="0.0152%" height="15" fill="rgb(223,36,21)" fg:x="76286" fg:w="13"/><text x="89.1635%" y="319.50"></text></g><g><title>[unknown] (13 samples, 0.02%)</title><rect x="88.9135%" y="293" width="0.0152%" height="15" fill="rgb(207,123,46)" fg:x="76286" fg:w="13"/><text x="89.1635%" y="303.50"></text></g><g><title>[unknown] (13 samples, 0.02%)</title><rect x="88.9135%" y="277" width="0.0152%" height="15" fill="rgb(240,218,32)" fg:x="76286" fg:w="13"/><text x="89.1635%" y="287.50"></text></g><g><title>[unknown] (13 samples, 0.02%)</title><rect x="88.9135%" y="261" width="0.0152%" height="15" fill="rgb(252,5,43)" fg:x="76286" fg:w="13"/><text x="89.1635%" y="271.50"></text></g><g><title>[unknown] (13 samples, 0.02%)</title><rect x="88.9135%" y="245" width="0.0152%" height="15" fill="rgb(252,84,19)" fg:x="76286" fg:w="13"/><text x="89.1635%" y="255.50"></text></g><g><title>[unknown] (13 samples, 0.02%)</title><rect x="88.9135%" y="229" width="0.0152%" height="15" fill="rgb(243,152,39)" fg:x="76286" fg:w="13"/><text x="89.1635%" y="239.50"></text></g><g><title>[unknown] (13 samples, 0.02%)</title><rect x="88.9135%" y="213" width="0.0152%" height="15" fill="rgb(234,160,15)" fg:x="76286" fg:w="13"/><text x="89.1635%" y="223.50"></text></g><g><title>[unknown] (13 samples, 0.02%)</title><rect x="88.9135%" y="197" width="0.0152%" height="15" fill="rgb(237,34,20)" fg:x="76286" fg:w="13"/><text x="89.1635%" y="207.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_mut_ptr (28 samples, 0.03%)</title><rect x="88.9286%" y="437" width="0.0326%" height="15" fill="rgb(229,97,13)" fg:x="76299" fg:w="28"/><text x="89.1786%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (28 samples, 0.03%)</title><rect x="88.9286%" y="421" width="0.0326%" height="15" fill="rgb(234,71,50)" fg:x="76299" fg:w="28"/><text x="89.1786%" y="431.50"></text></g><g><title>core::ptr::unique::Unique&lt;T&gt;::as_ptr (26 samples, 0.03%)</title><rect x="88.9310%" y="405" width="0.0303%" height="15" fill="rgb(253,155,4)" fg:x="76301" fg:w="26"/><text x="89.1810%" y="415.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (21 samples, 0.02%)</title><rect x="88.9636%" y="437" width="0.0245%" height="15" fill="rgb(222,185,37)" fg:x="76329" fg:w="21"/><text x="89.2136%" y="447.50"></text></g><g><title>__memcpy_avx_unaligned_erms (1,369 samples, 1.60%)</title><rect x="88.9881%" y="421" width="1.5956%" height="15" fill="rgb(251,177,13)" fg:x="76350" fg:w="1369"/><text x="89.2381%" y="431.50"></text></g><g><title>[unknown] (851 samples, 0.99%)</title><rect x="89.5918%" y="405" width="0.9919%" height="15" fill="rgb(250,179,40)" fg:x="76868" fg:w="851"/><text x="89.8418%" y="415.50"></text></g><g><title>[unknown] (754 samples, 0.88%)</title><rect x="89.7049%" y="389" width="0.8788%" height="15" fill="rgb(242,44,2)" fg:x="76965" fg:w="754"/><text x="89.9549%" y="399.50"></text></g><g><title>[unknown] (750 samples, 0.87%)</title><rect x="89.7096%" y="373" width="0.8741%" height="15" fill="rgb(216,177,13)" fg:x="76969" fg:w="750"/><text x="89.9596%" y="383.50"></text></g><g><title>[unknown] (741 samples, 0.86%)</title><rect x="89.7200%" y="357" width="0.8637%" height="15" fill="rgb(216,106,43)" fg:x="76978" fg:w="741"/><text x="89.9700%" y="367.50"></text></g><g><title>[unknown] (704 samples, 0.82%)</title><rect x="89.7632%" y="341" width="0.8205%" height="15" fill="rgb(216,183,2)" fg:x="77015" fg:w="704"/><text x="90.0132%" y="351.50"></text></g><g><title>[unknown] (664 samples, 0.77%)</title><rect x="89.8098%" y="325" width="0.7739%" height="15" fill="rgb(249,75,3)" fg:x="77055" fg:w="664"/><text x="90.0598%" y="335.50"></text></g><g><title>[unknown] (633 samples, 0.74%)</title><rect x="89.8459%" y="309" width="0.7378%" height="15" fill="rgb(219,67,39)" fg:x="77086" fg:w="633"/><text x="90.0959%" y="319.50"></text></g><g><title>[unknown] (481 samples, 0.56%)</title><rect x="90.0231%" y="293" width="0.5606%" height="15" fill="rgb(253,228,2)" fg:x="77238" fg:w="481"/><text x="90.2731%" y="303.50"></text></g><g><title>[unknown] (420 samples, 0.49%)</title><rect x="90.0942%" y="277" width="0.4895%" height="15" fill="rgb(235,138,27)" fg:x="77299" fg:w="420"/><text x="90.3442%" y="287.50"></text></g><g><title>[unknown] (308 samples, 0.36%)</title><rect x="90.2247%" y="261" width="0.3590%" height="15" fill="rgb(236,97,51)" fg:x="77411" fg:w="308"/><text x="90.4747%" y="271.50"></text></g><g><title>[unknown] (188 samples, 0.22%)</title><rect x="90.3646%" y="245" width="0.2191%" height="15" fill="rgb(240,80,30)" fg:x="77531" fg:w="188"/><text x="90.6146%" y="255.50"></text></g><g><title>[unknown] (137 samples, 0.16%)</title><rect x="90.4240%" y="229" width="0.1597%" height="15" fill="rgb(230,178,19)" fg:x="77582" fg:w="137"/><text x="90.6740%" y="239.50"></text></g><g><title>[unknown] (49 samples, 0.06%)</title><rect x="90.5266%" y="213" width="0.0571%" height="15" fill="rgb(210,190,27)" fg:x="77670" fg:w="49"/><text x="90.7766%" y="223.50"></text></g><g><title>[unknown] (9 samples, 0.01%)</title><rect x="90.5732%" y="197" width="0.0105%" height="15" fill="rgb(222,107,31)" fg:x="77710" fg:w="9"/><text x="90.8232%" y="207.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (1,910 samples, 2.23%)</title><rect x="88.3855%" y="453" width="2.2262%" height="15" fill="rgb(216,127,34)" fg:x="75833" fg:w="1910"/><text x="88.6355%" y="463.50">a..</text></g><g><title>core::ptr::write (1,393 samples, 1.62%)</title><rect x="88.9881%" y="437" width="1.6236%" height="15" fill="rgb(234,116,52)" fg:x="76350" fg:w="1393"/><text x="89.2381%" y="447.50"></text></g><g><title>_init (24 samples, 0.03%)</title><rect x="90.5837%" y="421" width="0.0280%" height="15" fill="rgb(222,124,15)" fg:x="77719" fg:w="24"/><text x="90.8337%" y="431.50"></text></g><g><title>coldbrew::runtime::Instruction::new (28 samples, 0.03%)</title><rect x="90.6198%" y="453" width="0.0326%" height="15" fill="rgb(231,179,28)" fg:x="77750" fg:w="28"/><text x="90.8698%" y="463.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_ptr (10 samples, 0.01%)</title><rect x="90.6886%" y="421" width="0.0117%" height="15" fill="rgb(226,93,45)" fg:x="77809" fg:w="10"/><text x="90.9386%" y="431.50"></text></g><g><title>core::ptr::slice_from_raw_parts (37 samples, 0.04%)</title><rect x="90.7002%" y="405" width="0.0431%" height="15" fill="rgb(215,8,51)" fg:x="77819" fg:w="37"/><text x="90.9502%" y="415.50"></text></g><g><title>core::ptr::metadata::from_raw_parts (32 samples, 0.04%)</title><rect x="90.7061%" y="389" width="0.0373%" height="15" fill="rgb(223,106,5)" fg:x="77824" fg:w="32"/><text x="90.9561%" y="399.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (53 samples, 0.06%)</title><rect x="90.6828%" y="437" width="0.0618%" height="15" fill="rgb(250,191,5)" fg:x="77804" fg:w="53"/><text x="90.9328%" y="447.50"></text></g><g><title>core::slice::raw::from_raw_parts (38 samples, 0.04%)</title><rect x="90.7002%" y="421" width="0.0443%" height="15" fill="rgb(242,132,44)" fg:x="77819" fg:w="38"/><text x="90.9502%" y="431.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (49 samples, 0.06%)</title><rect x="90.7445%" y="437" width="0.0571%" height="15" fill="rgb(251,152,29)" fg:x="77857" fg:w="49"/><text x="90.9945%" y="447.50"></text></g><g><title>coldbrew::runtime::Instruction::nth::{{closure}} (16 samples, 0.02%)</title><rect x="90.7830%" y="421" width="0.0186%" height="15" fill="rgb(218,179,5)" fg:x="77890" fg:w="16"/><text x="91.0330%" y="431.50"></text></g><g><title>coldbrew::runtime::Instruction::nth (156 samples, 0.18%)</title><rect x="90.6525%" y="453" width="0.1818%" height="15" fill="rgb(227,67,19)" fg:x="77778" fg:w="156"/><text x="90.9025%" y="463.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get (28 samples, 0.03%)</title><rect x="90.8017%" y="437" width="0.0326%" height="15" fill="rgb(233,119,31)" fg:x="77906" fg:w="28"/><text x="91.0517%" y="447.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get (22 samples, 0.03%)</title><rect x="90.8086%" y="421" width="0.0256%" height="15" fill="rgb(241,120,22)" fg:x="77912" fg:w="22"/><text x="91.0586%" y="431.50"></text></g><g><title>coldbrew::runtime::ProgramCounter::inc_instruction_index (12 samples, 0.01%)</title><rect x="90.8343%" y="453" width="0.0140%" height="15" fill="rgb(224,102,30)" fg:x="77934" fg:w="12"/><text x="91.0843%" y="463.50"></text></g><g><title>&lt;coldbrew::runtime::ProgramCounter as core::cmp::PartialEq&gt;::eq (9 samples, 0.01%)</title><rect x="91.0592%" y="437" width="0.0105%" height="15" fill="rgb(210,164,37)" fg:x="78127" fg:w="9"/><text x="91.3092%" y="447.50"></text></g><g><title>__memcpy_avx_unaligned_erms (85 samples, 0.10%)</title><rect x="91.1152%" y="421" width="0.0991%" height="15" fill="rgb(226,191,16)" fg:x="78175" fg:w="85"/><text x="91.3652%" y="431.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::len (13 samples, 0.02%)</title><rect x="91.2294%" y="421" width="0.0152%" height="15" fill="rgb(214,40,45)" fg:x="78273" fg:w="13"/><text x="91.4794%" y="431.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::add (9 samples, 0.01%)</title><rect x="91.2446%" y="421" width="0.0105%" height="15" fill="rgb(244,29,26)" fg:x="78286" fg:w="9"/><text x="91.4946%" y="431.50"></text></g><g><title>__memcpy_avx_unaligned_erms (25 samples, 0.03%)</title><rect x="91.2550%" y="405" width="0.0291%" height="15" fill="rgb(216,16,5)" fg:x="78295" fg:w="25"/><text x="91.5050%" y="415.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::pop (187 samples, 0.22%)</title><rect x="91.0721%" y="437" width="0.2180%" height="15" fill="rgb(249,76,35)" fg:x="78138" fg:w="187"/><text x="91.3221%" y="447.50"></text></g><g><title>core::ptr::read (30 samples, 0.03%)</title><rect x="91.2550%" y="421" width="0.0350%" height="15" fill="rgb(207,11,44)" fg:x="78295" fg:w="30"/><text x="91.5050%" y="431.50"></text></g><g><title>__memcpy_avx_unaligned_erms (17 samples, 0.02%)</title><rect x="91.2923%" y="421" width="0.0198%" height="15" fill="rgb(228,190,49)" fg:x="78327" fg:w="17"/><text x="91.5423%" y="431.50"></text></g><g><title>__memcpy_avx_unaligned_erms (31 samples, 0.04%)</title><rect x="91.3191%" y="405" width="0.0361%" height="15" fill="rgb(214,173,12)" fg:x="78350" fg:w="31"/><text x="91.5691%" y="415.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (57 samples, 0.07%)</title><rect x="91.2900%" y="437" width="0.0664%" height="15" fill="rgb(218,26,35)" fg:x="78325" fg:w="57"/><text x="91.5400%" y="447.50"></text></g><g><title>core::ptr::write (32 samples, 0.04%)</title><rect x="91.3191%" y="421" width="0.0373%" height="15" fill="rgb(220,200,19)" fg:x="78350" fg:w="32"/><text x="91.5691%" y="431.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_ptr (15 samples, 0.02%)</title><rect x="91.4369%" y="373" width="0.0175%" height="15" fill="rgb(239,95,49)" fg:x="78451" fg:w="15"/><text x="91.6869%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (15 samples, 0.02%)</title><rect x="91.4369%" y="357" width="0.0175%" height="15" fill="rgb(235,85,53)" fg:x="78451" fg:w="15"/><text x="91.6869%" y="367.50"></text></g><g><title>core::ptr::slice_from_raw_parts (24 samples, 0.03%)</title><rect x="91.4637%" y="357" width="0.0280%" height="15" fill="rgb(233,133,31)" fg:x="78474" fg:w="24"/><text x="91.7137%" y="367.50"></text></g><g><title>core::ptr::metadata::from_raw_parts (24 samples, 0.03%)</title><rect x="91.4637%" y="341" width="0.0280%" height="15" fill="rgb(218,25,20)" fg:x="78474" fg:w="24"/><text x="91.7137%" y="351.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (60 samples, 0.07%)</title><rect x="91.4287%" y="389" width="0.0699%" height="15" fill="rgb(252,210,38)" fg:x="78444" fg:w="60"/><text x="91.6787%" y="399.50"></text></g><g><title>core::slice::raw::from_raw_parts (38 samples, 0.04%)</title><rect x="91.4543%" y="373" width="0.0443%" height="15" fill="rgb(242,134,21)" fg:x="78466" fg:w="38"/><text x="91.7043%" y="383.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_mut_ptr (27 samples, 0.03%)</title><rect x="91.5721%" y="341" width="0.0315%" height="15" fill="rgb(213,28,48)" fg:x="78567" fg:w="27"/><text x="91.8221%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (18 samples, 0.02%)</title><rect x="91.5826%" y="325" width="0.0210%" height="15" fill="rgb(250,196,2)" fg:x="78576" fg:w="18"/><text x="91.8326%" y="335.50"></text></g><g><title>core::ptr::unique::Unique&lt;T&gt;::as_ptr (11 samples, 0.01%)</title><rect x="91.5907%" y="309" width="0.0128%" height="15" fill="rgb(227,5,17)" fg:x="78583" fg:w="11"/><text x="91.8407%" y="319.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::as_ptr (11 samples, 0.01%)</title><rect x="91.5907%" y="293" width="0.0128%" height="15" fill="rgb(221,226,24)" fg:x="78583" fg:w="11"/><text x="91.8407%" y="303.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (34 samples, 0.04%)</title><rect x="91.9171%" y="261" width="0.0396%" height="15" fill="rgb(211,5,48)" fg:x="78863" fg:w="34"/><text x="92.1671%" y="271.50"></text></g><g><title>checked_request2size (26 samples, 0.03%)</title><rect x="92.0161%" y="229" width="0.0303%" height="15" fill="rgb(219,150,6)" fg:x="78948" fg:w="26"/><text x="92.2661%" y="239.50"></text></g><g><title>__GI___libc_malloc (99 samples, 0.12%)</title><rect x="91.9614%" y="245" width="0.1154%" height="15" fill="rgb(251,46,16)" fg:x="78901" fg:w="99"/><text x="92.2114%" y="255.50"></text></g><g><title>tcache_get (26 samples, 0.03%)</title><rect x="92.0464%" y="229" width="0.0303%" height="15" fill="rgb(220,204,40)" fg:x="78974" fg:w="26"/><text x="92.2964%" y="239.50"></text></g><g><title>__rdl_alloc (19 samples, 0.02%)</title><rect x="92.0767%" y="245" width="0.0221%" height="15" fill="rgb(211,85,2)" fg:x="79000" fg:w="19"/><text x="92.3267%" y="255.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (19 samples, 0.02%)</title><rect x="92.0767%" y="229" width="0.0221%" height="15" fill="rgb(229,17,7)" fg:x="79000" fg:w="19"/><text x="92.3267%" y="239.50"></text></g><g><title>core::alloc::layout::Layout::align (12 samples, 0.01%)</title><rect x="92.1047%" y="245" width="0.0140%" height="15" fill="rgb(239,72,28)" fg:x="79024" fg:w="12"/><text x="92.3547%" y="255.50"></text></g><g><title>core::alloc::layout::Layout::size (10 samples, 0.01%)</title><rect x="92.1187%" y="245" width="0.0117%" height="15" fill="rgb(230,47,54)" fg:x="79036" fg:w="10"/><text x="92.3687%" y="255.50"></text></g><g><title>alloc::alloc::alloc (153 samples, 0.18%)</title><rect x="91.9614%" y="261" width="0.1783%" height="15" fill="rgb(214,50,8)" fg:x="78901" fg:w="153"/><text x="92.2114%" y="271.50"></text></g><g><title>core::alloc::layout::Layout::size (11 samples, 0.01%)</title><rect x="92.1397%" y="261" width="0.0128%" height="15" fill="rgb(216,198,43)" fg:x="79054" fg:w="11"/><text x="92.3897%" y="271.50"></text></g><g><title>core::option::Option&lt;T&gt;::ok_or (14 samples, 0.02%)</title><rect x="92.1525%" y="261" width="0.0163%" height="15" fill="rgb(234,20,35)" fg:x="79065" fg:w="14"/><text x="92.4025%" y="271.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::new (46 samples, 0.05%)</title><rect x="92.1688%" y="261" width="0.0536%" height="15" fill="rgb(254,45,19)" fg:x="79079" fg:w="46"/><text x="92.4188%" y="271.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::is_null (24 samples, 0.03%)</title><rect x="92.1945%" y="245" width="0.0280%" height="15" fill="rgb(219,14,44)" fg:x="79101" fg:w="24"/><text x="92.4445%" y="255.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::is_null::runtime_impl (12 samples, 0.01%)</title><rect x="92.2084%" y="229" width="0.0140%" height="15" fill="rgb(217,220,26)" fg:x="79113" fg:w="12"/><text x="92.4584%" y="239.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (399 samples, 0.47%)</title><rect x="91.8005%" y="293" width="0.4650%" height="15" fill="rgb(213,158,28)" fg:x="78763" fg:w="399"/><text x="92.0505%" y="303.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (388 samples, 0.45%)</title><rect x="91.8133%" y="277" width="0.4522%" height="15" fill="rgb(252,51,52)" fg:x="78774" fg:w="388"/><text x="92.0633%" y="287.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;[T]&gt;::slice_from_raw_parts (37 samples, 0.04%)</title><rect x="92.2224%" y="261" width="0.0431%" height="15" fill="rgb(246,89,16)" fg:x="79125" fg:w="37"/><text x="92.4724%" y="271.50"></text></g><g><title>core::ptr::slice_from_raw_parts_mut (28 samples, 0.03%)</title><rect x="92.2329%" y="245" width="0.0326%" height="15" fill="rgb(216,158,49)" fg:x="79134" fg:w="28"/><text x="92.4829%" y="255.50"></text></g><g><title>core::ptr::metadata::from_raw_parts_mut (28 samples, 0.03%)</title><rect x="92.2329%" y="229" width="0.0326%" height="15" fill="rgb(236,107,19)" fg:x="79134" fg:w="28"/><text x="92.4829%" y="239.50"></text></g><g><title>core::alloc::layout::Layout::max_size_for_align (14 samples, 0.02%)</title><rect x="92.3914%" y="261" width="0.0163%" height="15" fill="rgb(228,185,30)" fg:x="79270" fg:w="14"/><text x="92.6414%" y="271.50"></text></g><g><title>core::alloc::layout::Layout::array::inner (119 samples, 0.14%)</title><rect x="92.2807%" y="277" width="0.1387%" height="15" fill="rgb(246,134,8)" fg:x="79175" fg:w="119"/><text x="92.5307%" y="287.50"></text></g><g><title>core::ptr::alignment::Alignment::as_usize (10 samples, 0.01%)</title><rect x="92.4077%" y="261" width="0.0117%" height="15" fill="rgb(214,143,50)" fg:x="79284" fg:w="10"/><text x="92.6577%" y="271.50"></text></g><g><title>core::alloc::layout::Layout::array (140 samples, 0.16%)</title><rect x="92.2656%" y="293" width="0.1632%" height="15" fill="rgb(228,75,8)" fg:x="79162" fg:w="140"/><text x="92.5156%" y="303.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::as_ptr (13 samples, 0.02%)</title><rect x="92.4287%" y="293" width="0.0152%" height="15" fill="rgb(207,175,4)" fg:x="79302" fg:w="13"/><text x="92.6787%" y="303.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (738 samples, 0.86%)</title><rect x="91.6035%" y="341" width="0.8602%" height="15" fill="rgb(205,108,24)" fg:x="78594" fg:w="738"/><text x="91.8535%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (735 samples, 0.86%)</title><rect x="91.6070%" y="325" width="0.8567%" height="15" fill="rgb(244,120,49)" fg:x="78597" fg:w="735"/><text x="91.8570%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (720 samples, 0.84%)</title><rect x="91.6245%" y="309" width="0.8392%" height="15" fill="rgb(223,47,38)" fg:x="78612" fg:w="720"/><text x="91.8745%" y="319.50"></text></g><g><title>core::ptr::unique::Unique&lt;T&gt;::new_unchecked (17 samples, 0.02%)</title><rect x="92.4439%" y="293" width="0.0198%" height="15" fill="rgb(229,179,11)" fg:x="79315" fg:w="17"/><text x="92.6939%" y="303.50"></text></g><g><title>__memcpy_avx_unaligned_erms (28 samples, 0.03%)</title><rect x="92.4660%" y="309" width="0.0326%" height="15" fill="rgb(231,122,1)" fg:x="79334" fg:w="28"/><text x="92.7160%" y="319.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (44 samples, 0.05%)</title><rect x="92.4637%" y="341" width="0.0513%" height="15" fill="rgb(245,119,9)" fg:x="79332" fg:w="44"/><text x="92.7137%" y="351.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (44 samples, 0.05%)</title><rect x="92.4637%" y="325" width="0.0513%" height="15" fill="rgb(241,163,25)" fg:x="79332" fg:w="44"/><text x="92.7137%" y="335.50"></text></g><g><title>_init (14 samples, 0.02%)</title><rect x="92.4987%" y="309" width="0.0163%" height="15" fill="rgb(217,214,3)" fg:x="79362" fg:w="14"/><text x="92.7487%" y="319.50"></text></g><g><title>coldbrew::runtime::Instruction::get_params (1,002 samples, 1.17%)</title><rect x="91.3576%" y="437" width="1.1679%" height="15" fill="rgb(240,86,28)" fg:x="78383" fg:w="1002"/><text x="91.6076%" y="447.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::clone::Clone&gt;::clone (992 samples, 1.16%)</title><rect x="91.3693%" y="421" width="1.1562%" height="15" fill="rgb(215,47,9)" fg:x="78393" fg:w="992"/><text x="91.6193%" y="431.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (948 samples, 1.10%)</title><rect x="91.4205%" y="405" width="1.1049%" height="15" fill="rgb(252,25,45)" fg:x="78437" fg:w="948"/><text x="91.6705%" y="415.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (881 samples, 1.03%)</title><rect x="91.4986%" y="389" width="1.0268%" height="15" fill="rgb(251,164,9)" fg:x="78504" fg:w="881"/><text x="91.7486%" y="399.50"></text></g><g><title>alloc::slice::hack::to_vec (881 samples, 1.03%)</title><rect x="91.4986%" y="373" width="1.0268%" height="15" fill="rgb(233,194,0)" fg:x="78504" fg:w="881"/><text x="91.7486%" y="383.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (877 samples, 1.02%)</title><rect x="91.5033%" y="357" width="1.0222%" height="15" fill="rgb(249,111,24)" fg:x="78508" fg:w="877"/><text x="91.7533%" y="367.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::as_ptr (9 samples, 0.01%)</title><rect x="92.5150%" y="341" width="0.0105%" height="15" fill="rgb(250,223,3)" fg:x="79376" fg:w="9"/><text x="92.7650%" y="351.50"></text></g><g><title>coldbrew::runtime::ProgramCounter::inc_instruction_index (22 samples, 0.03%)</title><rect x="92.5290%" y="437" width="0.0256%" height="15" fill="rgb(236,178,37)" fg:x="79388" fg:w="22"/><text x="92.7790%" y="447.50"></text></g><g><title>core::ptr::metadata::from_raw_parts_mut (62 samples, 0.07%)</title><rect x="92.8273%" y="357" width="0.0723%" height="15" fill="rgb(241,158,50)" fg:x="79644" fg:w="62"/><text x="93.0773%" y="367.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::DerefMut&gt;::deref_mut (70 samples, 0.08%)</title><rect x="92.8203%" y="405" width="0.0816%" height="15" fill="rgb(213,121,41)" fg:x="79638" fg:w="70"/><text x="93.0703%" y="415.50"></text></g><g><title>core::slice::raw::from_raw_parts_mut (64 samples, 0.07%)</title><rect x="92.8273%" y="389" width="0.0746%" height="15" fill="rgb(240,92,3)" fg:x="79644" fg:w="64"/><text x="93.0773%" y="399.50"></text></g><g><title>core::ptr::slice_from_raw_parts_mut (64 samples, 0.07%)</title><rect x="92.8273%" y="373" width="0.0746%" height="15" fill="rgb(205,123,3)" fg:x="79644" fg:w="64"/><text x="93.0773%" y="383.50"></text></g><g><title>core::ptr::slice_from_raw_parts (13 samples, 0.02%)</title><rect x="92.9287%" y="357" width="0.0152%" height="15" fill="rgb(205,97,47)" fg:x="79731" fg:w="13"/><text x="93.1787%" y="367.50"></text></g><g><title>core::ptr::metadata::from_raw_parts (12 samples, 0.01%)</title><rect x="92.9299%" y="341" width="0.0140%" height="15" fill="rgb(247,152,14)" fg:x="79732" fg:w="12"/><text x="93.1799%" y="351.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (35 samples, 0.04%)</title><rect x="92.9089%" y="389" width="0.0408%" height="15" fill="rgb(248,195,53)" fg:x="79714" fg:w="35"/><text x="93.1589%" y="399.50"></text></g><g><title>core::slice::raw::from_raw_parts (23 samples, 0.03%)</title><rect x="92.9229%" y="373" width="0.0268%" height="15" fill="rgb(226,201,16)" fg:x="79726" fg:w="23"/><text x="93.1729%" y="383.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (68 samples, 0.08%)</title><rect x="92.9019%" y="405" width="0.0793%" height="15" fill="rgb(205,98,0)" fg:x="79708" fg:w="68"/><text x="93.1519%" y="415.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (27 samples, 0.03%)</title><rect x="92.9497%" y="389" width="0.0315%" height="15" fill="rgb(214,191,48)" fg:x="79749" fg:w="27"/><text x="93.1997%" y="399.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (24 samples, 0.03%)</title><rect x="92.9532%" y="373" width="0.0280%" height="15" fill="rgb(237,112,39)" fg:x="79752" fg:w="24"/><text x="93.2032%" y="383.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_mut_ptr (17 samples, 0.02%)</title><rect x="93.0022%" y="373" width="0.0198%" height="15" fill="rgb(247,203,27)" fg:x="79794" fg:w="17"/><text x="93.2522%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (17 samples, 0.02%)</title><rect x="93.0022%" y="357" width="0.0198%" height="15" fill="rgb(235,124,28)" fg:x="79794" fg:w="17"/><text x="93.2522%" y="367.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (33 samples, 0.04%)</title><rect x="92.9917%" y="389" width="0.0385%" height="15" fill="rgb(208,207,46)" fg:x="79785" fg:w="33"/><text x="93.2417%" y="399.50"></text></g><g><title>_int_free (96 samples, 0.11%)</title><rect x="93.1490%" y="309" width="0.1119%" height="15" fill="rgb(234,176,4)" fg:x="79920" fg:w="96"/><text x="93.3990%" y="319.50"></text></g><g><title>tcache_put (21 samples, 0.02%)</title><rect x="93.2364%" y="293" width="0.0245%" height="15" fill="rgb(230,133,28)" fg:x="79995" fg:w="21"/><text x="93.4864%" y="303.50"></text></g><g><title>__GI___libc_free (124 samples, 0.14%)</title><rect x="93.1245%" y="325" width="0.1445%" height="15" fill="rgb(211,137,40)" fg:x="79899" fg:w="124"/><text x="93.3745%" y="335.50"></text></g><g><title>__rust_dealloc (9 samples, 0.01%)</title><rect x="93.2772%" y="325" width="0.0105%" height="15" fill="rgb(254,35,13)" fg:x="80030" fg:w="9"/><text x="93.5272%" y="335.50"></text></g><g><title>alloc::alloc::dealloc (154 samples, 0.18%)</title><rect x="93.1152%" y="341" width="0.1795%" height="15" fill="rgb(225,49,51)" fg:x="79891" fg:w="154"/><text x="93.3652%" y="351.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (193 samples, 0.22%)</title><rect x="93.0709%" y="357" width="0.2249%" height="15" fill="rgb(251,10,15)" fg:x="79853" fg:w="193"/><text x="93.3209%" y="367.50"></text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (10 samples, 0.01%)</title><rect x="93.3693%" y="341" width="0.0117%" height="15" fill="rgb(228,207,15)" fg:x="80109" fg:w="10"/><text x="93.6193%" y="351.50"></text></g><g><title>&lt;core::ptr::non_null::NonNull&lt;T&gt; as core::convert::From&lt;core::ptr::unique::Unique&lt;T&gt;&gt;&gt;::from (10 samples, 0.01%)</title><rect x="93.3693%" y="325" width="0.0117%" height="15" fill="rgb(241,99,19)" fg:x="80109" fg:w="10"/><text x="93.6193%" y="335.50"></text></g><g><title>core::ptr::unique::Unique&lt;T&gt;::as_ptr (10 samples, 0.01%)</title><rect x="93.3693%" y="309" width="0.0117%" height="15" fill="rgb(207,104,49)" fg:x="80109" fg:w="10"/><text x="93.6193%" y="319.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::cast (10 samples, 0.01%)</title><rect x="93.3926%" y="325" width="0.0117%" height="15" fill="rgb(234,99,18)" fg:x="80129" fg:w="10"/><text x="93.6426%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;coldbrew::runtime::Value&gt;&gt; (373 samples, 0.43%)</title><rect x="92.9812%" y="405" width="0.4347%" height="15" fill="rgb(213,191,49)" fg:x="79776" fg:w="373"/><text x="93.2312%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;coldbrew::runtime::Value&gt;&gt; (331 samples, 0.39%)</title><rect x="93.0301%" y="389" width="0.3858%" height="15" fill="rgb(210,226,19)" fg:x="79818" fg:w="331"/><text x="93.2801%" y="399.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (331 samples, 0.39%)</title><rect x="93.0301%" y="373" width="0.3858%" height="15" fill="rgb(229,97,18)" fg:x="79818" fg:w="331"/><text x="93.2801%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::current_memory (103 samples, 0.12%)</title><rect x="93.2959%" y="357" width="0.1200%" height="15" fill="rgb(211,167,15)" fg:x="80046" fg:w="103"/><text x="93.5459%" y="367.50"></text></g><g><title>core::ptr::unique::Unique&lt;T&gt;::cast (21 samples, 0.02%)</title><rect x="93.3915%" y="341" width="0.0245%" height="15" fill="rgb(210,169,34)" fg:x="80128" fg:w="21"/><text x="93.6415%" y="351.50"></text></g><g><title>core::ptr::unique::Unique&lt;T&gt;::new_unchecked (10 samples, 0.01%)</title><rect x="93.4043%" y="325" width="0.0117%" height="15" fill="rgb(241,121,31)" fg:x="80139" fg:w="10"/><text x="93.6543%" y="335.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::new_unchecked (10 samples, 0.01%)</title><rect x="93.4043%" y="309" width="0.0117%" height="15" fill="rgb(232,40,11)" fg:x="80139" fg:w="10"/><text x="93.6543%" y="319.50"></text></g><g><title>core::option::Option&lt;T&gt;::map_or_else (759 samples, 0.88%)</title><rect x="92.5546%" y="437" width="0.8846%" height="15" fill="rgb(205,86,26)" fg:x="79410" fg:w="759"/><text x="92.8046%" y="447.50"></text></g><g><title>coldbrew::trace::Recorder::flip_branch::{{closure}} (605 samples, 0.71%)</title><rect x="92.7341%" y="421" width="0.7051%" height="15" fill="rgb(231,126,28)" fg:x="79564" fg:w="605"/><text x="92.9841%" y="431.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get_mut (20 samples, 0.02%)</title><rect x="93.4159%" y="405" width="0.0233%" height="15" fill="rgb(219,221,18)" fg:x="80149" fg:w="20"/><text x="93.6659%" y="415.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_mut (16 samples, 0.02%)</title><rect x="93.4206%" y="389" width="0.0186%" height="15" fill="rgb(211,40,0)" fg:x="80153" fg:w="16"/><text x="93.6706%" y="399.50"></text></g><g><title>_int_free (48 samples, 0.06%)</title><rect x="93.5371%" y="293" width="0.0559%" height="15" fill="rgb(239,85,43)" fg:x="80253" fg:w="48"/><text x="93.7871%" y="303.50"></text></g><g><title>__GI___libc_free (73 samples, 0.09%)</title><rect x="93.5197%" y="309" width="0.0851%" height="15" fill="rgb(231,55,21)" fg:x="80238" fg:w="73"/><text x="93.7697%" y="319.50"></text></g><g><title>arena_for_chunk (10 samples, 0.01%)</title><rect x="93.5931%" y="293" width="0.0117%" height="15" fill="rgb(225,184,43)" fg:x="80301" fg:w="10"/><text x="93.8431%" y="303.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (96 samples, 0.11%)</title><rect x="93.5057%" y="341" width="0.1119%" height="15" fill="rgb(251,158,41)" fg:x="80226" fg:w="96"/><text x="93.7557%" y="351.50"></text></g><g><title>alloc::alloc::dealloc (86 samples, 0.10%)</title><rect x="93.5173%" y="325" width="0.1002%" height="15" fill="rgb(234,159,37)" fg:x="80236" fg:w="86"/><text x="93.7673%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;coldbrew::trace::RecordEntry&gt; (221 samples, 0.26%)</title><rect x="93.4392%" y="437" width="0.2576%" height="15" fill="rgb(216,204,22)" fg:x="80169" fg:w="221"/><text x="93.6892%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;coldbrew::runtime::Instruction&gt; (221 samples, 0.26%)</title><rect x="93.4392%" y="421" width="0.2576%" height="15" fill="rgb(214,17,3)" fg:x="80169" fg:w="221"/><text x="93.6892%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;alloc::vec::Vec&lt;coldbrew::runtime::Value&gt;&gt;&gt; (221 samples, 0.26%)</title><rect x="93.4392%" y="405" width="0.2576%" height="15" fill="rgb(212,111,17)" fg:x="80169" fg:w="221"/><text x="93.6892%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;coldbrew::runtime::Value&gt;&gt; (204 samples, 0.24%)</title><rect x="93.4591%" y="389" width="0.2378%" height="15" fill="rgb(221,157,24)" fg:x="80186" fg:w="204"/><text x="93.7091%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;coldbrew::runtime::Value&gt;&gt; (187 samples, 0.22%)</title><rect x="93.4789%" y="373" width="0.2180%" height="15" fill="rgb(252,16,13)" fg:x="80203" fg:w="187"/><text x="93.7289%" y="383.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (187 samples, 0.22%)</title><rect x="93.4789%" y="357" width="0.2180%" height="15" fill="rgb(221,62,2)" fg:x="80203" fg:w="187"/><text x="93.7289%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::current_memory (68 samples, 0.08%)</title><rect x="93.6176%" y="341" width="0.0793%" height="15" fill="rgb(247,87,22)" fg:x="80322" fg:w="68"/><text x="93.8676%" y="351.50"></text></g><g><title>core::ptr::unique::Unique&lt;T&gt;::cast (9 samples, 0.01%)</title><rect x="93.6863%" y="325" width="0.0105%" height="15" fill="rgb(215,73,9)" fg:x="80381" fg:w="9"/><text x="93.9363%" y="335.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (28 samples, 0.03%)</title><rect x="93.7458%" y="309" width="0.0326%" height="15" fill="rgb(207,175,33)" fg:x="80432" fg:w="28"/><text x="93.9958%" y="319.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (11 samples, 0.01%)</title><rect x="93.7656%" y="293" width="0.0128%" height="15" fill="rgb(243,129,54)" fg:x="80449" fg:w="11"/><text x="94.0156%" y="303.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (91 samples, 0.11%)</title><rect x="93.9299%" y="293" width="0.1061%" height="15" fill="rgb(227,119,45)" fg:x="80590" fg:w="91"/><text x="94.1799%" y="303.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::finish (254 samples, 0.30%)</title><rect x="93.7411%" y="357" width="0.2960%" height="15" fill="rgb(205,109,36)" fg:x="80428" fg:w="254"/><text x="93.9911%" y="367.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (254 samples, 0.30%)</title><rect x="93.7411%" y="341" width="0.2960%" height="15" fill="rgb(205,6,39)" fg:x="80428" fg:w="254"/><text x="93.9911%" y="351.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (254 samples, 0.30%)</title><rect x="93.7411%" y="325" width="0.2960%" height="15" fill="rgb(221,32,16)" fg:x="80428" fg:w="254"/><text x="93.9911%" y="335.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (222 samples, 0.26%)</title><rect x="93.7784%" y="309" width="0.2587%" height="15" fill="rgb(228,144,50)" fg:x="80460" fg:w="222"/><text x="94.0284%" y="319.50"></text></g><g><title>__memcpy_avx_unaligned_erms (46 samples, 0.05%)</title><rect x="94.0407%" y="341" width="0.0536%" height="15" fill="rgb(229,201,53)" fg:x="80685" fg:w="46"/><text x="94.2907%" y="351.50"></text></g><g><title>__memcpy_avx_unaligned_erms (40 samples, 0.05%)</title><rect x="94.0966%" y="325" width="0.0466%" height="15" fill="rgb(249,153,27)" fg:x="80733" fg:w="40"/><text x="94.3466%" y="335.50"></text></g><g><title>__memcpy_avx_unaligned_erms (59 samples, 0.07%)</title><rect x="94.1619%" y="309" width="0.0688%" height="15" fill="rgb(227,106,25)" fg:x="80789" fg:w="59"/><text x="94.4119%" y="319.50"></text></g><g><title>&lt;std::collections::hash::map::RandomState as core::hash::BuildHasher&gt;::build_hasher (173 samples, 0.20%)</title><rect x="94.0372%" y="357" width="0.2016%" height="15" fill="rgb(230,65,29)" fg:x="80682" fg:w="173"/><text x="94.2872%" y="367.50"></text></g><g><title>core::hash::sip::SipHasher13::new_with_keys (122 samples, 0.14%)</title><rect x="94.0966%" y="341" width="0.1422%" height="15" fill="rgb(221,57,46)" fg:x="80733" fg:w="122"/><text x="94.3466%" y="351.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::new_with_keys (80 samples, 0.09%)</title><rect x="94.1456%" y="325" width="0.0932%" height="15" fill="rgb(229,161,17)" fg:x="80775" fg:w="80"/><text x="94.3956%" y="335.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (16 samples, 0.02%)</title><rect x="94.4008%" y="229" width="0.0186%" height="15" fill="rgb(222,213,11)" fg:x="80994" fg:w="16"/><text x="94.6508%" y="239.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (77 samples, 0.09%)</title><rect x="94.3367%" y="245" width="0.0897%" height="15" fill="rgb(235,35,13)" fg:x="80939" fg:w="77"/><text x="94.5867%" y="255.50"></text></g><g><title>core::hash::sip::u8to64_le (33 samples, 0.04%)</title><rect x="94.4264%" y="245" width="0.0385%" height="15" fill="rgb(233,158,34)" fg:x="81016" fg:w="33"/><text x="94.6764%" y="255.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (10 samples, 0.01%)</title><rect x="94.4649%" y="245" width="0.0117%" height="15" fill="rgb(215,151,48)" fg:x="81049" fg:w="10"/><text x="94.7149%" y="255.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (202 samples, 0.24%)</title><rect x="94.2516%" y="293" width="0.2354%" height="15" fill="rgb(229,84,14)" fg:x="80866" fg:w="202"/><text x="94.5016%" y="303.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (200 samples, 0.23%)</title><rect x="94.2539%" y="277" width="0.2331%" height="15" fill="rgb(229,68,14)" fg:x="80868" fg:w="200"/><text x="94.5039%" y="287.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (200 samples, 0.23%)</title><rect x="94.2539%" y="261" width="0.2331%" height="15" fill="rgb(243,106,26)" fg:x="80868" fg:w="200"/><text x="94.5039%" y="271.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::as_ptr (9 samples, 0.01%)</title><rect x="94.4766%" y="245" width="0.0105%" height="15" fill="rgb(206,45,38)" fg:x="81059" fg:w="9"/><text x="94.7266%" y="255.50"></text></g><g><title>hashbrown::map::make_hash (649 samples, 0.76%)</title><rect x="93.7353%" y="389" width="0.7564%" height="15" fill="rgb(226,6,15)" fg:x="80423" fg:w="649"/><text x="93.9853%" y="399.50"></text></g><g><title>core::hash::BuildHasher::hash_one (646 samples, 0.75%)</title><rect x="93.7388%" y="373" width="0.7529%" height="15" fill="rgb(232,22,54)" fg:x="80426" fg:w="646"/><text x="93.9888%" y="383.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (217 samples, 0.25%)</title><rect x="94.2388%" y="357" width="0.2529%" height="15" fill="rgb(229,222,32)" fg:x="80855" fg:w="217"/><text x="94.4888%" y="367.50"></text></g><g><title>&lt;coldbrew::runtime::ProgramCounter as core::hash::Hash&gt;::hash (213 samples, 0.25%)</title><rect x="94.2435%" y="341" width="0.2483%" height="15" fill="rgb(228,62,29)" fg:x="80859" fg:w="213"/><text x="94.4935%" y="351.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for usize&gt;::hash (210 samples, 0.24%)</title><rect x="94.2470%" y="325" width="0.2448%" height="15" fill="rgb(251,103,34)" fg:x="80862" fg:w="210"/><text x="94.4970%" y="335.50"></text></g><g><title>core::hash::Hasher::write_usize (206 samples, 0.24%)</title><rect x="94.2516%" y="309" width="0.2401%" height="15" fill="rgb(233,12,30)" fg:x="80866" fg:w="206"/><text x="94.5016%" y="319.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_mut (15 samples, 0.02%)</title><rect x="94.4987%" y="389" width="0.0175%" height="15" fill="rgb(238,52,0)" fg:x="81078" fg:w="15"/><text x="94.7487%" y="399.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ptr (15 samples, 0.02%)</title><rect x="94.4987%" y="373" width="0.0175%" height="15" fill="rgb(223,98,5)" fg:x="81078" fg:w="15"/><text x="94.7487%" y="383.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::from_base_index (19 samples, 0.02%)</title><rect x="94.5465%" y="357" width="0.0221%" height="15" fill="rgb(228,75,37)" fg:x="81119" fg:w="19"/><text x="94.7965%" y="367.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::bucket (22 samples, 0.03%)</title><rect x="94.5465%" y="373" width="0.0256%" height="15" fill="rgb(205,115,49)" fg:x="81119" fg:w="22"/><text x="94.7965%" y="383.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve (15 samples, 0.02%)</title><rect x="94.5721%" y="373" width="0.0175%" height="15" fill="rgb(250,154,43)" fg:x="81141" fg:w="15"/><text x="94.8221%" y="383.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMask as core::iter::traits::collect::IntoIterator&gt;::into_iter (15 samples, 0.02%)</title><rect x="94.6654%" y="357" width="0.0175%" height="15" fill="rgb(226,43,29)" fg:x="81221" fg:w="15"/><text x="94.9154%" y="367.50"></text></g><g><title>core::num::nonzero::NonZeroU16::new (18 samples, 0.02%)</title><rect x="94.7528%" y="325" width="0.0210%" height="15" fill="rgb(249,228,39)" fg:x="81296" fg:w="18"/><text x="95.0028%" y="335.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (101 samples, 0.12%)</title><rect x="94.6829%" y="357" width="0.1177%" height="15" fill="rgb(216,79,43)" fg:x="81236" fg:w="101"/><text x="94.9329%" y="367.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (65 samples, 0.08%)</title><rect x="94.7248%" y="341" width="0.0758%" height="15" fill="rgb(228,95,12)" fg:x="81272" fg:w="65"/><text x="94.9748%" y="351.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::nonzero_trailing_zeros (23 samples, 0.03%)</title><rect x="94.7738%" y="325" width="0.0268%" height="15" fill="rgb(249,221,15)" fg:x="81314" fg:w="23"/><text x="95.0238%" y="335.50"></text></g><g><title>core::num::nonzero::NonZeroU16::trailing_zeros (17 samples, 0.02%)</title><rect x="94.7808%" y="309" width="0.0198%" height="15" fill="rgb(233,34,13)" fg:x="81320" fg:w="17"/><text x="95.0308%" y="319.50"></text></g><g><title>hashbrown::map::equivalent_key::{{closure}} (41 samples, 0.05%)</title><rect x="94.8146%" y="341" width="0.0478%" height="15" fill="rgb(214,103,39)" fg:x="81349" fg:w="41"/><text x="95.0646%" y="351.50"></text></g><g><title>&lt;Q as hashbrown::Equivalent&lt;K&gt;&gt;::equivalent (35 samples, 0.04%)</title><rect x="94.8216%" y="325" width="0.0408%" height="15" fill="rgb(251,126,39)" fg:x="81355" fg:w="35"/><text x="95.0716%" y="335.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (25 samples, 0.03%)</title><rect x="94.8332%" y="309" width="0.0291%" height="15" fill="rgb(214,216,36)" fg:x="81365" fg:w="25"/><text x="95.0832%" y="319.50"></text></g><g><title>&lt;coldbrew::runtime::ProgramCounter as core::cmp::PartialEq&gt;::eq (24 samples, 0.03%)</title><rect x="94.8344%" y="293" width="0.0280%" height="15" fill="rgb(220,221,8)" fg:x="81366" fg:w="24"/><text x="95.0844%" y="303.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ref (21 samples, 0.02%)</title><rect x="94.8624%" y="341" width="0.0245%" height="15" fill="rgb(240,216,3)" fg:x="81390" fg:w="21"/><text x="95.1124%" y="351.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ptr (18 samples, 0.02%)</title><rect x="94.8658%" y="325" width="0.0210%" height="15" fill="rgb(232,218,17)" fg:x="81393" fg:w="18"/><text x="95.1158%" y="335.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::from_base_index (22 samples, 0.03%)</title><rect x="94.8880%" y="325" width="0.0256%" height="15" fill="rgb(229,163,45)" fg:x="81412" fg:w="22"/><text x="95.1380%" y="335.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find_or_find_insert_slot::{{closure}} (100 samples, 0.12%)</title><rect x="94.8006%" y="357" width="0.1166%" height="15" fill="rgb(231,110,42)" fg:x="81337" fg:w="100"/><text x="95.0506%" y="367.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::bucket (26 samples, 0.03%)</title><rect x="94.8868%" y="341" width="0.0303%" height="15" fill="rgb(208,170,48)" fg:x="81411" fg:w="26"/><text x="95.1368%" y="351.50"></text></g><g><title>hashbrown::raw::sse2::Group::load (137 samples, 0.16%)</title><rect x="94.9253%" y="357" width="0.1597%" height="15" fill="rgb(239,116,25)" fg:x="81444" fg:w="137"/><text x="95.1753%" y="367.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (131 samples, 0.15%)</title><rect x="94.9323%" y="341" width="0.1527%" height="15" fill="rgb(219,200,50)" fg:x="81450" fg:w="131"/><text x="95.1823%" y="351.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (9 samples, 0.01%)</title><rect x="95.0745%" y="325" width="0.0105%" height="15" fill="rgb(245,200,0)" fg:x="81572" fg:w="9"/><text x="95.3245%" y="335.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_cmpeq_epi8 (32 samples, 0.04%)</title><rect x="95.1491%" y="341" width="0.0373%" height="15" fill="rgb(245,119,33)" fg:x="81636" fg:w="32"/><text x="95.3991%" y="351.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (112 samples, 0.13%)</title><rect x="95.1864%" y="341" width="0.1305%" height="15" fill="rgb(231,125,12)" fg:x="81668" fg:w="112"/><text x="95.4364%" y="351.50"></text></g><g><title>core::core_arch::simd::i8x16::splat (10 samples, 0.01%)</title><rect x="95.3053%" y="325" width="0.0117%" height="15" fill="rgb(216,96,41)" fg:x="81770" fg:w="10"/><text x="95.5553%" y="335.50"></text></g><g><title>coldbrew::trace::Recorder::flip_branch (3,899 samples, 4.54%)</title><rect x="90.8483%" y="453" width="4.5444%" height="15" fill="rgb(248,43,45)" fg:x="77946" fg:w="3899"/><text x="91.0983%" y="463.50">coldb..</text></g><g><title>std::collections::hash::set::HashSet&lt;T,S&gt;::insert (1,455 samples, 1.70%)</title><rect x="93.6968%" y="437" width="1.6958%" height="15" fill="rgb(217,222,7)" fg:x="80390" fg:w="1455"/><text x="93.9468%" y="447.50"></text></g><g><title>hashbrown::set::HashSet&lt;T,S,A&gt;::insert (1,451 samples, 1.69%)</title><rect x="93.7015%" y="421" width="1.6912%" height="15" fill="rgb(233,28,6)" fg:x="80394" fg:w="1451"/><text x="93.9515%" y="431.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1,447 samples, 1.69%)</title><rect x="93.7061%" y="405" width="1.6865%" height="15" fill="rgb(231,218,15)" fg:x="80398" fg:w="1447"/><text x="93.9561%" y="415.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find_or_find_insert_slot (752 samples, 0.88%)</title><rect x="94.5162%" y="389" width="0.8765%" height="15" fill="rgb(226,171,48)" fg:x="81093" fg:w="752"/><text x="94.7662%" y="399.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::find_or_find_insert_slot_inner (689 samples, 0.80%)</title><rect x="94.5896%" y="373" width="0.8030%" height="15" fill="rgb(235,201,9)" fg:x="81156" fg:w="689"/><text x="94.8396%" y="383.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (264 samples, 0.31%)</title><rect x="95.0850%" y="357" width="0.3077%" height="15" fill="rgb(217,80,15)" fg:x="81581" fg:w="264"/><text x="95.3350%" y="367.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_set1_epi8 (65 samples, 0.08%)</title><rect x="95.3169%" y="341" width="0.0758%" height="15" fill="rgb(219,152,8)" fg:x="81780" fg:w="65"/><text x="95.5669%" y="351.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_set_epi8 (65 samples, 0.08%)</title><rect x="95.3169%" y="325" width="0.0758%" height="15" fill="rgb(243,107,38)" fg:x="81780" fg:w="65"/><text x="95.5669%" y="335.50"></text></g><g><title>core::core_arch::simd::i8x16::new (12 samples, 0.01%)</title><rect x="95.3787%" y="309" width="0.0140%" height="15" fill="rgb(231,17,5)" fg:x="81833" fg:w="12"/><text x="95.6287%" y="319.50"></text></g><g><title>coldbrew::trace::Recorder::get_params (113 samples, 0.13%)</title><rect x="95.3927%" y="453" width="0.1317%" height="15" fill="rgb(209,25,54)" fg:x="81845" fg:w="113"/><text x="95.6427%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;coldbrew::runtime::Instruction&gt; (13 samples, 0.02%)</title><rect x="95.5244%" y="453" width="0.0152%" height="15" fill="rgb(219,0,2)" fg:x="81958" fg:w="13"/><text x="95.7744%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;alloc::vec::Vec&lt;coldbrew::runtime::Value&gt;&gt;&gt; (13 samples, 0.02%)</title><rect x="95.5244%" y="437" width="0.0152%" height="15" fill="rgb(246,9,5)" fg:x="81958" fg:w="13"/><text x="95.7744%" y="447.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (26 samples, 0.03%)</title><rect x="95.6083%" y="325" width="0.0303%" height="15" fill="rgb(226,159,4)" fg:x="82030" fg:w="26"/><text x="95.8583%" y="335.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (62 samples, 0.07%)</title><rect x="95.7808%" y="309" width="0.0723%" height="15" fill="rgb(219,175,34)" fg:x="82178" fg:w="62"/><text x="96.0308%" y="319.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::finish (221 samples, 0.26%)</title><rect x="95.5966%" y="373" width="0.2576%" height="15" fill="rgb(236,10,46)" fg:x="82020" fg:w="221"/><text x="95.8466%" y="383.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (221 samples, 0.26%)</title><rect x="95.5966%" y="357" width="0.2576%" height="15" fill="rgb(240,211,16)" fg:x="82020" fg:w="221"/><text x="95.8466%" y="367.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (221 samples, 0.26%)</title><rect x="95.5966%" y="341" width="0.2576%" height="15" fill="rgb(205,3,43)" fg:x="82020" fg:w="221"/><text x="95.8466%" y="351.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (185 samples, 0.22%)</title><rect x="95.6386%" y="325" width="0.2156%" height="15" fill="rgb(245,7,22)" fg:x="82056" fg:w="185"/><text x="95.8886%" y="335.50"></text></g><g><title>__memcpy_avx_unaligned_erms (40 samples, 0.05%)</title><rect x="95.8589%" y="357" width="0.0466%" height="15" fill="rgb(239,132,32)" fg:x="82245" fg:w="40"/><text x="96.1089%" y="367.50"></text></g><g><title>__memcpy_avx_unaligned_erms (53 samples, 0.06%)</title><rect x="95.9055%" y="341" width="0.0618%" height="15" fill="rgb(228,202,34)" fg:x="82285" fg:w="53"/><text x="96.1555%" y="351.50"></text></g><g><title>__memcpy_avx_unaligned_erms (60 samples, 0.07%)</title><rect x="95.9824%" y="325" width="0.0699%" height="15" fill="rgb(254,200,22)" fg:x="82351" fg:w="60"/><text x="96.2324%" y="335.50"></text></g><g><title>&lt;std::collections::hash::map::RandomState as core::hash::BuildHasher&gt;::build_hasher (185 samples, 0.22%)</title><rect x="95.8542%" y="373" width="0.2156%" height="15" fill="rgb(219,10,39)" fg:x="82241" fg:w="185"/><text x="96.1042%" y="383.50"></text></g><g><title>core::hash::sip::SipHasher13::new_with_keys (141 samples, 0.16%)</title><rect x="95.9055%" y="357" width="0.1643%" height="15" fill="rgb(226,210,39)" fg:x="82285" fg:w="141"/><text x="96.1555%" y="367.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::new_with_keys (86 samples, 0.10%)</title><rect x="95.9696%" y="341" width="0.1002%" height="15" fill="rgb(208,219,16)" fg:x="82340" fg:w="86"/><text x="96.2196%" y="351.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::reset (13 samples, 0.02%)</title><rect x="96.0547%" y="325" width="0.0152%" height="15" fill="rgb(216,158,51)" fg:x="82413" fg:w="13"/><text x="96.3047%" y="335.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (25 samples, 0.03%)</title><rect x="96.2179%" y="245" width="0.0291%" height="15" fill="rgb(233,14,44)" fg:x="82553" fg:w="25"/><text x="96.4679%" y="255.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (76 samples, 0.09%)</title><rect x="96.1654%" y="261" width="0.0886%" height="15" fill="rgb(237,97,39)" fg:x="82508" fg:w="76"/><text x="96.4154%" y="271.50"></text></g><g><title>core::hash::sip::u8to64_le (24 samples, 0.03%)</title><rect x="96.2540%" y="261" width="0.0280%" height="15" fill="rgb(218,198,43)" fg:x="82584" fg:w="24"/><text x="96.5040%" y="271.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (191 samples, 0.22%)</title><rect x="96.0757%" y="309" width="0.2226%" height="15" fill="rgb(231,104,20)" fg:x="82431" fg:w="191"/><text x="96.3257%" y="319.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (188 samples, 0.22%)</title><rect x="96.0792%" y="293" width="0.2191%" height="15" fill="rgb(254,36,13)" fg:x="82434" fg:w="188"/><text x="96.3292%" y="303.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (188 samples, 0.22%)</title><rect x="96.0792%" y="277" width="0.2191%" height="15" fill="rgb(248,14,50)" fg:x="82434" fg:w="188"/><text x="96.3292%" y="287.50"></text></g><g><title>hashbrown::map::make_hash (618 samples, 0.72%)</title><rect x="95.5815%" y="405" width="0.7203%" height="15" fill="rgb(217,107,29)" fg:x="82007" fg:w="618"/><text x="95.8315%" y="415.50"></text></g><g><title>core::hash::BuildHasher::hash_one (610 samples, 0.71%)</title><rect x="95.5908%" y="389" width="0.7110%" height="15" fill="rgb(251,169,33)" fg:x="82015" fg:w="610"/><text x="95.8408%" y="399.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (199 samples, 0.23%)</title><rect x="96.0698%" y="373" width="0.2319%" height="15" fill="rgb(217,108,32)" fg:x="82426" fg:w="199"/><text x="96.3198%" y="383.50"></text></g><g><title>&lt;coldbrew::runtime::ProgramCounter as core::hash::Hash&gt;::hash (198 samples, 0.23%)</title><rect x="96.0710%" y="357" width="0.2308%" height="15" fill="rgb(219,66,42)" fg:x="82427" fg:w="198"/><text x="96.3210%" y="367.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for usize&gt;::hash (195 samples, 0.23%)</title><rect x="96.0745%" y="341" width="0.2273%" height="15" fill="rgb(206,180,7)" fg:x="82430" fg:w="195"/><text x="96.3245%" y="351.50"></text></g><g><title>core::hash::Hasher::write_usize (194 samples, 0.23%)</title><rect x="96.0757%" y="325" width="0.2261%" height="15" fill="rgb(208,226,31)" fg:x="82431" fg:w="194"/><text x="96.3257%" y="335.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_mut (13 samples, 0.02%)</title><rect x="96.3041%" y="405" width="0.0152%" height="15" fill="rgb(218,26,49)" fg:x="82627" fg:w="13"/><text x="96.5541%" y="415.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ptr (13 samples, 0.02%)</title><rect x="96.3041%" y="389" width="0.0152%" height="15" fill="rgb(233,197,48)" fg:x="82627" fg:w="13"/><text x="96.5541%" y="399.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::from_base_index (16 samples, 0.02%)</title><rect x="96.3496%" y="373" width="0.0186%" height="15" fill="rgb(252,181,51)" fg:x="82666" fg:w="16"/><text x="96.5996%" y="383.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::bucket (18 samples, 0.02%)</title><rect x="96.3496%" y="389" width="0.0210%" height="15" fill="rgb(253,90,19)" fg:x="82666" fg:w="18"/><text x="96.5996%" y="399.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve (19 samples, 0.02%)</title><rect x="96.3705%" y="389" width="0.0221%" height="15" fill="rgb(215,171,30)" fg:x="82684" fg:w="19"/><text x="96.6205%" y="399.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMask as core::iter::traits::collect::IntoIterator&gt;::into_iter (15 samples, 0.02%)</title><rect x="96.4801%" y="373" width="0.0175%" height="15" fill="rgb(214,222,9)" fg:x="82778" fg:w="15"/><text x="96.7301%" y="383.50"></text></g><g><title>core::num::nonzero::NonZeroU16::new (14 samples, 0.02%)</title><rect x="96.5687%" y="341" width="0.0163%" height="15" fill="rgb(223,3,22)" fg:x="82854" fg:w="14"/><text x="96.8187%" y="351.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (99 samples, 0.12%)</title><rect x="96.4976%" y="373" width="0.1154%" height="15" fill="rgb(225,196,46)" fg:x="82793" fg:w="99"/><text x="96.7476%" y="383.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (75 samples, 0.09%)</title><rect x="96.5256%" y="357" width="0.0874%" height="15" fill="rgb(209,110,37)" fg:x="82817" fg:w="75"/><text x="96.7756%" y="367.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::nonzero_trailing_zeros (24 samples, 0.03%)</title><rect x="96.5850%" y="341" width="0.0280%" height="15" fill="rgb(249,89,12)" fg:x="82868" fg:w="24"/><text x="96.8350%" y="351.50"></text></g><g><title>core::num::nonzero::NonZeroU16::trailing_zeros (21 samples, 0.02%)</title><rect x="96.5885%" y="325" width="0.0245%" height="15" fill="rgb(226,27,33)" fg:x="82871" fg:w="21"/><text x="96.8385%" y="335.50"></text></g><g><title>hashbrown::map::equivalent_key::{{closure}} (59 samples, 0.07%)</title><rect x="96.6176%" y="357" width="0.0688%" height="15" fill="rgb(213,82,22)" fg:x="82896" fg:w="59"/><text x="96.8676%" y="367.50"></text></g><g><title>&lt;Q as hashbrown::Equivalent&lt;K&gt;&gt;::equivalent (54 samples, 0.06%)</title><rect x="96.6235%" y="341" width="0.0629%" height="15" fill="rgb(248,140,0)" fg:x="82901" fg:w="54"/><text x="96.8735%" y="351.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (39 samples, 0.05%)</title><rect x="96.6409%" y="325" width="0.0455%" height="15" fill="rgb(228,106,3)" fg:x="82916" fg:w="39"/><text x="96.8909%" y="335.50"></text></g><g><title>&lt;coldbrew::runtime::ProgramCounter as core::cmp::PartialEq&gt;::eq (36 samples, 0.04%)</title><rect x="96.6444%" y="309" width="0.0420%" height="15" fill="rgb(209,23,37)" fg:x="82919" fg:w="36"/><text x="96.8944%" y="319.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ref (15 samples, 0.02%)</title><rect x="96.6864%" y="357" width="0.0175%" height="15" fill="rgb(241,93,50)" fg:x="82955" fg:w="15"/><text x="96.9364%" y="367.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ptr (13 samples, 0.02%)</title><rect x="96.6887%" y="341" width="0.0152%" height="15" fill="rgb(253,46,43)" fg:x="82957" fg:w="13"/><text x="96.9387%" y="351.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::from_base_index (27 samples, 0.03%)</title><rect x="96.7062%" y="341" width="0.0315%" height="15" fill="rgb(226,206,43)" fg:x="82972" fg:w="27"/><text x="96.9562%" y="351.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find_or_find_insert_slot::{{closure}} (109 samples, 0.13%)</title><rect x="96.6130%" y="373" width="0.1270%" height="15" fill="rgb(217,54,7)" fg:x="82892" fg:w="109"/><text x="96.8630%" y="383.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::bucket (31 samples, 0.04%)</title><rect x="96.7039%" y="357" width="0.0361%" height="15" fill="rgb(223,5,52)" fg:x="82970" fg:w="31"/><text x="96.9539%" y="367.50"></text></g><g><title>hashbrown::raw::sse2::Group::load (168 samples, 0.20%)</title><rect x="96.7493%" y="373" width="0.1958%" height="15" fill="rgb(206,52,46)" fg:x="83009" fg:w="168"/><text x="96.9993%" y="383.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (154 samples, 0.18%)</title><rect x="96.7657%" y="357" width="0.1795%" height="15" fill="rgb(253,136,11)" fg:x="83023" fg:w="154"/><text x="97.0157%" y="367.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_cmpeq_epi8 (35 samples, 0.04%)</title><rect x="97.0011%" y="357" width="0.0408%" height="15" fill="rgb(208,106,33)" fg:x="83225" fg:w="35"/><text x="97.2511%" y="367.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (92 samples, 0.11%)</title><rect x="97.0419%" y="357" width="0.1072%" height="15" fill="rgb(206,54,4)" fg:x="83260" fg:w="92"/><text x="97.2919%" y="367.50"></text></g><g><title>coldbrew::trace::Recorder::record (9,034 samples, 10.53%)</title><rect x="86.6908%" y="469" width="10.5294%" height="15" fill="rgb(213,3,15)" fg:x="74379" fg:w="9034"/><text x="86.9408%" y="479.50">coldbrew::trace..</text></g><g><title>std::collections::hash::set::HashSet&lt;T,S&gt;::insert (1,442 samples, 1.68%)</title><rect x="95.5395%" y="453" width="1.6807%" height="15" fill="rgb(252,211,39)" fg:x="81971" fg:w="1442"/><text x="95.7895%" y="463.50"></text></g><g><title>hashbrown::set::HashSet&lt;T,S,A&gt;::insert (1,438 samples, 1.68%)</title><rect x="95.5442%" y="437" width="1.6760%" height="15" fill="rgb(223,6,36)" fg:x="81975" fg:w="1438"/><text x="95.7942%" y="447.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1,432 samples, 1.67%)</title><rect x="95.5512%" y="421" width="1.6690%" height="15" fill="rgb(252,169,45)" fg:x="81981" fg:w="1432"/><text x="95.8012%" y="431.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find_or_find_insert_slot (773 samples, 0.90%)</title><rect x="96.3193%" y="405" width="0.9010%" height="15" fill="rgb(212,48,26)" fg:x="82640" fg:w="773"/><text x="96.5693%" y="415.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::find_or_find_insert_slot_inner (710 samples, 0.83%)</title><rect x="96.3927%" y="389" width="0.8275%" height="15" fill="rgb(251,102,48)" fg:x="82703" fg:w="710"/><text x="96.6427%" y="399.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (236 samples, 0.28%)</title><rect x="96.9452%" y="373" width="0.2751%" height="15" fill="rgb(243,208,16)" fg:x="83177" fg:w="236"/><text x="97.1952%" y="383.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_set1_epi8 (61 samples, 0.07%)</title><rect x="97.1491%" y="357" width="0.0711%" height="15" fill="rgb(219,96,24)" fg:x="83352" fg:w="61"/><text x="97.3991%" y="367.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_set_epi8 (61 samples, 0.07%)</title><rect x="97.1491%" y="341" width="0.0711%" height="15" fill="rgb(219,33,29)" fg:x="83352" fg:w="61"/><text x="97.3991%" y="351.50"></text></g><g><title>core::option::Option&lt;T&gt;::unwrap (82 samples, 0.10%)</title><rect x="97.2202%" y="469" width="0.0956%" height="15" fill="rgb(223,176,5)" fg:x="83413" fg:w="82"/><text x="97.4702%" y="479.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_mut_ptr (21 samples, 0.02%)</title><rect x="97.4603%" y="405" width="0.0245%" height="15" fill="rgb(228,140,14)" fg:x="83619" fg:w="21"/><text x="97.7103%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (21 samples, 0.02%)</title><rect x="97.4603%" y="389" width="0.0245%" height="15" fill="rgb(217,179,31)" fg:x="83619" fg:w="21"/><text x="97.7103%" y="399.50"></text></g><g><title>core::ptr::metadata::from_raw_parts_mut (22 samples, 0.03%)</title><rect x="97.4848%" y="389" width="0.0256%" height="15" fill="rgb(230,9,30)" fg:x="83640" fg:w="22"/><text x="97.7348%" y="399.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (62 samples, 0.07%)</title><rect x="97.4393%" y="421" width="0.0723%" height="15" fill="rgb(230,136,20)" fg:x="83601" fg:w="62"/><text x="97.6893%" y="431.50"></text></g><g><title>core::ptr::slice_from_raw_parts_mut (23 samples, 0.03%)</title><rect x="97.4848%" y="405" width="0.0268%" height="15" fill="rgb(215,210,22)" fg:x="83640" fg:w="23"/><text x="97.7348%" y="415.50"></text></g><g><title>_int_free (206 samples, 0.24%)</title><rect x="97.7365%" y="341" width="0.2401%" height="15" fill="rgb(218,43,5)" fg:x="83856" fg:w="206"/><text x="97.9865%" y="351.50"></text></g><g><title>tcache_put (30 samples, 0.03%)</title><rect x="97.9417%" y="325" width="0.0350%" height="15" fill="rgb(216,11,5)" fg:x="84032" fg:w="30"/><text x="98.1917%" y="335.50"></text></g><g><title>__GI___libc_free (275 samples, 0.32%)</title><rect x="97.6794%" y="357" width="0.3205%" height="15" fill="rgb(209,82,29)" fg:x="83807" fg:w="275"/><text x="97.9294%" y="367.50"></text></g><g><title>arena_for_chunk (20 samples, 0.02%)</title><rect x="97.9766%" y="341" width="0.0233%" height="15" fill="rgb(244,115,12)" fg:x="84062" fg:w="20"/><text x="98.2266%" y="351.50"></text></g><g><title>__rdl_dealloc (11 samples, 0.01%)</title><rect x="98.0000%" y="357" width="0.0128%" height="15" fill="rgb(222,82,18)" fg:x="84082" fg:w="11"/><text x="98.2500%" y="367.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (11 samples, 0.01%)</title><rect x="98.0000%" y="341" width="0.0128%" height="15" fill="rgb(249,227,8)" fg:x="84082" fg:w="11"/><text x="98.2500%" y="351.50"></text></g><g><title>__rust_dealloc (9 samples, 0.01%)</title><rect x="98.0128%" y="357" width="0.0105%" height="15" fill="rgb(253,141,45)" fg:x="84093" fg:w="9"/><text x="98.2628%" y="367.50"></text></g><g><title>core::alloc::layout::Layout::align (10 samples, 0.01%)</title><rect x="98.0233%" y="357" width="0.0117%" height="15" fill="rgb(234,184,4)" fg:x="84102" fg:w="10"/><text x="98.2733%" y="367.50"></text></g><g><title>alloc::alloc::dealloc (322 samples, 0.38%)</title><rect x="97.6620%" y="373" width="0.3753%" height="15" fill="rgb(218,194,23)" fg:x="83792" fg:w="322"/><text x="97.9120%" y="383.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (396 samples, 0.46%)</title><rect x="97.5804%" y="389" width="0.4615%" height="15" fill="rgb(235,66,41)" fg:x="83722" fg:w="396"/><text x="97.8304%" y="399.50"></text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (21 samples, 0.02%)</title><rect x="98.2785%" y="373" width="0.0245%" height="15" fill="rgb(245,217,1)" fg:x="84321" fg:w="21"/><text x="98.5285%" y="383.50"></text></g><g><title>&lt;core::ptr::non_null::NonNull&lt;T&gt; as core::convert::From&lt;core::ptr::unique::Unique&lt;T&gt;&gt;&gt;::from (21 samples, 0.02%)</title><rect x="98.2785%" y="357" width="0.0245%" height="15" fill="rgb(229,91,1)" fg:x="84321" fg:w="21"/><text x="98.5285%" y="367.50"></text></g><g><title>core::ptr::unique::Unique&lt;T&gt;::as_ptr (21 samples, 0.02%)</title><rect x="98.2785%" y="341" width="0.0245%" height="15" fill="rgb(207,101,30)" fg:x="84321" fg:w="21"/><text x="98.5285%" y="351.50"></text></g><g><title>core::alloc::layout::Layout::from_size_align_unchecked (17 samples, 0.02%)</title><rect x="98.3042%" y="373" width="0.0198%" height="15" fill="rgb(223,82,49)" fg:x="84343" fg:w="17"/><text x="98.5542%" y="383.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::cast (24 samples, 0.03%)</title><rect x="98.3251%" y="357" width="0.0280%" height="15" fill="rgb(218,167,17)" fg:x="84361" fg:w="24"/><text x="98.5751%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;coldbrew::runtime::Instruction&gt; (909 samples, 1.06%)</title><rect x="97.3158%" y="469" width="1.0595%" height="15" fill="rgb(208,103,14)" fg:x="83495" fg:w="909"/><text x="97.5658%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;alloc::vec::Vec&lt;coldbrew::runtime::Value&gt;&gt;&gt; (909 samples, 1.06%)</title><rect x="97.3158%" y="453" width="1.0595%" height="15" fill="rgb(238,20,8)" fg:x="83495" fg:w="909"/><text x="97.5658%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;coldbrew::runtime::Value&gt;&gt; (835 samples, 0.97%)</title><rect x="97.4020%" y="437" width="0.9732%" height="15" fill="rgb(218,80,54)" fg:x="83569" fg:w="835"/><text x="97.6520%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;coldbrew::runtime::Value&gt;&gt; (741 samples, 0.86%)</title><rect x="97.5116%" y="421" width="0.8637%" height="15" fill="rgb(240,144,17)" fg:x="83663" fg:w="741"/><text x="97.7616%" y="431.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (741 samples, 0.86%)</title><rect x="97.5116%" y="405" width="0.8637%" height="15" fill="rgb(245,27,50)" fg:x="83663" fg:w="741"/><text x="97.7616%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::current_memory (286 samples, 0.33%)</title><rect x="98.0419%" y="389" width="0.3333%" height="15" fill="rgb(251,51,7)" fg:x="84118" fg:w="286"/><text x="98.2919%" y="399.50"></text></g><g><title>core::ptr::unique::Unique&lt;T&gt;::cast (44 samples, 0.05%)</title><rect x="98.3240%" y="373" width="0.0513%" height="15" fill="rgb(245,217,29)" fg:x="84360" fg:w="44"/><text x="98.5740%" y="383.50"></text></g><g><title>core::ptr::unique::Unique&lt;T&gt;::new_unchecked (19 samples, 0.02%)</title><rect x="98.3531%" y="357" width="0.0221%" height="15" fill="rgb(221,176,29)" fg:x="84385" fg:w="19"/><text x="98.6031%" y="367.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::new_unchecked (15 samples, 0.02%)</title><rect x="98.3578%" y="341" width="0.0175%" height="15" fill="rgb(212,180,24)" fg:x="84389" fg:w="15"/><text x="98.6078%" y="351.50"></text></g><g><title>coldbrew::runtime::Runtime::run (70,485 samples, 82.15%)</title><rect x="16.3267%" y="485" width="82.1523%" height="15" fill="rgb(254,24,2)" fg:x="14008" fg:w="70485"/><text x="16.5767%" y="495.50">coldbrew::runtime::Runtime::run</text></g><g><title>core::slice::&lt;impl [T]&gt;::last (89 samples, 0.10%)</title><rect x="98.3753%" y="469" width="0.1037%" height="15" fill="rgb(230,100,2)" fg:x="84404" fg:w="89"/><text x="98.6253%" y="479.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_mut_ptr (12 samples, 0.01%)</title><rect x="98.7494%" y="325" width="0.0140%" height="15" fill="rgb(219,142,25)" fg:x="84725" fg:w="12"/><text x="98.9994%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (12 samples, 0.01%)</title><rect x="98.7494%" y="309" width="0.0140%" height="15" fill="rgb(240,73,43)" fg:x="84725" fg:w="12"/><text x="98.9994%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (73 samples, 0.09%)</title><rect x="98.6981%" y="341" width="0.0851%" height="15" fill="rgb(214,114,15)" fg:x="84681" fg:w="73"/><text x="98.9481%" y="351.50"></text></g><g><title>core::ptr::slice_from_raw_parts_mut (17 samples, 0.02%)</title><rect x="98.7634%" y="325" width="0.0198%" height="15" fill="rgb(207,130,4)" fg:x="84737" fg:w="17"/><text x="99.0134%" y="335.50"></text></g><g><title>core::ptr::metadata::from_raw_parts_mut (17 samples, 0.02%)</title><rect x="98.7634%" y="309" width="0.0198%" height="15" fill="rgb(221,25,40)" fg:x="84737" fg:w="17"/><text x="99.0134%" y="319.50"></text></g><g><title>_int_free (299 samples, 0.35%)</title><rect x="99.0035%" y="261" width="0.3485%" height="15" fill="rgb(241,184,7)" fg:x="84943" fg:w="299"/><text x="99.2535%" y="271.50"></text></g><g><title>__GI___libc_free (378 samples, 0.44%)</title><rect x="98.9300%" y="277" width="0.4406%" height="15" fill="rgb(235,159,4)" fg:x="84880" fg:w="378"/><text x="99.1800%" y="287.50"></text></g><g><title>arena_for_chunk (16 samples, 0.02%)</title><rect x="99.3520%" y="261" width="0.0186%" height="15" fill="rgb(214,87,48)" fg:x="85242" fg:w="16"/><text x="99.6020%" y="271.50"></text></g><g><title>__rdl_dealloc (15 samples, 0.02%)</title><rect x="99.3706%" y="277" width="0.0175%" height="15" fill="rgb(246,198,24)" fg:x="85258" fg:w="15"/><text x="99.6206%" y="287.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (15 samples, 0.02%)</title><rect x="99.3706%" y="261" width="0.0175%" height="15" fill="rgb(209,66,40)" fg:x="85258" fg:w="15"/><text x="99.6206%" y="271.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (486 samples, 0.57%)</title><rect x="98.8508%" y="309" width="0.5664%" height="15" fill="rgb(233,147,39)" fg:x="84812" fg:w="486"/><text x="99.1008%" y="319.50"></text></g><g><title>alloc::alloc::dealloc (431 samples, 0.50%)</title><rect x="98.9149%" y="293" width="0.5023%" height="15" fill="rgb(231,145,52)" fg:x="84867" fg:w="431"/><text x="99.1649%" y="303.50"></text></g><g><title>core::alloc::layout::Layout::align (20 samples, 0.02%)</title><rect x="99.3939%" y="277" width="0.0233%" height="15" fill="rgb(206,20,26)" fg:x="85278" fg:w="20"/><text x="99.6439%" y="287.50"></text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (16 samples, 0.02%)</title><rect x="99.5757%" y="293" width="0.0186%" height="15" fill="rgb(238,220,4)" fg:x="85434" fg:w="16"/><text x="99.8257%" y="303.50"></text></g><g><title>&lt;core::ptr::non_null::NonNull&lt;T&gt; as core::convert::From&lt;core::ptr::unique::Unique&lt;T&gt;&gt;&gt;::from (16 samples, 0.02%)</title><rect x="99.5757%" y="277" width="0.0186%" height="15" fill="rgb(252,195,42)" fg:x="85434" fg:w="16"/><text x="99.8257%" y="287.50"></text></g><g><title>core::ptr::unique::Unique&lt;T&gt;::as_ptr (16 samples, 0.02%)</title><rect x="99.5757%" y="261" width="0.0186%" height="15" fill="rgb(209,10,6)" fg:x="85434" fg:w="16"/><text x="99.8257%" y="271.50"></text></g><g><title>core::alloc::layout::Layout::from_size_align_unchecked (16 samples, 0.02%)</title><rect x="99.5944%" y="293" width="0.0186%" height="15" fill="rgb(229,3,52)" fg:x="85450" fg:w="16"/><text x="99.8444%" y="303.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::cast (10 samples, 0.01%)</title><rect x="99.6142%" y="277" width="0.0117%" height="15" fill="rgb(253,49,37)" fg:x="85467" fg:w="10"/><text x="99.8642%" y="287.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1,002 samples, 1.17%)</title><rect x="98.4802%" y="437" width="1.1679%" height="15" fill="rgb(240,103,49)" fg:x="84494" fg:w="1002"/><text x="98.7302%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;[coldbrew::trace::RecordEntry]&gt; (1,002 samples, 1.17%)</title><rect x="98.4802%" y="421" width="1.1679%" height="15" fill="rgb(250,182,30)" fg:x="84494" fg:w="1002"/><text x="98.7302%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;coldbrew::trace::RecordEntry&gt; (942 samples, 1.10%)</title><rect x="98.5501%" y="405" width="1.0979%" height="15" fill="rgb(248,8,30)" fg:x="84554" fg:w="942"/><text x="98.8001%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;coldbrew::runtime::Instruction&gt; (941 samples, 1.10%)</title><rect x="98.5512%" y="389" width="1.0968%" height="15" fill="rgb(237,120,30)" fg:x="84555" fg:w="941"/><text x="98.8012%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;alloc::vec::Vec&lt;coldbrew::runtime::Value&gt;&gt;&gt; (940 samples, 1.10%)</title><rect x="98.5524%" y="373" width="1.0956%" height="15" fill="rgb(221,146,34)" fg:x="84556" fg:w="940"/><text x="98.8024%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;coldbrew::runtime::Value&gt;&gt; (839 samples, 0.98%)</title><rect x="98.6701%" y="357" width="0.9779%" height="15" fill="rgb(242,55,13)" fg:x="84657" fg:w="839"/><text x="98.9201%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;coldbrew::runtime::Value&gt;&gt; (742 samples, 0.86%)</title><rect x="98.7832%" y="341" width="0.8648%" height="15" fill="rgb(242,112,31)" fg:x="84754" fg:w="742"/><text x="99.0332%" y="351.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (742 samples, 0.86%)</title><rect x="98.7832%" y="325" width="0.8648%" height="15" fill="rgb(249,192,27)" fg:x="84754" fg:w="742"/><text x="99.0332%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::current_memory (198 samples, 0.23%)</title><rect x="99.4172%" y="309" width="0.2308%" height="15" fill="rgb(208,204,44)" fg:x="85298" fg:w="198"/><text x="99.6672%" y="319.50"></text></g><g><title>core::ptr::unique::Unique&lt;T&gt;::cast (30 samples, 0.03%)</title><rect x="99.6130%" y="293" width="0.0350%" height="15" fill="rgb(208,93,54)" fg:x="85466" fg:w="30"/><text x="99.8630%" y="303.50"></text></g><g><title>core::ptr::unique::Unique&lt;T&gt;::new_unchecked (19 samples, 0.02%)</title><rect x="99.6259%" y="277" width="0.0221%" height="15" fill="rgb(242,1,31)" fg:x="85477" fg:w="19"/><text x="99.8759%" y="287.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::new_unchecked (19 samples, 0.02%)</title><rect x="99.6259%" y="261" width="0.0221%" height="15" fill="rgb(241,83,25)" fg:x="85477" fg:w="19"/><text x="99.8759%" y="271.50"></text></g><g><title>__GI___munmap (104 samples, 0.12%)</title><rect x="99.6480%" y="357" width="0.1212%" height="15" fill="rgb(205,169,50)" fg:x="85496" fg:w="104"/><text x="99.8980%" y="367.50"></text></g><g><title>[unknown] (104 samples, 0.12%)</title><rect x="99.6480%" y="341" width="0.1212%" height="15" fill="rgb(239,186,37)" fg:x="85496" fg:w="104"/><text x="99.8980%" y="351.50"></text></g><g><title>[unknown] (104 samples, 0.12%)</title><rect x="99.6480%" y="325" width="0.1212%" height="15" fill="rgb(205,221,10)" fg:x="85496" fg:w="104"/><text x="99.8980%" y="335.50"></text></g><g><title>[unknown] (104 samples, 0.12%)</title><rect x="99.6480%" y="309" width="0.1212%" height="15" fill="rgb(218,196,15)" fg:x="85496" fg:w="104"/><text x="99.8980%" y="319.50"></text></g><g><title>[unknown] (104 samples, 0.12%)</title><rect x="99.6480%" y="293" width="0.1212%" height="15" fill="rgb(218,196,35)" fg:x="85496" fg:w="104"/><text x="99.8980%" y="303.50"></text></g><g><title>[unknown] (104 samples, 0.12%)</title><rect x="99.6480%" y="277" width="0.1212%" height="15" fill="rgb(233,63,24)" fg:x="85496" fg:w="104"/><text x="99.8980%" y="287.50"></text></g><g><title>[unknown] (104 samples, 0.12%)</title><rect x="99.6480%" y="261" width="0.1212%" height="15" fill="rgb(225,8,4)" fg:x="85496" fg:w="104"/><text x="99.8980%" y="271.50"></text></g><g><title>[unknown] (104 samples, 0.12%)</title><rect x="99.6480%" y="245" width="0.1212%" height="15" fill="rgb(234,105,35)" fg:x="85496" fg:w="104"/><text x="99.8980%" y="255.50"></text></g><g><title>[unknown] (104 samples, 0.12%)</title><rect x="99.6480%" y="229" width="0.1212%" height="15" fill="rgb(236,21,32)" fg:x="85496" fg:w="104"/><text x="99.8980%" y="239.50"></text></g><g><title>[unknown] (104 samples, 0.12%)</title><rect x="99.6480%" y="213" width="0.1212%" height="15" fill="rgb(228,109,6)" fg:x="85496" fg:w="104"/><text x="99.8980%" y="223.50"></text></g><g><title>[unknown] (104 samples, 0.12%)</title><rect x="99.6480%" y="197" width="0.1212%" height="15" fill="rgb(229,215,31)" fg:x="85496" fg:w="104"/><text x="99.8980%" y="207.50"></text></g><g><title>[unknown] (104 samples, 0.12%)</title><rect x="99.6480%" y="181" width="0.1212%" height="15" fill="rgb(221,52,54)" fg:x="85496" fg:w="104"/><text x="99.8980%" y="191.50"></text></g><g><title>[unknown] (104 samples, 0.12%)</title><rect x="99.6480%" y="165" width="0.1212%" height="15" fill="rgb(252,129,43)" fg:x="85496" fg:w="104"/><text x="99.8980%" y="175.50"></text></g><g><title>[unknown] (81 samples, 0.09%)</title><rect x="99.6748%" y="149" width="0.0944%" height="15" fill="rgb(248,183,27)" fg:x="85519" fg:w="81"/><text x="99.9248%" y="159.50"></text></g><g><title>[unknown] (71 samples, 0.08%)</title><rect x="99.6865%" y="133" width="0.0828%" height="15" fill="rgb(250,0,22)" fg:x="85529" fg:w="71"/><text x="99.9365%" y="143.50"></text></g><g><title>[unknown] (64 samples, 0.07%)</title><rect x="99.6946%" y="117" width="0.0746%" height="15" fill="rgb(213,166,10)" fg:x="85536" fg:w="64"/><text x="99.9446%" y="127.50"></text></g><g><title>[unknown] (55 samples, 0.06%)</title><rect x="99.7051%" y="101" width="0.0641%" height="15" fill="rgb(207,163,36)" fg:x="85545" fg:w="55"/><text x="99.9551%" y="111.50"></text></g><g><title>[unknown] (34 samples, 0.04%)</title><rect x="99.7296%" y="85" width="0.0396%" height="15" fill="rgb(208,122,22)" fg:x="85566" fg:w="34"/><text x="99.9796%" y="95.50"></text></g><g><title>[unknown] (25 samples, 0.03%)</title><rect x="99.7401%" y="69" width="0.0291%" height="15" fill="rgb(207,104,49)" fg:x="85575" fg:w="25"/><text x="99.9901%" y="79.50"></text></g><g><title>[unknown] (18 samples, 0.02%)</title><rect x="99.7482%" y="53" width="0.0210%" height="15" fill="rgb(248,211,50)" fg:x="85582" fg:w="18"/><text x="99.9982%" y="63.50"></text></g><g><title>[unknown] (13 samples, 0.02%)</title><rect x="99.7541%" y="37" width="0.0152%" height="15" fill="rgb(217,13,45)" fg:x="85587" fg:w="13"/><text x="100.0041%" y="47.50"></text></g><g><title>_start (71,595 samples, 83.45%)</title><rect x="16.3244%" y="773" width="83.4460%" height="15" fill="rgb(211,216,49)" fg:x="14006" fg:w="71595"/><text x="16.5744%" y="783.50">_start</text></g><g><title>__libc_start_main_impl (71,595 samples, 83.45%)</title><rect x="16.3244%" y="757" width="83.4460%" height="15" fill="rgb(221,58,53)" fg:x="14006" fg:w="71595"/><text x="16.5744%" y="767.50">__libc_start_main_impl</text></g><g><title>__libc_start_call_main (71,595 samples, 83.45%)</title><rect x="16.3244%" y="741" width="83.4460%" height="15" fill="rgb(220,112,41)" fg:x="14006" fg:w="71595"/><text x="16.5744%" y="751.50">__libc_start_call_main</text></g><g><title>main (71,595 samples, 83.45%)</title><rect x="16.3244%" y="725" width="83.4460%" height="15" fill="rgb(236,38,28)" fg:x="14006" fg:w="71595"/><text x="16.5744%" y="735.50">main</text></g><g><title>std::rt::lang_start (71,595 samples, 83.45%)</title><rect x="16.3244%" y="709" width="83.4460%" height="15" fill="rgb(227,195,22)" fg:x="14006" fg:w="71595"/><text x="16.5744%" y="719.50">std::rt::lang_start</text></g><g><title>std::rt::lang_start_internal (71,595 samples, 83.45%)</title><rect x="16.3244%" y="693" width="83.4460%" height="15" fill="rgb(214,55,33)" fg:x="14006" fg:w="71595"/><text x="16.5744%" y="703.50">std::rt::lang_start_internal</text></g><g><title>std::panic::catch_unwind (71,595 samples, 83.45%)</title><rect x="16.3244%" y="677" width="83.4460%" height="15" fill="rgb(248,80,13)" fg:x="14006" fg:w="71595"/><text x="16.5744%" y="687.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (71,595 samples, 83.45%)</title><rect x="16.3244%" y="661" width="83.4460%" height="15" fill="rgb(238,52,6)" fg:x="14006" fg:w="71595"/><text x="16.5744%" y="671.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (71,595 samples, 83.45%)</title><rect x="16.3244%" y="645" width="83.4460%" height="15" fill="rgb(224,198,47)" fg:x="14006" fg:w="71595"/><text x="16.5744%" y="655.50">std::panicking::try::do_call</text></g><g><title>std::rt::lang_start_internal::{{closure}} (71,595 samples, 83.45%)</title><rect x="16.3244%" y="629" width="83.4460%" height="15" fill="rgb(233,171,20)" fg:x="14006" fg:w="71595"/><text x="16.5744%" y="639.50">std::rt::lang_start_internal::{{closure}}</text></g><g><title>std::panic::catch_unwind (71,595 samples, 83.45%)</title><rect x="16.3244%" y="613" width="83.4460%" height="15" fill="rgb(241,30,25)" fg:x="14006" fg:w="71595"/><text x="16.5744%" y="623.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (71,595 samples, 83.45%)</title><rect x="16.3244%" y="597" width="83.4460%" height="15" fill="rgb(207,171,38)" fg:x="14006" fg:w="71595"/><text x="16.5744%" y="607.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (71,595 samples, 83.45%)</title><rect x="16.3244%" y="581" width="83.4460%" height="15" fill="rgb(234,70,1)" fg:x="14006" fg:w="71595"/><text x="16.5744%" y="591.50">std::panicking::try::do_call</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (71,595 samples, 83.45%)</title><rect x="16.3244%" y="565" width="83.4460%" height="15" fill="rgb(232,178,18)" fg:x="14006" fg:w="71595"/><text x="16.5744%" y="575.50">core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once</text></g><g><title>std::rt::lang_start::{{closure}} (71,595 samples, 83.45%)</title><rect x="16.3244%" y="549" width="83.4460%" height="15" fill="rgb(241,78,40)" fg:x="14006" fg:w="71595"/><text x="16.5744%" y="559.50">std::rt::lang_start::{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (71,595 samples, 83.45%)</title><rect x="16.3244%" y="533" width="83.4460%" height="15" fill="rgb(222,35,25)" fg:x="14006" fg:w="71595"/><text x="16.5744%" y="543.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>core::ops::function::FnOnce::call_once (71,595 samples, 83.45%)</title><rect x="16.3244%" y="517" width="83.4460%" height="15" fill="rgb(207,92,16)" fg:x="14006" fg:w="71595"/><text x="16.5744%" y="527.50">core::ops::function::FnOnce::call_once</text></g><g><title>coldbrew::main (71,595 samples, 83.45%)</title><rect x="16.3244%" y="501" width="83.4460%" height="15" fill="rgb(216,59,51)" fg:x="14006" fg:w="71595"/><text x="16.5744%" y="511.50">coldbrew::main</text></g><g><title>core::ptr::drop_in_place&lt;coldbrew::runtime::Runtime&gt; (1,107 samples, 1.29%)</title><rect x="98.4802%" y="485" width="1.2902%" height="15" fill="rgb(213,80,28)" fg:x="84494" fg:w="1107"/><text x="98.7302%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;coldbrew::trace::Recorder&gt; (1,107 samples, 1.29%)</title><rect x="98.4802%" y="469" width="1.2902%" height="15" fill="rgb(220,93,7)" fg:x="84494" fg:w="1107"/><text x="98.7302%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;coldbrew::trace::RecordEntry&gt;&gt; (1,107 samples, 1.29%)</title><rect x="98.4802%" y="453" width="1.2902%" height="15" fill="rgb(225,24,44)" fg:x="84494" fg:w="1107"/><text x="98.7302%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;coldbrew::trace::RecordEntry&gt;&gt; (105 samples, 0.12%)</title><rect x="99.6480%" y="437" width="0.1224%" height="15" fill="rgb(243,74,40)" fg:x="85496" fg:w="105"/><text x="99.8980%" y="447.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (105 samples, 0.12%)</title><rect x="99.6480%" y="421" width="0.1224%" height="15" fill="rgb(228,39,7)" fg:x="85496" fg:w="105"/><text x="99.8980%" y="431.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (105 samples, 0.12%)</title><rect x="99.6480%" y="405" width="0.1224%" height="15" fill="rgb(227,79,8)" fg:x="85496" fg:w="105"/><text x="99.8980%" y="415.50"></text></g><g><title>alloc::alloc::dealloc (105 samples, 0.12%)</title><rect x="99.6480%" y="389" width="0.1224%" height="15" fill="rgb(236,58,11)" fg:x="85496" fg:w="105"/><text x="99.8980%" y="399.50"></text></g><g><title>__GI___libc_free (105 samples, 0.12%)</title><rect x="99.6480%" y="373" width="0.1224%" height="15" fill="rgb(249,63,35)" fg:x="85496" fg:w="105"/><text x="99.8980%" y="383.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::into_vec (15 samples, 0.02%)</title><rect x="99.7704%" y="773" width="0.0175%" height="15" fill="rgb(252,114,16)" fg:x="85601" fg:w="15"/><text x="100.0204%" y="783.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (19 samples, 0.02%)</title><rect x="99.7879%" y="773" width="0.0221%" height="15" fill="rgb(254,151,24)" fg:x="85616" fg:w="19"/><text x="100.0379%" y="783.50"></text></g><g><title>coldbrew::runtime::ProgramCounter::get_instruction_index (11 samples, 0.01%)</title><rect x="99.8170%" y="773" width="0.0128%" height="15" fill="rgb(253,54,39)" fg:x="85641" fg:w="11"/><text x="100.0670%" y="783.50"></text></g><g><title>coldbrew::trace::Recorder::flip_branch::{{closure}} (11 samples, 0.01%)</title><rect x="99.8438%" y="773" width="0.0128%" height="15" fill="rgb(243,25,45)" fg:x="85664" fg:w="11"/><text x="100.0938%" y="783.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (43 samples, 0.05%)</title><rect x="99.8601%" y="773" width="0.0501%" height="15" fill="rgb(234,134,9)" fg:x="85678" fg:w="43"/><text x="100.1101%" y="783.50"></text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (13 samples, 0.02%)</title><rect x="99.9406%" y="773" width="0.0152%" height="15" fill="rgb(227,166,31)" fg:x="85747" fg:w="13"/><text x="100.1906%" y="783.50"></text></g><g><title>coldbrew (85,793 samples, 99.99%)</title><rect x="0.0000%" y="789" width="99.9942%" height="15" fill="rgb(245,143,41)" fg:x="0" fg:w="85793"/><text x="0.2500%" y="799.50">coldbrew</text></g><g><title>str.0 (18 samples, 0.02%)</title><rect x="99.9732%" y="773" width="0.0210%" height="15" fill="rgb(238,181,32)" fg:x="85775" fg:w="18"/><text x="100.2232%" y="783.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (18 samples, 0.02%)</title><rect x="99.9732%" y="757" width="0.0210%" height="15" fill="rgb(224,113,18)" fg:x="85775" fg:w="18"/><text x="100.2232%" y="767.50"></text></g><g><title>all (85,798 samples, 100%)</title><rect x="0.0000%" y="805" width="100.0000%" height="15" fill="rgb(240,229,28)" fg:x="0" fg:w="85798"/><text x="0.2500%" y="815.50"></text></g></svg></svg>