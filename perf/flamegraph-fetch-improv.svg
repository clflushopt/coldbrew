<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="1158" onload="init(evt)" viewBox="0 0 1200 1158" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="1158" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="1141.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="1141.00"> </text><svg id="frames" x="10" width="1180" total_samples="274722"><g><title>&lt;Q as hashbrown::Equivalent&lt;K&gt;&gt;::equivalent (53 samples, 0.02%)</title><rect x="0.0528%" y="1061" width="0.0193%" height="15" fill="rgb(227,0,7)" fg:x="145" fg:w="53"/><text x="0.3028%" y="1071.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (32 samples, 0.01%)</title><rect x="0.0604%" y="1045" width="0.0116%" height="15" fill="rgb(217,0,24)" fg:x="166" fg:w="32"/><text x="0.3104%" y="1055.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (56 samples, 0.02%)</title><rect x="0.0721%" y="1061" width="0.0204%" height="15" fill="rgb(221,193,54)" fg:x="198" fg:w="56"/><text x="0.3221%" y="1071.50"></text></g><g><title>&lt;alloc::collections::vec_deque::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (41 samples, 0.01%)</title><rect x="0.1107%" y="1061" width="0.0149%" height="15" fill="rgb(248,212,6)" fg:x="304" fg:w="41"/><text x="0.3607%" y="1071.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (51 samples, 0.02%)</title><rect x="0.1256%" y="1061" width="0.0186%" height="15" fill="rgb(208,68,35)" fg:x="345" fg:w="51"/><text x="0.3756%" y="1071.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::DerefMut&gt;::deref_mut (61 samples, 0.02%)</title><rect x="0.1572%" y="1061" width="0.0222%" height="15" fill="rgb(232,128,0)" fg:x="432" fg:w="61"/><text x="0.4072%" y="1071.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (52 samples, 0.02%)</title><rect x="0.1813%" y="1061" width="0.0189%" height="15" fill="rgb(207,160,47)" fg:x="498" fg:w="52"/><text x="0.4313%" y="1071.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (33 samples, 0.01%)</title><rect x="0.1882%" y="1045" width="0.0120%" height="15" fill="rgb(228,23,34)" fg:x="517" fg:w="33"/><text x="0.4382%" y="1055.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::clone::Clone&gt;::clone (32 samples, 0.01%)</title><rect x="0.2413%" y="1061" width="0.0116%" height="15" fill="rgb(218,30,26)" fg:x="663" fg:w="32"/><text x="0.4913%" y="1071.50"></text></g><g><title>&lt;std::io::Write::write_fmt::Adapter&lt;T&gt; as core::fmt::Write&gt;::write_str (88 samples, 0.03%)</title><rect x="0.2992%" y="1061" width="0.0320%" height="15" fill="rgb(220,122,19)" fg:x="822" fg:w="88"/><text x="0.5492%" y="1071.50"></text></g><g><title>__GI___libc_free (90 samples, 0.03%)</title><rect x="0.3360%" y="1061" width="0.0328%" height="15" fill="rgb(250,228,42)" fg:x="923" fg:w="90"/><text x="0.5860%" y="1071.50"></text></g><g><title>__GI___libc_malloc (60 samples, 0.02%)</title><rect x="0.3687%" y="1061" width="0.0218%" height="15" fill="rgb(240,193,28)" fg:x="1013" fg:w="60"/><text x="0.6187%" y="1071.50"></text></g><g><title>__memcpy_avx_unaligned_erms (137 samples, 0.05%)</title><rect x="0.3949%" y="1061" width="0.0499%" height="15" fill="rgb(216,20,37)" fg:x="1085" fg:w="137"/><text x="0.6449%" y="1071.50"></text></g><g><title>__memrchr_avx2 (35 samples, 0.01%)</title><rect x="0.4448%" y="1061" width="0.0127%" height="15" fill="rgb(206,188,39)" fg:x="1222" fg:w="35"/><text x="0.6948%" y="1071.50"></text></g><g><title>alloc::raw_vec::finish_grow (47 samples, 0.02%)</title><rect x="0.5165%" y="1061" width="0.0171%" height="15" fill="rgb(217,207,13)" fg:x="1419" fg:w="47"/><text x="0.7665%" y="1071.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::pop (117 samples, 0.04%)</title><rect x="0.5467%" y="1061" width="0.0426%" height="15" fill="rgb(231,73,38)" fg:x="1502" fg:w="117"/><text x="0.7967%" y="1071.50"></text></g><g><title>core::ptr::read (31 samples, 0.01%)</title><rect x="0.5780%" y="1045" width="0.0113%" height="15" fill="rgb(225,20,46)" fg:x="1588" fg:w="31"/><text x="0.8280%" y="1055.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (134 samples, 0.05%)</title><rect x="0.5893%" y="1061" width="0.0488%" height="15" fill="rgb(210,31,41)" fg:x="1619" fg:w="134"/><text x="0.8393%" y="1071.50"></text></g><g><title>core::ptr::write (56 samples, 0.02%)</title><rect x="0.6177%" y="1045" width="0.0204%" height="15" fill="rgb(221,200,47)" fg:x="1697" fg:w="56"/><text x="0.8677%" y="1055.50"></text></g><g><title>coldbrew::jit::JitCache::execute (41 samples, 0.01%)</title><rect x="0.6396%" y="1061" width="0.0149%" height="15" fill="rgb(226,26,5)" fg:x="1757" fg:w="41"/><text x="0.8896%" y="1071.50"></text></g><g><title>coldbrew::jit::JitCache::reset (34 samples, 0.01%)</title><rect x="0.6559%" y="1061" width="0.0124%" height="15" fill="rgb(249,33,26)" fg:x="1802" fg:w="34"/><text x="0.9059%" y="1071.50"></text></g><g><title>coldbrew::profiler::Profiler::count_entry (185 samples, 0.07%)</title><rect x="0.6683%" y="1061" width="0.0673%" height="15" fill="rgb(235,183,28)" fg:x="1836" fg:w="185"/><text x="0.9183%" y="1071.50"></text></g><g><title>coldbrew::program::Program::code (30 samples, 0.01%)</title><rect x="0.7367%" y="1061" width="0.0109%" height="15" fill="rgb(221,5,38)" fg:x="2024" fg:w="30"/><text x="0.9867%" y="1071.50"></text></g><g><title>coldbrew::runtime::Frame::instruction_index (30 samples, 0.01%)</title><rect x="0.7488%" y="1061" width="0.0109%" height="15" fill="rgb(247,18,42)" fg:x="2057" fg:w="30"/><text x="0.9988%" y="1071.50"></text></g><g><title>coldbrew::runtime::Frame::method_index (34 samples, 0.01%)</title><rect x="0.7597%" y="1061" width="0.0124%" height="15" fill="rgb(241,131,45)" fg:x="2087" fg:w="34"/><text x="1.0097%" y="1071.50"></text></g><g><title>coldbrew::runtime::Runtime::next (103 samples, 0.04%)</title><rect x="0.7983%" y="1061" width="0.0375%" height="15" fill="rgb(249,31,29)" fg:x="2193" fg:w="103"/><text x="1.0483%" y="1071.50"></text></g><g><title>coldbrew::runtime::Runtime::pop (69 samples, 0.03%)</title><rect x="0.8358%" y="1061" width="0.0251%" height="15" fill="rgb(225,111,53)" fg:x="2296" fg:w="69"/><text x="1.0858%" y="1071.50"></text></g><g><title>core::cmp::max_by (38 samples, 0.01%)</title><rect x="0.8885%" y="1061" width="0.0138%" height="15" fill="rgb(238,160,17)" fg:x="2441" fg:w="38"/><text x="1.1385%" y="1071.50"></text></g><g><title>core::fmt::builders::DebugList::entries (59 samples, 0.02%)</title><rect x="0.9129%" y="1061" width="0.0215%" height="15" fill="rgb(214,148,48)" fg:x="2508" fg:w="59"/><text x="1.1629%" y="1071.50"></text></g><g><title>core::hash::BuildHasher::hash_one (47 samples, 0.02%)</title><rect x="0.9442%" y="1061" width="0.0171%" height="15" fill="rgb(232,36,49)" fg:x="2594" fg:w="47"/><text x="1.1942%" y="1071.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::last_mut (65 samples, 0.02%)</title><rect x="1.0294%" y="1061" width="0.0237%" height="15" fill="rgb(209,103,24)" fg:x="2828" fg:w="65"/><text x="1.2794%" y="1071.50"></text></g><g><title>dynasmrt::Assembler&lt;R&gt;::new (58 samples, 0.02%)</title><rect x="1.0665%" y="1061" width="0.0211%" height="15" fill="rgb(229,88,8)" fg:x="2930" fg:w="58"/><text x="1.3165%" y="1071.50"></text></g><g><title>hashbrown::map::equivalent_key::{{closure}} (41 samples, 0.01%)</title><rect x="1.1048%" y="1061" width="0.0149%" height="15" fill="rgb(213,181,19)" fg:x="3035" fg:w="41"/><text x="1.3548%" y="1071.50"></text></g><g><title>[[heap]] (3,195 samples, 1.16%)</title><rect x="0.0408%" y="1077" width="1.1630%" height="15" fill="rgb(254,191,54)" fg:x="112" fg:w="3195"/><text x="0.2908%" y="1087.50"></text></g><g><title>&lt;&amp;T as core::fmt::Debug&gt;::fmt (35 samples, 0.01%)</title><rect x="1.2038%" y="1061" width="0.0127%" height="15" fill="rgb(241,83,37)" fg:x="3307" fg:w="35"/><text x="1.4538%" y="1071.50"></text></g><g><title>&lt;&amp;std::io::stdio::Stdout as std::io::Write&gt;::write_fmt (97 samples, 0.04%)</title><rect x="1.2187%" y="1061" width="0.0353%" height="15" fill="rgb(233,36,39)" fg:x="3348" fg:w="97"/><text x="1.4687%" y="1071.50"></text></g><g><title>std::io::Write::write_fmt (49 samples, 0.02%)</title><rect x="1.2362%" y="1045" width="0.0178%" height="15" fill="rgb(226,3,54)" fg:x="3396" fg:w="49"/><text x="1.4862%" y="1055.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (32 samples, 0.01%)</title><rect x="1.2696%" y="1061" width="0.0116%" height="15" fill="rgb(245,192,40)" fg:x="3488" fg:w="32"/><text x="1.5196%" y="1071.50"></text></g><g><title>&lt;alloc::collections::vec_deque::VecDeque&lt;T,A&gt; as core::fmt::Debug&gt;::fmt (28 samples, 0.01%)</title><rect x="1.3082%" y="1061" width="0.0102%" height="15" fill="rgb(238,167,29)" fg:x="3594" fg:w="28"/><text x="1.5582%" y="1071.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (51 samples, 0.02%)</title><rect x="1.3235%" y="1061" width="0.0186%" height="15" fill="rgb(232,182,51)" fg:x="3636" fg:w="51"/><text x="1.5735%" y="1071.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (62 samples, 0.02%)</title><rect x="1.3588%" y="1061" width="0.0226%" height="15" fill="rgb(231,60,39)" fg:x="3733" fg:w="62"/><text x="1.6088%" y="1071.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (34 samples, 0.01%)</title><rect x="1.3836%" y="1061" width="0.0124%" height="15" fill="rgb(208,69,12)" fg:x="3801" fg:w="34"/><text x="1.6336%" y="1071.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (94 samples, 0.03%)</title><rect x="1.3960%" y="1061" width="0.0342%" height="15" fill="rgb(235,93,37)" fg:x="3835" fg:w="94"/><text x="1.6460%" y="1071.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (36 samples, 0.01%)</title><rect x="1.4171%" y="1045" width="0.0131%" height="15" fill="rgb(213,116,39)" fg:x="3893" fg:w="36"/><text x="1.6671%" y="1055.50"></text></g><g><title>&lt;coldbrew::jit::Register as core::fmt::Debug&gt;::fmt (78 samples, 0.03%)</title><rect x="1.4364%" y="1061" width="0.0284%" height="15" fill="rgb(222,207,29)" fg:x="3946" fg:w="78"/><text x="1.6864%" y="1071.50"></text></g><g><title>&lt;coldbrew::runtime::ProgramCounter as core::hash::Hash&gt;::hash (213 samples, 0.08%)</title><rect x="1.4673%" y="1061" width="0.0775%" height="15" fill="rgb(206,96,30)" fg:x="4031" fg:w="213"/><text x="1.7173%" y="1071.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (82 samples, 0.03%)</title><rect x="1.5463%" y="1061" width="0.0298%" height="15" fill="rgb(218,138,4)" fg:x="4248" fg:w="82"/><text x="1.7963%" y="1071.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (122 samples, 0.04%)</title><rect x="1.5761%" y="1061" width="0.0444%" height="15" fill="rgb(250,191,14)" fg:x="4330" fg:w="122"/><text x="1.8261%" y="1071.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (65 samples, 0.02%)</title><rect x="1.6205%" y="1061" width="0.0237%" height="15" fill="rgb(239,60,40)" fg:x="4452" fg:w="65"/><text x="1.8705%" y="1071.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (44 samples, 0.02%)</title><rect x="1.6555%" y="1061" width="0.0160%" height="15" fill="rgb(206,27,48)" fg:x="4548" fg:w="44"/><text x="1.9055%" y="1071.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (52 samples, 0.02%)</title><rect x="1.6974%" y="1061" width="0.0189%" height="15" fill="rgb(225,35,8)" fg:x="4663" fg:w="52"/><text x="1.9474%" y="1071.50"></text></g><g><title>&lt;memmap2::os::MmapInner as core::ops::drop::Drop&gt;::drop (128 samples, 0.05%)</title><rect x="1.7367%" y="1061" width="0.0466%" height="15" fill="rgb(250,213,24)" fg:x="4771" fg:w="128"/><text x="1.9867%" y="1071.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::finish (125 samples, 0.05%)</title><rect x="1.7833%" y="1061" width="0.0455%" height="15" fill="rgb(247,123,22)" fg:x="4899" fg:w="125"/><text x="2.0333%" y="1071.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (119 samples, 0.04%)</title><rect x="1.7854%" y="1045" width="0.0433%" height="15" fill="rgb(231,138,38)" fg:x="4905" fg:w="119"/><text x="2.0354%" y="1055.50"></text></g><g><title>&lt;std::collections::hash::set::HashSet&lt;T,S&gt; as core::clone::Clone&gt;::clone (35 samples, 0.01%)</title><rect x="1.8389%" y="1061" width="0.0127%" height="15" fill="rgb(231,145,46)" fg:x="5052" fg:w="35"/><text x="2.0889%" y="1071.50"></text></g><g><title>&lt;std::io::Write::write_fmt::Adapter&lt;T&gt; as core::fmt::Write&gt;::write_str (237 samples, 0.09%)</title><rect x="1.8517%" y="1061" width="0.0863%" height="15" fill="rgb(251,118,11)" fg:x="5087" fg:w="237"/><text x="2.1017%" y="1071.50"></text></g><g><title>&lt;std::io::stdio::StdoutLock as std::io::Write&gt;::write_all (180 samples, 0.07%)</title><rect x="1.9380%" y="1061" width="0.0655%" height="15" fill="rgb(217,147,25)" fg:x="5324" fg:w="180"/><text x="2.1880%" y="1071.50"></text></g><g><title>__GI___libc_write (93 samples, 0.03%)</title><rect x="2.0231%" y="1061" width="0.0339%" height="15" fill="rgb(247,81,37)" fg:x="5558" fg:w="93"/><text x="2.2731%" y="1071.50"></text></g><g><title>__GI___mprotect (109 samples, 0.04%)</title><rect x="2.0570%" y="1061" width="0.0397%" height="15" fill="rgb(209,12,38)" fg:x="5651" fg:w="109"/><text x="2.3070%" y="1071.50"></text></g><g><title>[unknown] (109 samples, 0.04%)</title><rect x="2.0570%" y="1045" width="0.0397%" height="15" fill="rgb(227,1,9)" fg:x="5651" fg:w="109"/><text x="2.3070%" y="1055.50"></text></g><g><title>__memcpy_avx_unaligned_erms (263 samples, 0.10%)</title><rect x="2.0967%" y="1061" width="0.0957%" height="15" fill="rgb(248,47,43)" fg:x="5760" fg:w="263"/><text x="2.3467%" y="1071.50"></text></g><g><title>__memrchr_avx2 (56 samples, 0.02%)</title><rect x="2.1924%" y="1061" width="0.0204%" height="15" fill="rgb(221,10,30)" fg:x="6023" fg:w="56"/><text x="2.4424%" y="1071.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (45 samples, 0.02%)</title><rect x="2.2310%" y="1061" width="0.0164%" height="15" fill="rgb(210,229,1)" fg:x="6129" fg:w="45"/><text x="2.4810%" y="1071.50"></text></g><g><title>alloc::slice::hack::into_vec (31 samples, 0.01%)</title><rect x="2.2987%" y="1061" width="0.0113%" height="15" fill="rgb(222,148,37)" fg:x="6315" fg:w="31"/><text x="2.5487%" y="1071.50"></text></g><g><title>coldbrew::jit::JitCache::compile (70 samples, 0.03%)</title><rect x="2.3238%" y="1061" width="0.0255%" height="15" fill="rgb(234,67,33)" fg:x="6384" fg:w="70"/><text x="2.5738%" y="1071.50"></text></g><g><title>coldbrew::jit::JitCache::has_native_trace (43 samples, 0.02%)</title><rect x="2.3493%" y="1061" width="0.0157%" height="15" fill="rgb(247,98,35)" fg:x="6454" fg:w="43"/><text x="2.5993%" y="1071.50"></text></g><g><title>coldbrew::profiler::Profiler::is_hot (36 samples, 0.01%)</title><rect x="2.3649%" y="1061" width="0.0131%" height="15" fill="rgb(247,138,52)" fg:x="6497" fg:w="36"/><text x="2.6149%" y="1071.50"></text></g><g><title>coldbrew::runtime::Frame::inc_instruction_index (79 samples, 0.03%)</title><rect x="2.3780%" y="1061" width="0.0288%" height="15" fill="rgb(213,79,30)" fg:x="6533" fg:w="79"/><text x="2.6280%" y="1071.50"></text></g><g><title>coldbrew::runtime::ProgramCounter::get_instruction_index (54 samples, 0.02%)</title><rect x="2.4159%" y="1061" width="0.0197%" height="15" fill="rgb(246,177,23)" fg:x="6637" fg:w="54"/><text x="2.6659%" y="1071.50"></text></g><g><title>coldbrew::runtime::ProgramCounter::get_method_index (58 samples, 0.02%)</title><rect x="2.4356%" y="1061" width="0.0211%" height="15" fill="rgb(230,62,27)" fg:x="6691" fg:w="58"/><text x="2.6856%" y="1071.50"></text></g><g><title>coldbrew::runtime::Runtime::eval (254 samples, 0.09%)</title><rect x="2.4567%" y="1061" width="0.0925%" height="15" fill="rgb(216,154,8)" fg:x="6749" fg:w="254"/><text x="2.7067%" y="1071.50"></text></g><g><title>coldbrew::runtime::Runtime::eval::{{closure}} (30 samples, 0.01%)</title><rect x="2.5491%" y="1061" width="0.0109%" height="15" fill="rgb(244,35,45)" fg:x="7003" fg:w="30"/><text x="2.7991%" y="1071.50"></text></g><g><title>coldbrew::runtime::Runtime::fetch (239 samples, 0.09%)</title><rect x="2.5600%" y="1061" width="0.0870%" height="15" fill="rgb(251,115,12)" fg:x="7033" fg:w="239"/><text x="2.8100%" y="1071.50"></text></g><g><title>coldbrew::trace::Recorder::record (28 samples, 0.01%)</title><rect x="2.6569%" y="1061" width="0.0102%" height="15" fill="rgb(240,54,50)" fg:x="7299" fg:w="28"/><text x="2.9069%" y="1071.50"></text></g><g><title>core::fmt::Formatter::pad_integral::write_prefix (46 samples, 0.02%)</title><rect x="2.6984%" y="1061" width="0.0167%" height="15" fill="rgb(233,84,52)" fg:x="7413" fg:w="46"/><text x="2.9484%" y="1071.50"></text></g><g><title>core::hash::BuildHasher::hash_one (208 samples, 0.08%)</title><rect x="2.7293%" y="1061" width="0.0757%" height="15" fill="rgb(207,117,47)" fg:x="7498" fg:w="208"/><text x="2.9793%" y="1071.50"></text></g><g><title>core::hash::Hasher::write_usize (102 samples, 0.04%)</title><rect x="2.8050%" y="1061" width="0.0371%" height="15" fill="rgb(249,43,39)" fg:x="7706" fg:w="102"/><text x="3.0550%" y="1071.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (59 samples, 0.02%)</title><rect x="2.8421%" y="1061" width="0.0215%" height="15" fill="rgb(209,38,44)" fg:x="7808" fg:w="59"/><text x="3.0921%" y="1071.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for usize&gt;::hash (253 samples, 0.09%)</title><rect x="2.8636%" y="1061" width="0.0921%" height="15" fill="rgb(236,212,23)" fg:x="7867" fg:w="253"/><text x="3.1136%" y="1071.50"></text></g><g><title>core::hash::sip::u8to64_le (73 samples, 0.03%)</title><rect x="2.9557%" y="1061" width="0.0266%" height="15" fill="rgb(242,79,21)" fg:x="8120" fg:w="73"/><text x="3.2057%" y="1071.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;coldbrew::runtime::Value&gt;&gt; (90 samples, 0.03%)</title><rect x="3.0176%" y="1061" width="0.0328%" height="15" fill="rgb(211,96,35)" fg:x="8290" fg:w="90"/><text x="3.2676%" y="1071.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;coldbrew::runtime::Value&gt;&gt; (62 samples, 0.02%)</title><rect x="3.0758%" y="1061" width="0.0226%" height="15" fill="rgb(253,215,40)" fg:x="8450" fg:w="62"/><text x="3.3258%" y="1071.50"></text></g><g><title>core::ptr::drop_in_place&lt;coldbrew::runtime::Instruction&gt; (68 samples, 0.02%)</title><rect x="3.1130%" y="1061" width="0.0248%" height="15" fill="rgb(211,81,21)" fg:x="8552" fg:w="68"/><text x="3.3630%" y="1071.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;alloc::vec::Vec&lt;coldbrew::runtime::Value&gt;&gt;&gt; (70 samples, 0.03%)</title><rect x="3.1377%" y="1061" width="0.0255%" height="15" fill="rgb(208,190,38)" fg:x="8620" fg:w="70"/><text x="3.3877%" y="1071.50"></text></g><g><title>core::ptr::drop_in_place&lt;dynasmrt::components::RelocRegistry&lt;dynasmrt::x64::X64Relocation&gt;&gt; (31 samples, 0.01%)</title><rect x="3.1843%" y="1061" width="0.0113%" height="15" fill="rgb(235,213,38)" fg:x="8748" fg:w="31"/><text x="3.4343%" y="1071.50"></text></g><g><title>dynasmrt::Assembler&lt;R&gt;::commit (47 samples, 0.02%)</title><rect x="3.2881%" y="1061" width="0.0171%" height="15" fill="rgb(237,122,38)" fg:x="9033" fg:w="47"/><text x="3.5381%" y="1071.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::contains_key (84 samples, 0.03%)</title><rect x="3.3317%" y="1061" width="0.0306%" height="15" fill="rgb(244,218,35)" fg:x="9153" fg:w="84"/><text x="3.5817%" y="1071.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (40 samples, 0.01%)</title><rect x="3.3477%" y="1045" width="0.0146%" height="15" fill="rgb(240,68,47)" fg:x="9197" fg:w="40"/><text x="3.5977%" y="1055.50"></text></g><g><title>hashbrown::map::make_hash (40 samples, 0.01%)</title><rect x="3.3477%" y="1029" width="0.0146%" height="15" fill="rgb(210,16,53)" fg:x="9197" fg:w="40"/><text x="3.5977%" y="1039.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (62 samples, 0.02%)</title><rect x="3.3623%" y="1061" width="0.0226%" height="15" fill="rgb(235,124,12)" fg:x="9237" fg:w="62"/><text x="3.6123%" y="1071.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (39 samples, 0.01%)</title><rect x="3.3707%" y="1045" width="0.0142%" height="15" fill="rgb(224,169,11)" fg:x="9260" fg:w="39"/><text x="3.6207%" y="1055.50"></text></g><g><title>hashbrown::map::make_hash (39 samples, 0.01%)</title><rect x="3.3707%" y="1029" width="0.0142%" height="15" fill="rgb(250,166,2)" fg:x="9260" fg:w="39"/><text x="3.6207%" y="1039.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (88 samples, 0.03%)</title><rect x="3.3987%" y="1061" width="0.0320%" height="15" fill="rgb(242,216,29)" fg:x="9337" fg:w="88"/><text x="3.6487%" y="1071.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::free_buckets (28 samples, 0.01%)</title><rect x="3.4373%" y="1061" width="0.0102%" height="15" fill="rgb(230,116,27)" fg:x="9443" fg:w="28"/><text x="3.6873%" y="1071.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::free_buckets (28 samples, 0.01%)</title><rect x="3.4373%" y="1045" width="0.0102%" height="15" fill="rgb(228,99,48)" fg:x="9443" fg:w="28"/><text x="3.6873%" y="1055.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get (119 samples, 0.04%)</title><rect x="3.4475%" y="1061" width="0.0433%" height="15" fill="rgb(253,11,6)" fg:x="9471" fg:w="119"/><text x="3.6975%" y="1071.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::iter (40 samples, 0.01%)</title><rect x="3.4966%" y="1061" width="0.0146%" height="15" fill="rgb(247,143,39)" fg:x="9606" fg:w="40"/><text x="3.7466%" y="1071.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (600 samples, 0.22%)</title><rect x="3.5148%" y="1061" width="0.2184%" height="15" fill="rgb(236,97,10)" fg:x="9656" fg:w="600"/><text x="3.7648%" y="1071.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::contains_key (60 samples, 0.02%)</title><rect x="3.7631%" y="1061" width="0.0218%" height="15" fill="rgb(233,208,19)" fg:x="10338" fg:w="60"/><text x="4.0131%" y="1071.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (96 samples, 0.03%)</title><rect x="3.7849%" y="1061" width="0.0349%" height="15" fill="rgb(216,164,2)" fg:x="10398" fg:w="96"/><text x="4.0349%" y="1071.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::iter (28 samples, 0.01%)</title><rect x="3.8242%" y="1061" width="0.0102%" height="15" fill="rgb(220,129,5)" fg:x="10506" fg:w="28"/><text x="4.0742%" y="1071.50"></text></g><g><title>std::io::buffered::bufwriter::BufWriter&lt;W&gt;::flush_buf (77 samples, 0.03%)</title><rect x="3.8384%" y="1061" width="0.0280%" height="15" fill="rgb(242,17,10)" fg:x="10545" fg:w="77"/><text x="4.0884%" y="1071.50"></text></g><g><title>&lt;std::io::stdio::StdoutRaw as std::io::Write&gt;::write (77 samples, 0.03%)</title><rect x="3.8384%" y="1045" width="0.0280%" height="15" fill="rgb(242,107,0)" fg:x="10545" fg:w="77"/><text x="4.0884%" y="1055.50"></text></g><g><title>&lt;std::sys::unix::stdio::Stdout as std::io::Write&gt;::write (77 samples, 0.03%)</title><rect x="3.8384%" y="1029" width="0.0280%" height="15" fill="rgb(251,28,31)" fg:x="10545" fg:w="77"/><text x="4.0884%" y="1039.50"></text></g><g><title>std::sys::unix::fd::FileDesc::write (77 samples, 0.03%)</title><rect x="3.8384%" y="1013" width="0.0280%" height="15" fill="rgb(233,223,10)" fg:x="10545" fg:w="77"/><text x="4.0884%" y="1023.50"></text></g><g><title>__GI___libc_write (77 samples, 0.03%)</title><rect x="3.8384%" y="997" width="0.0280%" height="15" fill="rgb(215,21,27)" fg:x="10545" fg:w="77"/><text x="4.0884%" y="1007.50"></text></g><g><title>[unknown] (77 samples, 0.03%)</title><rect x="3.8384%" y="981" width="0.0280%" height="15" fill="rgb(232,23,21)" fg:x="10545" fg:w="77"/><text x="4.0884%" y="991.50"></text></g><g><title>[[stack]] (7,349 samples, 2.68%)</title><rect x="1.2038%" y="1077" width="2.6751%" height="15" fill="rgb(244,5,23)" fg:x="3307" fg:w="7349"/><text x="1.4538%" y="1087.50">[[..</text></g><g><title>[anon] (35 samples, 0.01%)</title><rect x="3.8788%" y="1077" width="0.0127%" height="15" fill="rgb(226,81,46)" fg:x="10656" fg:w="35"/><text x="4.1288%" y="1087.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::iter::traits::collect::Extend&lt;&amp;T&gt;&gt;::extend (45 samples, 0.02%)</title><rect x="3.9065%" y="1061" width="0.0164%" height="15" fill="rgb(247,70,30)" fg:x="10732" fg:w="45"/><text x="4.1565%" y="1071.50"></text></g><g><title>&lt;coldbrew::runtime::ProgramCounter as core::fmt::Display&gt;::fmt (43 samples, 0.02%)</title><rect x="3.9236%" y="1061" width="0.0157%" height="15" fill="rgb(212,68,19)" fg:x="10779" fg:w="43"/><text x="4.1736%" y="1071.50"></text></g><g><title>&lt;std::io::stdio::StdoutLock as std::io::Write&gt;::write_all (41 samples, 0.01%)</title><rect x="3.9538%" y="1061" width="0.0149%" height="15" fill="rgb(240,187,13)" fg:x="10862" fg:w="41"/><text x="4.2038%" y="1071.50"></text></g><g><title>__GI___libc_write (222 samples, 0.08%)</title><rect x="3.9782%" y="1061" width="0.0808%" height="15" fill="rgb(223,113,26)" fg:x="10929" fg:w="222"/><text x="4.2282%" y="1071.50"></text></g><g><title>[unknown] (129 samples, 0.05%)</title><rect x="4.0121%" y="1045" width="0.0470%" height="15" fill="rgb(206,192,2)" fg:x="11022" fg:w="129"/><text x="4.2621%" y="1055.50"></text></g><g><title>coldbrew::jit::JitCache::compile (104 samples, 0.04%)</title><rect x="4.0732%" y="1061" width="0.0379%" height="15" fill="rgb(241,108,4)" fg:x="11190" fg:w="104"/><text x="4.3232%" y="1071.50"></text></g><g><title>coldbrew::jit::JitCache::execute (62 samples, 0.02%)</title><rect x="4.1111%" y="1061" width="0.0226%" height="15" fill="rgb(247,173,49)" fg:x="11294" fg:w="62"/><text x="4.3611%" y="1071.50"></text></g><g><title>coldbrew::jit::JitCache::first_available_register (76 samples, 0.03%)</title><rect x="4.1336%" y="1061" width="0.0277%" height="15" fill="rgb(224,114,35)" fg:x="11356" fg:w="76"/><text x="4.3836%" y="1071.50"></text></g><g><title>coldbrew::runtime::Runtime::run (611 samples, 0.22%)</title><rect x="4.1613%" y="1061" width="0.2224%" height="15" fill="rgb(245,159,27)" fg:x="11432" fg:w="611"/><text x="4.4113%" y="1071.50"></text></g><g><title>core::fmt::write (86 samples, 0.03%)</title><rect x="4.3841%" y="1061" width="0.0313%" height="15" fill="rgb(245,172,44)" fg:x="12044" fg:w="86"/><text x="4.6341%" y="1071.50"></text></g><g><title>dynasmrt::Assembler&lt;R&gt;::encode_relocs (82 samples, 0.03%)</title><rect x="4.4401%" y="1061" width="0.0298%" height="15" fill="rgb(236,23,11)" fg:x="12198" fg:w="82"/><text x="4.6901%" y="1071.50"></text></g><g><title>dynasmrt::components::MemoryManager::commit (53 samples, 0.02%)</title><rect x="4.4700%" y="1061" width="0.0193%" height="15" fill="rgb(205,117,38)" fg:x="12280" fg:w="53"/><text x="4.7200%" y="1071.50"></text></g><g><title>&lt;std::io::stdio::StdoutRaw as std::io::Write&gt;::write (28 samples, 0.01%)</title><rect x="4.4944%" y="1045" width="0.0102%" height="15" fill="rgb(237,72,25)" fg:x="12347" fg:w="28"/><text x="4.7444%" y="1055.50"></text></g><g><title>&lt;std::sys::unix::stdio::Stdout as std::io::Write&gt;::write (28 samples, 0.01%)</title><rect x="4.4944%" y="1029" width="0.0102%" height="15" fill="rgb(244,70,9)" fg:x="12347" fg:w="28"/><text x="4.7444%" y="1039.50"></text></g><g><title>std::sys::unix::fd::FileDesc::write (28 samples, 0.01%)</title><rect x="4.4944%" y="1013" width="0.0102%" height="15" fill="rgb(217,125,39)" fg:x="12347" fg:w="28"/><text x="4.7444%" y="1023.50"></text></g><g><title>std::io::buffered::bufwriter::BufWriter&lt;W&gt;::flush_buf (58 samples, 0.02%)</title><rect x="4.4907%" y="1061" width="0.0211%" height="15" fill="rgb(235,36,10)" fg:x="12337" fg:w="58"/><text x="4.7407%" y="1071.50"></text></g><g><title>[coldbrew] (1,715 samples, 0.62%)</title><rect x="3.8916%" y="1077" width="0.6243%" height="15" fill="rgb(251,123,47)" fg:x="10691" fg:w="1715"/><text x="4.1416%" y="1087.50"></text></g><g><title>memmap2::os::MmapInner::new (53 samples, 0.02%)</title><rect x="4.5351%" y="1061" width="0.0193%" height="15" fill="rgb(221,13,13)" fg:x="12459" fg:w="53"/><text x="4.7851%" y="1071.50"></text></g><g><title>__GI___mmap64 (53 samples, 0.02%)</title><rect x="4.5351%" y="1045" width="0.0193%" height="15" fill="rgb(238,131,9)" fg:x="12459" fg:w="53"/><text x="4.7851%" y="1055.50"></text></g><g><title>__GI___mmap64 (53 samples, 0.02%)</title><rect x="4.5351%" y="1029" width="0.0193%" height="15" fill="rgb(211,50,8)" fg:x="12459" fg:w="53"/><text x="4.7851%" y="1039.50"></text></g><g><title>[unknown] (53 samples, 0.02%)</title><rect x="4.5351%" y="1013" width="0.0193%" height="15" fill="rgb(245,182,24)" fg:x="12459" fg:w="53"/><text x="4.7851%" y="1023.50"></text></g><g><title>[ld-linux-x86-64.so.2] (108 samples, 0.04%)</title><rect x="4.5158%" y="1077" width="0.0393%" height="15" fill="rgb(242,14,37)" fg:x="12406" fg:w="108"/><text x="4.7658%" y="1087.50"></text></g><g><title>memmap2::os::MmapInner::new (47 samples, 0.02%)</title><rect x="4.6753%" y="1061" width="0.0171%" height="15" fill="rgb(246,228,12)" fg:x="12844" fg:w="47"/><text x="4.9253%" y="1071.50"></text></g><g><title>__GI___mmap64 (47 samples, 0.02%)</title><rect x="4.6753%" y="1045" width="0.0171%" height="15" fill="rgb(213,55,15)" fg:x="12844" fg:w="47"/><text x="4.9253%" y="1055.50"></text></g><g><title>__GI___mmap64 (47 samples, 0.02%)</title><rect x="4.6753%" y="1029" width="0.0171%" height="15" fill="rgb(209,9,3)" fg:x="12844" fg:w="47"/><text x="4.9253%" y="1039.50"></text></g><g><title>[unknown] (47 samples, 0.02%)</title><rect x="4.6753%" y="1013" width="0.0171%" height="15" fill="rgb(230,59,30)" fg:x="12844" fg:w="47"/><text x="4.9253%" y="1023.50"></text></g><g><title>[perf-23749.map] (378 samples, 0.14%)</title><rect x="4.5555%" y="1077" width="0.1376%" height="15" fill="rgb(209,121,21)" fg:x="12515" fg:w="378"/><text x="4.8055%" y="1087.50"></text></g><g><title>&lt;&amp;std::io::stdio::Stdout as std::io::Write&gt;::write_fmt (34 samples, 0.01%)</title><rect x="5.5292%" y="1061" width="0.0124%" height="15" fill="rgb(220,109,13)" fg:x="15190" fg:w="34"/><text x="5.7792%" y="1071.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (57 samples, 0.02%)</title><rect x="5.5671%" y="1061" width="0.0207%" height="15" fill="rgb(232,18,1)" fg:x="15294" fg:w="57"/><text x="5.8171%" y="1071.50"></text></g><g><title>alloc::alloc::dealloc (52 samples, 0.02%)</title><rect x="5.5689%" y="1045" width="0.0189%" height="15" fill="rgb(215,41,42)" fg:x="15299" fg:w="52"/><text x="5.8189%" y="1055.50"></text></g><g><title>&lt;alloc::collections::vec_deque::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (82 samples, 0.03%)</title><rect x="5.6006%" y="1061" width="0.0298%" height="15" fill="rgb(224,123,36)" fg:x="15386" fg:w="82"/><text x="5.8506%" y="1071.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (61 samples, 0.02%)</title><rect x="5.6304%" y="1061" width="0.0222%" height="15" fill="rgb(240,125,3)" fg:x="15468" fg:w="61"/><text x="5.8804%" y="1071.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (48 samples, 0.02%)</title><rect x="5.6625%" y="1061" width="0.0175%" height="15" fill="rgb(205,98,50)" fg:x="15556" fg:w="48"/><text x="5.9125%" y="1071.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (240 samples, 0.09%)</title><rect x="5.7050%" y="1061" width="0.0874%" height="15" fill="rgb(205,185,37)" fg:x="15673" fg:w="240"/><text x="5.9550%" y="1071.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (236 samples, 0.09%)</title><rect x="5.7924%" y="1061" width="0.0859%" height="15" fill="rgb(238,207,15)" fg:x="15913" fg:w="236"/><text x="6.0424%" y="1071.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (158 samples, 0.06%)</title><rect x="5.8783%" y="1061" width="0.0575%" height="15" fill="rgb(213,199,42)" fg:x="16149" fg:w="158"/><text x="6.1283%" y="1071.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (94 samples, 0.03%)</title><rect x="5.9358%" y="1061" width="0.0342%" height="15" fill="rgb(235,201,11)" fg:x="16307" fg:w="94"/><text x="6.1858%" y="1071.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (42 samples, 0.02%)</title><rect x="5.9857%" y="1061" width="0.0153%" height="15" fill="rgb(207,46,11)" fg:x="16444" fg:w="42"/><text x="6.2357%" y="1071.50"></text></g><g><title>&lt;dynasmrt::Assembler&lt;R&gt; as dynasmrt::DynasmApi&gt;::push (29 samples, 0.01%)</title><rect x="6.0024%" y="1061" width="0.0106%" height="15" fill="rgb(241,35,35)" fg:x="16490" fg:w="29"/><text x="6.2524%" y="1071.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (97 samples, 0.04%)</title><rect x="6.0286%" y="1061" width="0.0353%" height="15" fill="rgb(243,32,47)" fg:x="16562" fg:w="97"/><text x="6.2786%" y="1071.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::finish (77 samples, 0.03%)</title><rect x="6.0650%" y="1061" width="0.0280%" height="15" fill="rgb(247,202,23)" fg:x="16662" fg:w="77"/><text x="6.3150%" y="1071.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (228 samples, 0.08%)</title><rect x="6.0931%" y="1061" width="0.0830%" height="15" fill="rgb(219,102,11)" fg:x="16739" fg:w="228"/><text x="6.3431%" y="1071.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (140 samples, 0.05%)</title><rect x="6.1251%" y="1045" width="0.0510%" height="15" fill="rgb(243,110,44)" fg:x="16827" fg:w="140"/><text x="6.3751%" y="1055.50"></text></g><g><title>&lt;std::collections::hash::map::RandomState as core::hash::BuildHasher&gt;::build_hasher (438 samples, 0.16%)</title><rect x="6.1761%" y="1061" width="0.1594%" height="15" fill="rgb(222,74,54)" fg:x="16967" fg:w="438"/><text x="6.4261%" y="1071.50"></text></g><g><title>core::hash::sip::SipHasher13::new_with_keys (225 samples, 0.08%)</title><rect x="6.2536%" y="1045" width="0.0819%" height="15" fill="rgb(216,99,12)" fg:x="17180" fg:w="225"/><text x="6.5036%" y="1055.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::new_with_keys (80 samples, 0.03%)</title><rect x="6.3064%" y="1029" width="0.0291%" height="15" fill="rgb(226,22,26)" fg:x="17325" fg:w="80"/><text x="6.5564%" y="1039.50"></text></g><g><title>&lt;std::io::Write::write_fmt::Adapter&lt;T&gt; as core::fmt::Write&gt;::write_str (406 samples, 0.15%)</title><rect x="6.3355%" y="1061" width="0.1478%" height="15" fill="rgb(217,163,10)" fg:x="17405" fg:w="406"/><text x="6.5855%" y="1071.50"></text></g><g><title>&lt;std::io::stdio::StdoutLock as std::io::Write&gt;::write_all (72 samples, 0.03%)</title><rect x="6.4571%" y="1045" width="0.0262%" height="15" fill="rgb(213,25,53)" fg:x="17739" fg:w="72"/><text x="6.7071%" y="1055.50"></text></g><g><title>&lt;std::io::buffered::linewriter::LineWriter&lt;W&gt; as std::io::Write&gt;::write_all (72 samples, 0.03%)</title><rect x="6.4571%" y="1029" width="0.0262%" height="15" fill="rgb(252,105,26)" fg:x="17739" fg:w="72"/><text x="6.7071%" y="1039.50"></text></g><g><title>&lt;std::io::buffered::linewritershim::LineWriterShim&lt;W&gt; as std::io::Write&gt;::write_all (72 samples, 0.03%)</title><rect x="6.4571%" y="1013" width="0.0262%" height="15" fill="rgb(220,39,43)" fg:x="17739" fg:w="72"/><text x="6.7071%" y="1023.50"></text></g><g><title>&lt;std::io::buffered::bufwriter::BufWriter&lt;W&gt; as std::io::Write&gt;::write_all (72 samples, 0.03%)</title><rect x="6.4571%" y="997" width="0.0262%" height="15" fill="rgb(229,68,48)" fg:x="17739" fg:w="72"/><text x="6.7071%" y="1007.50"></text></g><g><title>std::io::buffered::bufwriter::BufWriter&lt;W&gt;::write_to_buffer_unchecked (72 samples, 0.03%)</title><rect x="6.4571%" y="981" width="0.0262%" height="15" fill="rgb(252,8,32)" fg:x="17739" fg:w="72"/><text x="6.7071%" y="991.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (72 samples, 0.03%)</title><rect x="6.4571%" y="965" width="0.0262%" height="15" fill="rgb(223,20,43)" fg:x="17739" fg:w="72"/><text x="6.7071%" y="975.50"></text></g><g><title>&lt;std::io::stdio::StdoutRaw as std::io::Write&gt;::write_all (72 samples, 0.03%)</title><rect x="6.4571%" y="949" width="0.0262%" height="15" fill="rgb(229,81,49)" fg:x="17739" fg:w="72"/><text x="6.7071%" y="959.50"></text></g><g><title>std::io::Write::write_all (72 samples, 0.03%)</title><rect x="6.4571%" y="933" width="0.0262%" height="15" fill="rgb(236,28,36)" fg:x="17739" fg:w="72"/><text x="6.7071%" y="943.50"></text></g><g><title>&lt;std::sys::unix::stdio::Stdout as std::io::Write&gt;::write (72 samples, 0.03%)</title><rect x="6.4571%" y="917" width="0.0262%" height="15" fill="rgb(249,185,26)" fg:x="17739" fg:w="72"/><text x="6.7071%" y="927.50"></text></g><g><title>std::sys::unix::fd::FileDesc::write (72 samples, 0.03%)</title><rect x="6.4571%" y="901" width="0.0262%" height="15" fill="rgb(249,174,33)" fg:x="17739" fg:w="72"/><text x="6.7071%" y="911.50"></text></g><g><title>__GI___libc_write (72 samples, 0.03%)</title><rect x="6.4571%" y="885" width="0.0262%" height="15" fill="rgb(233,201,37)" fg:x="17739" fg:w="72"/><text x="6.7071%" y="895.50"></text></g><g><title>[unknown] (72 samples, 0.03%)</title><rect x="6.4571%" y="869" width="0.0262%" height="15" fill="rgb(221,78,26)" fg:x="17739" fg:w="72"/><text x="6.7071%" y="879.50"></text></g><g><title>&lt;std::io::buffered::bufwriter::BufWriter&lt;W&gt; as std::io::Write&gt;::write_all (212 samples, 0.08%)</title><rect x="6.4993%" y="1013" width="0.0772%" height="15" fill="rgb(250,127,30)" fg:x="17855" fg:w="212"/><text x="6.7493%" y="1023.50"></text></g><g><title>std::io::buffered::bufwriter::BufWriter&lt;W&gt;::write_to_buffer_unchecked (212 samples, 0.08%)</title><rect x="6.4993%" y="997" width="0.0772%" height="15" fill="rgb(230,49,44)" fg:x="17855" fg:w="212"/><text x="6.7493%" y="1007.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (212 samples, 0.08%)</title><rect x="6.4993%" y="981" width="0.0772%" height="15" fill="rgb(229,67,23)" fg:x="17855" fg:w="212"/><text x="6.7493%" y="991.50"></text></g><g><title>&lt;std::io::buffered::linewriter::LineWriter&lt;W&gt; as std::io::Write&gt;::write_all (507 samples, 0.18%)</title><rect x="6.4840%" y="1045" width="0.1846%" height="15" fill="rgb(249,83,47)" fg:x="17813" fg:w="507"/><text x="6.7340%" y="1055.50"></text></g><g><title>&lt;std::io::buffered::linewritershim::LineWriterShim&lt;W&gt; as std::io::Write&gt;::write_all (507 samples, 0.18%)</title><rect x="6.4840%" y="1029" width="0.1846%" height="15" fill="rgb(215,43,3)" fg:x="17813" fg:w="507"/><text x="6.7340%" y="1039.50"></text></g><g><title>std::sys_common::memchr::memrchr (253 samples, 0.09%)</title><rect x="6.5765%" y="1013" width="0.0921%" height="15" fill="rgb(238,154,13)" fg:x="18067" fg:w="253"/><text x="6.8265%" y="1023.50"></text></g><g><title>std::sys::unix::memchr::memrchr (253 samples, 0.09%)</title><rect x="6.5765%" y="997" width="0.0921%" height="15" fill="rgb(219,56,2)" fg:x="18067" fg:w="253"/><text x="6.8265%" y="1007.50"></text></g><g><title>std::sys::unix::memchr::memrchr::memrchr_specific (253 samples, 0.09%)</title><rect x="6.5765%" y="981" width="0.0921%" height="15" fill="rgb(233,0,4)" fg:x="18067" fg:w="253"/><text x="6.8265%" y="991.50"></text></g><g><title>&lt;std::io::stdio::StdoutLock as std::io::Write&gt;::write_all (626 samples, 0.23%)</title><rect x="6.4833%" y="1061" width="0.2279%" height="15" fill="rgb(235,30,7)" fg:x="17811" fg:w="626"/><text x="6.7333%" y="1071.50"></text></g><g><title>&lt;std::sync::remutex::ReentrantMutexGuard&lt;T&gt; as core::ops::deref::Deref&gt;::deref (117 samples, 0.04%)</title><rect x="6.6686%" y="1045" width="0.0426%" height="15" fill="rgb(250,79,13)" fg:x="18320" fg:w="117"/><text x="6.9186%" y="1055.50"></text></g><g><title>&lt;std::io::stdio::StdoutRaw as std::io::Write&gt;::write_all (37 samples, 0.01%)</title><rect x="6.7111%" y="1061" width="0.0135%" height="15" fill="rgb(211,146,34)" fg:x="18437" fg:w="37"/><text x="6.9611%" y="1071.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (70 samples, 0.03%)</title><rect x="6.7264%" y="1061" width="0.0255%" height="15" fill="rgb(228,22,38)" fg:x="18479" fg:w="70"/><text x="6.9764%" y="1071.50"></text></g><g><title>__GI___libc_free (43 samples, 0.02%)</title><rect x="6.7523%" y="1061" width="0.0157%" height="15" fill="rgb(235,168,5)" fg:x="18550" fg:w="43"/><text x="7.0023%" y="1071.50"></text></g><g><title>__GI___libc_write (133 samples, 0.05%)</title><rect x="6.7796%" y="1061" width="0.0484%" height="15" fill="rgb(221,155,16)" fg:x="18625" fg:w="133"/><text x="7.0296%" y="1071.50"></text></g><g><title>[unknown] (93 samples, 0.03%)</title><rect x="6.7941%" y="1045" width="0.0339%" height="15" fill="rgb(215,215,53)" fg:x="18665" fg:w="93"/><text x="7.0441%" y="1055.50"></text></g><g><title>__GI___mmap64 (45 samples, 0.02%)</title><rect x="6.8280%" y="1061" width="0.0164%" height="15" fill="rgb(223,4,10)" fg:x="18758" fg:w="45"/><text x="7.0780%" y="1071.50"></text></g><g><title>__GI___munmap (146 samples, 0.05%)</title><rect x="6.8444%" y="1061" width="0.0531%" height="15" fill="rgb(234,103,6)" fg:x="18803" fg:w="146"/><text x="7.0944%" y="1071.50"></text></g><g><title>[unknown] (116 samples, 0.04%)</title><rect x="6.8553%" y="1045" width="0.0422%" height="15" fill="rgb(227,97,0)" fg:x="18833" fg:w="116"/><text x="7.1053%" y="1055.50"></text></g><g><title>__memcpy_avx_unaligned_erms (276 samples, 0.10%)</title><rect x="6.9037%" y="1061" width="0.1005%" height="15" fill="rgb(234,150,53)" fg:x="18966" fg:w="276"/><text x="7.1537%" y="1071.50"></text></g><g><title>__memrchr_avx2 (66 samples, 0.02%)</title><rect x="7.0042%" y="1061" width="0.0240%" height="15" fill="rgb(228,201,54)" fg:x="19242" fg:w="66"/><text x="7.2542%" y="1071.50"></text></g><g><title>_int_free (167 samples, 0.06%)</title><rect x="7.0304%" y="1061" width="0.0608%" height="15" fill="rgb(222,22,37)" fg:x="19314" fg:w="167"/><text x="7.2804%" y="1071.50"></text></g><g><title>alloc::alloc::alloc (33 samples, 0.01%)</title><rect x="7.1050%" y="1045" width="0.0120%" height="15" fill="rgb(237,53,32)" fg:x="19519" fg:w="33"/><text x="7.3550%" y="1055.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (44 samples, 0.02%)</title><rect x="7.1050%" y="1061" width="0.0160%" height="15" fill="rgb(233,25,53)" fg:x="19519" fg:w="44"/><text x="7.3550%" y="1071.50"></text></g><g><title>alloc::alloc::exchange_malloc (82 samples, 0.03%)</title><rect x="7.1247%" y="1061" width="0.0298%" height="15" fill="rgb(210,40,34)" fg:x="19573" fg:w="82"/><text x="7.3747%" y="1071.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (63 samples, 0.02%)</title><rect x="7.1316%" y="1045" width="0.0229%" height="15" fill="rgb(241,220,44)" fg:x="19592" fg:w="63"/><text x="7.3816%" y="1055.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (34 samples, 0.01%)</title><rect x="7.1614%" y="1061" width="0.0124%" height="15" fill="rgb(235,28,35)" fg:x="19674" fg:w="34"/><text x="7.4114%" y="1071.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (103 samples, 0.04%)</title><rect x="7.1811%" y="1061" width="0.0375%" height="15" fill="rgb(210,56,17)" fg:x="19728" fg:w="103"/><text x="7.4311%" y="1071.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::into_vec (31 samples, 0.01%)</title><rect x="7.2328%" y="1061" width="0.0113%" height="15" fill="rgb(224,130,29)" fg:x="19870" fg:w="31"/><text x="7.4828%" y="1071.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (31 samples, 0.01%)</title><rect x="7.2706%" y="1061" width="0.0113%" height="15" fill="rgb(235,212,8)" fg:x="19974" fg:w="31"/><text x="7.5206%" y="1071.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (32 samples, 0.01%)</title><rect x="7.2819%" y="1061" width="0.0116%" height="15" fill="rgb(223,33,50)" fg:x="20005" fg:w="32"/><text x="7.5319%" y="1071.50"></text></g><g><title>coldbrew::jit::JitCache::has_native_trace (35 samples, 0.01%)</title><rect x="7.3070%" y="1061" width="0.0127%" height="15" fill="rgb(219,149,13)" fg:x="20074" fg:w="35"/><text x="7.5570%" y="1071.50"></text></g><g><title>coldbrew::profiler::Profiler::count_entry (36 samples, 0.01%)</title><rect x="7.3198%" y="1061" width="0.0131%" height="15" fill="rgb(250,156,29)" fg:x="20109" fg:w="36"/><text x="7.5698%" y="1071.50"></text></g><g><title>coldbrew::profiler::Profiler::is_hot (37 samples, 0.01%)</title><rect x="7.3329%" y="1061" width="0.0135%" height="15" fill="rgb(216,193,19)" fg:x="20145" fg:w="37"/><text x="7.5829%" y="1071.50"></text></g><g><title>coldbrew::program::Program::code (216 samples, 0.08%)</title><rect x="7.3463%" y="1061" width="0.0786%" height="15" fill="rgb(216,135,14)" fg:x="20182" fg:w="216"/><text x="7.5963%" y="1071.50"></text></g><g><title>coldbrew::runtime::Frame::inc_instruction_index (65 samples, 0.02%)</title><rect x="7.4250%" y="1061" width="0.0237%" height="15" fill="rgb(241,47,5)" fg:x="20398" fg:w="65"/><text x="7.6750%" y="1071.50"></text></g><g><title>coldbrew::runtime::Frame::instruction_index (29 samples, 0.01%)</title><rect x="7.4486%" y="1061" width="0.0106%" height="15" fill="rgb(233,42,35)" fg:x="20463" fg:w="29"/><text x="7.6986%" y="1071.50"></text></g><g><title>coldbrew::runtime::Runtime::fetch (76 samples, 0.03%)</title><rect x="7.4872%" y="1061" width="0.0277%" height="15" fill="rgb(231,13,6)" fg:x="20569" fg:w="76"/><text x="7.7372%" y="1071.50"></text></g><g><title>coldbrew::runtime::Runtime::next (279 samples, 0.10%)</title><rect x="7.5152%" y="1061" width="0.1016%" height="15" fill="rgb(207,181,40)" fg:x="20646" fg:w="279"/><text x="7.7652%" y="1071.50"></text></g><g><title>coldbrew::trace::Recorder::is_recording (36 samples, 0.01%)</title><rect x="7.6255%" y="1061" width="0.0131%" height="15" fill="rgb(254,173,49)" fg:x="20949" fg:w="36"/><text x="7.8755%" y="1071.50"></text></g><g><title>core::cmp::max_by (39 samples, 0.01%)</title><rect x="7.6463%" y="1061" width="0.0142%" height="15" fill="rgb(221,1,38)" fg:x="21006" fg:w="39"/><text x="7.8963%" y="1071.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_cmpeq_epi8 (145 samples, 0.05%)</title><rect x="7.6605%" y="1061" width="0.0528%" height="15" fill="rgb(206,124,46)" fg:x="21045" fg:w="145"/><text x="7.9105%" y="1071.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (72 samples, 0.03%)</title><rect x="7.7133%" y="1061" width="0.0262%" height="15" fill="rgb(249,21,11)" fg:x="21190" fg:w="72"/><text x="7.9633%" y="1071.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (137 samples, 0.05%)</title><rect x="7.7395%" y="1061" width="0.0499%" height="15" fill="rgb(222,201,40)" fg:x="21262" fg:w="137"/><text x="7.9895%" y="1071.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_set1_epi8 (137 samples, 0.05%)</title><rect x="7.7893%" y="1061" width="0.0499%" height="15" fill="rgb(235,61,29)" fg:x="21399" fg:w="137"/><text x="8.0393%" y="1071.50"></text></g><g><title>core::fmt::Formatter::pad_integral (87 samples, 0.03%)</title><rect x="7.8436%" y="1061" width="0.0317%" height="15" fill="rgb(219,207,3)" fg:x="21548" fg:w="87"/><text x="8.0936%" y="1071.50"></text></g><g><title>core::fmt::builders::DebugInner::entry (161 samples, 0.06%)</title><rect x="7.8811%" y="1061" width="0.0586%" height="15" fill="rgb(222,56,46)" fg:x="21651" fg:w="161"/><text x="8.1311%" y="1071.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::and_then (54 samples, 0.02%)</title><rect x="7.9200%" y="1045" width="0.0197%" height="15" fill="rgb(239,76,54)" fg:x="21758" fg:w="54"/><text x="8.1700%" y="1055.50"></text></g><g><title>core::fmt::builders::DebugInner::entry::{{closure}} (54 samples, 0.02%)</title><rect x="7.9200%" y="1029" width="0.0197%" height="15" fill="rgb(231,124,27)" fg:x="21758" fg:w="54"/><text x="8.1700%" y="1039.50"></text></g><g><title>core::fmt::builders::DebugSet::entry (37 samples, 0.01%)</title><rect x="7.9397%" y="1061" width="0.0135%" height="15" fill="rgb(249,195,6)" fg:x="21812" fg:w="37"/><text x="8.1897%" y="1071.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u64&gt;::fmt (31 samples, 0.01%)</title><rect x="7.9531%" y="1061" width="0.0113%" height="15" fill="rgb(237,174,47)" fg:x="21849" fg:w="31"/><text x="8.2031%" y="1071.50"></text></g><g><title>core::fmt::num::imp::fmt_u64 (30 samples, 0.01%)</title><rect x="7.9535%" y="1045" width="0.0109%" height="15" fill="rgb(206,201,31)" fg:x="21850" fg:w="30"/><text x="8.2035%" y="1055.50"></text></g><g><title>core::fmt::Formatter::new (50 samples, 0.02%)</title><rect x="7.9954%" y="1045" width="0.0182%" height="15" fill="rgb(231,57,52)" fg:x="21965" fg:w="50"/><text x="8.2454%" y="1055.50"></text></g><g><title>core::fmt::write (203 samples, 0.07%)</title><rect x="7.9644%" y="1061" width="0.0739%" height="15" fill="rgb(248,177,22)" fg:x="21880" fg:w="203"/><text x="8.2144%" y="1071.50"></text></g><g><title>core::fmt::rt::Argument::fmt (68 samples, 0.02%)</title><rect x="8.0136%" y="1045" width="0.0248%" height="15" fill="rgb(215,211,37)" fg:x="22015" fg:w="68"/><text x="8.2636%" y="1055.50"></text></g><g><title>core::hash::BuildHasher::hash_one (100 samples, 0.04%)</title><rect x="8.0383%" y="1061" width="0.0364%" height="15" fill="rgb(241,128,51)" fg:x="22083" fg:w="100"/><text x="8.2883%" y="1071.50"></text></g><g><title>core::hash::Hasher::write_usize (124 samples, 0.05%)</title><rect x="8.0747%" y="1061" width="0.0451%" height="15" fill="rgb(227,165,31)" fg:x="22183" fg:w="124"/><text x="8.3247%" y="1071.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (61 samples, 0.02%)</title><rect x="8.1198%" y="1061" width="0.0222%" height="15" fill="rgb(228,167,24)" fg:x="22307" fg:w="61"/><text x="8.3698%" y="1071.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for usize&gt;::hash (124 samples, 0.05%)</title><rect x="8.1420%" y="1061" width="0.0451%" height="15" fill="rgb(228,143,12)" fg:x="22368" fg:w="124"/><text x="8.3920%" y="1071.50"></text></g><g><title>core::hash::sip::u8to64_le (95 samples, 0.03%)</title><rect x="8.1872%" y="1061" width="0.0346%" height="15" fill="rgb(249,149,8)" fg:x="22492" fg:w="95"/><text x="8.4372%" y="1071.50"></text></g><g><title>core::ops::function::FnOnce::call_once (38 samples, 0.01%)</title><rect x="8.2236%" y="1061" width="0.0138%" height="15" fill="rgb(243,35,44)" fg:x="22592" fg:w="38"/><text x="8.4736%" y="1071.50"></text></g><g><title>core::option::Option&lt;T&gt;::unwrap (36 samples, 0.01%)</title><rect x="8.2396%" y="1061" width="0.0131%" height="15" fill="rgb(246,89,9)" fg:x="22636" fg:w="36"/><text x="8.4896%" y="1071.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::truncate::Dropper&lt;coldbrew::jit::Register&gt;&gt; (54 samples, 0.02%)</title><rect x="8.2545%" y="1061" width="0.0197%" height="15" fill="rgb(233,213,13)" fg:x="22677" fg:w="54"/><text x="8.5045%" y="1071.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;coldbrew::runtime::Value&gt;&gt; (30 samples, 0.01%)</title><rect x="8.2866%" y="1061" width="0.0109%" height="15" fill="rgb(233,141,41)" fg:x="22765" fg:w="30"/><text x="8.5366%" y="1071.50"></text></g><g><title>core::ptr::drop_in_place&lt;coldbrew::runtime::Instruction&gt; (39 samples, 0.01%)</title><rect x="8.3008%" y="1061" width="0.0142%" height="15" fill="rgb(239,167,4)" fg:x="22804" fg:w="39"/><text x="8.5508%" y="1071.50"></text></g><g><title>core::slice::index::range (45 samples, 0.02%)</title><rect x="8.3514%" y="1061" width="0.0164%" height="15" fill="rgb(209,217,16)" fg:x="22943" fg:w="45"/><text x="8.6014%" y="1071.50"></text></g><g><title>dynasmrt::components::MemoryManager::commit (81 samples, 0.03%)</title><rect x="8.3899%" y="1061" width="0.0295%" height="15" fill="rgb(219,88,35)" fg:x="23049" fg:w="81"/><text x="8.6399%" y="1071.50"></text></g><g><title>dynasmrt::mmap::MutableBuffer::make_exec (81 samples, 0.03%)</title><rect x="8.3899%" y="1045" width="0.0295%" height="15" fill="rgb(220,193,23)" fg:x="23049" fg:w="81"/><text x="8.6399%" y="1055.50"></text></g><g><title>memmap2::MmapMut::make_exec (81 samples, 0.03%)</title><rect x="8.3899%" y="1029" width="0.0295%" height="15" fill="rgb(230,90,52)" fg:x="23049" fg:w="81"/><text x="8.6399%" y="1039.50"></text></g><g><title>memmap2::os::MmapInner::make_exec (81 samples, 0.03%)</title><rect x="8.3899%" y="1013" width="0.0295%" height="15" fill="rgb(252,106,19)" fg:x="23049" fg:w="81"/><text x="8.6399%" y="1023.50"></text></g><g><title>memmap2::os::MmapInner::mprotect (81 samples, 0.03%)</title><rect x="8.3899%" y="997" width="0.0295%" height="15" fill="rgb(206,74,20)" fg:x="23049" fg:w="81"/><text x="8.6399%" y="1007.50"></text></g><g><title>__GI___mprotect (81 samples, 0.03%)</title><rect x="8.3899%" y="981" width="0.0295%" height="15" fill="rgb(230,138,44)" fg:x="23049" fg:w="81"/><text x="8.6399%" y="991.50"></text></g><g><title>[unknown] (81 samples, 0.03%)</title><rect x="8.3899%" y="965" width="0.0295%" height="15" fill="rgb(235,182,43)" fg:x="23049" fg:w="81"/><text x="8.6399%" y="975.50"></text></g><g><title>dynasmrt::mmap::ExecutableBuffer::new (42 samples, 0.02%)</title><rect x="8.4318%" y="1061" width="0.0153%" height="15" fill="rgb(242,16,51)" fg:x="23164" fg:w="42"/><text x="8.6818%" y="1071.50"></text></g><g><title>dynasmrt::mmap::ExecutableBuffer::ptr (35 samples, 0.01%)</title><rect x="8.4471%" y="1061" width="0.0127%" height="15" fill="rgb(248,9,4)" fg:x="23206" fg:w="35"/><text x="8.6971%" y="1071.50"></text></g><g><title>dynasmrt::mmap::MutableBuffer::make_exec (29 samples, 0.01%)</title><rect x="8.4598%" y="1061" width="0.0106%" height="15" fill="rgb(210,31,22)" fg:x="23241" fg:w="29"/><text x="8.7098%" y="1071.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::contains_key (76 samples, 0.03%)</title><rect x="8.4715%" y="1061" width="0.0277%" height="15" fill="rgb(239,54,39)" fg:x="23273" fg:w="76"/><text x="8.7215%" y="1071.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (76 samples, 0.03%)</title><rect x="8.4715%" y="1045" width="0.0277%" height="15" fill="rgb(230,99,41)" fg:x="23273" fg:w="76"/><text x="8.7215%" y="1055.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (77 samples, 0.03%)</title><rect x="8.4991%" y="1061" width="0.0280%" height="15" fill="rgb(253,106,12)" fg:x="23349" fg:w="77"/><text x="8.7491%" y="1071.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (73 samples, 0.03%)</title><rect x="8.5006%" y="1045" width="0.0266%" height="15" fill="rgb(213,46,41)" fg:x="23353" fg:w="73"/><text x="8.7506%" y="1055.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_mut (28 samples, 0.01%)</title><rect x="8.5272%" y="1061" width="0.0102%" height="15" fill="rgb(215,133,35)" fg:x="23426" fg:w="28"/><text x="8.7772%" y="1071.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner_mut (28 samples, 0.01%)</title><rect x="8.5272%" y="1045" width="0.0102%" height="15" fill="rgb(213,28,5)" fg:x="23426" fg:w="28"/><text x="8.7772%" y="1055.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::from_base_index (67 samples, 0.02%)</title><rect x="8.5483%" y="1061" width="0.0244%" height="15" fill="rgb(215,77,49)" fg:x="23484" fg:w="67"/><text x="8.7983%" y="1071.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::{{closure}} (111 samples, 0.04%)</title><rect x="8.5778%" y="1061" width="0.0404%" height="15" fill="rgb(248,100,22)" fg:x="23565" fg:w="111"/><text x="8.8278%" y="1071.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::bucket (56 samples, 0.02%)</title><rect x="8.5978%" y="1045" width="0.0204%" height="15" fill="rgb(208,67,9)" fg:x="23620" fg:w="56"/><text x="8.8478%" y="1055.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::bucket (30 samples, 0.01%)</title><rect x="8.6182%" y="1045" width="0.0109%" height="15" fill="rgb(219,133,21)" fg:x="23676" fg:w="30"/><text x="8.8682%" y="1055.50"></text></g><g><title>hashbrown::raw::sse2::Group::load (75 samples, 0.03%)</title><rect x="8.6891%" y="1029" width="0.0273%" height="15" fill="rgb(246,46,29)" fg:x="23871" fg:w="75"/><text x="8.9391%" y="1039.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (335 samples, 0.12%)</title><rect x="8.6182%" y="1061" width="0.1219%" height="15" fill="rgb(246,185,52)" fg:x="23676" fg:w="335"/><text x="8.8682%" y="1071.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::find_inner (305 samples, 0.11%)</title><rect x="8.6291%" y="1045" width="0.1110%" height="15" fill="rgb(252,136,11)" fg:x="23706" fg:w="305"/><text x="8.8791%" y="1055.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_empty (65 samples, 0.02%)</title><rect x="8.7164%" y="1029" width="0.0237%" height="15" fill="rgb(219,138,53)" fg:x="23946" fg:w="65"/><text x="8.9664%" y="1039.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get (70 samples, 0.03%)</title><rect x="8.7478%" y="1061" width="0.0255%" height="15" fill="rgb(211,51,23)" fg:x="24032" fg:w="70"/><text x="8.9978%" y="1071.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (132 samples, 0.05%)</title><rect x="8.7823%" y="1061" width="0.0480%" height="15" fill="rgb(247,221,28)" fg:x="24127" fg:w="132"/><text x="9.0323%" y="1071.50"></text></g><g><title>memmap2::os::MmapInner::make_mut (180 samples, 0.07%)</title><rect x="8.8701%" y="1061" width="0.0655%" height="15" fill="rgb(251,222,45)" fg:x="24368" fg:w="180"/><text x="9.1201%" y="1071.50"></text></g><g><title>memmap2::os::MmapInner::mprotect (180 samples, 0.07%)</title><rect x="8.8701%" y="1045" width="0.0655%" height="15" fill="rgb(217,162,53)" fg:x="24368" fg:w="180"/><text x="9.1201%" y="1055.50"></text></g><g><title>__GI___mprotect (180 samples, 0.07%)</title><rect x="8.8701%" y="1029" width="0.0655%" height="15" fill="rgb(229,93,14)" fg:x="24368" fg:w="180"/><text x="9.1201%" y="1039.50"></text></g><g><title>[unknown] (180 samples, 0.07%)</title><rect x="8.8701%" y="1013" width="0.0655%" height="15" fill="rgb(209,67,49)" fg:x="24368" fg:w="180"/><text x="9.1201%" y="1023.50"></text></g><g><title>memmap2::os::MmapInner::mprotect (37 samples, 0.01%)</title><rect x="8.9363%" y="1061" width="0.0135%" height="15" fill="rgb(213,87,29)" fg:x="24550" fg:w="37"/><text x="9.1863%" y="1071.50"></text></g><g><title>std::io::buffered::bufwriter::BufWriter&lt;W&gt;::flush_buf (68 samples, 0.02%)</title><rect x="8.9851%" y="1061" width="0.0248%" height="15" fill="rgb(205,151,52)" fg:x="24684" fg:w="68"/><text x="9.2351%" y="1071.50"></text></g><g><title>std::io::stdio::print_to_buffer_if_capture_used (101 samples, 0.04%)</title><rect x="9.0131%" y="1061" width="0.0368%" height="15" fill="rgb(253,215,39)" fg:x="24761" fg:w="101"/><text x="9.2631%" y="1071.50"></text></g><g><title>core::sync::atomic::AtomicBool::load (41 samples, 0.01%)</title><rect x="9.0350%" y="1045" width="0.0149%" height="15" fill="rgb(221,220,41)" fg:x="24821" fg:w="41"/><text x="9.2850%" y="1055.50"></text></g><g><title>core::sync::atomic::atomic_load (41 samples, 0.01%)</title><rect x="9.0350%" y="1029" width="0.0149%" height="15" fill="rgb(218,133,21)" fg:x="24821" fg:w="41"/><text x="9.2850%" y="1039.50"></text></g><g><title>[unknown] (12,001 samples, 4.37%)</title><rect x="4.6931%" y="1077" width="4.3684%" height="15" fill="rgb(221,193,43)" fg:x="12893" fg:w="12001"/><text x="4.9431%" y="1087.50">[unkn..</text></g><g><title>&lt;std::io::Write::write_fmt::Adapter&lt;T&gt; as core::fmt::Write&gt;::write_str (174 samples, 0.06%)</title><rect x="9.0761%" y="1061" width="0.0633%" height="15" fill="rgb(240,128,52)" fg:x="24934" fg:w="174"/><text x="9.3261%" y="1071.50"></text></g><g><title>&lt;std::io::stdio::StdoutLock as std::io::Write&gt;::write_all (67 samples, 0.02%)</title><rect x="9.1150%" y="1045" width="0.0244%" height="15" fill="rgb(253,114,12)" fg:x="25041" fg:w="67"/><text x="9.3650%" y="1055.50"></text></g><g><title>&lt;std::io::buffered::linewriter::LineWriter&lt;W&gt; as std::io::Write&gt;::write_all (67 samples, 0.02%)</title><rect x="9.1150%" y="1029" width="0.0244%" height="15" fill="rgb(215,223,47)" fg:x="25041" fg:w="67"/><text x="9.3650%" y="1039.50"></text></g><g><title>&lt;std::io::buffered::linewritershim::LineWriterShim&lt;W&gt; as std::io::Write&gt;::write_all (67 samples, 0.02%)</title><rect x="9.1150%" y="1013" width="0.0244%" height="15" fill="rgb(248,225,23)" fg:x="25041" fg:w="67"/><text x="9.3650%" y="1023.50"></text></g><g><title>&lt;std::io::buffered::bufwriter::BufWriter&lt;W&gt; as std::io::Write&gt;::write_all (67 samples, 0.02%)</title><rect x="9.1150%" y="997" width="0.0244%" height="15" fill="rgb(250,108,0)" fg:x="25041" fg:w="67"/><text x="9.3650%" y="1007.50"></text></g><g><title>std::io::buffered::bufwriter::BufWriter&lt;W&gt;::write_to_buffer_unchecked (67 samples, 0.02%)</title><rect x="9.1150%" y="981" width="0.0244%" height="15" fill="rgb(228,208,7)" fg:x="25041" fg:w="67"/><text x="9.3650%" y="991.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (67 samples, 0.02%)</title><rect x="9.1150%" y="965" width="0.0244%" height="15" fill="rgb(244,45,10)" fg:x="25041" fg:w="67"/><text x="9.3650%" y="975.50"></text></g><g><title>std::io::buffered::bufwriter::BufWriter&lt;W&gt;::flush_buf (67 samples, 0.02%)</title><rect x="9.1150%" y="949" width="0.0244%" height="15" fill="rgb(207,125,25)" fg:x="25041" fg:w="67"/><text x="9.3650%" y="959.50"></text></g><g><title>&lt;std::io::stdio::StdoutRaw as std::io::Write&gt;::write (67 samples, 0.02%)</title><rect x="9.1150%" y="933" width="0.0244%" height="15" fill="rgb(210,195,18)" fg:x="25041" fg:w="67"/><text x="9.3650%" y="943.50"></text></g><g><title>&lt;std::sys::unix::stdio::Stdout as std::io::Write&gt;::write (67 samples, 0.02%)</title><rect x="9.1150%" y="917" width="0.0244%" height="15" fill="rgb(249,80,12)" fg:x="25041" fg:w="67"/><text x="9.3650%" y="927.50"></text></g><g><title>std::sys::unix::fd::FileDesc::write (67 samples, 0.02%)</title><rect x="9.1150%" y="901" width="0.0244%" height="15" fill="rgb(221,65,9)" fg:x="25041" fg:w="67"/><text x="9.3650%" y="911.50"></text></g><g><title>__GI___libc_write (67 samples, 0.02%)</title><rect x="9.1150%" y="885" width="0.0244%" height="15" fill="rgb(235,49,36)" fg:x="25041" fg:w="67"/><text x="9.3650%" y="895.50"></text></g><g><title>[unknown] (67 samples, 0.02%)</title><rect x="9.1150%" y="869" width="0.0244%" height="15" fill="rgb(225,32,20)" fg:x="25041" fg:w="67"/><text x="9.3650%" y="879.50"></text></g><g><title>&lt;std::io::stdio::StdoutLock as std::io::Write&gt;::write_all (177 samples, 0.06%)</title><rect x="9.1394%" y="1061" width="0.0644%" height="15" fill="rgb(215,141,46)" fg:x="25108" fg:w="177"/><text x="9.3894%" y="1071.50"></text></g><g><title>__do_global_dtors_aux_fini_array_entry (423 samples, 0.15%)</title><rect x="9.0615%" y="1077" width="0.1540%" height="15" fill="rgb(250,160,47)" fg:x="24894" fg:w="423"/><text x="9.3115%" y="1087.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_ptr (59 samples, 0.02%)</title><rect x="9.5580%" y="757" width="0.0215%" height="15" fill="rgb(216,222,40)" fg:x="26258" fg:w="59"/><text x="9.8080%" y="767.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (35 samples, 0.01%)</title><rect x="9.5668%" y="741" width="0.0127%" height="15" fill="rgb(234,217,39)" fg:x="26282" fg:w="35"/><text x="9.8168%" y="751.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (178 samples, 0.06%)</title><rect x="9.5562%" y="773" width="0.0648%" height="15" fill="rgb(207,178,40)" fg:x="26253" fg:w="178"/><text x="9.8062%" y="783.50"></text></g><g><title>core::slice::raw::from_raw_parts (114 samples, 0.04%)</title><rect x="9.5795%" y="757" width="0.0415%" height="15" fill="rgb(221,136,13)" fg:x="26317" fg:w="114"/><text x="9.8295%" y="767.50"></text></g><g><title>core::ptr::slice_from_raw_parts (114 samples, 0.04%)</title><rect x="9.5795%" y="741" width="0.0415%" height="15" fill="rgb(249,199,10)" fg:x="26317" fg:w="114"/><text x="9.8295%" y="751.50"></text></g><g><title>core::ptr::metadata::from_raw_parts (114 samples, 0.04%)</title><rect x="9.5795%" y="725" width="0.0415%" height="15" fill="rgb(249,222,13)" fg:x="26317" fg:w="114"/><text x="9.8295%" y="735.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (36 samples, 0.01%)</title><rect x="9.6337%" y="741" width="0.0131%" height="15" fill="rgb(244,185,38)" fg:x="26466" fg:w="36"/><text x="9.8837%" y="751.50"></text></g><g><title>core::slice::raw::from_raw_parts (31 samples, 0.01%)</title><rect x="9.6356%" y="725" width="0.0113%" height="15" fill="rgb(236,202,9)" fg:x="26471" fg:w="31"/><text x="9.8856%" y="735.50"></text></g><g><title>core::ptr::slice_from_raw_parts (31 samples, 0.01%)</title><rect x="9.6356%" y="709" width="0.0113%" height="15" fill="rgb(250,229,37)" fg:x="26471" fg:w="31"/><text x="9.8856%" y="719.50"></text></g><g><title>core::ptr::metadata::from_raw_parts (28 samples, 0.01%)</title><rect x="9.6367%" y="693" width="0.0102%" height="15" fill="rgb(206,174,23)" fg:x="26474" fg:w="28"/><text x="9.8867%" y="703.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (61 samples, 0.02%)</title><rect x="9.6549%" y="693" width="0.0222%" height="15" fill="rgb(211,33,43)" fg:x="26524" fg:w="61"/><text x="9.9049%" y="703.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (61 samples, 0.02%)</title><rect x="9.6549%" y="677" width="0.0222%" height="15" fill="rgb(245,58,50)" fg:x="26524" fg:w="61"/><text x="9.9049%" y="687.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (54 samples, 0.02%)</title><rect x="9.6574%" y="661" width="0.0197%" height="15" fill="rgb(244,68,36)" fg:x="26531" fg:w="54"/><text x="9.9074%" y="671.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (135 samples, 0.05%)</title><rect x="9.6330%" y="757" width="0.0491%" height="15" fill="rgb(232,229,15)" fg:x="26464" fg:w="135"/><text x="9.8830%" y="767.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (97 samples, 0.04%)</title><rect x="9.6468%" y="741" width="0.0353%" height="15" fill="rgb(254,30,23)" fg:x="26502" fg:w="97"/><text x="9.8968%" y="751.50"></text></g><g><title>alloc::slice::hack::to_vec (97 samples, 0.04%)</title><rect x="9.6468%" y="725" width="0.0353%" height="15" fill="rgb(235,160,14)" fg:x="26502" fg:w="97"/><text x="9.8968%" y="735.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (96 samples, 0.03%)</title><rect x="9.6472%" y="709" width="0.0349%" height="15" fill="rgb(212,155,44)" fg:x="26503" fg:w="96"/><text x="9.8972%" y="719.50"></text></g><g><title>&lt;coldbrew::runtime::ProgramCounter as core::clone::Clone&gt;::clone (33 samples, 0.01%)</title><rect x="9.6822%" y="757" width="0.0120%" height="15" fill="rgb(226,2,50)" fg:x="26599" fg:w="33"/><text x="9.9322%" y="767.50"></text></g><g><title>__memcpy_avx_unaligned_erms (49 samples, 0.02%)</title><rect x="9.7466%" y="661" width="0.0178%" height="15" fill="rgb(234,177,6)" fg:x="26776" fg:w="49"/><text x="9.9966%" y="671.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::copy_to_nonoverlapping (59 samples, 0.02%)</title><rect x="9.7466%" y="693" width="0.0215%" height="15" fill="rgb(217,24,9)" fg:x="26776" fg:w="59"/><text x="9.9966%" y="703.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (59 samples, 0.02%)</title><rect x="9.7466%" y="677" width="0.0215%" height="15" fill="rgb(220,13,46)" fg:x="26776" fg:w="59"/><text x="9.9966%" y="687.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::data_start (73 samples, 0.03%)</title><rect x="9.7724%" y="693" width="0.0266%" height="15" fill="rgb(239,221,27)" fg:x="26847" fg:w="73"/><text x="10.0224%" y="703.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::data_end (29 samples, 0.01%)</title><rect x="9.7884%" y="677" width="0.0106%" height="15" fill="rgb(222,198,25)" fg:x="26891" fg:w="29"/><text x="10.0384%" y="687.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as hashbrown::raw::RawTableClone&gt;::clone_from_spec (173 samples, 0.06%)</title><rect x="9.7444%" y="709" width="0.0630%" height="15" fill="rgb(211,99,13)" fg:x="26770" fg:w="173"/><text x="9.9944%" y="719.50"></text></g><g><title>core::num::&lt;impl usize&gt;::checked_add (55 samples, 0.02%)</title><rect x="9.9264%" y="661" width="0.0200%" height="15" fill="rgb(232,111,31)" fg:x="27270" fg:w="55"/><text x="10.1764%" y="671.50"></text></g><g><title>hashbrown::raw::TableLayout::calculate_layout_for (165 samples, 0.06%)</title><rect x="9.8947%" y="677" width="0.0601%" height="15" fill="rgb(245,82,37)" fg:x="27183" fg:w="165"/><text x="10.1447%" y="687.50"></text></g><g><title>__GI___libc_malloc (91 samples, 0.03%)</title><rect x="10.0010%" y="613" width="0.0331%" height="15" fill="rgb(227,149,46)" fg:x="27475" fg:w="91"/><text x="10.2510%" y="623.50"></text></g><g><title>tcache_get (68 samples, 0.02%)</title><rect x="10.0094%" y="597" width="0.0248%" height="15" fill="rgb(218,36,50)" fg:x="27498" fg:w="68"/><text x="10.2594%" y="607.50"></text></g><g><title>alloc::alloc::alloc (103 samples, 0.04%)</title><rect x="10.0010%" y="629" width="0.0375%" height="15" fill="rgb(226,80,48)" fg:x="27475" fg:w="103"/><text x="10.2510%" y="639.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (225 samples, 0.08%)</title><rect x="9.9708%" y="661" width="0.0819%" height="15" fill="rgb(238,224,15)" fg:x="27392" fg:w="225"/><text x="10.2208%" y="671.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (221 samples, 0.08%)</title><rect x="9.9723%" y="645" width="0.0804%" height="15" fill="rgb(241,136,10)" fg:x="27396" fg:w="221"/><text x="10.2223%" y="655.50"></text></g><g><title>hashbrown::raw::alloc::inner::do_alloc (271 samples, 0.10%)</title><rect x="9.9548%" y="677" width="0.0986%" height="15" fill="rgb(208,32,45)" fg:x="27348" fg:w="271"/><text x="10.2048%" y="687.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::new_uninitialized (650 samples, 0.24%)</title><rect x="9.8172%" y="709" width="0.2366%" height="15" fill="rgb(207,135,9)" fg:x="26970" fg:w="650"/><text x="10.0672%" y="719.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::new_uninitialized (565 samples, 0.21%)</title><rect x="9.8481%" y="693" width="0.2057%" height="15" fill="rgb(206,86,44)" fg:x="27055" fg:w="565"/><text x="10.0981%" y="703.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (1,011 samples, 0.37%)</title><rect x="9.7029%" y="725" width="0.3680%" height="15" fill="rgb(245,177,15)" fg:x="26656" fg:w="1011"/><text x="9.9529%" y="735.50"></text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::clone::Clone&gt;::clone (1,034 samples, 0.38%)</title><rect x="9.6953%" y="741" width="0.3764%" height="15" fill="rgb(206,64,50)" fg:x="26635" fg:w="1034"/><text x="9.9453%" y="751.50"></text></g><g><title>__memcpy_avx_unaligned_erms (63 samples, 0.02%)</title><rect x="10.0716%" y="741" width="0.0229%" height="15" fill="rgb(234,36,40)" fg:x="27669" fg:w="63"/><text x="10.3216%" y="751.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::clone::Clone&gt;::clone (1,104 samples, 0.40%)</title><rect x="9.6942%" y="757" width="0.4019%" height="15" fill="rgb(213,64,8)" fg:x="26632" fg:w="1104"/><text x="9.9442%" y="767.50"></text></g><g><title>__memcpy_avx_unaligned_erms (34 samples, 0.01%)</title><rect x="10.0960%" y="757" width="0.0124%" height="15" fill="rgb(210,75,36)" fg:x="27736" fg:w="34"/><text x="10.3460%" y="767.50"></text></g><g><title>&lt;coldbrew::runtime::Frame as core::clone::Clone&gt;::clone (1,343 samples, 0.49%)</title><rect x="9.6210%" y="773" width="0.4889%" height="15" fill="rgb(229,88,21)" fg:x="26431" fg:w="1343"/><text x="9.8710%" y="783.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (117 samples, 0.04%)</title><rect x="10.1164%" y="773" width="0.0426%" height="15" fill="rgb(252,204,47)" fg:x="27792" fg:w="117"/><text x="10.3664%" y="783.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::is_empty (30 samples, 0.01%)</title><rect x="10.1605%" y="773" width="0.0109%" height="15" fill="rgb(208,77,27)" fg:x="27913" fg:w="30"/><text x="10.4105%" y="783.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (30 samples, 0.01%)</title><rect x="10.3934%" y="741" width="0.0109%" height="15" fill="rgb(221,76,26)" fg:x="28553" fg:w="30"/><text x="10.6434%" y="751.50"></text></g><g><title>&lt;&amp;alloc::vec::Vec&lt;T,A&gt; as core::iter::traits::collect::IntoIterator&gt;::into_iter (81 samples, 0.03%)</title><rect x="10.3890%" y="757" width="0.0295%" height="15" fill="rgb(225,139,18)" fg:x="28541" fg:w="81"/><text x="10.6390%" y="767.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::iter (39 samples, 0.01%)</title><rect x="10.4043%" y="741" width="0.0142%" height="15" fill="rgb(230,137,11)" fg:x="28583" fg:w="39"/><text x="10.6543%" y="751.50"></text></g><g><title>core::slice::iter::Iter&lt;T&gt;::new (30 samples, 0.01%)</title><rect x="10.4076%" y="725" width="0.0109%" height="15" fill="rgb(212,28,1)" fg:x="28592" fg:w="30"/><text x="10.6576%" y="735.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (68 samples, 0.02%)</title><rect x="10.4185%" y="757" width="0.0248%" height="15" fill="rgb(248,164,17)" fg:x="28622" fg:w="68"/><text x="10.6685%" y="767.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::needs_to_grow (33 samples, 0.01%)</title><rect x="10.5015%" y="661" width="0.0120%" height="15" fill="rgb(222,171,42)" fg:x="28850" fg:w="33"/><text x="10.7515%" y="671.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (46 samples, 0.02%)</title><rect x="10.5401%" y="629" width="0.0167%" height="15" fill="rgb(243,84,45)" fg:x="28956" fg:w="46"/><text x="10.7901%" y="639.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::current_memory (63 samples, 0.02%)</title><rect x="10.5569%" y="629" width="0.0229%" height="15" fill="rgb(252,49,23)" fg:x="29002" fg:w="63"/><text x="10.8069%" y="639.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::set_ptr_and_cap (102 samples, 0.04%)</title><rect x="10.5798%" y="629" width="0.0371%" height="15" fill="rgb(215,19,7)" fg:x="29065" fg:w="102"/><text x="10.8298%" y="639.50"></text></g><g><title>core::ptr::unique::Unique&lt;T&gt;::new_unchecked (36 samples, 0.01%)</title><rect x="10.6038%" y="613" width="0.0131%" height="15" fill="rgb(238,81,41)" fg:x="29131" fg:w="36"/><text x="10.8538%" y="623.50"></text></g><g><title>__GI___libc_malloc (70 samples, 0.03%)</title><rect x="10.6864%" y="565" width="0.0255%" height="15" fill="rgb(210,199,37)" fg:x="29358" fg:w="70"/><text x="10.9364%" y="575.50"></text></g><g><title>tcache_get (33 samples, 0.01%)</title><rect x="10.6999%" y="549" width="0.0120%" height="15" fill="rgb(244,192,49)" fg:x="29395" fg:w="33"/><text x="10.9499%" y="559.50"></text></g><g><title>alloc::alloc::alloc (90 samples, 0.03%)</title><rect x="10.6864%" y="581" width="0.0328%" height="15" fill="rgb(226,211,11)" fg:x="29358" fg:w="90"/><text x="10.9364%" y="591.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (286 samples, 0.10%)</title><rect x="10.6515%" y="613" width="0.1041%" height="15" fill="rgb(236,162,54)" fg:x="29262" fg:w="286"/><text x="10.9015%" y="623.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (285 samples, 0.10%)</title><rect x="10.6519%" y="597" width="0.1037%" height="15" fill="rgb(220,229,9)" fg:x="29263" fg:w="285"/><text x="10.9019%" y="607.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;[T]&gt;::slice_from_raw_parts (56 samples, 0.02%)</title><rect x="10.7352%" y="581" width="0.0204%" height="15" fill="rgb(250,87,22)" fg:x="29492" fg:w="56"/><text x="10.9852%" y="591.50"></text></g><g><title>core::ptr::slice_from_raw_parts_mut (51 samples, 0.02%)</title><rect x="10.7370%" y="565" width="0.0186%" height="15" fill="rgb(239,43,17)" fg:x="29497" fg:w="51"/><text x="10.9870%" y="575.50"></text></g><g><title>core::ptr::metadata::from_raw_parts_mut (50 samples, 0.02%)</title><rect x="10.7374%" y="549" width="0.0182%" height="15" fill="rgb(231,177,25)" fg:x="29498" fg:w="50"/><text x="10.9874%" y="559.50"></text></g><g><title>_int_realloc (35 samples, 0.01%)</title><rect x="10.7938%" y="549" width="0.0127%" height="15" fill="rgb(219,179,1)" fg:x="29653" fg:w="35"/><text x="11.0438%" y="559.50"></text></g><g><title>__GI___libc_realloc (70 samples, 0.03%)</title><rect x="10.7851%" y="565" width="0.0255%" height="15" fill="rgb(238,219,53)" fg:x="29629" fg:w="70"/><text x="11.0351%" y="575.50"></text></g><g><title>alloc::alloc::realloc (75 samples, 0.03%)</title><rect x="10.7851%" y="581" width="0.0273%" height="15" fill="rgb(232,167,36)" fg:x="29629" fg:w="75"/><text x="11.0351%" y="591.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (220 samples, 0.08%)</title><rect x="10.7556%" y="613" width="0.0801%" height="15" fill="rgb(244,19,51)" fg:x="29548" fg:w="220"/><text x="11.0056%" y="623.50"></text></g><g><title>alloc::alloc::Global::grow_impl (213 samples, 0.08%)</title><rect x="10.7581%" y="597" width="0.0775%" height="15" fill="rgb(224,6,22)" fg:x="29555" fg:w="213"/><text x="11.0081%" y="607.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;[T]&gt;::slice_from_raw_parts (35 samples, 0.01%)</title><rect x="10.8229%" y="581" width="0.0127%" height="15" fill="rgb(224,145,5)" fg:x="29733" fg:w="35"/><text x="11.0729%" y="591.50"></text></g><g><title>core::ptr::slice_from_raw_parts_mut (30 samples, 0.01%)</title><rect x="10.8248%" y="565" width="0.0109%" height="15" fill="rgb(234,130,49)" fg:x="29738" fg:w="30"/><text x="11.0748%" y="575.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (54 samples, 0.02%)</title><rect x="10.8357%" y="613" width="0.0197%" height="15" fill="rgb(254,6,2)" fg:x="29768" fg:w="54"/><text x="11.0857%" y="623.50"></text></g><g><title>alloc::raw_vec::finish_grow (764 samples, 0.28%)</title><rect x="10.6169%" y="629" width="0.2781%" height="15" fill="rgb(208,96,46)" fg:x="29167" fg:w="764"/><text x="10.8669%" y="639.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map_err (104 samples, 0.04%)</title><rect x="10.8572%" y="613" width="0.0379%" height="15" fill="rgb(239,3,39)" fg:x="29827" fg:w="104"/><text x="11.1072%" y="623.50"></text></g><g><title>core::alloc::layout::Layout::max_size_for_align (29 samples, 0.01%)</title><rect x="10.9584%" y="597" width="0.0106%" height="15" fill="rgb(233,210,1)" fg:x="30105" fg:w="29"/><text x="11.2084%" y="607.50"></text></g><g><title>core::alloc::layout::Layout::array (207 samples, 0.08%)</title><rect x="10.8950%" y="629" width="0.0753%" height="15" fill="rgb(244,137,37)" fg:x="29931" fg:w="207"/><text x="11.1450%" y="639.50"></text></g><g><title>core::alloc::layout::Layout::array::inner (201 samples, 0.07%)</title><rect x="10.8972%" y="613" width="0.0732%" height="15" fill="rgb(240,136,2)" fg:x="29937" fg:w="201"/><text x="11.1472%" y="623.50"></text></g><g><title>core::cmp::max (286 samples, 0.10%)</title><rect x="10.9704%" y="629" width="0.1041%" height="15" fill="rgb(239,18,37)" fg:x="30138" fg:w="286"/><text x="11.2204%" y="639.50"></text></g><g><title>core::cmp::Ord::max (286 samples, 0.10%)</title><rect x="10.9704%" y="613" width="0.1041%" height="15" fill="rgb(218,185,22)" fg:x="30138" fg:w="286"/><text x="11.2204%" y="623.50"></text></g><g><title>core::cmp::max_by (269 samples, 0.10%)</title><rect x="10.9766%" y="597" width="0.0979%" height="15" fill="rgb(225,218,4)" fg:x="30155" fg:w="269"/><text x="11.2266%" y="607.50"></text></g><g><title>core::ops::function::FnOnce::call_once (98 samples, 0.04%)</title><rect x="11.0388%" y="581" width="0.0357%" height="15" fill="rgb(230,182,32)" fg:x="30326" fg:w="98"/><text x="11.2888%" y="591.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::Ord for usize&gt;::cmp (73 samples, 0.03%)</title><rect x="11.0479%" y="565" width="0.0266%" height="15" fill="rgb(242,56,43)" fg:x="30351" fg:w="73"/><text x="11.2979%" y="575.50"></text></g><g><title>core::num::&lt;impl usize&gt;::checked_add (63 samples, 0.02%)</title><rect x="11.0745%" y="629" width="0.0229%" height="15" fill="rgb(233,99,24)" fg:x="30424" fg:w="63"/><text x="11.3245%" y="639.50"></text></g><g><title>core::num::&lt;impl usize&gt;::overflowing_add (28 samples, 0.01%)</title><rect x="11.0872%" y="613" width="0.0102%" height="15" fill="rgb(234,209,42)" fg:x="30459" fg:w="28"/><text x="11.3372%" y="623.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (1,613 samples, 0.59%)</title><rect x="10.5168%" y="645" width="0.5871%" height="15" fill="rgb(227,7,12)" fg:x="28892" fg:w="1613"/><text x="10.7668%" y="655.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1,684 samples, 0.61%)</title><rect x="10.5135%" y="661" width="0.6130%" height="15" fill="rgb(245,203,43)" fg:x="28883" fg:w="1684"/><text x="10.7635%" y="671.50"></text></g><g><title>alloc::raw_vec::handle_reserve (62 samples, 0.02%)</title><rect x="11.1040%" y="645" width="0.0226%" height="15" fill="rgb(238,205,33)" fg:x="30505" fg:w="62"/><text x="11.3540%" y="655.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map_err (48 samples, 0.02%)</title><rect x="11.1090%" y="629" width="0.0175%" height="15" fill="rgb(231,56,7)" fg:x="30519" fg:w="48"/><text x="11.3590%" y="639.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (1,767 samples, 0.64%)</title><rect x="10.4855%" y="693" width="0.6432%" height="15" fill="rgb(244,186,29)" fg:x="28806" fg:w="1767"/><text x="10.7355%" y="703.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (1,746 samples, 0.64%)</title><rect x="10.4932%" y="677" width="0.6356%" height="15" fill="rgb(234,111,31)" fg:x="28827" fg:w="1746"/><text x="10.7432%" y="687.50"></text></g><g><title>__memcpy_avx_unaligned_erms (29 samples, 0.01%)</title><rect x="11.1327%" y="677" width="0.0106%" height="15" fill="rgb(241,149,10)" fg:x="30584" fg:w="29"/><text x="11.3827%" y="687.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1,872 samples, 0.68%)</title><rect x="10.4677%" y="709" width="0.6814%" height="15" fill="rgb(249,206,44)" fg:x="28757" fg:w="1872"/><text x="10.7177%" y="719.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (56 samples, 0.02%)</title><rect x="11.1287%" y="693" width="0.0204%" height="15" fill="rgb(251,153,30)" fg:x="30573" fg:w="56"/><text x="11.3787%" y="703.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::sub_ptr (84 samples, 0.03%)</title><rect x="11.1677%" y="677" width="0.0306%" height="15" fill="rgb(239,152,38)" fg:x="30680" fg:w="84"/><text x="11.4177%" y="687.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::sub_ptr (49 samples, 0.02%)</title><rect x="11.1804%" y="661" width="0.0178%" height="15" fill="rgb(249,139,47)" fg:x="30715" fg:w="49"/><text x="11.4304%" y="671.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (2,219 samples, 0.81%)</title><rect x="10.4549%" y="725" width="0.8077%" height="15" fill="rgb(244,64,35)" fg:x="28722" fg:w="2219"/><text x="10.7049%" y="735.50"></text></g><g><title>core::slice::iter::Iter&lt;T&gt;::as_slice (312 samples, 0.11%)</title><rect x="11.1491%" y="709" width="0.1136%" height="15" fill="rgb(216,46,15)" fg:x="30629" fg:w="312"/><text x="11.3991%" y="719.50"></text></g><g><title>core::slice::iter::Iter&lt;T&gt;::make_slice (307 samples, 0.11%)</title><rect x="11.1509%" y="693" width="0.1117%" height="15" fill="rgb(250,74,19)" fg:x="30634" fg:w="307"/><text x="11.4009%" y="703.50"></text></g><g><title>core::slice::raw::from_raw_parts (177 samples, 0.06%)</title><rect x="11.1982%" y="677" width="0.0644%" height="15" fill="rgb(249,42,33)" fg:x="30764" fg:w="177"/><text x="11.4482%" y="687.50"></text></g><g><title>core::ptr::slice_from_raw_parts (177 samples, 0.06%)</title><rect x="11.1982%" y="661" width="0.0644%" height="15" fill="rgb(242,149,17)" fg:x="30764" fg:w="177"/><text x="11.4482%" y="671.50"></text></g><g><title>core::ptr::metadata::from_raw_parts (176 samples, 0.06%)</title><rect x="11.1986%" y="645" width="0.0641%" height="15" fill="rgb(244,29,21)" fg:x="30765" fg:w="176"/><text x="11.4486%" y="655.50"></text></g><g><title>&lt;dynasmrt::Assembler&lt;R&gt; as core::iter::traits::collect::Extend&lt;&amp;u8&gt;&gt;::extend (2,365 samples, 0.86%)</title><rect x="10.4433%" y="757" width="0.8609%" height="15" fill="rgb(220,130,37)" fg:x="28690" fg:w="2365"/><text x="10.6933%" y="767.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::iter::traits::collect::Extend&lt;&amp;T&gt;&gt;::extend (2,360 samples, 0.86%)</title><rect x="10.4451%" y="741" width="0.8591%" height="15" fill="rgb(211,67,2)" fg:x="28695" fg:w="2360"/><text x="10.6951%" y="751.50"></text></g><g><title>core::array::&lt;impl core::iter::traits::collect::IntoIterator for &amp;[T: N]&gt;::into_iter (114 samples, 0.04%)</title><rect x="11.2627%" y="725" width="0.0415%" height="15" fill="rgb(235,68,52)" fg:x="30941" fg:w="114"/><text x="11.5127%" y="735.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::iter (53 samples, 0.02%)</title><rect x="11.2849%" y="709" width="0.0193%" height="15" fill="rgb(246,142,3)" fg:x="31002" fg:w="53"/><text x="11.5349%" y="719.50"></text></g><g><title>core::slice::iter::Iter&lt;T&gt;::new (36 samples, 0.01%)</title><rect x="11.2911%" y="693" width="0.0131%" height="15" fill="rgb(241,25,7)" fg:x="31019" fg:w="36"/><text x="11.5411%" y="703.50"></text></g><g><title>&lt;dynasmrt::Assembler&lt;R&gt; as dynasmrt::DynasmApi&gt;::push (59 samples, 0.02%)</title><rect x="11.3078%" y="757" width="0.0215%" height="15" fill="rgb(242,119,39)" fg:x="31065" fg:w="59"/><text x="11.5578%" y="767.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (52 samples, 0.02%)</title><rect x="11.3103%" y="741" width="0.0189%" height="15" fill="rgb(241,98,45)" fg:x="31072" fg:w="52"/><text x="11.5603%" y="751.50"></text></g><g><title>__memcpy_avx_unaligned_erms (48 samples, 0.02%)</title><rect x="11.3296%" y="757" width="0.0175%" height="15" fill="rgb(254,28,30)" fg:x="31125" fg:w="48"/><text x="11.5796%" y="767.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (68 samples, 0.02%)</title><rect x="11.3471%" y="757" width="0.0248%" height="15" fill="rgb(241,142,54)" fg:x="31173" fg:w="68"/><text x="11.5971%" y="767.50"></text></g><g><title>core::ptr::write (36 samples, 0.01%)</title><rect x="11.3588%" y="741" width="0.0131%" height="15" fill="rgb(222,85,15)" fg:x="31205" fg:w="36"/><text x="11.6088%" y="751.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::pop_front (95 samples, 0.03%)</title><rect x="11.3999%" y="741" width="0.0346%" height="15" fill="rgb(210,85,47)" fg:x="31318" fg:w="95"/><text x="11.6499%" y="751.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::to_physical_idx (37 samples, 0.01%)</title><rect x="11.4210%" y="725" width="0.0135%" height="15" fill="rgb(224,206,25)" fg:x="31376" fg:w="37"/><text x="11.6710%" y="735.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::wrap_add (32 samples, 0.01%)</title><rect x="11.4228%" y="709" width="0.0116%" height="15" fill="rgb(243,201,19)" fg:x="31381" fg:w="32"/><text x="11.6728%" y="719.50"></text></g><g><title>core::option::Option&lt;T&gt;::unwrap (28 samples, 0.01%)</title><rect x="11.4476%" y="741" width="0.0102%" height="15" fill="rgb(236,59,4)" fg:x="31449" fg:w="28"/><text x="11.6976%" y="751.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::io::stdio::StdoutLock&gt; (64 samples, 0.02%)</title><rect x="11.4610%" y="677" width="0.0233%" height="15" fill="rgb(254,179,45)" fg:x="31486" fg:w="64"/><text x="11.7110%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::remutex::ReentrantMutexGuard&lt;core::cell::RefCell&lt;std::io::buffered::linewriter::LineWriter&lt;std::io::stdio::StdoutRaw&gt;&gt;&gt;&gt; (64 samples, 0.02%)</title><rect x="11.4610%" y="661" width="0.0233%" height="15" fill="rgb(226,14,10)" fg:x="31486" fg:w="64"/><text x="11.7110%" y="671.50"></text></g><g><title>&lt;std::sync::remutex::ReentrantMutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (64 samples, 0.02%)</title><rect x="11.4610%" y="645" width="0.0233%" height="15" fill="rgb(244,27,41)" fg:x="31486" fg:w="64"/><text x="11.7110%" y="655.50"></text></g><g><title>std::sys::unix::locks::futex_mutex::Mutex::unlock (54 samples, 0.02%)</title><rect x="11.4647%" y="629" width="0.0197%" height="15" fill="rgb(235,35,32)" fg:x="31496" fg:w="54"/><text x="11.7147%" y="639.50"></text></g><g><title>core::sync::atomic::AtomicU32::swap (50 samples, 0.02%)</title><rect x="11.4661%" y="613" width="0.0182%" height="15" fill="rgb(218,68,31)" fg:x="31500" fg:w="50"/><text x="11.7161%" y="623.50"></text></g><g><title>core::sync::atomic::atomic_swap (50 samples, 0.02%)</title><rect x="11.4661%" y="597" width="0.0182%" height="15" fill="rgb(207,120,37)" fg:x="31500" fg:w="50"/><text x="11.7161%" y="607.50"></text></g><g><title>&lt;std::io::buffered::bufwriter::BufWriter&lt;W&gt; as std::io::Write&gt;::write_all (49 samples, 0.02%)</title><rect x="11.5007%" y="581" width="0.0178%" height="15" fill="rgb(227,98,0)" fg:x="31595" fg:w="49"/><text x="11.7507%" y="591.50"></text></g><g><title>std::io::buffered::bufwriter::BufWriter&lt;W&gt;::write_to_buffer_unchecked (37 samples, 0.01%)</title><rect x="11.5051%" y="565" width="0.0135%" height="15" fill="rgb(207,7,3)" fg:x="31607" fg:w="37"/><text x="11.7551%" y="575.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (29 samples, 0.01%)</title><rect x="11.5080%" y="549" width="0.0106%" height="15" fill="rgb(206,98,19)" fg:x="31615" fg:w="29"/><text x="11.7580%" y="559.50"></text></g><g><title>__memcpy_avx_unaligned_erms (29 samples, 0.01%)</title><rect x="11.5080%" y="533" width="0.0106%" height="15" fill="rgb(217,5,26)" fg:x="31615" fg:w="29"/><text x="11.7580%" y="543.50"></text></g><g><title>__GI___libc_write (7,525 samples, 2.74%)</title><rect x="11.5295%" y="517" width="2.7391%" height="15" fill="rgb(235,190,38)" fg:x="31674" fg:w="7525"/><text x="11.7795%" y="527.50">__..</text></g><g><title>[unknown] (7,379 samples, 2.69%)</title><rect x="11.5826%" y="501" width="2.6860%" height="15" fill="rgb(247,86,24)" fg:x="31820" fg:w="7379"/><text x="11.8326%" y="511.50">[u..</text></g><g><title>[unknown] (7,222 samples, 2.63%)</title><rect x="11.6398%" y="485" width="2.6288%" height="15" fill="rgb(205,101,16)" fg:x="31977" fg:w="7222"/><text x="11.8898%" y="495.50">[u..</text></g><g><title>[unknown] (7,173 samples, 2.61%)</title><rect x="11.6576%" y="469" width="2.6110%" height="15" fill="rgb(246,168,33)" fg:x="32026" fg:w="7173"/><text x="11.9076%" y="479.50">[u..</text></g><g><title>[unknown] (7,110 samples, 2.59%)</title><rect x="11.6805%" y="453" width="2.5881%" height="15" fill="rgb(231,114,1)" fg:x="32089" fg:w="7110"/><text x="11.9305%" y="463.50">[u..</text></g><g><title>[unknown] (6,966 samples, 2.54%)</title><rect x="11.7330%" y="437" width="2.5357%" height="15" fill="rgb(207,184,53)" fg:x="32233" fg:w="6966"/><text x="11.9830%" y="447.50">[u..</text></g><g><title>[unknown] (6,822 samples, 2.48%)</title><rect x="11.7854%" y="421" width="2.4832%" height="15" fill="rgb(224,95,51)" fg:x="32377" fg:w="6822"/><text x="12.0354%" y="431.50">[u..</text></g><g><title>[unknown] (6,721 samples, 2.45%)</title><rect x="11.8221%" y="405" width="2.4465%" height="15" fill="rgb(212,188,45)" fg:x="32478" fg:w="6721"/><text x="12.0721%" y="415.50">[u..</text></g><g><title>[unknown] (6,639 samples, 2.42%)</title><rect x="11.8520%" y="389" width="2.4166%" height="15" fill="rgb(223,154,38)" fg:x="32560" fg:w="6639"/><text x="12.1020%" y="399.50">[u..</text></g><g><title>[unknown] (6,372 samples, 2.32%)</title><rect x="11.9492%" y="373" width="2.3194%" height="15" fill="rgb(251,22,52)" fg:x="32827" fg:w="6372"/><text x="12.1992%" y="383.50">[..</text></g><g><title>[unknown] (5,777 samples, 2.10%)</title><rect x="12.1658%" y="357" width="2.1029%" height="15" fill="rgb(229,209,22)" fg:x="33422" fg:w="5777"/><text x="12.4158%" y="367.50">[..</text></g><g><title>[unknown] (3,890 samples, 1.42%)</title><rect x="12.8526%" y="341" width="1.4160%" height="15" fill="rgb(234,138,34)" fg:x="35309" fg:w="3890"/><text x="13.1026%" y="351.50"></text></g><g><title>[unknown] (3,587 samples, 1.31%)</title><rect x="12.9629%" y="325" width="1.3057%" height="15" fill="rgb(212,95,11)" fg:x="35612" fg:w="3587"/><text x="13.2129%" y="335.50"></text></g><g><title>[unknown] (3,045 samples, 1.11%)</title><rect x="13.1602%" y="309" width="1.1084%" height="15" fill="rgb(240,179,47)" fg:x="36154" fg:w="3045"/><text x="13.4102%" y="319.50"></text></g><g><title>[unknown] (2,048 samples, 0.75%)</title><rect x="13.5231%" y="293" width="0.7455%" height="15" fill="rgb(240,163,11)" fg:x="37151" fg:w="2048"/><text x="13.7731%" y="303.50"></text></g><g><title>[unknown] (883 samples, 0.32%)</title><rect x="13.9472%" y="277" width="0.3214%" height="15" fill="rgb(236,37,12)" fg:x="38316" fg:w="883"/><text x="14.1972%" y="287.50"></text></g><g><title>[unknown] (857 samples, 0.31%)</title><rect x="13.9567%" y="261" width="0.3120%" height="15" fill="rgb(232,164,16)" fg:x="38342" fg:w="857"/><text x="14.2067%" y="271.50"></text></g><g><title>[unknown] (536 samples, 0.20%)</title><rect x="14.0735%" y="245" width="0.1951%" height="15" fill="rgb(244,205,15)" fg:x="38663" fg:w="536"/><text x="14.3235%" y="255.50"></text></g><g><title>[unknown] (409 samples, 0.15%)</title><rect x="14.1197%" y="229" width="0.1489%" height="15" fill="rgb(223,117,47)" fg:x="38790" fg:w="409"/><text x="14.3697%" y="239.50"></text></g><g><title>[unknown] (200 samples, 0.07%)</title><rect x="14.1958%" y="213" width="0.0728%" height="15" fill="rgb(244,107,35)" fg:x="38999" fg:w="200"/><text x="14.4458%" y="223.50"></text></g><g><title>[unknown] (99 samples, 0.04%)</title><rect x="14.2326%" y="197" width="0.0360%" height="15" fill="rgb(205,140,8)" fg:x="39100" fg:w="99"/><text x="14.4826%" y="207.50"></text></g><g><title>[unknown] (87 samples, 0.03%)</title><rect x="14.2369%" y="181" width="0.0317%" height="15" fill="rgb(228,84,46)" fg:x="39112" fg:w="87"/><text x="14.4869%" y="191.50"></text></g><g><title>[unknown] (65 samples, 0.02%)</title><rect x="14.2449%" y="165" width="0.0237%" height="15" fill="rgb(254,188,9)" fg:x="39134" fg:w="65"/><text x="14.4949%" y="175.50"></text></g><g><title>&lt;std::io::stdio::StdoutRaw as std::io::Write&gt;::write (7,557 samples, 2.75%)</title><rect x="11.5295%" y="565" width="2.7508%" height="15" fill="rgb(206,112,54)" fg:x="31674" fg:w="7557"/><text x="11.7795%" y="575.50">&lt;s..</text></g><g><title>&lt;std::sys::unix::stdio::Stdout as std::io::Write&gt;::write (7,557 samples, 2.75%)</title><rect x="11.5295%" y="549" width="2.7508%" height="15" fill="rgb(216,84,49)" fg:x="31674" fg:w="7557"/><text x="11.7795%" y="559.50">&lt;s..</text></g><g><title>std::sys::unix::fd::FileDesc::write (7,557 samples, 2.75%)</title><rect x="11.5295%" y="533" width="2.7508%" height="15" fill="rgb(214,194,35)" fg:x="31674" fg:w="7557"/><text x="11.7795%" y="543.50">st..</text></g><g><title>std::sys::unix::cvt (29 samples, 0.01%)</title><rect x="14.2697%" y="517" width="0.0106%" height="15" fill="rgb(249,28,3)" fg:x="39202" fg:w="29"/><text x="14.5197%" y="527.50"></text></g><g><title>std::io::buffered::bufwriter::BufWriter&lt;W&gt;::flush_buf (7,617 samples, 2.77%)</title><rect x="11.5193%" y="581" width="2.7726%" height="15" fill="rgb(222,56,52)" fg:x="31646" fg:w="7617"/><text x="11.7693%" y="591.50">st..</text></g><g><title>&lt;std::io::buffered::linewritershim::LineWriterShim&lt;W&gt; as std::io::Write&gt;::write_all (7,740 samples, 2.82%)</title><rect x="11.5000%" y="597" width="2.8174%" height="15" fill="rgb(245,217,50)" fg:x="31593" fg:w="7740"/><text x="11.7500%" y="607.50">&lt;s..</text></g><g><title>std::sys_common::memchr::memrchr (68 samples, 0.02%)</title><rect x="14.2926%" y="581" width="0.0248%" height="15" fill="rgb(213,201,24)" fg:x="39265" fg:w="68"/><text x="14.5426%" y="591.50"></text></g><g><title>std::sys::unix::memchr::memrchr (68 samples, 0.02%)</title><rect x="14.2926%" y="565" width="0.0248%" height="15" fill="rgb(248,116,28)" fg:x="39265" fg:w="68"/><text x="14.5426%" y="575.50"></text></g><g><title>std::sys::unix::memchr::memrchr::memrchr_specific (68 samples, 0.02%)</title><rect x="14.2926%" y="549" width="0.0248%" height="15" fill="rgb(219,72,43)" fg:x="39265" fg:w="68"/><text x="14.5426%" y="559.50"></text></g><g><title>__memrchr_avx2 (56 samples, 0.02%)</title><rect x="14.2970%" y="533" width="0.0204%" height="15" fill="rgb(209,138,14)" fg:x="39277" fg:w="56"/><text x="14.5470%" y="543.50"></text></g><g><title>&lt;std::io::buffered::linewriter::LineWriter&lt;W&gt; as std::io::Write&gt;::write_all (7,741 samples, 2.82%)</title><rect x="11.5000%" y="613" width="2.8178%" height="15" fill="rgb(222,18,33)" fg:x="31593" fg:w="7741"/><text x="11.7500%" y="623.50">&lt;s..</text></g><g><title>&lt;std::io::stdio::StdoutLock as std::io::Write&gt;::write_all (7,749 samples, 2.82%)</title><rect x="11.4982%" y="629" width="2.8207%" height="15" fill="rgb(213,199,7)" fg:x="31588" fg:w="7749"/><text x="11.7482%" y="639.50">&lt;s..</text></g><g><title>&lt;std::io::Write::write_fmt::Adapter&lt;T&gt; as core::fmt::Write&gt;::write_str (7,762 samples, 2.83%)</title><rect x="11.4938%" y="645" width="2.8254%" height="15" fill="rgb(250,110,10)" fg:x="31576" fg:w="7762"/><text x="11.7438%" y="655.50">&lt;s..</text></g><g><title>__GI___libc_write (97 samples, 0.04%)</title><rect x="14.3192%" y="645" width="0.0353%" height="15" fill="rgb(248,123,6)" fg:x="39338" fg:w="97"/><text x="14.5692%" y="655.50"></text></g><g><title>[unknown] (97 samples, 0.04%)</title><rect x="14.3192%" y="629" width="0.0353%" height="15" fill="rgb(206,91,31)" fg:x="39338" fg:w="97"/><text x="14.5692%" y="639.50"></text></g><g><title>&lt;std::io::buffered::linewriter::LineWriter&lt;W&gt; as std::io::Write&gt;::write_all (49 samples, 0.02%)</title><rect x="14.3603%" y="581" width="0.0178%" height="15" fill="rgb(211,154,13)" fg:x="39451" fg:w="49"/><text x="14.6103%" y="591.50"></text></g><g><title>&lt;std::io::buffered::linewritershim::LineWriterShim&lt;W&gt; as std::io::Write&gt;::write_all (49 samples, 0.02%)</title><rect x="14.3603%" y="565" width="0.0178%" height="15" fill="rgb(225,148,7)" fg:x="39451" fg:w="49"/><text x="14.6103%" y="575.50"></text></g><g><title>&lt;std::io::Write::write_fmt::Adapter&lt;T&gt; as core::fmt::Write&gt;::write_str (70 samples, 0.03%)</title><rect x="14.3585%" y="613" width="0.0255%" height="15" fill="rgb(220,160,43)" fg:x="39446" fg:w="70"/><text x="14.6085%" y="623.50"></text></g><g><title>&lt;std::io::stdio::StdoutLock as std::io::Write&gt;::write_all (65 samples, 0.02%)</title><rect x="14.3603%" y="597" width="0.0237%" height="15" fill="rgb(213,52,39)" fg:x="39451" fg:w="65"/><text x="14.6103%" y="607.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::buffer_range (66 samples, 0.02%)</title><rect x="14.4026%" y="581" width="0.0240%" height="15" fill="rgb(243,137,7)" fg:x="39567" fg:w="66"/><text x="14.6526%" y="591.50"></text></g><g><title>core::ptr::slice_from_raw_parts_mut (54 samples, 0.02%)</title><rect x="14.4069%" y="565" width="0.0197%" height="15" fill="rgb(230,79,13)" fg:x="39579" fg:w="54"/><text x="14.6569%" y="575.50"></text></g><g><title>core::ptr::metadata::from_raw_parts_mut (54 samples, 0.02%)</title><rect x="14.4069%" y="549" width="0.0197%" height="15" fill="rgb(247,105,23)" fg:x="39579" fg:w="54"/><text x="14.6569%" y="559.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::to_physical_idx (32 samples, 0.01%)</title><rect x="14.4513%" y="565" width="0.0116%" height="15" fill="rgb(223,179,41)" fg:x="39701" fg:w="32"/><text x="14.7013%" y="575.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::as_slices (297 samples, 0.11%)</title><rect x="14.3927%" y="597" width="0.1081%" height="15" fill="rgb(218,9,34)" fg:x="39540" fg:w="297"/><text x="14.6427%" y="607.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::slice_ranges (204 samples, 0.07%)</title><rect x="14.4266%" y="581" width="0.0743%" height="15" fill="rgb(222,106,8)" fg:x="39633" fg:w="204"/><text x="14.6766%" y="591.50"></text></g><g><title>core::slice::index::range (104 samples, 0.04%)</title><rect x="14.4630%" y="565" width="0.0379%" height="15" fill="rgb(211,220,0)" fg:x="39733" fg:w="104"/><text x="14.7130%" y="575.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::iter (392 samples, 0.14%)</title><rect x="14.3840%" y="613" width="0.1427%" height="15" fill="rgb(229,52,16)" fg:x="39516" fg:w="392"/><text x="14.6340%" y="623.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::iter (51 samples, 0.02%)</title><rect x="14.5081%" y="597" width="0.0186%" height="15" fill="rgb(212,155,18)" fg:x="39857" fg:w="51"/><text x="14.7581%" y="607.50"></text></g><g><title>core::slice::iter::Iter&lt;T&gt;::new (43 samples, 0.02%)</title><rect x="14.5110%" y="581" width="0.0157%" height="15" fill="rgb(242,21,14)" fg:x="39865" fg:w="43"/><text x="14.7610%" y="591.50"></text></g><g><title>&lt;std::io::buffered::linewriter::LineWriter&lt;W&gt; as std::io::Write&gt;::write_all (45 samples, 0.02%)</title><rect x="14.5321%" y="533" width="0.0164%" height="15" fill="rgb(222,19,48)" fg:x="39923" fg:w="45"/><text x="14.7821%" y="543.50"></text></g><g><title>&lt;std::io::buffered::linewritershim::LineWriterShim&lt;W&gt; as std::io::Write&gt;::write_all (45 samples, 0.02%)</title><rect x="14.5321%" y="517" width="0.0164%" height="15" fill="rgb(232,45,27)" fg:x="39923" fg:w="45"/><text x="14.7821%" y="527.50"></text></g><g><title>core::fmt::Formatter::debug_list (66 samples, 0.02%)</title><rect x="14.5267%" y="613" width="0.0240%" height="15" fill="rgb(249,103,42)" fg:x="39908" fg:w="66"/><text x="14.7767%" y="623.50"></text></g><g><title>core::fmt::builders::debug_list_new (60 samples, 0.02%)</title><rect x="14.5289%" y="597" width="0.0218%" height="15" fill="rgb(246,81,33)" fg:x="39914" fg:w="60"/><text x="14.7789%" y="607.50"></text></g><g><title>core::fmt::Formatter::write_str (60 samples, 0.02%)</title><rect x="14.5289%" y="581" width="0.0218%" height="15" fill="rgb(252,33,42)" fg:x="39914" fg:w="60"/><text x="14.7789%" y="591.50"></text></g><g><title>&lt;std::io::Write::write_fmt::Adapter&lt;T&gt; as core::fmt::Write&gt;::write_str (59 samples, 0.02%)</title><rect x="14.5292%" y="565" width="0.0215%" height="15" fill="rgb(209,212,41)" fg:x="39915" fg:w="59"/><text x="14.7792%" y="575.50"></text></g><g><title>&lt;std::io::stdio::StdoutLock as std::io::Write&gt;::write_all (53 samples, 0.02%)</title><rect x="14.5314%" y="549" width="0.0193%" height="15" fill="rgb(207,154,6)" fg:x="39921" fg:w="53"/><text x="14.7814%" y="559.50"></text></g><g><title>&lt;core::ptr::non_null::NonNull&lt;T&gt; as core::cmp::PartialEq&gt;::eq (93 samples, 0.03%)</title><rect x="14.7720%" y="565" width="0.0339%" height="15" fill="rgb(223,64,47)" fg:x="40582" fg:w="93"/><text x="15.0220%" y="575.50"></text></g><g><title>core::num::&lt;impl usize&gt;::unchecked_sub (46 samples, 0.02%)</title><rect x="14.8601%" y="549" width="0.0167%" height="15" fill="rgb(211,161,38)" fg:x="40824" fg:w="46"/><text x="15.1101%" y="559.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (515 samples, 0.19%)</title><rect x="14.7043%" y="581" width="0.1875%" height="15" fill="rgb(219,138,40)" fg:x="40396" fg:w="515"/><text x="14.9543%" y="591.50"></text></g><g><title>core::slice::iter::Iter&lt;T&gt;::post_inc_start (236 samples, 0.09%)</title><rect x="14.8059%" y="565" width="0.0859%" height="15" fill="rgb(241,228,46)" fg:x="40675" fg:w="236"/><text x="15.0559%" y="575.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::add (41 samples, 0.01%)</title><rect x="14.8769%" y="549" width="0.0149%" height="15" fill="rgb(223,209,38)" fg:x="40870" fg:w="41"/><text x="15.1269%" y="559.50"></text></g><g><title>&lt;alloc::collections::vec_deque::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (657 samples, 0.24%)</title><rect x="14.6610%" y="597" width="0.2392%" height="15" fill="rgb(236,164,45)" fg:x="40277" fg:w="657"/><text x="14.9110%" y="607.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::set_len (38 samples, 0.01%)</title><rect x="15.0756%" y="405" width="0.0138%" height="15" fill="rgb(231,15,5)" fg:x="41416" fg:w="38"/><text x="15.3256%" y="415.50"></text></g><g><title>&lt;std::io::buffered::bufwriter::BufWriter&lt;W&gt; as std::io::Write&gt;::write_all (180 samples, 0.07%)</title><rect x="15.0643%" y="437" width="0.0655%" height="15" fill="rgb(252,35,15)" fg:x="41385" fg:w="180"/><text x="15.3143%" y="447.50"></text></g><g><title>std::io::buffered::bufwriter::BufWriter&lt;W&gt;::write_to_buffer_unchecked (149 samples, 0.05%)</title><rect x="15.0756%" y="421" width="0.0542%" height="15" fill="rgb(248,181,18)" fg:x="41416" fg:w="149"/><text x="15.3256%" y="431.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (111 samples, 0.04%)</title><rect x="15.0894%" y="405" width="0.0404%" height="15" fill="rgb(233,39,42)" fg:x="41454" fg:w="111"/><text x="15.3394%" y="415.50"></text></g><g><title>__memcpy_avx_unaligned_erms (91 samples, 0.03%)</title><rect x="15.0967%" y="389" width="0.0331%" height="15" fill="rgb(238,110,33)" fg:x="41474" fg:w="91"/><text x="15.3467%" y="399.50"></text></g><g><title>std::io::buffered::linewritershim::LineWriterShim&lt;W&gt;::flush_if_completed_line (57 samples, 0.02%)</title><rect x="15.1298%" y="437" width="0.0207%" height="15" fill="rgb(233,195,10)" fg:x="41565" fg:w="57"/><text x="15.3798%" y="447.50"></text></g><g><title>&lt;std::io::buffered::linewriter::LineWriter&lt;W&gt; as std::io::Write&gt;::write_all (517 samples, 0.19%)</title><rect x="15.0643%" y="469" width="0.1882%" height="15" fill="rgb(254,105,3)" fg:x="41385" fg:w="517"/><text x="15.3143%" y="479.50"></text></g><g><title>&lt;std::io::buffered::linewritershim::LineWriterShim&lt;W&gt; as std::io::Write&gt;::write_all (517 samples, 0.19%)</title><rect x="15.0643%" y="453" width="0.1882%" height="15" fill="rgb(221,225,9)" fg:x="41385" fg:w="517"/><text x="15.3143%" y="463.50"></text></g><g><title>std::sys_common::memchr::memrchr (280 samples, 0.10%)</title><rect x="15.1506%" y="437" width="0.1019%" height="15" fill="rgb(224,227,45)" fg:x="41622" fg:w="280"/><text x="15.4006%" y="447.50"></text></g><g><title>std::sys::unix::memchr::memrchr (280 samples, 0.10%)</title><rect x="15.1506%" y="421" width="0.1019%" height="15" fill="rgb(229,198,43)" fg:x="41622" fg:w="280"/><text x="15.4006%" y="431.50"></text></g><g><title>std::sys::unix::memchr::memrchr::memrchr_specific (280 samples, 0.10%)</title><rect x="15.1506%" y="405" width="0.1019%" height="15" fill="rgb(206,209,35)" fg:x="41622" fg:w="280"/><text x="15.4006%" y="415.50"></text></g><g><title>__memrchr_avx2 (223 samples, 0.08%)</title><rect x="15.1713%" y="389" width="0.0812%" height="15" fill="rgb(245,195,53)" fg:x="41679" fg:w="223"/><text x="15.4213%" y="399.50"></text></g><g><title>&lt;std::io::Write::write_fmt::Adapter&lt;T&gt; as core::fmt::Write&gt;::write_str (649 samples, 0.24%)</title><rect x="15.0290%" y="501" width="0.2362%" height="15" fill="rgb(240,92,26)" fg:x="41288" fg:w="649"/><text x="15.2790%" y="511.50"></text></g><g><title>&lt;std::io::stdio::StdoutLock as std::io::Write&gt;::write_all (584 samples, 0.21%)</title><rect x="15.0527%" y="485" width="0.2126%" height="15" fill="rgb(207,40,23)" fg:x="41353" fg:w="584"/><text x="15.3027%" y="495.50"></text></g><g><title>&lt;std::sync::remutex::ReentrantMutexGuard&lt;T&gt; as core::ops::deref::Deref&gt;::deref (35 samples, 0.01%)</title><rect x="15.2525%" y="469" width="0.0127%" height="15" fill="rgb(223,111,35)" fg:x="41902" fg:w="35"/><text x="15.5025%" y="479.50"></text></g><g><title>&lt;&amp;T as core::fmt::Debug&gt;::fmt (931 samples, 0.34%)</title><rect x="14.9457%" y="533" width="0.3389%" height="15" fill="rgb(229,147,28)" fg:x="41059" fg:w="931"/><text x="15.1957%" y="543.50"></text></g><g><title>&lt;coldbrew::jit::Register as core::fmt::Debug&gt;::fmt (900 samples, 0.33%)</title><rect x="14.9569%" y="517" width="0.3276%" height="15" fill="rgb(211,29,28)" fg:x="41090" fg:w="900"/><text x="15.2069%" y="527.50"></text></g><g><title>core::fmt::Formatter::write_str (53 samples, 0.02%)</title><rect x="15.2652%" y="501" width="0.0193%" height="15" fill="rgb(228,72,33)" fg:x="41937" fg:w="53"/><text x="15.5152%" y="511.50"></text></g><g><title>&lt;std::io::buffered::bufwriter::BufWriter&lt;W&gt; as std::io::Write&gt;::write_all (130 samples, 0.05%)</title><rect x="15.3199%" y="453" width="0.0473%" height="15" fill="rgb(205,214,31)" fg:x="42087" fg:w="130"/><text x="15.5699%" y="463.50"></text></g><g><title>std::io::buffered::bufwriter::BufWriter&lt;W&gt;::write_to_buffer_unchecked (104 samples, 0.04%)</title><rect x="15.3293%" y="437" width="0.0379%" height="15" fill="rgb(224,111,15)" fg:x="42113" fg:w="104"/><text x="15.5793%" y="447.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (82 samples, 0.03%)</title><rect x="15.3373%" y="421" width="0.0298%" height="15" fill="rgb(253,21,26)" fg:x="42135" fg:w="82"/><text x="15.5873%" y="431.50"></text></g><g><title>__memcpy_avx_unaligned_erms (65 samples, 0.02%)</title><rect x="15.3435%" y="405" width="0.0237%" height="15" fill="rgb(245,139,43)" fg:x="42152" fg:w="65"/><text x="15.5935%" y="415.50"></text></g><g><title>std::io::buffered::linewritershim::LineWriterShim&lt;W&gt;::flush_if_completed_line (36 samples, 0.01%)</title><rect x="15.3672%" y="453" width="0.0131%" height="15" fill="rgb(252,170,7)" fg:x="42217" fg:w="36"/><text x="15.6172%" y="463.50"></text></g><g><title>&lt;std::io::buffered::linewriter::LineWriter&lt;W&gt; as std::io::Write&gt;::write_all (356 samples, 0.13%)</title><rect x="15.3199%" y="485" width="0.1296%" height="15" fill="rgb(231,118,14)" fg:x="42087" fg:w="356"/><text x="15.5699%" y="495.50"></text></g><g><title>&lt;std::io::buffered::linewritershim::LineWriterShim&lt;W&gt; as std::io::Write&gt;::write_all (356 samples, 0.13%)</title><rect x="15.3199%" y="469" width="0.1296%" height="15" fill="rgb(238,83,0)" fg:x="42087" fg:w="356"/><text x="15.5699%" y="479.50"></text></g><g><title>std::sys_common::memchr::memrchr (190 samples, 0.07%)</title><rect x="15.3803%" y="453" width="0.0692%" height="15" fill="rgb(221,39,39)" fg:x="42253" fg:w="190"/><text x="15.6303%" y="463.50"></text></g><g><title>std::sys::unix::memchr::memrchr (190 samples, 0.07%)</title><rect x="15.3803%" y="437" width="0.0692%" height="15" fill="rgb(222,119,46)" fg:x="42253" fg:w="190"/><text x="15.6303%" y="447.50"></text></g><g><title>std::sys::unix::memchr::memrchr::memrchr_specific (190 samples, 0.07%)</title><rect x="15.3803%" y="421" width="0.0692%" height="15" fill="rgb(222,165,49)" fg:x="42253" fg:w="190"/><text x="15.6303%" y="431.50"></text></g><g><title>__memrchr_avx2 (150 samples, 0.05%)</title><rect x="15.3948%" y="405" width="0.0546%" height="15" fill="rgb(219,113,52)" fg:x="42293" fg:w="150"/><text x="15.6448%" y="415.50"></text></g><g><title>&lt;std::sync::remutex::ReentrantMutexGuard&lt;T&gt; as core::ops::deref::Deref&gt;::deref (29 samples, 0.01%)</title><rect x="15.4494%" y="485" width="0.0106%" height="15" fill="rgb(214,7,15)" fg:x="42443" fg:w="29"/><text x="15.6994%" y="495.50"></text></g><g><title>core::fmt::Formatter::write_str (483 samples, 0.18%)</title><rect x="15.2845%" y="533" width="0.1758%" height="15" fill="rgb(235,32,4)" fg:x="41990" fg:w="483"/><text x="15.5345%" y="543.50"></text></g><g><title>&lt;std::io::Write::write_fmt::Adapter&lt;T&gt; as core::fmt::Write&gt;::write_str (458 samples, 0.17%)</title><rect x="15.2936%" y="517" width="0.1667%" height="15" fill="rgb(238,90,54)" fg:x="42015" fg:w="458"/><text x="15.5436%" y="527.50"></text></g><g><title>&lt;std::io::stdio::StdoutLock as std::io::Write&gt;::write_all (423 samples, 0.15%)</title><rect x="15.3064%" y="501" width="0.1540%" height="15" fill="rgb(213,208,19)" fg:x="42050" fg:w="423"/><text x="15.5564%" y="511.50"></text></g><g><title>core::fmt::builders::DebugList::entries (2,513 samples, 0.91%)</title><rect x="14.5507%" y="613" width="0.9147%" height="15" fill="rgb(233,156,4)" fg:x="39974" fg:w="2513"/><text x="14.8007%" y="623.50"></text></g><g><title>core::fmt::builders::DebugSet::entry (1,552 samples, 0.56%)</title><rect x="14.9005%" y="597" width="0.5649%" height="15" fill="rgb(207,194,5)" fg:x="40935" fg:w="1552"/><text x="15.1505%" y="607.50"></text></g><g><title>core::fmt::builders::DebugInner::entry (1,552 samples, 0.56%)</title><rect x="14.9005%" y="581" width="0.5649%" height="15" fill="rgb(206,111,30)" fg:x="40935" fg:w="1552"/><text x="15.1505%" y="591.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::and_then (1,552 samples, 0.56%)</title><rect x="14.9005%" y="565" width="0.5649%" height="15" fill="rgb(243,70,54)" fg:x="40935" fg:w="1552"/><text x="15.1505%" y="575.50"></text></g><g><title>core::fmt::builders::DebugInner::entry::{{closure}} (1,496 samples, 0.54%)</title><rect x="14.9209%" y="549" width="0.5446%" height="15" fill="rgb(242,28,8)" fg:x="40991" fg:w="1496"/><text x="15.1709%" y="559.50"></text></g><g><title>core::fmt::write (10,953 samples, 3.99%)</title><rect x="11.4843%" y="661" width="3.9869%" height="15" fill="rgb(219,106,18)" fg:x="31550" fg:w="10953"/><text x="11.7343%" y="671.50">core..</text></g><g><title>core::fmt::rt::Argument::fmt (3,062 samples, 1.11%)</title><rect x="14.3567%" y="645" width="1.1146%" height="15" fill="rgb(244,222,10)" fg:x="39441" fg:w="3062"/><text x="14.6067%" y="655.50"></text></g><g><title>&lt;alloc::collections::vec_deque::VecDeque&lt;T,A&gt; as core::fmt::Debug&gt;::fmt (3,062 samples, 1.11%)</title><rect x="14.3567%" y="629" width="1.1146%" height="15" fill="rgb(236,179,52)" fg:x="39441" fg:w="3062"/><text x="14.6067%" y="639.50"></text></g><g><title>std::io::Write::write_fmt (10,954 samples, 3.99%)</title><rect x="11.4843%" y="677" width="3.9873%" height="15" fill="rgb(213,23,39)" fg:x="31550" fg:w="10954"/><text x="11.7343%" y="687.50">std:..</text></g><g><title>&lt;std::io::stdio::Stdout as std::io::Write&gt;::write_fmt (11,068 samples, 4.03%)</title><rect x="11.4599%" y="709" width="4.0288%" height="15" fill="rgb(238,48,10)" fg:x="31483" fg:w="11068"/><text x="11.7099%" y="719.50">&lt;std..</text></g><g><title>&lt;&amp;std::io::stdio::Stdout as std::io::Write&gt;::write_fmt (11,065 samples, 4.03%)</title><rect x="11.4610%" y="693" width="4.0277%" height="15" fill="rgb(251,196,23)" fg:x="31486" fg:w="11065"/><text x="11.7110%" y="703.50">&lt;&amp;st..</text></g><g><title>std::io::stdio::Stdout::lock (47 samples, 0.02%)</title><rect x="15.4716%" y="677" width="0.0171%" height="15" fill="rgb(250,152,24)" fg:x="42504" fg:w="47"/><text x="15.7216%" y="687.50"></text></g><g><title>std::sync::remutex::ReentrantMutex&lt;T&gt;::lock (43 samples, 0.02%)</title><rect x="15.4731%" y="661" width="0.0157%" height="15" fill="rgb(209,150,17)" fg:x="42508" fg:w="43"/><text x="15.7231%" y="671.50"></text></g><g><title>std::sys::unix::locks::futex_mutex::Mutex::lock (40 samples, 0.01%)</title><rect x="15.4742%" y="645" width="0.0146%" height="15" fill="rgb(234,202,34)" fg:x="42511" fg:w="40"/><text x="15.7242%" y="655.50"></text></g><g><title>core::sync::atomic::AtomicU32::compare_exchange (38 samples, 0.01%)</title><rect x="15.4749%" y="629" width="0.0138%" height="15" fill="rgb(253,148,53)" fg:x="42513" fg:w="38"/><text x="15.7249%" y="639.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (38 samples, 0.01%)</title><rect x="15.4749%" y="613" width="0.0138%" height="15" fill="rgb(218,129,16)" fg:x="42513" fg:w="38"/><text x="15.7249%" y="623.50"></text></g><g><title>coldbrew::jit::JitCache::first_available_register (11,319 samples, 4.12%)</title><rect x="11.3719%" y="757" width="4.1202%" height="15" fill="rgb(216,85,19)" fg:x="31241" fg:w="11319"/><text x="11.6219%" y="767.50">cold..</text></g><g><title>std::io::stdio::_print (11,083 samples, 4.03%)</title><rect x="11.4578%" y="741" width="4.0343%" height="15" fill="rgb(235,228,7)" fg:x="31477" fg:w="11083"/><text x="11.7078%" y="751.50">std:..</text></g><g><title>std::io::stdio::print_to (11,079 samples, 4.03%)</title><rect x="11.4592%" y="725" width="4.0328%" height="15" fill="rgb(245,175,0)" fg:x="31481" fg:w="11079"/><text x="11.7092%" y="735.50">std:..</text></g><g><title>&lt;alloc::collections::vec_deque::VecDeque&lt;T,A&gt; as core::convert::From&lt;alloc::vec::Vec&lt;T,A&gt;&gt;&gt;::from (106 samples, 0.04%)</title><rect x="15.5204%" y="741" width="0.0386%" height="15" fill="rgb(208,168,36)" fg:x="42638" fg:w="106"/><text x="15.7704%" y="751.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::into_raw_parts_with_alloc (42 samples, 0.02%)</title><rect x="15.5437%" y="725" width="0.0153%" height="15" fill="rgb(246,171,24)" fg:x="42702" fg:w="42"/><text x="15.7937%" y="735.50"></text></g><g><title>alloc::alloc::alloc (35 samples, 0.01%)</title><rect x="15.5761%" y="693" width="0.0127%" height="15" fill="rgb(215,142,24)" fg:x="42791" fg:w="35"/><text x="15.8261%" y="703.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (102 samples, 0.04%)</title><rect x="15.5626%" y="725" width="0.0371%" height="15" fill="rgb(250,187,7)" fg:x="42754" fg:w="102"/><text x="15.8126%" y="735.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (98 samples, 0.04%)</title><rect x="15.5641%" y="709" width="0.0357%" height="15" fill="rgb(228,66,33)" fg:x="42758" fg:w="98"/><text x="15.8141%" y="719.50"></text></g><g><title>alloc::alloc::exchange_malloc (115 samples, 0.04%)</title><rect x="15.5590%" y="741" width="0.0419%" height="15" fill="rgb(234,215,21)" fg:x="42744" fg:w="115"/><text x="15.8090%" y="751.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::buffer_range (36 samples, 0.01%)</title><rect x="15.6191%" y="693" width="0.0131%" height="15" fill="rgb(222,191,20)" fg:x="42909" fg:w="36"/><text x="15.8691%" y="703.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::as_mut_slices (143 samples, 0.05%)</title><rect x="15.6154%" y="709" width="0.0521%" height="15" fill="rgb(245,79,54)" fg:x="42899" fg:w="143"/><text x="15.8654%" y="719.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::slice_ranges (97 samples, 0.04%)</title><rect x="15.6322%" y="693" width="0.0353%" height="15" fill="rgb(240,10,37)" fg:x="42945" fg:w="97"/><text x="15.8822%" y="703.50"></text></g><g><title>core::slice::index::range (51 samples, 0.02%)</title><rect x="15.6489%" y="677" width="0.0186%" height="15" fill="rgb(214,192,32)" fg:x="42991" fg:w="51"/><text x="15.8989%" y="687.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::clear (214 samples, 0.08%)</title><rect x="15.6009%" y="741" width="0.0779%" height="15" fill="rgb(209,36,54)" fg:x="42859" fg:w="214"/><text x="15.8509%" y="751.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::truncate (214 samples, 0.08%)</title><rect x="15.6009%" y="725" width="0.0779%" height="15" fill="rgb(220,10,11)" fg:x="42859" fg:w="214"/><text x="15.8509%" y="735.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get_unchecked_mut (31 samples, 0.01%)</title><rect x="15.6675%" y="709" width="0.0113%" height="15" fill="rgb(221,106,17)" fg:x="43042" fg:w="31"/><text x="15.9175%" y="719.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::buffer_range (33 samples, 0.01%)</title><rect x="15.7053%" y="693" width="0.0120%" height="15" fill="rgb(251,142,44)" fg:x="43146" fg:w="33"/><text x="15.9553%" y="703.50"></text></g><g><title>&lt;alloc::collections::vec_deque::VecDeque&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (120 samples, 0.04%)</title><rect x="15.6981%" y="725" width="0.0437%" height="15" fill="rgb(238,13,15)" fg:x="43126" fg:w="120"/><text x="15.9481%" y="735.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::as_mut_slices (111 samples, 0.04%)</title><rect x="15.7013%" y="709" width="0.0404%" height="15" fill="rgb(208,107,27)" fg:x="43135" fg:w="111"/><text x="15.9513%" y="719.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::slice_ranges (67 samples, 0.02%)</title><rect x="15.7173%" y="693" width="0.0244%" height="15" fill="rgb(205,136,37)" fg:x="43179" fg:w="67"/><text x="15.9673%" y="703.50"></text></g><g><title>core::slice::index::range (49 samples, 0.02%)</title><rect x="15.7239%" y="677" width="0.0178%" height="15" fill="rgb(250,205,27)" fg:x="43197" fg:w="49"/><text x="15.9739%" y="687.50"></text></g><g><title>_int_free (33 samples, 0.01%)</title><rect x="15.7618%" y="645" width="0.0120%" height="15" fill="rgb(210,80,43)" fg:x="43301" fg:w="33"/><text x="16.0118%" y="655.50"></text></g><g><title>__GI___libc_free (72 samples, 0.03%)</title><rect x="15.7497%" y="661" width="0.0262%" height="15" fill="rgb(247,160,36)" fg:x="43268" fg:w="72"/><text x="15.9997%" y="671.50"></text></g><g><title>alloc::alloc::dealloc (84 samples, 0.03%)</title><rect x="15.7497%" y="677" width="0.0306%" height="15" fill="rgb(234,13,49)" fg:x="43268" fg:w="84"/><text x="15.9997%" y="687.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (103 samples, 0.04%)</title><rect x="15.7446%" y="693" width="0.0375%" height="15" fill="rgb(234,122,0)" fg:x="43254" fg:w="103"/><text x="15.9946%" y="703.50"></text></g><g><title>coldbrew::jit::JitCache::reset (884 samples, 0.32%)</title><rect x="15.4920%" y="757" width="0.3218%" height="15" fill="rgb(207,146,38)" fg:x="42560" fg:w="884"/><text x="15.7420%" y="767.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::vec_deque::VecDeque&lt;coldbrew::jit::Register&gt;&gt; (323 samples, 0.12%)</title><rect x="15.6962%" y="741" width="0.1176%" height="15" fill="rgb(207,177,25)" fg:x="43121" fg:w="323"/><text x="15.9462%" y="751.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;coldbrew::jit::Register&gt;&gt; (198 samples, 0.07%)</title><rect x="15.7417%" y="725" width="0.0721%" height="15" fill="rgb(211,178,42)" fg:x="43246" fg:w="198"/><text x="15.9917%" y="735.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (198 samples, 0.07%)</title><rect x="15.7417%" y="709" width="0.0721%" height="15" fill="rgb(230,69,54)" fg:x="43246" fg:w="198"/><text x="15.9917%" y="719.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::current_memory (86 samples, 0.03%)</title><rect x="15.7825%" y="693" width="0.0313%" height="15" fill="rgb(214,135,41)" fg:x="43358" fg:w="86"/><text x="16.0325%" y="703.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (38 samples, 0.01%)</title><rect x="15.8160%" y="741" width="0.0138%" height="15" fill="rgb(237,67,25)" fg:x="43450" fg:w="38"/><text x="16.0660%" y="751.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (53 samples, 0.02%)</title><rect x="15.8298%" y="741" width="0.0193%" height="15" fill="rgb(222,189,50)" fg:x="43488" fg:w="53"/><text x="16.0798%" y="751.50"></text></g><g><title>coldbrew::runtime::Instruction::nth (118 samples, 0.04%)</title><rect x="15.8142%" y="757" width="0.0430%" height="15" fill="rgb(245,148,34)" fg:x="43445" fg:w="118"/><text x="16.0642%" y="767.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (65 samples, 0.02%)</title><rect x="15.9230%" y="693" width="0.0237%" height="15" fill="rgb(222,29,6)" fg:x="43744" fg:w="65"/><text x="16.1730%" y="703.50"></text></g><g><title>core::slice::raw::from_raw_parts (54 samples, 0.02%)</title><rect x="15.9270%" y="677" width="0.0197%" height="15" fill="rgb(221,189,43)" fg:x="43755" fg:w="54"/><text x="16.1770%" y="687.50"></text></g><g><title>core::ptr::slice_from_raw_parts (54 samples, 0.02%)</title><rect x="15.9270%" y="661" width="0.0197%" height="15" fill="rgb(207,36,27)" fg:x="43755" fg:w="54"/><text x="16.1770%" y="671.50"></text></g><g><title>core::ptr::metadata::from_raw_parts (51 samples, 0.02%)</title><rect x="15.9281%" y="645" width="0.0186%" height="15" fill="rgb(217,90,24)" fg:x="43758" fg:w="51"/><text x="16.1781%" y="655.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_mut_ptr (29 samples, 0.01%)</title><rect x="15.9812%" y="645" width="0.0106%" height="15" fill="rgb(224,66,35)" fg:x="43904" fg:w="29"/><text x="16.2312%" y="655.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (29 samples, 0.01%)</title><rect x="15.9812%" y="629" width="0.0106%" height="15" fill="rgb(221,13,50)" fg:x="43904" fg:w="29"/><text x="16.2312%" y="639.50"></text></g><g><title>__GI___libc_malloc (100 samples, 0.04%)</title><rect x="16.1261%" y="549" width="0.0364%" height="15" fill="rgb(236,68,49)" fg:x="44302" fg:w="100"/><text x="16.3761%" y="559.50"></text></g><g><title>tcache_get (56 samples, 0.02%)</title><rect x="16.1421%" y="533" width="0.0204%" height="15" fill="rgb(229,146,28)" fg:x="44346" fg:w="56"/><text x="16.3921%" y="543.50"></text></g><g><title>alloc::alloc::alloc (115 samples, 0.04%)</title><rect x="16.1261%" y="565" width="0.0419%" height="15" fill="rgb(225,31,38)" fg:x="44302" fg:w="115"/><text x="16.3761%" y="575.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (295 samples, 0.11%)</title><rect x="16.0843%" y="597" width="0.1074%" height="15" fill="rgb(250,208,3)" fg:x="44187" fg:w="295"/><text x="16.3343%" y="607.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (288 samples, 0.10%)</title><rect x="16.0868%" y="581" width="0.1048%" height="15" fill="rgb(246,54,23)" fg:x="44194" fg:w="288"/><text x="16.3368%" y="591.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;[T]&gt;::slice_from_raw_parts (33 samples, 0.01%)</title><rect x="16.1796%" y="565" width="0.0120%" height="15" fill="rgb(243,76,11)" fg:x="44449" fg:w="33"/><text x="16.4296%" y="575.50"></text></g><g><title>core::alloc::layout::Layout::array::inner (130 samples, 0.05%)</title><rect x="16.1953%" y="581" width="0.0473%" height="15" fill="rgb(245,21,50)" fg:x="44492" fg:w="130"/><text x="16.4453%" y="591.50"></text></g><g><title>core::alloc::layout::Layout::array (145 samples, 0.05%)</title><rect x="16.1920%" y="597" width="0.0528%" height="15" fill="rgb(228,9,43)" fg:x="44483" fg:w="145"/><text x="16.4420%" y="607.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (745 samples, 0.27%)</title><rect x="15.9918%" y="645" width="0.2712%" height="15" fill="rgb(208,100,47)" fg:x="43933" fg:w="745"/><text x="16.2418%" y="655.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (729 samples, 0.27%)</title><rect x="15.9976%" y="629" width="0.2654%" height="15" fill="rgb(232,26,8)" fg:x="43949" fg:w="729"/><text x="16.2476%" y="639.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (722 samples, 0.26%)</title><rect x="16.0002%" y="613" width="0.2628%" height="15" fill="rgb(216,166,38)" fg:x="43956" fg:w="722"/><text x="16.2502%" y="623.50"></text></g><g><title>coldbrew::trace::RecordEntry::instruction (1,131 samples, 0.41%)</title><rect x="15.8571%" y="757" width="0.4117%" height="15" fill="rgb(251,202,51)" fg:x="43563" fg:w="1131"/><text x="16.1071%" y="767.50"></text></g><g><title>&lt;coldbrew::runtime::Instruction as core::clone::Clone&gt;::clone (1,125 samples, 0.41%)</title><rect x="15.8593%" y="741" width="0.4095%" height="15" fill="rgb(254,216,34)" fg:x="43569" fg:w="1125"/><text x="16.1093%" y="751.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::clone::Clone&gt;::clone (1,023 samples, 0.37%)</title><rect x="15.8964%" y="725" width="0.3724%" height="15" fill="rgb(251,32,27)" fg:x="43671" fg:w="1023"/><text x="16.1464%" y="735.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (969 samples, 0.35%)</title><rect x="15.9161%" y="709" width="0.3527%" height="15" fill="rgb(208,127,28)" fg:x="43725" fg:w="969"/><text x="16.1661%" y="719.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (885 samples, 0.32%)</title><rect x="15.9467%" y="693" width="0.3221%" height="15" fill="rgb(224,137,22)" fg:x="43809" fg:w="885"/><text x="16.1967%" y="703.50"></text></g><g><title>alloc::slice::hack::to_vec (885 samples, 0.32%)</title><rect x="15.9467%" y="677" width="0.3221%" height="15" fill="rgb(254,70,32)" fg:x="43809" fg:w="885"/><text x="16.1967%" y="687.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (881 samples, 0.32%)</title><rect x="15.9481%" y="661" width="0.3207%" height="15" fill="rgb(229,75,37)" fg:x="43813" fg:w="881"/><text x="16.1981%" y="671.50"></text></g><g><title>core::fmt::Arguments::new_const (110 samples, 0.04%)</title><rect x="16.2688%" y="757" width="0.0400%" height="15" fill="rgb(252,64,23)" fg:x="44694" fg:w="110"/><text x="16.5188%" y="767.50"></text></g><g><title>core::fmt::Arguments::new_v1 (57 samples, 0.02%)</title><rect x="16.3089%" y="757" width="0.0207%" height="15" fill="rgb(232,162,48)" fg:x="44804" fg:w="57"/><text x="16.5589%" y="767.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (39 samples, 0.01%)</title><rect x="16.3493%" y="709" width="0.0142%" height="15" fill="rgb(246,160,12)" fg:x="44915" fg:w="39"/><text x="16.5993%" y="719.50"></text></g><g><title>_int_free (87 samples, 0.03%)</title><rect x="16.3999%" y="629" width="0.0317%" height="15" fill="rgb(247,166,0)" fg:x="45054" fg:w="87"/><text x="16.6499%" y="639.50"></text></g><g><title>__GI___libc_free (149 samples, 0.05%)</title><rect x="16.3791%" y="645" width="0.0542%" height="15" fill="rgb(249,219,21)" fg:x="44997" fg:w="149"/><text x="16.6291%" y="655.50"></text></g><g><title>alloc::alloc::dealloc (169 samples, 0.06%)</title><rect x="16.3791%" y="661" width="0.0615%" height="15" fill="rgb(205,209,3)" fg:x="44997" fg:w="169"/><text x="16.6291%" y="671.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (196 samples, 0.07%)</title><rect x="16.3736%" y="677" width="0.0713%" height="15" fill="rgb(243,44,1)" fg:x="44982" fg:w="196"/><text x="16.6236%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;coldbrew::runtime::Instruction&gt; (441 samples, 0.16%)</title><rect x="16.3347%" y="757" width="0.1605%" height="15" fill="rgb(206,159,16)" fg:x="44875" fg:w="441"/><text x="16.5847%" y="767.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;alloc::vec::Vec&lt;coldbrew::runtime::Value&gt;&gt;&gt; (441 samples, 0.16%)</title><rect x="16.3347%" y="741" width="0.1605%" height="15" fill="rgb(244,77,30)" fg:x="44875" fg:w="441"/><text x="16.5847%" y="751.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;coldbrew::runtime::Value&gt;&gt; (415 samples, 0.15%)</title><rect x="16.3442%" y="725" width="0.1511%" height="15" fill="rgb(218,69,12)" fg:x="44901" fg:w="415"/><text x="16.5942%" y="735.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;coldbrew::runtime::Value&gt;&gt; (362 samples, 0.13%)</title><rect x="16.3635%" y="709" width="0.1318%" height="15" fill="rgb(212,87,7)" fg:x="44954" fg:w="362"/><text x="16.6135%" y="719.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (362 samples, 0.13%)</title><rect x="16.3635%" y="693" width="0.1318%" height="15" fill="rgb(245,114,25)" fg:x="44954" fg:w="362"/><text x="16.6135%" y="703.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::current_memory (138 samples, 0.05%)</title><rect x="16.4450%" y="677" width="0.0502%" height="15" fill="rgb(210,61,42)" fg:x="45178" fg:w="138"/><text x="16.6950%" y="687.50"></text></g><g><title>__GI___munmap (16,861 samples, 6.14%)</title><rect x="16.5247%" y="645" width="6.1375%" height="15" fill="rgb(211,52,33)" fg:x="45397" fg:w="16861"/><text x="16.7747%" y="655.50">__GI___m..</text></g><g><title>[unknown] (16,752 samples, 6.10%)</title><rect x="16.5644%" y="629" width="6.0978%" height="15" fill="rgb(234,58,33)" fg:x="45506" fg:w="16752"/><text x="16.8144%" y="639.50">[unknown]</text></g><g><title>[unknown] (16,574 samples, 6.03%)</title><rect x="16.6292%" y="613" width="6.0330%" height="15" fill="rgb(220,115,36)" fg:x="45684" fg:w="16574"/><text x="16.8792%" y="623.50">[unknown]</text></g><g><title>[unknown] (16,536 samples, 6.02%)</title><rect x="16.6430%" y="597" width="6.0192%" height="15" fill="rgb(243,153,54)" fg:x="45722" fg:w="16536"/><text x="16.8930%" y="607.50">[unknown]</text></g><g><title>[unknown] (16,474 samples, 6.00%)</title><rect x="16.6656%" y="581" width="5.9966%" height="15" fill="rgb(251,47,18)" fg:x="45784" fg:w="16474"/><text x="16.9156%" y="591.50">[unknown]</text></g><g><title>[unknown] (16,310 samples, 5.94%)</title><rect x="16.7253%" y="565" width="5.9369%" height="15" fill="rgb(242,102,42)" fg:x="45948" fg:w="16310"/><text x="16.9753%" y="575.50">[unknown]</text></g><g><title>[unknown] (16,047 samples, 5.84%)</title><rect x="16.8210%" y="549" width="5.8412%" height="15" fill="rgb(234,31,38)" fg:x="46211" fg:w="16047"/><text x="17.0710%" y="559.50">[unknow..</text></g><g><title>[unknown] (15,682 samples, 5.71%)</title><rect x="16.9539%" y="533" width="5.7083%" height="15" fill="rgb(221,117,51)" fg:x="46576" fg:w="15682"/><text x="17.2039%" y="543.50">[unknow..</text></g><g><title>[unknown] (14,939 samples, 5.44%)</title><rect x="17.2243%" y="517" width="5.4379%" height="15" fill="rgb(212,20,18)" fg:x="47319" fg:w="14939"/><text x="17.4743%" y="527.50">[unknow..</text></g><g><title>[unknown] (13,222 samples, 4.81%)</title><rect x="17.8493%" y="501" width="4.8129%" height="15" fill="rgb(245,133,36)" fg:x="49036" fg:w="13222"/><text x="18.0993%" y="511.50">[unkno..</text></g><g><title>[unknown] (10,352 samples, 3.77%)</title><rect x="18.8940%" y="485" width="3.7682%" height="15" fill="rgb(212,6,19)" fg:x="51906" fg:w="10352"/><text x="19.1440%" y="495.50">[unk..</text></g><g><title>[unknown] (7,894 samples, 2.87%)</title><rect x="19.7887%" y="469" width="2.8735%" height="15" fill="rgb(218,1,36)" fg:x="54364" fg:w="7894"/><text x="20.0387%" y="479.50">[u..</text></g><g><title>[unknown] (4,371 samples, 1.59%)</title><rect x="21.0711%" y="453" width="1.5911%" height="15" fill="rgb(246,84,54)" fg:x="57887" fg:w="4371"/><text x="21.3211%" y="463.50"></text></g><g><title>[unknown] (2,462 samples, 0.90%)</title><rect x="21.7660%" y="437" width="0.8962%" height="15" fill="rgb(242,110,6)" fg:x="59796" fg:w="2462"/><text x="22.0160%" y="447.50"></text></g><g><title>[unknown] (1,477 samples, 0.54%)</title><rect x="22.1245%" y="421" width="0.5376%" height="15" fill="rgb(214,47,5)" fg:x="60781" fg:w="1477"/><text x="22.3745%" y="431.50"></text></g><g><title>[unknown] (1,000 samples, 0.36%)</title><rect x="22.2982%" y="405" width="0.3640%" height="15" fill="rgb(218,159,25)" fg:x="61258" fg:w="1000"/><text x="22.5482%" y="415.50"></text></g><g><title>[unknown] (204 samples, 0.07%)</title><rect x="22.5879%" y="389" width="0.0743%" height="15" fill="rgb(215,211,28)" fg:x="62054" fg:w="204"/><text x="22.8379%" y="399.50"></text></g><g><title>[unknown] (49 samples, 0.02%)</title><rect x="22.6443%" y="373" width="0.0178%" height="15" fill="rgb(238,59,32)" fg:x="62209" fg:w="49"/><text x="22.8943%" y="383.50"></text></g><g><title>core::cmp::Ord::max (37 samples, 0.01%)</title><rect x="22.6622%" y="645" width="0.0135%" height="15" fill="rgb(226,82,3)" fg:x="62258" fg:w="37"/><text x="22.9122%" y="655.50"></text></g><g><title>core::cmp::max_by (37 samples, 0.01%)</title><rect x="22.6622%" y="629" width="0.0135%" height="15" fill="rgb(240,164,32)" fg:x="62258" fg:w="37"/><text x="22.9122%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;coldbrew::jit::NativeTrace&gt;&gt; (16,995 samples, 6.19%)</title><rect x="16.4952%" y="757" width="6.1863%" height="15" fill="rgb(232,46,7)" fg:x="45316" fg:w="16995"/><text x="16.7452%" y="767.50">core::pt..</text></g><g><title>core::ptr::drop_in_place&lt;coldbrew::jit::NativeTrace&gt; (16,982 samples, 6.18%)</title><rect x="16.5000%" y="741" width="6.1815%" height="15" fill="rgb(229,129,53)" fg:x="45329" fg:w="16982"/><text x="16.7500%" y="751.50">core::pt..</text></g><g><title>core::ptr::drop_in_place&lt;dynasmrt::mmap::ExecutableBuffer&gt; (16,982 samples, 6.18%)</title><rect x="16.5000%" y="725" width="6.1815%" height="15" fill="rgb(234,188,29)" fg:x="45329" fg:w="16982"/><text x="16.7500%" y="735.50">core::pt..</text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;memmap2::Mmap&gt;&gt; (16,982 samples, 6.18%)</title><rect x="16.5000%" y="709" width="6.1815%" height="15" fill="rgb(246,141,4)" fg:x="45329" fg:w="16982"/><text x="16.7500%" y="719.50">core::pt..</text></g><g><title>core::ptr::drop_in_place&lt;memmap2::Mmap&gt; (16,974 samples, 6.18%)</title><rect x="16.5029%" y="693" width="6.1786%" height="15" fill="rgb(229,23,39)" fg:x="45337" fg:w="16974"/><text x="16.7529%" y="703.50">core::pt..</text></g><g><title>core::ptr::drop_in_place&lt;memmap2::os::MmapInner&gt; (16,974 samples, 6.18%)</title><rect x="16.5029%" y="677" width="6.1786%" height="15" fill="rgb(206,12,3)" fg:x="45337" fg:w="16974"/><text x="16.7529%" y="687.50">core::pt..</text></g><g><title>&lt;memmap2::os::MmapInner as core::ops::drop::Drop&gt;::drop (16,974 samples, 6.18%)</title><rect x="16.5029%" y="661" width="6.1786%" height="15" fill="rgb(252,226,20)" fg:x="45337" fg:w="16974"/><text x="16.7529%" y="671.50">&lt;memmap2..</text></g><g><title>__memcpy_avx_unaligned_erms (63 samples, 0.02%)</title><rect x="22.6979%" y="741" width="0.0229%" height="15" fill="rgb(216,123,35)" fg:x="62356" fg:w="63"/><text x="22.9479%" y="751.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::unwrap (113 samples, 0.04%)</title><rect x="22.6815%" y="757" width="0.0411%" height="15" fill="rgb(212,68,40)" fg:x="62311" fg:w="113"/><text x="22.9315%" y="767.50"></text></g><g><title>_int_free (47 samples, 0.02%)</title><rect x="22.7747%" y="645" width="0.0171%" height="15" fill="rgb(254,125,32)" fg:x="62567" fg:w="47"/><text x="23.0247%" y="655.50"></text></g><g><title>__GI___libc_free (63 samples, 0.02%)</title><rect x="22.7699%" y="661" width="0.0229%" height="15" fill="rgb(253,97,22)" fg:x="62554" fg:w="63"/><text x="23.0199%" y="671.50"></text></g><g><title>alloc::alloc::dealloc (74 samples, 0.03%)</title><rect x="22.7699%" y="677" width="0.0269%" height="15" fill="rgb(241,101,14)" fg:x="62554" fg:w="74"/><text x="23.0199%" y="687.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (87 samples, 0.03%)</title><rect x="22.7667%" y="693" width="0.0317%" height="15" fill="rgb(238,103,29)" fg:x="62545" fg:w="87"/><text x="23.0167%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (201 samples, 0.07%)</title><rect x="22.7583%" y="741" width="0.0732%" height="15" fill="rgb(233,195,47)" fg:x="62522" fg:w="201"/><text x="23.0083%" y="751.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (188 samples, 0.07%)</title><rect x="22.7630%" y="725" width="0.0684%" height="15" fill="rgb(246,218,30)" fg:x="62535" fg:w="188"/><text x="23.0130%" y="735.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (188 samples, 0.07%)</title><rect x="22.7630%" y="709" width="0.0684%" height="15" fill="rgb(219,145,47)" fg:x="62535" fg:w="188"/><text x="23.0130%" y="719.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::current_memory (91 samples, 0.03%)</title><rect x="22.7983%" y="693" width="0.0331%" height="15" fill="rgb(243,12,26)" fg:x="62632" fg:w="91"/><text x="23.0483%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;core::option::Option&lt;dynasmrt::AssemblyOffset&gt;&gt;&gt; (47 samples, 0.02%)</title><rect x="22.8347%" y="725" width="0.0171%" height="15" fill="rgb(214,87,16)" fg:x="62732" fg:w="47"/><text x="23.0847%" y="735.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;core::option::Option&lt;dynasmrt::AssemblyOffset&gt;&gt;&gt; (28 samples, 0.01%)</title><rect x="22.8416%" y="709" width="0.0102%" height="15" fill="rgb(208,99,42)" fg:x="62751" fg:w="28"/><text x="23.0916%" y="719.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (28 samples, 0.01%)</title><rect x="22.8416%" y="693" width="0.0102%" height="15" fill="rgb(253,99,2)" fg:x="62751" fg:w="28"/><text x="23.0916%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;dynasmrt::components::LabelRegistry&gt; (61 samples, 0.02%)</title><rect x="22.8314%" y="741" width="0.0222%" height="15" fill="rgb(220,168,23)" fg:x="62723" fg:w="61"/><text x="23.0814%" y="751.50"></text></g><g><title>__memcpy_avx_unaligned_erms (64 samples, 0.02%)</title><rect x="22.8613%" y="677" width="0.0233%" height="15" fill="rgb(242,38,24)" fg:x="62805" fg:w="64"/><text x="23.1113%" y="687.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::iter::traits::collect::IntoIterator&gt;::into_iter (104 samples, 0.04%)</title><rect x="22.8547%" y="693" width="0.0379%" height="15" fill="rgb(225,182,9)" fg:x="62787" fg:w="104"/><text x="23.1047%" y="703.50"></text></g><g><title>core::mem::drop (71 samples, 0.03%)</title><rect x="22.8926%" y="693" width="0.0258%" height="15" fill="rgb(243,178,37)" fg:x="62891" fg:w="71"/><text x="23.1426%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;usize,dynasmrt::components::PatchLoc&lt;dynasmrt::x64::X64Relocation&gt;&gt;&gt; (71 samples, 0.03%)</title><rect x="22.8926%" y="677" width="0.0258%" height="15" fill="rgb(232,139,19)" fg:x="62891" fg:w="71"/><text x="23.1426%" y="687.50"></text></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (71 samples, 0.03%)</title><rect x="22.8926%" y="661" width="0.0258%" height="15" fill="rgb(225,201,24)" fg:x="62891" fg:w="71"/><text x="23.1426%" y="671.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (53 samples, 0.02%)</title><rect x="22.8991%" y="645" width="0.0193%" height="15" fill="rgb(221,47,46)" fg:x="62909" fg:w="53"/><text x="23.1491%" y="655.50"></text></g><g><title>alloc::collections::btree::navigate::LazyLeafRange&lt;alloc::collections::btree::node::marker::Dying,K,V&gt;::deallocating_end (45 samples, 0.02%)</title><rect x="22.9021%" y="629" width="0.0164%" height="15" fill="rgb(249,23,13)" fg:x="62917" fg:w="45"/><text x="23.1521%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;dynasmrt::components::ManagedRelocs&lt;dynasmrt::x64::X64Relocation&gt;&gt; (186 samples, 0.07%)</title><rect x="22.8536%" y="741" width="0.0677%" height="15" fill="rgb(219,9,5)" fg:x="62784" fg:w="186"/><text x="23.1036%" y="751.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::BTreeMap&lt;usize,dynasmrt::components::PatchLoc&lt;dynasmrt::x64::X64Relocation&gt;&gt;&gt; (185 samples, 0.07%)</title><rect x="22.8540%" y="725" width="0.0673%" height="15" fill="rgb(254,171,16)" fg:x="62785" fg:w="185"/><text x="23.1040%" y="735.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (185 samples, 0.07%)</title><rect x="22.8540%" y="709" width="0.0673%" height="15" fill="rgb(230,171,20)" fg:x="62785" fg:w="185"/><text x="23.1040%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;(dynasmrt::components::PatchLoc&lt;dynasmrt::x64::X64Relocation&gt;,dynasmrt::DynamicLabel)&gt;&gt; (85 samples, 0.03%)</title><rect x="22.9239%" y="725" width="0.0309%" height="15" fill="rgb(210,71,41)" fg:x="62977" fg:w="85"/><text x="23.1739%" y="735.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;(dynasmrt::components::PatchLoc&lt;dynasmrt::x64::X64Relocation&gt;,dynasmrt::DynamicLabel)&gt;&gt; (63 samples, 0.02%)</title><rect x="22.9319%" y="709" width="0.0229%" height="15" fill="rgb(206,173,20)" fg:x="62999" fg:w="63"/><text x="23.1819%" y="719.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (63 samples, 0.02%)</title><rect x="22.9319%" y="693" width="0.0229%" height="15" fill="rgb(233,88,34)" fg:x="62999" fg:w="63"/><text x="23.1819%" y="703.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::current_memory (44 samples, 0.02%)</title><rect x="22.9388%" y="677" width="0.0160%" height="15" fill="rgb(223,209,46)" fg:x="63018" fg:w="44"/><text x="23.1888%" y="687.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (32 samples, 0.01%)</title><rect x="22.9570%" y="709" width="0.0116%" height="15" fill="rgb(250,43,18)" fg:x="63068" fg:w="32"/><text x="23.2070%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;dynasmrt::components::RelocRegistry&lt;dynasmrt::x64::X64Relocation&gt;&gt; (183 samples, 0.07%)</title><rect x="22.9214%" y="741" width="0.0666%" height="15" fill="rgb(208,13,10)" fg:x="62970" fg:w="183"/><text x="23.1714%" y="751.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;(dynasmrt::components::PatchLoc&lt;dynasmrt::x64::X64Relocation&gt;,dynasmrt::components::StaticLabel)&gt;&gt; (91 samples, 0.03%)</title><rect x="22.9548%" y="725" width="0.0331%" height="15" fill="rgb(212,200,36)" fg:x="63062" fg:w="91"/><text x="23.2048%" y="735.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;(dynasmrt::components::PatchLoc&lt;dynasmrt::x64::X64Relocation&gt;,dynasmrt::components::StaticLabel)&gt;&gt; (53 samples, 0.02%)</title><rect x="22.9687%" y="709" width="0.0193%" height="15" fill="rgb(225,90,30)" fg:x="63100" fg:w="53"/><text x="23.2187%" y="719.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (53 samples, 0.02%)</title><rect x="22.9687%" y="693" width="0.0193%" height="15" fill="rgb(236,182,39)" fg:x="63100" fg:w="53"/><text x="23.2187%" y="703.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::current_memory (39 samples, 0.01%)</title><rect x="22.9738%" y="677" width="0.0142%" height="15" fill="rgb(212,144,35)" fg:x="63114" fg:w="39"/><text x="23.2238%" y="687.50"></text></g><g><title>core::option::Option&lt;T&gt;::take (29 samples, 0.01%)</title><rect x="23.0018%" y="725" width="0.0106%" height="15" fill="rgb(228,63,44)" fg:x="63191" fg:w="29"/><text x="23.2518%" y="735.50"></text></g><g><title>core::mem::replace (29 samples, 0.01%)</title><rect x="23.0018%" y="709" width="0.0106%" height="15" fill="rgb(228,109,6)" fg:x="63191" fg:w="29"/><text x="23.2518%" y="719.50"></text></g><g><title>__memcpy_avx_unaligned_erms (241 samples, 0.09%)</title><rect x="23.0309%" y="693" width="0.0877%" height="15" fill="rgb(238,117,24)" fg:x="63271" fg:w="241"/><text x="23.2809%" y="703.50"></text></g><g><title>&lt;I as core::iter::traits::collect::IntoIterator&gt;::into_iter (257 samples, 0.09%)</title><rect x="23.0284%" y="709" width="0.0935%" height="15" fill="rgb(242,26,26)" fg:x="63264" fg:w="257"/><text x="23.2784%" y="719.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (40 samples, 0.01%)</title><rect x="23.1277%" y="693" width="0.0146%" height="15" fill="rgb(221,92,48)" fg:x="63537" fg:w="40"/><text x="23.3777%" y="703.50"></text></g><g><title>&lt;alloc::vec::drain::Drain&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (65 samples, 0.02%)</title><rect x="23.1219%" y="709" width="0.0237%" height="15" fill="rgb(209,209,32)" fg:x="63521" fg:w="65"/><text x="23.3719%" y="719.50"></text></g><g><title>__memcpy_avx_unaligned_erms (93 samples, 0.03%)</title><rect x="23.1456%" y="709" width="0.0339%" height="15" fill="rgb(221,70,22)" fg:x="63586" fg:w="93"/><text x="23.3956%" y="719.50"></text></g><g><title>core::mem::take (32 samples, 0.01%)</title><rect x="23.2009%" y="677" width="0.0116%" height="15" fill="rgb(248,145,5)" fg:x="63738" fg:w="32"/><text x="23.4509%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::drain::Drain&lt;(dynasmrt::components::PatchLoc&lt;dynasmrt::x64::X64Relocation&gt;,dynasmrt::DynamicLabel)&gt;&gt; (70 samples, 0.03%)</title><rect x="23.1882%" y="709" width="0.0255%" height="15" fill="rgb(226,116,26)" fg:x="63703" fg:w="70"/><text x="23.4382%" y="719.50"></text></g><g><title>&lt;alloc::vec::drain::Drain&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (70 samples, 0.03%)</title><rect x="23.1882%" y="693" width="0.0255%" height="15" fill="rgb(244,5,17)" fg:x="63703" fg:w="70"/><text x="23.4382%" y="703.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::exact_size::ExactSizeIterator&gt;::len (31 samples, 0.01%)</title><rect x="23.2187%" y="677" width="0.0113%" height="15" fill="rgb(252,159,33)" fg:x="63787" fg:w="31"/><text x="23.4687%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::drain::Drain&lt;(dynasmrt::components::PatchLoc&lt;dynasmrt::x64::X64Relocation&gt;,dynasmrt::components::StaticLabel)&gt;&gt; (70 samples, 0.03%)</title><rect x="23.2136%" y="709" width="0.0255%" height="15" fill="rgb(206,71,0)" fg:x="63773" fg:w="70"/><text x="23.4636%" y="719.50"></text></g><g><title>&lt;alloc::vec::drain::Drain&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (70 samples, 0.03%)</title><rect x="23.2136%" y="693" width="0.0255%" height="15" fill="rgb(233,118,54)" fg:x="63773" fg:w="70"/><text x="23.4636%" y="703.50"></text></g><g><title>core::slice::index::range (64 samples, 0.02%)</title><rect x="23.2632%" y="677" width="0.0233%" height="15" fill="rgb(234,83,48)" fg:x="63909" fg:w="64"/><text x="23.5132%" y="687.50"></text></g><g><title>dynasmrt::components::RelocRegistry&lt;R&gt;::take_dynamics (136 samples, 0.05%)</title><rect x="23.2420%" y="709" width="0.0495%" height="15" fill="rgb(228,3,54)" fg:x="63851" fg:w="136"/><text x="23.4920%" y="719.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::drain (135 samples, 0.05%)</title><rect x="23.2424%" y="693" width="0.0491%" height="15" fill="rgb(226,155,13)" fg:x="63852" fg:w="135"/><text x="23.4924%" y="703.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::iter (38 samples, 0.01%)</title><rect x="23.3090%" y="677" width="0.0138%" height="15" fill="rgb(241,28,37)" fg:x="64035" fg:w="38"/><text x="23.5590%" y="687.50"></text></g><g><title>core::slice::index::range (138 samples, 0.05%)</title><rect x="23.3229%" y="677" width="0.0502%" height="15" fill="rgb(233,93,10)" fg:x="64073" fg:w="138"/><text x="23.5729%" y="687.50"></text></g><g><title>dynasmrt::Assembler&lt;R&gt;::encode_relocs (1,021 samples, 0.37%)</title><rect x="23.0124%" y="725" width="0.3716%" height="15" fill="rgb(225,113,19)" fg:x="63220" fg:w="1021"/><text x="23.2624%" y="735.50"></text></g><g><title>dynasmrt::components::RelocRegistry&lt;R&gt;::take_statics (254 samples, 0.09%)</title><rect x="23.2915%" y="709" width="0.0925%" height="15" fill="rgb(241,2,18)" fg:x="63987" fg:w="254"/><text x="23.5415%" y="719.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::drain (253 samples, 0.09%)</title><rect x="23.2919%" y="693" width="0.0921%" height="15" fill="rgb(228,207,21)" fg:x="63988" fg:w="253"/><text x="23.5419%" y="703.50"></text></g><g><title>core::slice::raw::from_raw_parts (30 samples, 0.01%)</title><rect x="23.3731%" y="677" width="0.0109%" height="15" fill="rgb(213,211,35)" fg:x="64211" fg:w="30"/><text x="23.6231%" y="687.50"></text></g><g><title>core::ptr::slice_from_raw_parts (30 samples, 0.01%)</title><rect x="23.3731%" y="661" width="0.0109%" height="15" fill="rgb(209,83,10)" fg:x="64211" fg:w="30"/><text x="23.6231%" y="671.50"></text></g><g><title>core::ptr::metadata::from_raw_parts (30 samples, 0.01%)</title><rect x="23.3731%" y="645" width="0.0109%" height="15" fill="rgb(209,164,1)" fg:x="64211" fg:w="30"/><text x="23.6231%" y="655.50"></text></g><g><title>&lt;dynasmrt::mmap::MutableBuffer as core::ops::deref::DerefMut&gt;::deref_mut (67 samples, 0.02%)</title><rect x="23.4885%" y="709" width="0.0244%" height="15" fill="rgb(213,184,43)" fg:x="64528" fg:w="67"/><text x="23.7385%" y="719.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::IndexMut&lt;I&gt; for [T]&gt;::index_mut (43 samples, 0.02%)</title><rect x="23.4972%" y="693" width="0.0157%" height="15" fill="rgb(231,61,34)" fg:x="64552" fg:w="43"/><text x="23.7472%" y="703.50"></text></g><g><title>&lt;core::ops::range::RangeTo&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (39 samples, 0.01%)</title><rect x="23.4987%" y="677" width="0.0142%" height="15" fill="rgb(235,75,3)" fg:x="64556" fg:w="39"/><text x="23.7487%" y="687.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (37 samples, 0.01%)</title><rect x="23.4994%" y="661" width="0.0135%" height="15" fill="rgb(220,106,47)" fg:x="64558" fg:w="37"/><text x="23.7494%" y="671.50"></text></g><g><title>std::sync::poison::Flag::done (50 samples, 0.02%)</title><rect x="23.5303%" y="677" width="0.0182%" height="15" fill="rgb(210,196,33)" fg:x="64643" fg:w="50"/><text x="23.7803%" y="687.50"></text></g><g><title>std::thread::panicking (36 samples, 0.01%)</title><rect x="23.5354%" y="661" width="0.0131%" height="15" fill="rgb(229,154,42)" fg:x="64657" fg:w="36"/><text x="23.7854%" y="671.50"></text></g><g><title>std::panicking::panicking (36 samples, 0.01%)</title><rect x="23.5354%" y="645" width="0.0131%" height="15" fill="rgb(228,114,26)" fg:x="64657" fg:w="36"/><text x="23.7854%" y="655.50"></text></g><g><title>std::panicking::panic_count::count_is_zero (28 samples, 0.01%)</title><rect x="23.5383%" y="629" width="0.0102%" height="15" fill="rgb(208,144,1)" fg:x="64665" fg:w="28"/><text x="23.7883%" y="639.50"></text></g><g><title>core::sync::atomic::AtomicU32::fetch_sub (93 samples, 0.03%)</title><rect x="23.5602%" y="661" width="0.0339%" height="15" fill="rgb(239,112,37)" fg:x="64725" fg:w="93"/><text x="23.8102%" y="671.50"></text></g><g><title>core::sync::atomic::atomic_sub (88 samples, 0.03%)</title><rect x="23.5620%" y="645" width="0.0320%" height="15" fill="rgb(210,96,50)" fg:x="64730" fg:w="88"/><text x="23.8120%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::rwlock::RwLockWriteGuard&lt;dynasmrt::mmap::ExecutableBuffer&gt;&gt; (197 samples, 0.07%)</title><rect x="23.5267%" y="709" width="0.0717%" height="15" fill="rgb(222,178,2)" fg:x="64633" fg:w="197"/><text x="23.7767%" y="719.50"></text></g><g><title>&lt;std::sync::rwlock::RwLockWriteGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (197 samples, 0.07%)</title><rect x="23.5267%" y="693" width="0.0717%" height="15" fill="rgb(226,74,18)" fg:x="64633" fg:w="197"/><text x="23.7767%" y="703.50"></text></g><g><title>std::sys::unix::locks::futex_rwlock::RwLock::write_unlock (137 samples, 0.05%)</title><rect x="23.5485%" y="677" width="0.0499%" height="15" fill="rgb(225,67,54)" fg:x="64693" fg:w="137"/><text x="23.7985%" y="687.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::expect (45 samples, 0.02%)</title><rect x="23.5984%" y="709" width="0.0164%" height="15" fill="rgb(251,92,32)" fg:x="64830" fg:w="45"/><text x="23.8484%" y="719.50"></text></g><g><title>__memcpy_avx_unaligned_erms (7,839 samples, 2.85%)</title><rect x="23.6191%" y="677" width="2.8534%" height="15" fill="rgb(228,149,22)" fg:x="64887" fg:w="7839"/><text x="23.8691%" y="687.50">__..</text></g><g><title>[unknown] (7,015 samples, 2.55%)</title><rect x="23.9191%" y="661" width="2.5535%" height="15" fill="rgb(243,54,13)" fg:x="65711" fg:w="7015"/><text x="24.1691%" y="671.50">[u..</text></g><g><title>[unknown] (5,737 samples, 2.09%)</title><rect x="24.3843%" y="645" width="2.0883%" height="15" fill="rgb(243,180,28)" fg:x="66989" fg:w="5737"/><text x="24.6343%" y="655.50">[..</text></g><g><title>[unknown] (5,694 samples, 2.07%)</title><rect x="24.3999%" y="629" width="2.0726%" height="15" fill="rgb(208,167,24)" fg:x="67032" fg:w="5694"/><text x="24.6499%" y="639.50">[..</text></g><g><title>[unknown] (5,561 samples, 2.02%)</title><rect x="24.4484%" y="613" width="2.0242%" height="15" fill="rgb(245,73,45)" fg:x="67165" fg:w="5561"/><text x="24.6984%" y="623.50">[..</text></g><g><title>[unknown] (5,149 samples, 1.87%)</title><rect x="24.5983%" y="597" width="1.8743%" height="15" fill="rgb(237,203,48)" fg:x="67577" fg:w="5149"/><text x="24.8483%" y="607.50">[..</text></g><g><title>[unknown] (4,785 samples, 1.74%)</title><rect x="24.7308%" y="581" width="1.7418%" height="15" fill="rgb(211,197,16)" fg:x="67941" fg:w="4785"/><text x="24.9808%" y="591.50"></text></g><g><title>[unknown] (4,479 samples, 1.63%)</title><rect x="24.8422%" y="565" width="1.6304%" height="15" fill="rgb(243,99,51)" fg:x="68247" fg:w="4479"/><text x="25.0922%" y="575.50"></text></g><g><title>[unknown] (3,998 samples, 1.46%)</title><rect x="25.0173%" y="549" width="1.4553%" height="15" fill="rgb(215,123,29)" fg:x="68728" fg:w="3998"/><text x="25.2673%" y="559.50"></text></g><g><title>[unknown] (3,507 samples, 1.28%)</title><rect x="25.1960%" y="533" width="1.2766%" height="15" fill="rgb(239,186,37)" fg:x="69219" fg:w="3507"/><text x="25.4460%" y="543.50"></text></g><g><title>[unknown] (2,224 samples, 0.81%)</title><rect x="25.6630%" y="517" width="0.8095%" height="15" fill="rgb(252,136,39)" fg:x="70502" fg:w="2224"/><text x="25.9130%" y="527.50"></text></g><g><title>[unknown] (1,373 samples, 0.50%)</title><rect x="25.9728%" y="501" width="0.4998%" height="15" fill="rgb(223,213,32)" fg:x="71353" fg:w="1373"/><text x="26.2228%" y="511.50"></text></g><g><title>[unknown] (536 samples, 0.20%)</title><rect x="26.2775%" y="485" width="0.1951%" height="15" fill="rgb(233,115,5)" fg:x="72190" fg:w="536"/><text x="26.5275%" y="495.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (7,843 samples, 2.85%)</title><rect x="23.6191%" y="693" width="2.8549%" height="15" fill="rgb(207,226,44)" fg:x="64887" fg:w="7843"/><text x="23.8691%" y="703.50">co..</text></g><g><title>core::slice::&lt;impl [T]&gt;::copy_from_slice (7,865 samples, 2.86%)</title><rect x="23.6148%" y="709" width="2.8629%" height="15" fill="rgb(208,126,0)" fg:x="64875" fg:w="7865"/><text x="23.8648%" y="719.50">co..</text></g><g><title>core::ptr::metadata::from_raw_parts_mut (30 samples, 0.01%)</title><rect x="26.4839%" y="629" width="0.0109%" height="15" fill="rgb(244,66,21)" fg:x="72757" fg:w="30"/><text x="26.7339%" y="639.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked_mut (35 samples, 0.01%)</title><rect x="26.4835%" y="661" width="0.0127%" height="15" fill="rgb(222,97,12)" fg:x="72756" fg:w="35"/><text x="26.7335%" y="671.50"></text></g><g><title>core::ptr::slice_from_raw_parts_mut (34 samples, 0.01%)</title><rect x="26.4839%" y="645" width="0.0124%" height="15" fill="rgb(219,213,19)" fg:x="72757" fg:w="34"/><text x="26.7339%" y="655.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::IndexMut&lt;I&gt; for [T]&gt;::index_mut (73 samples, 0.03%)</title><rect x="26.4777%" y="709" width="0.0266%" height="15" fill="rgb(252,169,30)" fg:x="72740" fg:w="73"/><text x="26.7277%" y="719.50"></text></g><g><title>&lt;core::ops::range::RangeFrom&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (66 samples, 0.02%)</title><rect x="26.4802%" y="693" width="0.0240%" height="15" fill="rgb(206,32,51)" fg:x="72747" fg:w="66"/><text x="26.7302%" y="703.50"></text></g><g><title>&lt;core::ops::range::RangeFrom&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked_mut (57 samples, 0.02%)</title><rect x="26.4835%" y="677" width="0.0207%" height="15" fill="rgb(250,172,42)" fg:x="72756" fg:w="57"/><text x="26.7335%" y="687.50"></text></g><g><title>std::sync::poison::Flag::get (28 samples, 0.01%)</title><rect x="26.5214%" y="645" width="0.0102%" height="15" fill="rgb(209,34,43)" fg:x="72860" fg:w="28"/><text x="26.7714%" y="655.50"></text></g><g><title>core::sync::atomic::AtomicBool::load (28 samples, 0.01%)</title><rect x="26.5214%" y="629" width="0.0102%" height="15" fill="rgb(223,11,35)" fg:x="72860" fg:w="28"/><text x="26.7714%" y="639.50"></text></g><g><title>std::sync::poison::Flag::guard (56 samples, 0.02%)</title><rect x="26.5181%" y="661" width="0.0204%" height="15" fill="rgb(251,219,26)" fg:x="72851" fg:w="56"/><text x="26.7681%" y="671.50"></text></g><g><title>std::sync::rwlock::RwLockWriteGuard&lt;T&gt;::new (119 samples, 0.04%)</title><rect x="26.5130%" y="677" width="0.0433%" height="15" fill="rgb(231,119,3)" fg:x="72837" fg:w="119"/><text x="26.7630%" y="687.50"></text></g><g><title>std::sync::poison::map_result (49 samples, 0.02%)</title><rect x="26.5385%" y="661" width="0.0178%" height="15" fill="rgb(216,97,11)" fg:x="72907" fg:w="49"/><text x="26.7885%" y="671.50"></text></g><g><title>dynasmrt::components::MemoryManager::write (368 samples, 0.13%)</title><rect x="26.5042%" y="709" width="0.1340%" height="15" fill="rgb(223,59,9)" fg:x="72813" fg:w="368"/><text x="26.7542%" y="719.50"></text></g><g><title>std::sync::rwlock::RwLock&lt;T&gt;::write (355 samples, 0.13%)</title><rect x="26.5090%" y="693" width="0.1292%" height="15" fill="rgb(233,93,31)" fg:x="72826" fg:w="355"/><text x="26.7590%" y="703.50"></text></g><g><title>std::sys::unix::locks::futex_rwlock::RwLock::write (225 samples, 0.08%)</title><rect x="26.5563%" y="677" width="0.0819%" height="15" fill="rgb(239,81,33)" fg:x="72956" fg:w="225"/><text x="26.8063%" y="687.50"></text></g><g><title>core::sync::atomic::AtomicU32::compare_exchange_weak (221 samples, 0.08%)</title><rect x="26.5578%" y="661" width="0.0804%" height="15" fill="rgb(213,120,34)" fg:x="72960" fg:w="221"/><text x="26.8078%" y="671.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (213 samples, 0.08%)</title><rect x="26.5607%" y="645" width="0.0775%" height="15" fill="rgb(243,49,53)" fg:x="72968" fg:w="213"/><text x="26.8107%" y="655.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (37 samples, 0.01%)</title><rect x="26.7081%" y="677" width="0.0135%" height="15" fill="rgb(247,216,33)" fg:x="73373" fg:w="37"/><text x="26.9581%" y="687.50"></text></g><g><title>__GI___mprotect (8,836 samples, 3.22%)</title><rect x="26.7732%" y="645" width="3.2163%" height="15" fill="rgb(226,26,14)" fg:x="73552" fg:w="8836"/><text x="27.0232%" y="655.50">__G..</text></g><g><title>[unknown] (8,698 samples, 3.17%)</title><rect x="26.8235%" y="629" width="3.1661%" height="15" fill="rgb(215,49,53)" fg:x="73690" fg:w="8698"/><text x="27.0735%" y="639.50">[un..</text></g><g><title>[unknown] (8,500 samples, 3.09%)</title><rect x="26.8956%" y="613" width="3.0940%" height="15" fill="rgb(245,162,40)" fg:x="73888" fg:w="8500"/><text x="27.1456%" y="623.50">[un..</text></g><g><title>[unknown] (8,440 samples, 3.07%)</title><rect x="26.9174%" y="597" width="3.0722%" height="15" fill="rgb(229,68,17)" fg:x="73948" fg:w="8440"/><text x="27.1674%" y="607.50">[un..</text></g><g><title>[unknown] (8,393 samples, 3.06%)</title><rect x="26.9345%" y="581" width="3.0551%" height="15" fill="rgb(213,182,10)" fg:x="73995" fg:w="8393"/><text x="27.1845%" y="591.50">[un..</text></g><g><title>[unknown] (8,119 samples, 2.96%)</title><rect x="27.0342%" y="565" width="2.9554%" height="15" fill="rgb(245,125,30)" fg:x="74269" fg:w="8119"/><text x="27.2842%" y="575.50">[un..</text></g><g><title>[unknown] (7,491 samples, 2.73%)</title><rect x="27.2628%" y="549" width="2.7268%" height="15" fill="rgb(232,202,2)" fg:x="74897" fg:w="7491"/><text x="27.5128%" y="559.50">[u..</text></g><g><title>[unknown] (6,952 samples, 2.53%)</title><rect x="27.4590%" y="533" width="2.5306%" height="15" fill="rgb(237,140,51)" fg:x="75436" fg:w="6952"/><text x="27.7090%" y="543.50">[u..</text></g><g><title>[unknown] (6,128 samples, 2.23%)</title><rect x="27.7590%" y="517" width="2.2306%" height="15" fill="rgb(236,157,25)" fg:x="76260" fg:w="6128"/><text x="28.0090%" y="527.50">[..</text></g><g><title>[unknown] (5,526 samples, 2.01%)</title><rect x="27.9781%" y="501" width="2.0115%" height="15" fill="rgb(219,209,0)" fg:x="76862" fg:w="5526"/><text x="28.2281%" y="511.50">[..</text></g><g><title>[unknown] (3,907 samples, 1.42%)</title><rect x="28.5674%" y="485" width="1.4222%" height="15" fill="rgb(240,116,54)" fg:x="78481" fg:w="3907"/><text x="28.8174%" y="495.50"></text></g><g><title>[unknown] (3,685 samples, 1.34%)</title><rect x="28.6482%" y="469" width="1.3414%" height="15" fill="rgb(216,10,36)" fg:x="78703" fg:w="3685"/><text x="28.8982%" y="479.50"></text></g><g><title>[unknown] (3,160 samples, 1.15%)</title><rect x="28.8393%" y="453" width="1.1503%" height="15" fill="rgb(222,72,44)" fg:x="79228" fg:w="3160"/><text x="29.0893%" y="463.50"></text></g><g><title>[unknown] (2,695 samples, 0.98%)</title><rect x="29.0086%" y="437" width="0.9810%" height="15" fill="rgb(232,159,9)" fg:x="79693" fg:w="2695"/><text x="29.2586%" y="447.50"></text></g><g><title>[unknown] (2,284 samples, 0.83%)</title><rect x="29.1582%" y="421" width="0.8314%" height="15" fill="rgb(210,39,32)" fg:x="80104" fg:w="2284"/><text x="29.4082%" y="431.50"></text></g><g><title>[unknown] (2,224 samples, 0.81%)</title><rect x="29.1800%" y="405" width="0.8095%" height="15" fill="rgb(216,194,45)" fg:x="80164" fg:w="2224"/><text x="29.4300%" y="415.50"></text></g><g><title>[unknown] (2,126 samples, 0.77%)</title><rect x="29.2157%" y="389" width="0.7739%" height="15" fill="rgb(218,18,35)" fg:x="80262" fg:w="2126"/><text x="29.4657%" y="399.50"></text></g><g><title>[unknown] (2,114 samples, 0.77%)</title><rect x="29.2201%" y="373" width="0.7695%" height="15" fill="rgb(207,83,51)" fg:x="80274" fg:w="2114"/><text x="29.4701%" y="383.50"></text></g><g><title>[unknown] (1,237 samples, 0.45%)</title><rect x="29.5393%" y="357" width="0.4503%" height="15" fill="rgb(225,63,43)" fg:x="81151" fg:w="1237"/><text x="29.7893%" y="367.50"></text></g><g><title>[unknown] (1,236 samples, 0.45%)</title><rect x="29.5397%" y="341" width="0.4499%" height="15" fill="rgb(207,57,36)" fg:x="81152" fg:w="1236"/><text x="29.7897%" y="351.50"></text></g><g><title>[unknown] (1,215 samples, 0.44%)</title><rect x="29.5473%" y="325" width="0.4423%" height="15" fill="rgb(216,99,33)" fg:x="81173" fg:w="1215"/><text x="29.7973%" y="335.50"></text></g><g><title>[unknown] (1,006 samples, 0.37%)</title><rect x="29.6234%" y="309" width="0.3662%" height="15" fill="rgb(225,42,16)" fg:x="81382" fg:w="1006"/><text x="29.8734%" y="319.50"></text></g><g><title>[unknown] (985 samples, 0.36%)</title><rect x="29.6310%" y="293" width="0.3585%" height="15" fill="rgb(220,201,45)" fg:x="81403" fg:w="985"/><text x="29.8810%" y="303.50"></text></g><g><title>[unknown] (932 samples, 0.34%)</title><rect x="29.6503%" y="277" width="0.3393%" height="15" fill="rgb(225,33,4)" fg:x="81456" fg:w="932"/><text x="29.9003%" y="287.50"></text></g><g><title>[unknown] (868 samples, 0.32%)</title><rect x="29.6736%" y="261" width="0.3160%" height="15" fill="rgb(224,33,50)" fg:x="81520" fg:w="868"/><text x="29.9236%" y="271.50"></text></g><g><title>[unknown] (841 samples, 0.31%)</title><rect x="29.6835%" y="245" width="0.3061%" height="15" fill="rgb(246,198,51)" fg:x="81547" fg:w="841"/><text x="29.9335%" y="255.50"></text></g><g><title>[unknown] (765 samples, 0.28%)</title><rect x="29.7111%" y="229" width="0.2785%" height="15" fill="rgb(205,22,4)" fg:x="81623" fg:w="765"/><text x="29.9611%" y="239.50"></text></g><g><title>[unknown] (757 samples, 0.28%)</title><rect x="29.7140%" y="213" width="0.2756%" height="15" fill="rgb(206,3,8)" fg:x="81631" fg:w="757"/><text x="29.9640%" y="223.50"></text></g><g><title>[unknown] (697 samples, 0.25%)</title><rect x="29.7359%" y="197" width="0.2537%" height="15" fill="rgb(251,23,15)" fg:x="81691" fg:w="697"/><text x="29.9859%" y="207.50"></text></g><g><title>[unknown] (490 samples, 0.18%)</title><rect x="29.8112%" y="181" width="0.1784%" height="15" fill="rgb(252,88,28)" fg:x="81898" fg:w="490"/><text x="30.0612%" y="191.50"></text></g><g><title>[unknown] (196 samples, 0.07%)</title><rect x="29.9182%" y="165" width="0.0713%" height="15" fill="rgb(212,127,14)" fg:x="82192" fg:w="196"/><text x="30.1682%" y="175.50"></text></g><g><title>[unknown] (191 samples, 0.07%)</title><rect x="29.9201%" y="149" width="0.0695%" height="15" fill="rgb(247,145,37)" fg:x="82197" fg:w="191"/><text x="30.1701%" y="159.50"></text></g><g><title>[unknown] (90 samples, 0.03%)</title><rect x="29.9568%" y="133" width="0.0328%" height="15" fill="rgb(209,117,53)" fg:x="82298" fg:w="90"/><text x="30.2068%" y="143.50"></text></g><g><title>[unknown] (64 samples, 0.02%)</title><rect x="29.9663%" y="117" width="0.0233%" height="15" fill="rgb(212,90,42)" fg:x="82324" fg:w="64"/><text x="30.2163%" y="127.50"></text></g><g><title>core::cmp::Ord::max (39 samples, 0.01%)</title><rect x="29.9896%" y="645" width="0.0142%" height="15" fill="rgb(218,164,37)" fg:x="82388" fg:w="39"/><text x="30.2396%" y="655.50"></text></g><g><title>core::cmp::max_by (39 samples, 0.01%)</title><rect x="29.9896%" y="629" width="0.0142%" height="15" fill="rgb(246,65,34)" fg:x="82388" fg:w="39"/><text x="30.2396%" y="639.50"></text></g><g><title>dynasmrt::mmap::ExecutableBuffer::make_mut (9,290 samples, 3.38%)</title><rect x="26.6382%" y="709" width="3.3816%" height="15" fill="rgb(231,100,33)" fg:x="73181" fg:w="9290"/><text x="26.8882%" y="719.50">dyn..</text></g><g><title>memmap2::Mmap::make_mut (9,146 samples, 3.33%)</title><rect x="26.6906%" y="693" width="3.3292%" height="15" fill="rgb(228,126,14)" fg:x="73325" fg:w="9146"/><text x="26.9406%" y="703.50">mem..</text></g><g><title>memmap2::os::MmapInner::make_mut (9,061 samples, 3.30%)</title><rect x="26.7216%" y="677" width="3.2982%" height="15" fill="rgb(215,173,21)" fg:x="73410" fg:w="9061"/><text x="26.9716%" y="687.50">mem..</text></g><g><title>memmap2::os::MmapInner::mprotect (9,061 samples, 3.30%)</title><rect x="26.7216%" y="661" width="3.2982%" height="15" fill="rgb(210,6,40)" fg:x="73410" fg:w="9061"/><text x="26.9716%" y="671.50">mem..</text></g><g><title>memmap2::os::page_size (41 samples, 0.01%)</title><rect x="30.0049%" y="645" width="0.0149%" height="15" fill="rgb(212,48,18)" fg:x="82430" fg:w="41"/><text x="30.2549%" y="655.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (33 samples, 0.01%)</title><rect x="30.0078%" y="629" width="0.0120%" height="15" fill="rgb(230,214,11)" fg:x="82438" fg:w="33"/><text x="30.2578%" y="639.50"></text></g><g><title>core::sync::atomic::atomic_load (30 samples, 0.01%)</title><rect x="30.0089%" y="613" width="0.0109%" height="15" fill="rgb(254,105,39)" fg:x="82441" fg:w="30"/><text x="30.2589%" y="623.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (33 samples, 0.01%)</title><rect x="30.0915%" y="677" width="0.0120%" height="15" fill="rgb(245,158,5)" fg:x="82668" fg:w="33"/><text x="30.3415%" y="687.50"></text></g><g><title>__GI___mprotect (9,944 samples, 3.62%)</title><rect x="30.1523%" y="645" width="3.6197%" height="15" fill="rgb(249,208,11)" fg:x="82835" fg:w="9944"/><text x="30.4023%" y="655.50">__GI..</text></g><g><title>[unknown] (9,821 samples, 3.57%)</title><rect x="30.1971%" y="629" width="3.5749%" height="15" fill="rgb(210,39,28)" fg:x="82958" fg:w="9821"/><text x="30.4471%" y="639.50">[unk..</text></g><g><title>[unknown] (9,596 samples, 3.49%)</title><rect x="30.2790%" y="613" width="3.4930%" height="15" fill="rgb(211,56,53)" fg:x="83183" fg:w="9596"/><text x="30.5290%" y="623.50">[un..</text></g><g><title>[unknown] (9,538 samples, 3.47%)</title><rect x="30.3001%" y="597" width="3.4719%" height="15" fill="rgb(226,201,30)" fg:x="83241" fg:w="9538"/><text x="30.5501%" y="607.50">[un..</text></g><g><title>[unknown] (9,467 samples, 3.45%)</title><rect x="30.3259%" y="581" width="3.4460%" height="15" fill="rgb(239,101,34)" fg:x="83312" fg:w="9467"/><text x="30.5759%" y="591.50">[un..</text></g><g><title>[unknown] (9,084 samples, 3.31%)</title><rect x="30.4653%" y="565" width="3.3066%" height="15" fill="rgb(226,209,5)" fg:x="83695" fg:w="9084"/><text x="30.7153%" y="575.50">[un..</text></g><g><title>[unknown] (8,396 samples, 3.06%)</title><rect x="30.7158%" y="549" width="3.0562%" height="15" fill="rgb(250,105,47)" fg:x="84383" fg:w="8396"/><text x="30.9658%" y="559.50">[un..</text></g><g><title>[unknown] (7,623 samples, 2.77%)</title><rect x="30.9972%" y="533" width="2.7748%" height="15" fill="rgb(230,72,3)" fg:x="85156" fg:w="7623"/><text x="31.2472%" y="543.50">[u..</text></g><g><title>[unknown] (6,293 samples, 2.29%)</title><rect x="31.4813%" y="517" width="2.2907%" height="15" fill="rgb(232,218,39)" fg:x="86486" fg:w="6293"/><text x="31.7313%" y="527.50">[..</text></g><g><title>[unknown] (4,561 samples, 1.66%)</title><rect x="32.1117%" y="501" width="1.6602%" height="15" fill="rgb(248,166,6)" fg:x="88218" fg:w="4561"/><text x="32.3617%" y="511.50"></text></g><g><title>[unknown] (3,520 samples, 1.28%)</title><rect x="32.4907%" y="485" width="1.2813%" height="15" fill="rgb(247,89,20)" fg:x="89259" fg:w="3520"/><text x="32.7407%" y="495.50"></text></g><g><title>[unknown] (3,277 samples, 1.19%)</title><rect x="32.5791%" y="469" width="1.1928%" height="15" fill="rgb(248,130,54)" fg:x="89502" fg:w="3277"/><text x="32.8291%" y="479.50"></text></g><g><title>[unknown] (2,754 samples, 1.00%)</title><rect x="32.7695%" y="453" width="1.0025%" height="15" fill="rgb(234,196,4)" fg:x="90025" fg:w="2754"/><text x="33.0195%" y="463.50"></text></g><g><title>[unknown] (2,239 samples, 0.82%)</title><rect x="32.9570%" y="437" width="0.8150%" height="15" fill="rgb(250,143,31)" fg:x="90540" fg:w="2239"/><text x="33.2070%" y="447.50"></text></g><g><title>[unknown] (1,956 samples, 0.71%)</title><rect x="33.0600%" y="421" width="0.7120%" height="15" fill="rgb(211,110,34)" fg:x="90823" fg:w="1956"/><text x="33.3100%" y="431.50"></text></g><g><title>[unknown] (1,911 samples, 0.70%)</title><rect x="33.0763%" y="405" width="0.6956%" height="15" fill="rgb(215,124,48)" fg:x="90868" fg:w="1911"/><text x="33.3263%" y="415.50"></text></g><g><title>[unknown] (1,824 samples, 0.66%)</title><rect x="33.1080%" y="389" width="0.6639%" height="15" fill="rgb(216,46,13)" fg:x="90955" fg:w="1824"/><text x="33.3580%" y="399.50"></text></g><g><title>[unknown] (1,817 samples, 0.66%)</title><rect x="33.1106%" y="373" width="0.6614%" height="15" fill="rgb(205,184,25)" fg:x="90962" fg:w="1817"/><text x="33.3606%" y="383.50"></text></g><g><title>[unknown] (904 samples, 0.33%)</title><rect x="33.4429%" y="357" width="0.3291%" height="15" fill="rgb(228,1,10)" fg:x="91875" fg:w="904"/><text x="33.6929%" y="367.50"></text></g><g><title>[unknown] (904 samples, 0.33%)</title><rect x="33.4429%" y="341" width="0.3291%" height="15" fill="rgb(213,116,27)" fg:x="91875" fg:w="904"/><text x="33.6929%" y="351.50"></text></g><g><title>[unknown] (885 samples, 0.32%)</title><rect x="33.4498%" y="325" width="0.3221%" height="15" fill="rgb(241,95,50)" fg:x="91894" fg:w="885"/><text x="33.6998%" y="335.50"></text></g><g><title>[unknown] (684 samples, 0.25%)</title><rect x="33.5230%" y="309" width="0.2490%" height="15" fill="rgb(238,48,32)" fg:x="92095" fg:w="684"/><text x="33.7730%" y="319.50"></text></g><g><title>[unknown] (668 samples, 0.24%)</title><rect x="33.5288%" y="293" width="0.2432%" height="15" fill="rgb(235,113,49)" fg:x="92111" fg:w="668"/><text x="33.7788%" y="303.50"></text></g><g><title>[unknown] (619 samples, 0.23%)</title><rect x="33.5466%" y="277" width="0.2253%" height="15" fill="rgb(205,127,43)" fg:x="92160" fg:w="619"/><text x="33.7966%" y="287.50"></text></g><g><title>[unknown] (556 samples, 0.20%)</title><rect x="33.5696%" y="261" width="0.2024%" height="15" fill="rgb(250,162,2)" fg:x="92223" fg:w="556"/><text x="33.8196%" y="271.50"></text></g><g><title>[unknown] (530 samples, 0.19%)</title><rect x="33.5790%" y="245" width="0.1929%" height="15" fill="rgb(220,13,41)" fg:x="92249" fg:w="530"/><text x="33.8290%" y="255.50"></text></g><g><title>[unknown] (476 samples, 0.17%)</title><rect x="33.5987%" y="229" width="0.1733%" height="15" fill="rgb(249,221,25)" fg:x="92303" fg:w="476"/><text x="33.8487%" y="239.50"></text></g><g><title>[unknown] (467 samples, 0.17%)</title><rect x="33.6020%" y="213" width="0.1700%" height="15" fill="rgb(215,208,19)" fg:x="92312" fg:w="467"/><text x="33.8520%" y="223.50"></text></g><g><title>[unknown] (409 samples, 0.15%)</title><rect x="33.6231%" y="197" width="0.1489%" height="15" fill="rgb(236,175,2)" fg:x="92370" fg:w="409"/><text x="33.8731%" y="207.50"></text></g><g><title>[unknown] (306 samples, 0.11%)</title><rect x="33.6606%" y="181" width="0.1114%" height="15" fill="rgb(241,52,2)" fg:x="92473" fg:w="306"/><text x="33.9106%" y="191.50"></text></g><g><title>[unknown] (93 samples, 0.03%)</title><rect x="33.7381%" y="165" width="0.0339%" height="15" fill="rgb(248,140,14)" fg:x="92686" fg:w="93"/><text x="33.9881%" y="175.50"></text></g><g><title>[unknown] (86 samples, 0.03%)</title><rect x="33.7407%" y="149" width="0.0313%" height="15" fill="rgb(253,22,42)" fg:x="92693" fg:w="86"/><text x="33.9907%" y="159.50"></text></g><g><title>[unknown] (36 samples, 0.01%)</title><rect x="33.7589%" y="133" width="0.0131%" height="15" fill="rgb(234,61,47)" fg:x="92743" fg:w="36"/><text x="34.0089%" y="143.50"></text></g><g><title>[unknown] (31 samples, 0.01%)</title><rect x="33.7607%" y="117" width="0.0113%" height="15" fill="rgb(208,226,15)" fg:x="92748" fg:w="31"/><text x="34.0107%" y="127.50"></text></g><g><title>core::cmp::Ord::max (59 samples, 0.02%)</title><rect x="33.7720%" y="645" width="0.0215%" height="15" fill="rgb(217,221,4)" fg:x="92779" fg:w="59"/><text x="34.0220%" y="655.50"></text></g><g><title>core::cmp::max_by (59 samples, 0.02%)</title><rect x="33.7720%" y="629" width="0.0215%" height="15" fill="rgb(212,174,34)" fg:x="92779" fg:w="59"/><text x="34.0220%" y="639.50"></text></g><g><title>core::ops::function::FnOnce::call_once (28 samples, 0.01%)</title><rect x="33.7832%" y="613" width="0.0102%" height="15" fill="rgb(253,83,4)" fg:x="92810" fg:w="28"/><text x="34.0332%" y="623.50"></text></g><g><title>dynasmrt::Assembler&lt;R&gt;::commit (29,706 samples, 10.81%)</title><rect x="22.9923%" y="741" width="10.8131%" height="15" fill="rgb(250,195,49)" fg:x="63165" fg:w="29706"/><text x="23.2423%" y="751.50">dynasmrt::Assemb..</text></g><g><title>dynasmrt::components::MemoryManager::commit (28,630 samples, 10.42%)</title><rect x="23.3840%" y="725" width="10.4214%" height="15" fill="rgb(241,192,25)" fg:x="64241" fg:w="28630"/><text x="23.6340%" y="735.50">dynasmrt::compo..</text></g><g><title>dynasmrt::mmap::MutableBuffer::make_exec (10,400 samples, 3.79%)</title><rect x="30.0198%" y="709" width="3.7856%" height="15" fill="rgb(208,124,10)" fg:x="82471" fg:w="10400"/><text x="30.2698%" y="719.50">dyna..</text></g><g><title>memmap2::MmapMut::make_exec (10,264 samples, 3.74%)</title><rect x="30.0693%" y="693" width="3.7361%" height="15" fill="rgb(222,33,0)" fg:x="82607" fg:w="10264"/><text x="30.3193%" y="703.50">memm..</text></g><g><title>memmap2::os::MmapInner::make_exec (10,170 samples, 3.70%)</title><rect x="30.1035%" y="677" width="3.7019%" height="15" fill="rgb(234,209,28)" fg:x="82701" fg:w="10170"/><text x="30.3535%" y="687.50">memm..</text></g><g><title>memmap2::os::MmapInner::mprotect (10,170 samples, 3.70%)</title><rect x="30.1035%" y="661" width="3.7019%" height="15" fill="rgb(224,11,23)" fg:x="82701" fg:w="10170"/><text x="30.3535%" y="671.50">memm..</text></g><g><title>memmap2::os::page_size (30 samples, 0.01%)</title><rect x="33.7945%" y="645" width="0.0109%" height="15" fill="rgb(232,99,1)" fg:x="92841" fg:w="30"/><text x="34.0445%" y="655.50"></text></g><g><title>__GI___libc_free (58 samples, 0.02%)</title><rect x="33.8418%" y="645" width="0.0211%" height="15" fill="rgb(237,95,45)" fg:x="92971" fg:w="58"/><text x="34.0918%" y="655.50"></text></g><g><title>_int_free (44 samples, 0.02%)</title><rect x="33.8469%" y="629" width="0.0160%" height="15" fill="rgb(208,109,11)" fg:x="92985" fg:w="44"/><text x="34.0969%" y="639.50"></text></g><g><title>alloc::alloc::dealloc (69 samples, 0.03%)</title><rect x="33.8418%" y="661" width="0.0251%" height="15" fill="rgb(216,190,48)" fg:x="92971" fg:w="69"/><text x="34.0918%" y="671.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (85 samples, 0.03%)</title><rect x="33.8371%" y="677" width="0.0309%" height="15" fill="rgb(251,171,36)" fg:x="92958" fg:w="85"/><text x="34.0871%" y="687.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (107 samples, 0.04%)</title><rect x="33.8790%" y="677" width="0.0389%" height="15" fill="rgb(230,62,22)" fg:x="93073" fg:w="107"/><text x="34.1290%" y="687.50"></text></g><g><title>core::sync::atomic::atomic_sub (106 samples, 0.04%)</title><rect x="33.8793%" y="661" width="0.0386%" height="15" fill="rgb(225,114,35)" fg:x="93074" fg:w="106"/><text x="34.1293%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Weak&lt;std::sync::rwlock::RwLock&lt;dynasmrt::mmap::ExecutableBuffer&gt;&gt;&gt; (239 samples, 0.09%)</title><rect x="33.8317%" y="709" width="0.0870%" height="15" fill="rgb(215,118,42)" fg:x="92943" fg:w="239"/><text x="34.0817%" y="719.50"></text></g><g><title>&lt;alloc::sync::Weak&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (239 samples, 0.09%)</title><rect x="33.8317%" y="693" width="0.0870%" height="15" fill="rgb(243,119,21)" fg:x="92943" fg:w="239"/><text x="34.0817%" y="703.50"></text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::try_unwrap (470 samples, 0.17%)</title><rect x="33.8193%" y="725" width="0.1711%" height="15" fill="rgb(252,177,53)" fg:x="92909" fg:w="470"/><text x="34.0693%" y="735.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (184 samples, 0.07%)</title><rect x="33.9234%" y="709" width="0.0670%" height="15" fill="rgb(237,209,29)" fg:x="93195" fg:w="184"/><text x="34.1734%" y="719.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (163 samples, 0.06%)</title><rect x="33.9310%" y="693" width="0.0593%" height="15" fill="rgb(212,65,23)" fg:x="93216" fg:w="163"/><text x="34.1810%" y="703.50"></text></g><g><title>dynasmrt::Assembler&lt;R&gt;::finalize (31,036 samples, 11.30%)</title><rect x="22.7226%" y="757" width="11.2972%" height="15" fill="rgb(230,222,46)" fg:x="62424" fg:w="31036"/><text x="22.9726%" y="767.50">dynasmrt::Assembl..</text></g><g><title>dynasmrt::components::MemoryManager::finalize (589 samples, 0.21%)</title><rect x="33.8054%" y="741" width="0.2144%" height="15" fill="rgb(215,135,32)" fg:x="92871" fg:w="589"/><text x="34.0554%" y="751.50"></text></g><g><title>std::sync::rwlock::RwLock&lt;T&gt;::into_inner (65 samples, 0.02%)</title><rect x="33.9962%" y="725" width="0.0237%" height="15" fill="rgb(246,101,22)" fg:x="93395" fg:w="65"/><text x="34.2462%" y="735.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (35 samples, 0.01%)</title><rect x="34.0777%" y="741" width="0.0127%" height="15" fill="rgb(206,107,13)" fg:x="93619" fg:w="35"/><text x="34.3277%" y="751.50"></text></g><g><title>__memcpy_avx_unaligned_erms (104 samples, 0.04%)</title><rect x="34.0905%" y="741" width="0.0379%" height="15" fill="rgb(250,100,44)" fg:x="93654" fg:w="104"/><text x="34.3405%" y="751.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::default::Default&gt;::default (49 samples, 0.02%)</title><rect x="34.1462%" y="725" width="0.0178%" height="15" fill="rgb(231,147,38)" fg:x="93807" fg:w="49"/><text x="34.3962%" y="735.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::with_hasher (49 samples, 0.02%)</title><rect x="34.1462%" y="709" width="0.0178%" height="15" fill="rgb(229,8,40)" fg:x="93807" fg:w="49"/><text x="34.3962%" y="719.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S&gt;::with_hasher (37 samples, 0.01%)</title><rect x="34.1505%" y="693" width="0.0135%" height="15" fill="rgb(221,135,30)" fg:x="93819" fg:w="37"/><text x="34.4005%" y="703.50"></text></g><g><title>dynasmrt::components::LabelRegistry::new (82 samples, 0.03%)</title><rect x="34.1356%" y="741" width="0.0298%" height="15" fill="rgb(249,193,18)" fg:x="93778" fg:w="82"/><text x="34.3856%" y="751.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (30 samples, 0.01%)</title><rect x="34.2164%" y="725" width="0.0109%" height="15" fill="rgb(209,133,39)" fg:x="94000" fg:w="30"/><text x="34.4664%" y="735.50"></text></g><g><title>&lt;dynasmrt::mmap::ExecutableBuffer as core::ops::deref::Deref&gt;::deref (79 samples, 0.03%)</title><rect x="34.2273%" y="725" width="0.0288%" height="15" fill="rgb(232,100,14)" fg:x="94030" fg:w="79"/><text x="34.4773%" y="735.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (47 samples, 0.02%)</title><rect x="34.2390%" y="709" width="0.0171%" height="15" fill="rgb(224,185,1)" fg:x="94062" fg:w="47"/><text x="34.4890%" y="719.50"></text></g><g><title>&lt;core::ops::range::RangeTo&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (37 samples, 0.01%)</title><rect x="34.2426%" y="693" width="0.0135%" height="15" fill="rgb(223,139,8)" fg:x="94072" fg:w="37"/><text x="34.4926%" y="703.50"></text></g><g><title>__GI___libc_malloc (30 samples, 0.01%)</title><rect x="34.3147%" y="629" width="0.0109%" height="15" fill="rgb(232,213,38)" fg:x="94270" fg:w="30"/><text x="34.5647%" y="639.50"></text></g><g><title>alloc::alloc::alloc (43 samples, 0.02%)</title><rect x="34.3147%" y="645" width="0.0157%" height="15" fill="rgb(207,94,22)" fg:x="94270" fg:w="43"/><text x="34.5647%" y="655.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (135 samples, 0.05%)</title><rect x="34.2947%" y="677" width="0.0491%" height="15" fill="rgb(219,183,54)" fg:x="94215" fg:w="135"/><text x="34.5447%" y="687.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (128 samples, 0.05%)</title><rect x="34.2972%" y="661" width="0.0466%" height="15" fill="rgb(216,185,54)" fg:x="94222" fg:w="128"/><text x="34.5472%" y="671.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (169 samples, 0.06%)</title><rect x="34.2837%" y="709" width="0.0615%" height="15" fill="rgb(254,217,39)" fg:x="94185" fg:w="169"/><text x="34.5337%" y="719.50"></text></g><g><title>alloc::alloc::exchange_malloc (151 samples, 0.05%)</title><rect x="34.2903%" y="693" width="0.0550%" height="15" fill="rgb(240,178,23)" fg:x="94203" fg:w="151"/><text x="34.5403%" y="703.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::new (263 samples, 0.10%)</title><rect x="34.2561%" y="725" width="0.0957%" height="15" fill="rgb(218,11,47)" fg:x="94109" fg:w="263"/><text x="34.5061%" y="735.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (41 samples, 0.01%)</title><rect x="34.3933%" y="709" width="0.0149%" height="15" fill="rgb(218,51,51)" fg:x="94486" fg:w="41"/><text x="34.6433%" y="719.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (37 samples, 0.01%)</title><rect x="34.4348%" y="693" width="0.0135%" height="15" fill="rgb(238,126,27)" fg:x="94600" fg:w="37"/><text x="34.6848%" y="703.50"></text></g><g><title>__GI___mprotect (8,816 samples, 3.21%)</title><rect x="34.5287%" y="661" width="3.2091%" height="15" fill="rgb(249,202,22)" fg:x="94858" fg:w="8816"/><text x="34.7787%" y="671.50">__G..</text></g><g><title>[unknown] (8,681 samples, 3.16%)</title><rect x="34.5779%" y="645" width="3.1599%" height="15" fill="rgb(254,195,49)" fg:x="94993" fg:w="8681"/><text x="34.8279%" y="655.50">[un..</text></g><g><title>[unknown] (8,469 samples, 3.08%)</title><rect x="34.6550%" y="629" width="3.0828%" height="15" fill="rgb(208,123,14)" fg:x="95205" fg:w="8469"/><text x="34.9050%" y="639.50">[un..</text></g><g><title>[unknown] (8,412 samples, 3.06%)</title><rect x="34.6758%" y="613" width="3.0620%" height="15" fill="rgb(224,200,8)" fg:x="95262" fg:w="8412"/><text x="34.9258%" y="623.50">[un..</text></g><g><title>[unknown] (8,329 samples, 3.03%)</title><rect x="34.7060%" y="597" width="3.0318%" height="15" fill="rgb(217,61,36)" fg:x="95345" fg:w="8329"/><text x="34.9560%" y="607.50">[un..</text></g><g><title>[unknown] (8,018 samples, 2.92%)</title><rect x="34.8192%" y="581" width="2.9186%" height="15" fill="rgb(206,35,45)" fg:x="95656" fg:w="8018"/><text x="35.0692%" y="591.50">[u..</text></g><g><title>[unknown] (7,377 samples, 2.69%)</title><rect x="35.0525%" y="565" width="2.6853%" height="15" fill="rgb(217,65,33)" fg:x="96297" fg:w="7377"/><text x="35.3025%" y="575.50">[u..</text></g><g><title>[unknown] (6,836 samples, 2.49%)</title><rect x="35.2495%" y="549" width="2.4883%" height="15" fill="rgb(222,158,48)" fg:x="96838" fg:w="6836"/><text x="35.4995%" y="559.50">[u..</text></g><g><title>[unknown] (5,593 samples, 2.04%)</title><rect x="35.7019%" y="533" width="2.0359%" height="15" fill="rgb(254,2,54)" fg:x="98081" fg:w="5593"/><text x="35.9519%" y="543.50">[..</text></g><g><title>[unknown] (4,553 samples, 1.66%)</title><rect x="36.0805%" y="517" width="1.6573%" height="15" fill="rgb(250,143,38)" fg:x="99121" fg:w="4553"/><text x="36.3305%" y="527.50"></text></g><g><title>[unknown] (3,575 samples, 1.30%)</title><rect x="36.4365%" y="501" width="1.3013%" height="15" fill="rgb(248,25,0)" fg:x="100099" fg:w="3575"/><text x="36.6865%" y="511.50"></text></g><g><title>[unknown] (3,307 samples, 1.20%)</title><rect x="36.5340%" y="485" width="1.2038%" height="15" fill="rgb(206,152,27)" fg:x="100367" fg:w="3307"/><text x="36.7840%" y="495.50"></text></g><g><title>[unknown] (2,840 samples, 1.03%)</title><rect x="36.7040%" y="469" width="1.0338%" height="15" fill="rgb(240,77,30)" fg:x="100834" fg:w="2840"/><text x="36.9540%" y="479.50"></text></g><g><title>[unknown] (2,286 samples, 0.83%)</title><rect x="36.9057%" y="453" width="0.8321%" height="15" fill="rgb(231,5,3)" fg:x="101388" fg:w="2286"/><text x="37.1557%" y="463.50"></text></g><g><title>[unknown] (2,049 samples, 0.75%)</title><rect x="36.9919%" y="437" width="0.7458%" height="15" fill="rgb(207,226,32)" fg:x="101625" fg:w="2049"/><text x="37.2419%" y="447.50"></text></g><g><title>[unknown] (2,002 samples, 0.73%)</title><rect x="37.0090%" y="421" width="0.7287%" height="15" fill="rgb(222,207,47)" fg:x="101672" fg:w="2002"/><text x="37.2590%" y="431.50"></text></g><g><title>[unknown] (1,927 samples, 0.70%)</title><rect x="37.0363%" y="405" width="0.7014%" height="15" fill="rgb(229,115,45)" fg:x="101747" fg:w="1927"/><text x="37.2863%" y="415.50"></text></g><g><title>[unknown] (1,905 samples, 0.69%)</title><rect x="37.0444%" y="389" width="0.6934%" height="15" fill="rgb(224,191,6)" fg:x="101769" fg:w="1905"/><text x="37.2944%" y="399.50"></text></g><g><title>[unknown] (1,035 samples, 0.38%)</title><rect x="37.3610%" y="373" width="0.3767%" height="15" fill="rgb(230,227,24)" fg:x="102639" fg:w="1035"/><text x="37.6110%" y="383.50"></text></g><g><title>[unknown] (1,034 samples, 0.38%)</title><rect x="37.3614%" y="357" width="0.3764%" height="15" fill="rgb(228,80,19)" fg:x="102640" fg:w="1034"/><text x="37.6114%" y="367.50"></text></g><g><title>[unknown] (1,020 samples, 0.37%)</title><rect x="37.3665%" y="341" width="0.3713%" height="15" fill="rgb(247,229,0)" fg:x="102654" fg:w="1020"/><text x="37.6165%" y="351.50"></text></g><g><title>[unknown] (805 samples, 0.29%)</title><rect x="37.4448%" y="325" width="0.2930%" height="15" fill="rgb(237,194,15)" fg:x="102869" fg:w="805"/><text x="37.6948%" y="335.50"></text></g><g><title>[unknown] (787 samples, 0.29%)</title><rect x="37.4513%" y="309" width="0.2865%" height="15" fill="rgb(219,203,20)" fg:x="102887" fg:w="787"/><text x="37.7013%" y="319.50"></text></g><g><title>[unknown] (729 samples, 0.27%)</title><rect x="37.4724%" y="293" width="0.2654%" height="15" fill="rgb(234,128,8)" fg:x="102945" fg:w="729"/><text x="37.7224%" y="303.50"></text></g><g><title>[unknown] (674 samples, 0.25%)</title><rect x="37.4924%" y="277" width="0.2453%" height="15" fill="rgb(248,202,8)" fg:x="103000" fg:w="674"/><text x="37.7424%" y="287.50"></text></g><g><title>[unknown] (649 samples, 0.24%)</title><rect x="37.5015%" y="261" width="0.2362%" height="15" fill="rgb(206,104,37)" fg:x="103025" fg:w="649"/><text x="37.7515%" y="271.50"></text></g><g><title>[unknown] (617 samples, 0.22%)</title><rect x="37.5132%" y="245" width="0.2246%" height="15" fill="rgb(223,8,27)" fg:x="103057" fg:w="617"/><text x="37.7632%" y="255.50"></text></g><g><title>[unknown] (613 samples, 0.22%)</title><rect x="37.5147%" y="229" width="0.2231%" height="15" fill="rgb(216,217,28)" fg:x="103061" fg:w="613"/><text x="37.7647%" y="239.50"></text></g><g><title>[unknown] (566 samples, 0.21%)</title><rect x="37.5318%" y="213" width="0.2060%" height="15" fill="rgb(249,199,1)" fg:x="103108" fg:w="566"/><text x="37.7818%" y="223.50"></text></g><g><title>[unknown] (499 samples, 0.18%)</title><rect x="37.5561%" y="197" width="0.1816%" height="15" fill="rgb(240,85,17)" fg:x="103175" fg:w="499"/><text x="37.8061%" y="207.50"></text></g><g><title>[unknown] (295 samples, 0.11%)</title><rect x="37.6304%" y="181" width="0.1074%" height="15" fill="rgb(206,108,45)" fg:x="103379" fg:w="295"/><text x="37.8804%" y="191.50"></text></g><g><title>[unknown] (283 samples, 0.10%)</title><rect x="37.6348%" y="165" width="0.1030%" height="15" fill="rgb(245,210,41)" fg:x="103391" fg:w="283"/><text x="37.8848%" y="175.50"></text></g><g><title>[unknown] (113 samples, 0.04%)</title><rect x="37.6967%" y="149" width="0.0411%" height="15" fill="rgb(206,13,37)" fg:x="103561" fg:w="113"/><text x="37.9467%" y="159.50"></text></g><g><title>[unknown] (96 samples, 0.03%)</title><rect x="37.7028%" y="133" width="0.0349%" height="15" fill="rgb(250,61,18)" fg:x="103578" fg:w="96"/><text x="37.9528%" y="143.50"></text></g><g><title>core::cmp::Ord::max (54 samples, 0.02%)</title><rect x="37.7378%" y="661" width="0.0197%" height="15" fill="rgb(235,172,48)" fg:x="103674" fg:w="54"/><text x="37.9878%" y="671.50"></text></g><g><title>core::cmp::max_by (54 samples, 0.02%)</title><rect x="37.7378%" y="645" width="0.0197%" height="15" fill="rgb(249,201,17)" fg:x="103674" fg:w="54"/><text x="37.9878%" y="655.50"></text></g><g><title>memmap2::MmapMut::make_exec (9,268 samples, 3.37%)</title><rect x="34.4082%" y="709" width="3.3736%" height="15" fill="rgb(219,208,6)" fg:x="94527" fg:w="9268"/><text x="34.6582%" y="719.50">mem..</text></g><g><title>memmap2::os::MmapInner::make_exec (9,158 samples, 3.33%)</title><rect x="34.4483%" y="693" width="3.3336%" height="15" fill="rgb(248,31,23)" fg:x="94637" fg:w="9158"/><text x="34.6983%" y="703.50">mem..</text></g><g><title>memmap2::os::MmapInner::mprotect (9,158 samples, 3.33%)</title><rect x="34.4483%" y="677" width="3.3336%" height="15" fill="rgb(245,15,42)" fg:x="94637" fg:w="9158"/><text x="34.6983%" y="687.50">mem..</text></g><g><title>memmap2::os::page_size (62 samples, 0.02%)</title><rect x="37.7593%" y="661" width="0.0226%" height="15" fill="rgb(222,217,39)" fg:x="103733" fg:w="62"/><text x="38.0093%" y="671.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (54 samples, 0.02%)</title><rect x="37.7622%" y="645" width="0.0197%" height="15" fill="rgb(210,219,27)" fg:x="103741" fg:w="54"/><text x="38.0122%" y="655.50"></text></g><g><title>core::sync::atomic::atomic_load (51 samples, 0.02%)</title><rect x="37.7633%" y="629" width="0.0186%" height="15" fill="rgb(252,166,36)" fg:x="103744" fg:w="51"/><text x="38.0133%" y="639.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map (92 samples, 0.03%)</title><rect x="37.7971%" y="677" width="0.0335%" height="15" fill="rgb(245,132,34)" fg:x="103837" fg:w="92"/><text x="38.0471%" y="687.50"></text></g><g><title>__GI___mmap64 (16,628 samples, 6.05%)</title><rect x="37.9227%" y="645" width="6.0527%" height="15" fill="rgb(236,54,3)" fg:x="104182" fg:w="16628"/><text x="38.1727%" y="655.50">__GI___m..</text></g><g><title>__GI___mmap64 (16,628 samples, 6.05%)</title><rect x="37.9227%" y="629" width="6.0527%" height="15" fill="rgb(241,173,43)" fg:x="104182" fg:w="16628"/><text x="38.1727%" y="639.50">__GI___m..</text></g><g><title>[unknown] (16,490 samples, 6.00%)</title><rect x="37.9729%" y="613" width="6.0024%" height="15" fill="rgb(215,190,9)" fg:x="104320" fg:w="16490"/><text x="38.2229%" y="623.50">[unknown]</text></g><g><title>[unknown] (16,296 samples, 5.93%)</title><rect x="38.0435%" y="597" width="5.9318%" height="15" fill="rgb(242,101,16)" fg:x="104514" fg:w="16296"/><text x="38.2935%" y="607.50">[unknown]</text></g><g><title>[unknown] (16,250 samples, 5.92%)</title><rect x="38.0603%" y="581" width="5.9151%" height="15" fill="rgb(223,190,21)" fg:x="104560" fg:w="16250"/><text x="38.3103%" y="591.50">[unknown]</text></g><g><title>[unknown] (16,201 samples, 5.90%)</title><rect x="38.0781%" y="565" width="5.8972%" height="15" fill="rgb(215,228,25)" fg:x="104609" fg:w="16201"/><text x="38.3281%" y="575.50">[unknow..</text></g><g><title>[unknown] (16,131 samples, 5.87%)</title><rect x="38.1036%" y="549" width="5.8718%" height="15" fill="rgb(225,36,22)" fg:x="104679" fg:w="16131"/><text x="38.3536%" y="559.50">[unknow..</text></g><g><title>[unknown] (16,038 samples, 5.84%)</title><rect x="38.1375%" y="533" width="5.8379%" height="15" fill="rgb(251,106,46)" fg:x="104772" fg:w="16038"/><text x="38.3875%" y="543.50">[unknow..</text></g><g><title>[unknown] (15,545 samples, 5.66%)</title><rect x="38.3169%" y="517" width="5.6584%" height="15" fill="rgb(208,90,1)" fg:x="105265" fg:w="15545"/><text x="38.5669%" y="527.50">[unknow..</text></g><g><title>[unknown] (15,124 samples, 5.51%)</title><rect x="38.4702%" y="501" width="5.5052%" height="15" fill="rgb(243,10,4)" fg:x="105686" fg:w="15124"/><text x="38.7202%" y="511.50">[unknow..</text></g><g><title>[unknown] (14,473 samples, 5.27%)</title><rect x="38.7071%" y="485" width="5.2682%" height="15" fill="rgb(212,137,27)" fg:x="106337" fg:w="14473"/><text x="38.9571%" y="495.50">[unkno..</text></g><g><title>[unknown] (13,427 samples, 4.89%)</title><rect x="39.0879%" y="469" width="4.8875%" height="15" fill="rgb(231,220,49)" fg:x="107383" fg:w="13427"/><text x="39.3379%" y="479.50">[unkno..</text></g><g><title>[unknown] (11,650 samples, 4.24%)</title><rect x="39.7347%" y="453" width="4.2407%" height="15" fill="rgb(237,96,20)" fg:x="109160" fg:w="11650"/><text x="39.9847%" y="463.50">[unkn..</text></g><g><title>[unknown] (7,350 samples, 2.68%)</title><rect x="41.2999%" y="437" width="2.6754%" height="15" fill="rgb(239,229,30)" fg:x="113460" fg:w="7350"/><text x="41.5499%" y="447.50">[u..</text></g><g><title>[unknown] (6,137 samples, 2.23%)</title><rect x="41.7415%" y="421" width="2.2339%" height="15" fill="rgb(219,65,33)" fg:x="114673" fg:w="6137"/><text x="41.9915%" y="431.50">[..</text></g><g><title>[unknown] (4,848 samples, 1.76%)</title><rect x="42.2107%" y="405" width="1.7647%" height="15" fill="rgb(243,134,7)" fg:x="115962" fg:w="4848"/><text x="42.4607%" y="415.50"></text></g><g><title>[unknown] (3,948 samples, 1.44%)</title><rect x="42.5383%" y="389" width="1.4371%" height="15" fill="rgb(216,177,54)" fg:x="116862" fg:w="3948"/><text x="42.7883%" y="399.50"></text></g><g><title>[unknown] (3,490 samples, 1.27%)</title><rect x="42.7050%" y="373" width="1.2704%" height="15" fill="rgb(211,160,20)" fg:x="117320" fg:w="3490"/><text x="42.9550%" y="383.50"></text></g><g><title>[unknown] (3,376 samples, 1.23%)</title><rect x="42.7465%" y="357" width="1.2289%" height="15" fill="rgb(239,85,39)" fg:x="117434" fg:w="3376"/><text x="42.9965%" y="367.50"></text></g><g><title>[unknown] (3,216 samples, 1.17%)</title><rect x="42.8047%" y="341" width="1.1706%" height="15" fill="rgb(232,125,22)" fg:x="117594" fg:w="3216"/><text x="43.0547%" y="351.50"></text></g><g><title>[unknown] (3,199 samples, 1.16%)</title><rect x="42.8109%" y="325" width="1.1644%" height="15" fill="rgb(244,57,34)" fg:x="117611" fg:w="3199"/><text x="43.0609%" y="335.50"></text></g><g><title>[unknown] (2,290 samples, 0.83%)</title><rect x="43.1418%" y="309" width="0.8336%" height="15" fill="rgb(214,203,32)" fg:x="118520" fg:w="2290"/><text x="43.3918%" y="319.50"></text></g><g><title>[unknown] (2,287 samples, 0.83%)</title><rect x="43.1429%" y="293" width="0.8325%" height="15" fill="rgb(207,58,43)" fg:x="118523" fg:w="2287"/><text x="43.3929%" y="303.50"></text></g><g><title>[unknown] (2,263 samples, 0.82%)</title><rect x="43.1516%" y="277" width="0.8237%" height="15" fill="rgb(215,193,15)" fg:x="118547" fg:w="2263"/><text x="43.4016%" y="287.50"></text></g><g><title>[unknown] (2,040 samples, 0.74%)</title><rect x="43.2328%" y="261" width="0.7426%" height="15" fill="rgb(232,15,44)" fg:x="118770" fg:w="2040"/><text x="43.4828%" y="271.50"></text></g><g><title>[unknown] (2,017 samples, 0.73%)</title><rect x="43.2412%" y="245" width="0.7342%" height="15" fill="rgb(212,3,48)" fg:x="118793" fg:w="2017"/><text x="43.4912%" y="255.50"></text></g><g><title>[unknown] (1,965 samples, 0.72%)</title><rect x="43.2601%" y="229" width="0.7153%" height="15" fill="rgb(218,128,7)" fg:x="118845" fg:w="1965"/><text x="43.5101%" y="239.50"></text></g><g><title>[unknown] (1,915 samples, 0.70%)</title><rect x="43.2783%" y="213" width="0.6971%" height="15" fill="rgb(226,216,39)" fg:x="118895" fg:w="1915"/><text x="43.5283%" y="223.50"></text></g><g><title>[unknown] (1,892 samples, 0.69%)</title><rect x="43.2867%" y="197" width="0.6887%" height="15" fill="rgb(243,47,51)" fg:x="118918" fg:w="1892"/><text x="43.5367%" y="207.50"></text></g><g><title>[unknown] (1,811 samples, 0.66%)</title><rect x="43.3162%" y="181" width="0.6592%" height="15" fill="rgb(241,183,40)" fg:x="118999" fg:w="1811"/><text x="43.5662%" y="191.50"></text></g><g><title>[unknown] (1,802 samples, 0.66%)</title><rect x="43.3194%" y="165" width="0.6559%" height="15" fill="rgb(231,217,32)" fg:x="119008" fg:w="1802"/><text x="43.5694%" y="175.50"></text></g><g><title>[unknown] (1,746 samples, 0.64%)</title><rect x="43.3398%" y="149" width="0.6356%" height="15" fill="rgb(229,61,38)" fg:x="119064" fg:w="1746"/><text x="43.5898%" y="159.50"></text></g><g><title>[unknown] (1,387 samples, 0.50%)</title><rect x="43.4705%" y="133" width="0.5049%" height="15" fill="rgb(225,210,5)" fg:x="119423" fg:w="1387"/><text x="43.7205%" y="143.50"></text></g><g><title>[unknown] (1,077 samples, 0.39%)</title><rect x="43.5833%" y="117" width="0.3920%" height="15" fill="rgb(231,79,45)" fg:x="119733" fg:w="1077"/><text x="43.8333%" y="127.50"></text></g><g><title>[unknown] (1,062 samples, 0.39%)</title><rect x="43.5888%" y="101" width="0.3866%" height="15" fill="rgb(224,100,7)" fg:x="119748" fg:w="1062"/><text x="43.8388%" y="111.50"></text></g><g><title>[unknown] (636 samples, 0.23%)</title><rect x="43.7439%" y="85" width="0.2315%" height="15" fill="rgb(241,198,18)" fg:x="120174" fg:w="636"/><text x="43.9939%" y="95.50"></text></g><g><title>[unknown] (519 samples, 0.19%)</title><rect x="43.7864%" y="69" width="0.1889%" height="15" fill="rgb(252,97,53)" fg:x="120291" fg:w="519"/><text x="44.0364%" y="79.50"></text></g><g><title>[unknown] (335 samples, 0.12%)</title><rect x="43.8534%" y="53" width="0.1219%" height="15" fill="rgb(220,88,7)" fg:x="120475" fg:w="335"/><text x="44.1034%" y="63.50"></text></g><g><title>[unknown] (28 samples, 0.01%)</title><rect x="43.9652%" y="37" width="0.0102%" height="15" fill="rgb(213,176,14)" fg:x="120782" fg:w="28"/><text x="44.2152%" y="47.50"></text></g><g><title>core::cmp::Ord::max (56 samples, 0.02%)</title><rect x="43.9754%" y="645" width="0.0204%" height="15" fill="rgb(246,73,7)" fg:x="120810" fg:w="56"/><text x="44.2254%" y="655.50"></text></g><g><title>core::cmp::max_by (56 samples, 0.02%)</title><rect x="43.9754%" y="629" width="0.0204%" height="15" fill="rgb(245,64,36)" fg:x="120810" fg:w="56"/><text x="44.2254%" y="639.50"></text></g><g><title>memmap2::MmapOptions::map_anon (17,107 samples, 6.23%)</title><rect x="37.7866%" y="693" width="6.2270%" height="15" fill="rgb(245,80,10)" fg:x="103808" fg:w="17107"/><text x="38.0366%" y="703.50">memmap2:..</text></g><g><title>memmap2::os::MmapInner::map_anon (16,986 samples, 6.18%)</title><rect x="37.8306%" y="677" width="6.1830%" height="15" fill="rgb(232,107,50)" fg:x="103929" fg:w="16986"/><text x="38.0806%" y="687.50">memmap2:..</text></g><g><title>memmap2::os::MmapInner::new (16,968 samples, 6.18%)</title><rect x="37.8372%" y="661" width="6.1764%" height="15" fill="rgb(253,3,0)" fg:x="103947" fg:w="16968"/><text x="38.0872%" y="671.50">memmap2:..</text></g><g><title>memmap2::os::page_size (36 samples, 0.01%)</title><rect x="44.0005%" y="645" width="0.0131%" height="15" fill="rgb(212,99,53)" fg:x="120879" fg:w="36"/><text x="44.2505%" y="655.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (29 samples, 0.01%)</title><rect x="44.0030%" y="629" width="0.0106%" height="15" fill="rgb(249,111,54)" fg:x="120886" fg:w="29"/><text x="44.2530%" y="639.50"></text></g><g><title>dynasmrt::mmap::ExecutableBuffer::new (26,549 samples, 9.66%)</title><rect x="34.3518%" y="725" width="9.6640%" height="15" fill="rgb(249,55,30)" fg:x="94372" fg:w="26549"/><text x="34.6018%" y="735.50">dynasmrt::mmap..</text></g><g><title>memmap2::MmapMut::map_anon (17,126 samples, 6.23%)</title><rect x="37.7818%" y="709" width="6.2339%" height="15" fill="rgb(237,47,42)" fg:x="103795" fg:w="17126"/><text x="38.0318%" y="719.50">memmap2:..</text></g><g><title>dynasmrt::components::MemoryManager::new (27,152 samples, 9.88%)</title><rect x="34.1698%" y="741" width="9.8834%" height="15" fill="rgb(211,20,18)" fg:x="93872" fg:w="27152"/><text x="34.4198%" y="751.50">dynasmrt::comp..</text></g><g><title>std::sync::rwlock::RwLock&lt;T&gt;::new (103 samples, 0.04%)</title><rect x="44.0158%" y="725" width="0.0375%" height="15" fill="rgb(231,203,46)" fg:x="120921" fg:w="103"/><text x="44.2658%" y="735.50"></text></g><g><title>dynasmrt::Assembler&lt;R&gt;::new (27,582 samples, 10.04%)</title><rect x="34.0198%" y="757" width="10.0400%" height="15" fill="rgb(237,142,3)" fg:x="93460" fg:w="27582"/><text x="34.2698%" y="767.50">dynasmrt::Assem..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::current_memory (38 samples, 0.01%)</title><rect x="44.0988%" y="613" width="0.0138%" height="15" fill="rgb(241,107,1)" fg:x="121149" fg:w="38"/><text x="44.3488%" y="623.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::set_ptr_and_cap (46 samples, 0.02%)</title><rect x="44.1126%" y="613" width="0.0167%" height="15" fill="rgb(229,83,13)" fg:x="121187" fg:w="46"/><text x="44.3626%" y="623.50"></text></g><g><title>_int_free (37 samples, 0.01%)</title><rect x="44.2149%" y="517" width="0.0135%" height="15" fill="rgb(241,91,40)" fg:x="121468" fg:w="37"/><text x="44.4649%" y="527.50"></text></g><g><title>_int_realloc (308 samples, 0.11%)</title><rect x="44.1905%" y="533" width="0.1121%" height="15" fill="rgb(225,3,45)" fg:x="121401" fg:w="308"/><text x="44.4405%" y="543.50"></text></g><g><title>_int_malloc (204 samples, 0.07%)</title><rect x="44.2283%" y="517" width="0.0743%" height="15" fill="rgb(244,223,14)" fg:x="121505" fg:w="204"/><text x="44.4783%" y="527.50"></text></g><g><title>__GI___libc_realloc (356 samples, 0.13%)</title><rect x="44.1770%" y="549" width="0.1296%" height="15" fill="rgb(224,124,37)" fg:x="121364" fg:w="356"/><text x="44.4270%" y="559.50"></text></g><g><title>alloc::alloc::realloc (361 samples, 0.13%)</title><rect x="44.1770%" y="565" width="0.1314%" height="15" fill="rgb(251,171,30)" fg:x="121364" fg:w="361"/><text x="44.4270%" y="575.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (512 samples, 0.19%)</title><rect x="44.1454%" y="597" width="0.1864%" height="15" fill="rgb(236,46,54)" fg:x="121277" fg:w="512"/><text x="44.3954%" y="607.50"></text></g><g><title>alloc::alloc::Global::grow_impl (505 samples, 0.18%)</title><rect x="44.1479%" y="581" width="0.1838%" height="15" fill="rgb(245,213,5)" fg:x="121284" fg:w="505"/><text x="44.3979%" y="591.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;[T]&gt;::slice_from_raw_parts (31 samples, 0.01%)</title><rect x="44.3204%" y="565" width="0.0113%" height="15" fill="rgb(230,144,27)" fg:x="121758" fg:w="31"/><text x="44.5704%" y="575.50"></text></g><g><title>core::ptr::slice_from_raw_parts_mut (28 samples, 0.01%)</title><rect x="44.3215%" y="549" width="0.0102%" height="15" fill="rgb(220,86,6)" fg:x="121761" fg:w="28"/><text x="44.5715%" y="559.50"></text></g><g><title>alloc::raw_vec::finish_grow (630 samples, 0.23%)</title><rect x="44.1293%" y="613" width="0.2293%" height="15" fill="rgb(240,20,13)" fg:x="121233" fg:w="630"/><text x="44.3793%" y="623.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map_err (49 samples, 0.02%)</title><rect x="44.3408%" y="597" width="0.0178%" height="15" fill="rgb(217,89,34)" fg:x="121814" fg:w="49"/><text x="44.5908%" y="607.50"></text></g><g><title>core::alloc::layout::Layout::array (140 samples, 0.05%)</title><rect x="44.3587%" y="613" width="0.0510%" height="15" fill="rgb(229,13,5)" fg:x="121863" fg:w="140"/><text x="44.6087%" y="623.50"></text></g><g><title>core::alloc::layout::Layout::array::inner (137 samples, 0.05%)</title><rect x="44.3598%" y="597" width="0.0499%" height="15" fill="rgb(244,67,35)" fg:x="121866" fg:w="137"/><text x="44.6098%" y="607.50"></text></g><g><title>core::cmp::max (160 samples, 0.06%)</title><rect x="44.4096%" y="613" width="0.0582%" height="15" fill="rgb(221,40,2)" fg:x="122003" fg:w="160"/><text x="44.6596%" y="623.50"></text></g><g><title>core::cmp::Ord::max (160 samples, 0.06%)</title><rect x="44.4096%" y="597" width="0.0582%" height="15" fill="rgb(237,157,21)" fg:x="122003" fg:w="160"/><text x="44.6596%" y="607.50"></text></g><g><title>core::cmp::max_by (151 samples, 0.05%)</title><rect x="44.4129%" y="581" width="0.0550%" height="15" fill="rgb(222,94,11)" fg:x="122012" fg:w="151"/><text x="44.6629%" y="591.50"></text></g><g><title>core::ops::function::FnOnce::call_once (47 samples, 0.02%)</title><rect x="44.4508%" y="565" width="0.0171%" height="15" fill="rgb(249,113,6)" fg:x="122116" fg:w="47"/><text x="44.7008%" y="575.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::Ord for usize&gt;::cmp (30 samples, 0.01%)</title><rect x="44.4569%" y="549" width="0.0109%" height="15" fill="rgb(238,137,36)" fg:x="122133" fg:w="30"/><text x="44.7069%" y="559.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (1,092 samples, 0.40%)</title><rect x="44.0827%" y="629" width="0.3975%" height="15" fill="rgb(210,102,26)" fg:x="121105" fg:w="1092"/><text x="44.3327%" y="639.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (1,144 samples, 0.42%)</title><rect x="44.0729%" y="677" width="0.4164%" height="15" fill="rgb(218,30,30)" fg:x="121078" fg:w="1144"/><text x="44.3229%" y="687.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (1,137 samples, 0.41%)</title><rect x="44.0755%" y="661" width="0.4139%" height="15" fill="rgb(214,67,26)" fg:x="121085" fg:w="1137"/><text x="44.3255%" y="671.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1,119 samples, 0.41%)</title><rect x="44.0820%" y="645" width="0.4073%" height="15" fill="rgb(251,9,53)" fg:x="121103" fg:w="1119"/><text x="44.3320%" y="655.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1,171 samples, 0.43%)</title><rect x="44.0700%" y="693" width="0.4262%" height="15" fill="rgb(228,204,25)" fg:x="121070" fg:w="1171"/><text x="44.3200%" y="703.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1,232 samples, 0.45%)</title><rect x="44.0693%" y="709" width="0.4485%" height="15" fill="rgb(207,153,8)" fg:x="121068" fg:w="1232"/><text x="44.3193%" y="719.50"></text></g><g><title>core::slice::iter::Iter&lt;T&gt;::as_slice (59 samples, 0.02%)</title><rect x="44.4963%" y="693" width="0.0215%" height="15" fill="rgb(242,9,16)" fg:x="122241" fg:w="59"/><text x="44.7463%" y="703.50"></text></g><g><title>core::slice::iter::Iter&lt;T&gt;::make_slice (57 samples, 0.02%)</title><rect x="44.4970%" y="677" width="0.0207%" height="15" fill="rgb(217,211,10)" fg:x="122243" fg:w="57"/><text x="44.7470%" y="687.50"></text></g><g><title>core::slice::raw::from_raw_parts (34 samples, 0.01%)</title><rect x="44.5054%" y="661" width="0.0124%" height="15" fill="rgb(219,228,52)" fg:x="122266" fg:w="34"/><text x="44.7554%" y="671.50"></text></g><g><title>core::ptr::slice_from_raw_parts (34 samples, 0.01%)</title><rect x="44.5054%" y="645" width="0.0124%" height="15" fill="rgb(231,92,29)" fg:x="122266" fg:w="34"/><text x="44.7554%" y="655.50"></text></g><g><title>core::ptr::metadata::from_raw_parts (34 samples, 0.01%)</title><rect x="44.5054%" y="629" width="0.0124%" height="15" fill="rgb(232,8,23)" fg:x="122266" fg:w="34"/><text x="44.7554%" y="639.50"></text></g><g><title>dynasmrt::DynasmApi::push_i32 (1,282 samples, 0.47%)</title><rect x="44.0598%" y="757" width="0.4667%" height="15" fill="rgb(216,211,34)" fg:x="121042" fg:w="1282"/><text x="44.3098%" y="767.50"></text></g><g><title>&lt;dynasmrt::Assembler&lt;R&gt; as core::iter::traits::collect::Extend&lt;&amp;u8&gt;&gt;::extend (1,263 samples, 0.46%)</title><rect x="44.0667%" y="741" width="0.4597%" height="15" fill="rgb(236,151,0)" fg:x="121061" fg:w="1263"/><text x="44.3167%" y="751.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::iter::traits::collect::Extend&lt;&amp;T&gt;&gt;::extend (1,261 samples, 0.46%)</title><rect x="44.0675%" y="725" width="0.4590%" height="15" fill="rgb(209,168,3)" fg:x="121063" fg:w="1261"/><text x="44.3175%" y="735.50"></text></g><g><title>dynasmrt::DynasmApi::push_i8 (90 samples, 0.03%)</title><rect x="44.5265%" y="757" width="0.0328%" height="15" fill="rgb(208,129,28)" fg:x="122324" fg:w="90"/><text x="44.7765%" y="767.50"></text></g><g><title>&lt;dynasmrt::Assembler&lt;R&gt; as dynasmrt::DynasmApi&gt;::push (83 samples, 0.03%)</title><rect x="44.5290%" y="741" width="0.0302%" height="15" fill="rgb(229,78,22)" fg:x="122331" fg:w="83"/><text x="44.7790%" y="751.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (72 samples, 0.03%)</title><rect x="44.5330%" y="725" width="0.0262%" height="15" fill="rgb(228,187,13)" fg:x="122342" fg:w="72"/><text x="44.7830%" y="735.50"></text></g><g><title>__memcpy_avx_unaligned_erms (40 samples, 0.01%)</title><rect x="44.5818%" y="693" width="0.0146%" height="15" fill="rgb(240,119,24)" fg:x="122476" fg:w="40"/><text x="44.8318%" y="703.50"></text></g><g><title>core::mem::replace (54 samples, 0.02%)</title><rect x="44.5774%" y="725" width="0.0197%" height="15" fill="rgb(209,194,42)" fg:x="122464" fg:w="54"/><text x="44.8274%" y="735.50"></text></g><g><title>core::ptr::write (42 samples, 0.02%)</title><rect x="44.5818%" y="709" width="0.0153%" height="15" fill="rgb(247,200,46)" fg:x="122476" fg:w="42"/><text x="44.8318%" y="719.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (105 samples, 0.04%)</title><rect x="44.6156%" y="645" width="0.0382%" height="15" fill="rgb(218,76,16)" fg:x="122569" fg:w="105"/><text x="44.8656%" y="655.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (31 samples, 0.01%)</title><rect x="44.6426%" y="629" width="0.0113%" height="15" fill="rgb(225,21,48)" fg:x="122643" fg:w="31"/><text x="44.8926%" y="639.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::finish (500 samples, 0.18%)</title><rect x="44.6091%" y="693" width="0.1820%" height="15" fill="rgb(239,223,50)" fg:x="122551" fg:w="500"/><text x="44.8591%" y="703.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (500 samples, 0.18%)</title><rect x="44.6091%" y="677" width="0.1820%" height="15" fill="rgb(244,45,21)" fg:x="122551" fg:w="500"/><text x="44.8591%" y="687.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (500 samples, 0.18%)</title><rect x="44.6091%" y="661" width="0.1820%" height="15" fill="rgb(232,33,43)" fg:x="122551" fg:w="500"/><text x="44.8591%" y="671.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (377 samples, 0.14%)</title><rect x="44.6539%" y="645" width="0.1372%" height="15" fill="rgb(209,8,3)" fg:x="122674" fg:w="377"/><text x="44.9039%" y="655.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (98 samples, 0.04%)</title><rect x="44.7554%" y="629" width="0.0357%" height="15" fill="rgb(214,25,53)" fg:x="122953" fg:w="98"/><text x="45.0054%" y="639.50"></text></g><g><title>__memcpy_avx_unaligned_erms (60 samples, 0.02%)</title><rect x="44.7947%" y="677" width="0.0218%" height="15" fill="rgb(254,186,54)" fg:x="123061" fg:w="60"/><text x="45.0447%" y="687.50"></text></g><g><title>__memcpy_avx_unaligned_erms (55 samples, 0.02%)</title><rect x="44.8173%" y="661" width="0.0200%" height="15" fill="rgb(208,174,49)" fg:x="123123" fg:w="55"/><text x="45.0673%" y="671.50"></text></g><g><title>__memcpy_avx_unaligned_erms (130 samples, 0.05%)</title><rect x="44.8421%" y="645" width="0.0473%" height="15" fill="rgb(233,191,51)" fg:x="123191" fg:w="130"/><text x="45.0921%" y="655.50"></text></g><g><title>&lt;std::collections::hash::map::RandomState as core::hash::BuildHasher&gt;::build_hasher (274 samples, 0.10%)</title><rect x="44.7911%" y="693" width="0.0997%" height="15" fill="rgb(222,134,10)" fg:x="123051" fg:w="274"/><text x="45.0411%" y="703.50"></text></g><g><title>core::hash::sip::SipHasher13::new_with_keys (202 samples, 0.07%)</title><rect x="44.8173%" y="677" width="0.0735%" height="15" fill="rgb(230,226,20)" fg:x="123123" fg:w="202"/><text x="45.0673%" y="687.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::new_with_keys (147 samples, 0.05%)</title><rect x="44.8373%" y="661" width="0.0535%" height="15" fill="rgb(251,111,25)" fg:x="123178" fg:w="147"/><text x="45.0873%" y="671.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (36 samples, 0.01%)</title><rect x="44.9607%" y="565" width="0.0131%" height="15" fill="rgb(224,40,46)" fg:x="123517" fg:w="36"/><text x="45.2107%" y="575.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (132 samples, 0.05%)</title><rect x="44.9269%" y="581" width="0.0480%" height="15" fill="rgb(236,108,47)" fg:x="123424" fg:w="132"/><text x="45.1769%" y="591.50"></text></g><g><title>core::hash::sip::u8to64_le (33 samples, 0.01%)</title><rect x="44.9749%" y="581" width="0.0120%" height="15" fill="rgb(234,93,0)" fg:x="123556" fg:w="33"/><text x="45.2249%" y="591.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (273 samples, 0.10%)</title><rect x="44.8974%" y="629" width="0.0994%" height="15" fill="rgb(224,213,32)" fg:x="123343" fg:w="273"/><text x="45.1474%" y="639.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (266 samples, 0.10%)</title><rect x="44.8999%" y="613" width="0.0968%" height="15" fill="rgb(251,11,48)" fg:x="123350" fg:w="266"/><text x="45.1499%" y="623.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (266 samples, 0.10%)</title><rect x="44.8999%" y="597" width="0.0968%" height="15" fill="rgb(236,173,5)" fg:x="123350" fg:w="266"/><text x="45.1499%" y="607.50"></text></g><g><title>hashbrown::map::make_hash (1,099 samples, 0.40%)</title><rect x="44.5978%" y="725" width="0.4000%" height="15" fill="rgb(230,95,12)" fg:x="122520" fg:w="1099"/><text x="44.8478%" y="735.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1,087 samples, 0.40%)</title><rect x="44.6022%" y="709" width="0.3957%" height="15" fill="rgb(232,209,1)" fg:x="122532" fg:w="1087"/><text x="44.8522%" y="719.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (294 samples, 0.11%)</title><rect x="44.8908%" y="693" width="0.1070%" height="15" fill="rgb(232,6,1)" fg:x="123325" fg:w="294"/><text x="45.1408%" y="703.50"></text></g><g><title>&lt;coldbrew::runtime::ProgramCounter as core::hash::Hash&gt;::hash (290 samples, 0.11%)</title><rect x="44.8923%" y="677" width="0.1056%" height="15" fill="rgb(210,224,50)" fg:x="123329" fg:w="290"/><text x="45.1423%" y="687.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for usize&gt;::hash (287 samples, 0.10%)</title><rect x="44.8934%" y="661" width="0.1045%" height="15" fill="rgb(228,127,35)" fg:x="123332" fg:w="287"/><text x="45.1434%" y="671.50"></text></g><g><title>core::hash::Hasher::write_usize (276 samples, 0.10%)</title><rect x="44.8974%" y="645" width="0.1005%" height="15" fill="rgb(245,102,45)" fg:x="123343" fg:w="276"/><text x="45.1474%" y="655.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::bucket (31 samples, 0.01%)</title><rect x="45.0157%" y="709" width="0.0113%" height="15" fill="rgb(214,1,49)" fg:x="123668" fg:w="31"/><text x="45.2657%" y="719.50"></text></g><g><title>core::num::nonzero::NonZeroU16::new (32 samples, 0.01%)</title><rect x="45.1165%" y="661" width="0.0116%" height="15" fill="rgb(226,163,40)" fg:x="123945" fg:w="32"/><text x="45.3665%" y="671.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (100 samples, 0.04%)</title><rect x="45.1027%" y="677" width="0.0364%" height="15" fill="rgb(239,212,28)" fg:x="123907" fg:w="100"/><text x="45.3527%" y="687.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::nonzero_trailing_zeros (30 samples, 0.01%)</title><rect x="45.1282%" y="661" width="0.0109%" height="15" fill="rgb(220,20,13)" fg:x="123977" fg:w="30"/><text x="45.3782%" y="671.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (161 samples, 0.06%)</title><rect x="45.0812%" y="693" width="0.0586%" height="15" fill="rgb(210,164,35)" fg:x="123848" fg:w="161"/><text x="45.3312%" y="703.50"></text></g><g><title>hashbrown::map::equivalent_key::{{closure}} (104 samples, 0.04%)</title><rect x="45.1460%" y="677" width="0.0379%" height="15" fill="rgb(248,109,41)" fg:x="124026" fg:w="104"/><text x="45.3960%" y="687.50"></text></g><g><title>&lt;Q as hashbrown::Equivalent&lt;K&gt;&gt;::equivalent (98 samples, 0.04%)</title><rect x="45.1482%" y="661" width="0.0357%" height="15" fill="rgb(238,23,50)" fg:x="124032" fg:w="98"/><text x="45.3982%" y="671.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (76 samples, 0.03%)</title><rect x="45.1562%" y="645" width="0.0277%" height="15" fill="rgb(211,48,49)" fg:x="124054" fg:w="76"/><text x="45.4062%" y="655.50"></text></g><g><title>&lt;coldbrew::runtime::ProgramCounter as core::cmp::PartialEq&gt;::eq (75 samples, 0.03%)</title><rect x="45.1566%" y="629" width="0.0273%" height="15" fill="rgb(223,36,21)" fg:x="124055" fg:w="75"/><text x="45.4066%" y="639.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ref (36 samples, 0.01%)</title><rect x="45.1839%" y="677" width="0.0131%" height="15" fill="rgb(207,123,46)" fg:x="124130" fg:w="36"/><text x="45.4339%" y="687.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::from_base_index (59 samples, 0.02%)</title><rect x="45.1984%" y="661" width="0.0215%" height="15" fill="rgb(240,218,32)" fg:x="124170" fg:w="59"/><text x="45.4484%" y="671.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find_or_find_insert_slot::{{closure}} (223 samples, 0.08%)</title><rect x="45.1398%" y="693" width="0.0812%" height="15" fill="rgb(252,5,43)" fg:x="124009" fg:w="223"/><text x="45.3898%" y="703.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::bucket (66 samples, 0.02%)</title><rect x="45.1970%" y="677" width="0.0240%" height="15" fill="rgb(252,84,19)" fg:x="124166" fg:w="66"/><text x="45.4470%" y="687.50"></text></g><g><title>hashbrown::raw::sse2::Group::load (149 samples, 0.05%)</title><rect x="45.2250%" y="693" width="0.0542%" height="15" fill="rgb(243,152,39)" fg:x="124243" fg:w="149"/><text x="45.4750%" y="703.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (136 samples, 0.05%)</title><rect x="45.2297%" y="677" width="0.0495%" height="15" fill="rgb(234,160,15)" fg:x="124256" fg:w="136"/><text x="45.4797%" y="687.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_cmpeq_epi8 (45 samples, 0.02%)</title><rect x="45.2985%" y="677" width="0.0164%" height="15" fill="rgb(237,34,20)" fg:x="124445" fg:w="45"/><text x="45.5485%" y="687.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (126 samples, 0.05%)</title><rect x="45.3149%" y="677" width="0.0459%" height="15" fill="rgb(229,97,13)" fg:x="124490" fg:w="126"/><text x="45.5649%" y="687.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::insert (2,289 samples, 0.83%)</title><rect x="44.5592%" y="757" width="0.8332%" height="15" fill="rgb(234,71,50)" fg:x="122414" fg:w="2289"/><text x="44.8092%" y="767.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (2,286 samples, 0.83%)</title><rect x="44.5603%" y="741" width="0.8321%" height="15" fill="rgb(253,155,4)" fg:x="122417" fg:w="2286"/><text x="44.8103%" y="751.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find_or_find_insert_slot (1,062 samples, 0.39%)</title><rect x="45.0059%" y="725" width="0.3866%" height="15" fill="rgb(222,185,37)" fg:x="123641" fg:w="1062"/><text x="45.2559%" y="735.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::find_or_find_insert_slot_inner (981 samples, 0.36%)</title><rect x="45.0353%" y="709" width="0.3571%" height="15" fill="rgb(251,177,13)" fg:x="123722" fg:w="981"/><text x="45.2853%" y="719.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (311 samples, 0.11%)</title><rect x="45.2792%" y="693" width="0.1132%" height="15" fill="rgb(250,179,40)" fg:x="124392" fg:w="311"/><text x="45.5292%" y="703.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_set1_epi8 (87 samples, 0.03%)</title><rect x="45.3608%" y="677" width="0.0317%" height="15" fill="rgb(242,44,2)" fg:x="124616" fg:w="87"/><text x="45.6108%" y="687.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_set_epi8 (87 samples, 0.03%)</title><rect x="45.3608%" y="661" width="0.0317%" height="15" fill="rgb(216,177,13)" fg:x="124616" fg:w="87"/><text x="45.6108%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::io::stdio::StdoutLock&gt; (277 samples, 0.10%)</title><rect x="45.4055%" y="693" width="0.1008%" height="15" fill="rgb(216,106,43)" fg:x="124739" fg:w="277"/><text x="45.6555%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::remutex::ReentrantMutexGuard&lt;core::cell::RefCell&lt;std::io::buffered::linewriter::LineWriter&lt;std::io::stdio::StdoutRaw&gt;&gt;&gt;&gt; (277 samples, 0.10%)</title><rect x="45.4055%" y="677" width="0.1008%" height="15" fill="rgb(216,183,2)" fg:x="124739" fg:w="277"/><text x="45.6555%" y="687.50"></text></g><g><title>&lt;std::sync::remutex::ReentrantMutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (277 samples, 0.10%)</title><rect x="45.4055%" y="661" width="0.1008%" height="15" fill="rgb(249,75,3)" fg:x="124739" fg:w="277"/><text x="45.6555%" y="671.50"></text></g><g><title>std::sys::unix::locks::futex_mutex::Mutex::unlock (241 samples, 0.09%)</title><rect x="45.4186%" y="645" width="0.0877%" height="15" fill="rgb(219,67,39)" fg:x="124775" fg:w="241"/><text x="45.6686%" y="655.50"></text></g><g><title>core::sync::atomic::AtomicU32::swap (228 samples, 0.08%)</title><rect x="45.4234%" y="629" width="0.0830%" height="15" fill="rgb(253,228,2)" fg:x="124788" fg:w="228"/><text x="45.6734%" y="639.50"></text></g><g><title>core::sync::atomic::atomic_swap (228 samples, 0.08%)</title><rect x="45.4234%" y="613" width="0.0830%" height="15" fill="rgb(235,138,27)" fg:x="124788" fg:w="228"/><text x="45.6734%" y="623.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (33 samples, 0.01%)</title><rect x="45.5413%" y="661" width="0.0120%" height="15" fill="rgb(236,97,51)" fg:x="125112" fg:w="33"/><text x="45.7913%" y="671.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::capacity (49 samples, 0.02%)</title><rect x="45.5868%" y="565" width="0.0178%" height="15" fill="rgb(240,80,30)" fg:x="125237" fg:w="49"/><text x="45.8368%" y="575.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::capacity (49 samples, 0.02%)</title><rect x="45.5868%" y="549" width="0.0178%" height="15" fill="rgb(230,178,19)" fg:x="125237" fg:w="49"/><text x="45.8368%" y="559.50"></text></g><g><title>std::io::buffered::bufwriter::BufWriter&lt;W&gt;::spare_capacity (64 samples, 0.02%)</title><rect x="45.5828%" y="581" width="0.0233%" height="15" fill="rgb(210,190,27)" fg:x="125226" fg:w="64"/><text x="45.8328%" y="591.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::set_len (85 samples, 0.03%)</title><rect x="45.6123%" y="565" width="0.0309%" height="15" fill="rgb(222,107,31)" fg:x="125307" fg:w="85"/><text x="45.8623%" y="575.50"></text></g><g><title>&lt;std::io::stdio::StdoutRaw as std::io::Write&gt;::write_all (91 samples, 0.03%)</title><rect x="45.6494%" y="549" width="0.0331%" height="15" fill="rgb(216,127,34)" fg:x="125409" fg:w="91"/><text x="45.8994%" y="559.50"></text></g><g><title>std::io::Write::write_all (91 samples, 0.03%)</title><rect x="45.6494%" y="533" width="0.0331%" height="15" fill="rgb(234,116,52)" fg:x="125409" fg:w="91"/><text x="45.8994%" y="543.50"></text></g><g><title>&lt;std::sys::unix::stdio::Stdout as std::io::Write&gt;::write (91 samples, 0.03%)</title><rect x="45.6494%" y="517" width="0.0331%" height="15" fill="rgb(222,124,15)" fg:x="125409" fg:w="91"/><text x="45.8994%" y="527.50"></text></g><g><title>std::sys::unix::fd::FileDesc::write (91 samples, 0.03%)</title><rect x="45.6494%" y="501" width="0.0331%" height="15" fill="rgb(231,179,28)" fg:x="125409" fg:w="91"/><text x="45.8994%" y="511.50"></text></g><g><title>__GI___libc_write (91 samples, 0.03%)</title><rect x="45.6494%" y="485" width="0.0331%" height="15" fill="rgb(226,93,45)" fg:x="125409" fg:w="91"/><text x="45.8994%" y="495.50"></text></g><g><title>[unknown] (91 samples, 0.03%)</title><rect x="45.6494%" y="469" width="0.0331%" height="15" fill="rgb(215,8,51)" fg:x="125409" fg:w="91"/><text x="45.8994%" y="479.50"></text></g><g><title>&lt;std::io::buffered::bufwriter::BufWriter&lt;W&gt; as std::io::Write&gt;::write_all (357 samples, 0.13%)</title><rect x="45.5766%" y="597" width="0.1299%" height="15" fill="rgb(223,106,5)" fg:x="125209" fg:w="357"/><text x="45.8266%" y="607.50"></text></g><g><title>std::io::buffered::bufwriter::BufWriter&lt;W&gt;::write_to_buffer_unchecked (276 samples, 0.10%)</title><rect x="45.6061%" y="581" width="0.1005%" height="15" fill="rgb(250,191,5)" fg:x="125290" fg:w="276"/><text x="45.8561%" y="591.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (174 samples, 0.06%)</title><rect x="45.6432%" y="565" width="0.0633%" height="15" fill="rgb(242,132,44)" fg:x="125392" fg:w="174"/><text x="45.8932%" y="575.50"></text></g><g><title>__memcpy_avx_unaligned_erms (66 samples, 0.02%)</title><rect x="45.6825%" y="549" width="0.0240%" height="15" fill="rgb(251,152,29)" fg:x="125500" fg:w="66"/><text x="45.9325%" y="559.50"></text></g><g><title>__GI___libc_write (19,171 samples, 6.98%)</title><rect x="45.7124%" y="533" width="6.9783%" height="15" fill="rgb(218,179,5)" fg:x="125582" fg:w="19171"/><text x="45.9624%" y="543.50">__GI___li..</text></g><g><title>[unknown] (18,923 samples, 6.89%)</title><rect x="45.8027%" y="517" width="6.8881%" height="15" fill="rgb(227,67,19)" fg:x="125830" fg:w="18923"/><text x="46.0527%" y="527.50">[unknown]</text></g><g><title>[unknown] (18,578 samples, 6.76%)</title><rect x="45.9282%" y="501" width="6.7625%" height="15" fill="rgb(233,119,31)" fg:x="126175" fg:w="18578"/><text x="46.1782%" y="511.50">[unknown]</text></g><g><title>[unknown] (18,511 samples, 6.74%)</title><rect x="45.9526%" y="485" width="6.7381%" height="15" fill="rgb(241,120,22)" fg:x="126242" fg:w="18511"/><text x="46.2026%" y="495.50">[unknown]</text></g><g><title>[unknown] (18,399 samples, 6.70%)</title><rect x="45.9934%" y="469" width="6.6973%" height="15" fill="rgb(224,102,30)" fg:x="126354" fg:w="18399"/><text x="46.2434%" y="479.50">[unknown]</text></g><g><title>[unknown] (18,117 samples, 6.59%)</title><rect x="46.0961%" y="453" width="6.5947%" height="15" fill="rgb(210,164,37)" fg:x="126636" fg:w="18117"/><text x="46.3461%" y="463.50">[unknown]</text></g><g><title>[unknown] (17,789 samples, 6.48%)</title><rect x="46.2154%" y="437" width="6.4753%" height="15" fill="rgb(226,191,16)" fg:x="126964" fg:w="17789"/><text x="46.4654%" y="447.50">[unknown]</text></g><g><title>[unknown] (17,405 samples, 6.34%)</title><rect x="46.3552%" y="421" width="6.3355%" height="15" fill="rgb(214,40,45)" fg:x="127348" fg:w="17405"/><text x="46.6052%" y="431.50">[unknown]</text></g><g><title>[unknown] (17,038 samples, 6.20%)</title><rect x="46.4888%" y="405" width="6.2019%" height="15" fill="rgb(244,29,26)" fg:x="127715" fg:w="17038"/><text x="46.7388%" y="415.50">[unknown]</text></g><g><title>[unknown] (16,352 samples, 5.95%)</title><rect x="46.7385%" y="389" width="5.9522%" height="15" fill="rgb(216,16,5)" fg:x="128401" fg:w="16352"/><text x="46.9885%" y="399.50">[unknown]</text></g><g><title>[unknown] (15,077 samples, 5.49%)</title><rect x="47.2026%" y="373" width="5.4881%" height="15" fill="rgb(249,76,35)" fg:x="129676" fg:w="15077"/><text x="47.4526%" y="383.50">[unknow..</text></g><g><title>[unknown] (12,999 samples, 4.73%)</title><rect x="47.9590%" y="357" width="4.7317%" height="15" fill="rgb(207,11,44)" fg:x="131754" fg:w="12999"/><text x="48.2090%" y="367.50">[unkno..</text></g><g><title>[unknown] (12,334 samples, 4.49%)</title><rect x="48.2011%" y="341" width="4.4896%" height="15" fill="rgb(228,190,49)" fg:x="132419" fg:w="12334"/><text x="48.4511%" y="351.50">[unkn..</text></g><g><title>[unknown] (10,366 samples, 3.77%)</title><rect x="48.9175%" y="325" width="3.7733%" height="15" fill="rgb(214,173,12)" fg:x="134387" fg:w="10366"/><text x="49.1675%" y="335.50">[unk..</text></g><g><title>[unknown] (8,687 samples, 3.16%)</title><rect x="49.5286%" y="309" width="3.1621%" height="15" fill="rgb(218,26,35)" fg:x="136066" fg:w="8687"/><text x="49.7786%" y="319.50">[un..</text></g><g><title>[unknown] (4,408 samples, 1.60%)</title><rect x="51.0862%" y="293" width="1.6045%" height="15" fill="rgb(220,200,19)" fg:x="140345" fg:w="4408"/><text x="51.3362%" y="303.50"></text></g><g><title>[unknown] (3,906 samples, 1.42%)</title><rect x="51.2689%" y="277" width="1.4218%" height="15" fill="rgb(239,95,49)" fg:x="140847" fg:w="3906"/><text x="51.5189%" y="287.50"></text></g><g><title>[unknown] (2,763 samples, 1.01%)</title><rect x="51.6850%" y="261" width="1.0057%" height="15" fill="rgb(235,85,53)" fg:x="141990" fg:w="2763"/><text x="51.9350%" y="271.50"></text></g><g><title>[unknown] (2,235 samples, 0.81%)</title><rect x="51.8772%" y="245" width="0.8135%" height="15" fill="rgb(233,133,31)" fg:x="142518" fg:w="2235"/><text x="52.1272%" y="255.50"></text></g><g><title>[unknown] (1,135 samples, 0.41%)</title><rect x="52.2776%" y="229" width="0.4131%" height="15" fill="rgb(218,25,20)" fg:x="143618" fg:w="1135"/><text x="52.5276%" y="239.50"></text></g><g><title>[unknown] (170 samples, 0.06%)</title><rect x="52.6288%" y="213" width="0.0619%" height="15" fill="rgb(252,210,38)" fg:x="144583" fg:w="170"/><text x="52.8788%" y="223.50"></text></g><g><title>[unknown] (79 samples, 0.03%)</title><rect x="52.6620%" y="197" width="0.0288%" height="15" fill="rgb(242,134,21)" fg:x="144674" fg:w="79"/><text x="52.9120%" y="207.50"></text></g><g><title>[unknown] (59 samples, 0.02%)</title><rect x="52.6692%" y="181" width="0.0215%" height="15" fill="rgb(213,28,48)" fg:x="144694" fg:w="59"/><text x="52.9192%" y="191.50"></text></g><g><title>&lt;std::sys::unix::stdio::Stdout as std::io::Write&gt;::write (19,304 samples, 7.03%)</title><rect x="45.7124%" y="565" width="7.0267%" height="15" fill="rgb(250,196,2)" fg:x="125582" fg:w="19304"/><text x="45.9624%" y="575.50">&lt;std::sys..</text></g><g><title>std::sys::unix::fd::FileDesc::write (19,304 samples, 7.03%)</title><rect x="45.7124%" y="549" width="7.0267%" height="15" fill="rgb(227,5,17)" fg:x="125582" fg:w="19304"/><text x="45.9624%" y="559.50">std::sys:..</text></g><g><title>std::sys::unix::cvt (123 samples, 0.04%)</title><rect x="52.6944%" y="533" width="0.0448%" height="15" fill="rgb(221,226,24)" fg:x="144763" fg:w="123"/><text x="52.9444%" y="543.50"></text></g><g><title>&lt;std::io::stdio::StdoutRaw as std::io::Write&gt;::write_all (19,337 samples, 7.04%)</title><rect x="45.7091%" y="597" width="7.0388%" height="15" fill="rgb(211,5,48)" fg:x="125573" fg:w="19337"/><text x="45.9591%" y="607.50">&lt;std::io:..</text></g><g><title>std::io::Write::write_all (19,328 samples, 7.04%)</title><rect x="45.7124%" y="581" width="7.0355%" height="15" fill="rgb(219,150,6)" fg:x="125582" fg:w="19328"/><text x="45.9624%" y="591.50">std::io::..</text></g><g><title>__GI___libc_write (17,084 samples, 6.22%)</title><rect x="52.7777%" y="533" width="6.2187%" height="15" fill="rgb(251,46,16)" fg:x="144992" fg:w="17084"/><text x="53.0277%" y="543.50">__GI___l..</text></g><g><title>[unknown] (16,847 samples, 6.13%)</title><rect x="52.8640%" y="517" width="6.1324%" height="15" fill="rgb(220,204,40)" fg:x="145229" fg:w="16847"/><text x="53.1140%" y="527.50">[unknown]</text></g><g><title>[unknown] (16,483 samples, 6.00%)</title><rect x="52.9965%" y="501" width="5.9999%" height="15" fill="rgb(211,85,2)" fg:x="145593" fg:w="16483"/><text x="53.2465%" y="511.50">[unknown]</text></g><g><title>[unknown] (16,383 samples, 5.96%)</title><rect x="53.0329%" y="485" width="5.9635%" height="15" fill="rgb(229,17,7)" fg:x="145693" fg:w="16383"/><text x="53.2829%" y="495.50">[unknown]</text></g><g><title>[unknown] (16,275 samples, 5.92%)</title><rect x="53.0722%" y="469" width="5.9242%" height="15" fill="rgb(239,72,28)" fg:x="145801" fg:w="16275"/><text x="53.3222%" y="479.50">[unknown]</text></g><g><title>[unknown] (15,990 samples, 5.82%)</title><rect x="53.1759%" y="453" width="5.8204%" height="15" fill="rgb(230,47,54)" fg:x="146086" fg:w="15990"/><text x="53.4259%" y="463.50">[unknow..</text></g><g><title>[unknown] (15,715 samples, 5.72%)</title><rect x="53.2760%" y="437" width="5.7203%" height="15" fill="rgb(214,50,8)" fg:x="146361" fg:w="15715"/><text x="53.5260%" y="447.50">[unknow..</text></g><g><title>[unknown] (15,535 samples, 5.65%)</title><rect x="53.3416%" y="421" width="5.6548%" height="15" fill="rgb(216,198,43)" fg:x="146541" fg:w="15535"/><text x="53.5916%" y="431.50">[unknow..</text></g><g><title>[unknown] (15,357 samples, 5.59%)</title><rect x="53.4064%" y="405" width="5.5900%" height="15" fill="rgb(234,20,35)" fg:x="146719" fg:w="15357"/><text x="53.6564%" y="415.50">[unknow..</text></g><g><title>[unknown] (14,779 samples, 5.38%)</title><rect x="53.6167%" y="389" width="5.3796%" height="15" fill="rgb(254,45,19)" fg:x="147297" fg:w="14779"/><text x="53.8667%" y="399.50">[unknow..</text></g><g><title>[unknown] (13,567 samples, 4.94%)</title><rect x="54.0579%" y="373" width="4.9384%" height="15" fill="rgb(219,14,44)" fg:x="148509" fg:w="13567"/><text x="54.3079%" y="383.50">[unkno..</text></g><g><title>[unknown] (11,472 samples, 4.18%)</title><rect x="54.8205%" y="357" width="4.1759%" height="15" fill="rgb(217,220,26)" fg:x="150604" fg:w="11472"/><text x="55.0705%" y="367.50">[unkn..</text></g><g><title>[unknown] (10,800 samples, 3.93%)</title><rect x="55.0651%" y="341" width="3.9312%" height="15" fill="rgb(213,158,28)" fg:x="151276" fg:w="10800"/><text x="55.3151%" y="351.50">[unk..</text></g><g><title>[unknown] (9,620 samples, 3.50%)</title><rect x="55.4946%" y="325" width="3.5017%" height="15" fill="rgb(252,51,52)" fg:x="152456" fg:w="9620"/><text x="55.7446%" y="335.50">[un..</text></g><g><title>[unknown] (7,287 samples, 2.65%)</title><rect x="56.3439%" y="309" width="2.6525%" height="15" fill="rgb(246,89,16)" fg:x="154789" fg:w="7287"/><text x="56.5939%" y="319.50">[u..</text></g><g><title>[unknown] (3,618 samples, 1.32%)</title><rect x="57.6794%" y="293" width="1.3170%" height="15" fill="rgb(216,158,49)" fg:x="158458" fg:w="3618"/><text x="57.9294%" y="303.50"></text></g><g><title>[unknown] (3,527 samples, 1.28%)</title><rect x="57.7125%" y="277" width="1.2838%" height="15" fill="rgb(236,107,19)" fg:x="158549" fg:w="3527"/><text x="57.9625%" y="287.50"></text></g><g><title>[unknown] (2,213 samples, 0.81%)</title><rect x="58.1908%" y="261" width="0.8055%" height="15" fill="rgb(228,185,30)" fg:x="159863" fg:w="2213"/><text x="58.4408%" y="271.50"></text></g><g><title>[unknown] (1,732 samples, 0.63%)</title><rect x="58.3659%" y="245" width="0.6305%" height="15" fill="rgb(246,134,8)" fg:x="160344" fg:w="1732"/><text x="58.6159%" y="255.50"></text></g><g><title>[unknown] (803 samples, 0.29%)</title><rect x="58.7041%" y="229" width="0.2923%" height="15" fill="rgb(214,143,50)" fg:x="161273" fg:w="803"/><text x="58.9541%" y="239.50"></text></g><g><title>[unknown] (436 samples, 0.16%)</title><rect x="58.8377%" y="213" width="0.1587%" height="15" fill="rgb(228,75,8)" fg:x="161640" fg:w="436"/><text x="59.0877%" y="223.50"></text></g><g><title>[unknown] (375 samples, 0.14%)</title><rect x="58.8599%" y="197" width="0.1365%" height="15" fill="rgb(207,175,4)" fg:x="161701" fg:w="375"/><text x="59.1099%" y="207.50"></text></g><g><title>[unknown] (287 samples, 0.10%)</title><rect x="58.8919%" y="181" width="0.1045%" height="15" fill="rgb(205,108,24)" fg:x="161789" fg:w="287"/><text x="59.1419%" y="191.50"></text></g><g><title>&lt;std::io::stdio::StdoutRaw as std::io::Write&gt;::write (17,170 samples, 6.25%)</title><rect x="52.7777%" y="581" width="6.2500%" height="15" fill="rgb(244,120,49)" fg:x="144992" fg:w="17170"/><text x="53.0277%" y="591.50">&lt;std::io..</text></g><g><title>&lt;std::sys::unix::stdio::Stdout as std::io::Write&gt;::write (17,170 samples, 6.25%)</title><rect x="52.7777%" y="565" width="6.2500%" height="15" fill="rgb(223,47,38)" fg:x="144992" fg:w="17170"/><text x="53.0277%" y="575.50">&lt;std::sy..</text></g><g><title>std::sys::unix::fd::FileDesc::write (17,170 samples, 6.25%)</title><rect x="52.7777%" y="549" width="6.2500%" height="15" fill="rgb(229,179,11)" fg:x="144992" fg:w="17170"/><text x="53.0277%" y="559.50">std::sys..</text></g><g><title>std::sys::unix::cvt (85 samples, 0.03%)</title><rect x="58.9967%" y="533" width="0.0309%" height="15" fill="rgb(231,122,1)" fg:x="162077" fg:w="85"/><text x="59.2467%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::io::buffered::bufwriter::BufWriter&lt;W&gt;::flush_buf::BufGuard&gt; (45 samples, 0.02%)</title><rect x="59.0277%" y="581" width="0.0164%" height="15" fill="rgb(245,119,9)" fg:x="162162" fg:w="45"/><text x="59.2777%" y="591.50"></text></g><g><title>std::io::buffered::bufwriter::BufWriter&lt;W&gt;::flush_buf (17,306 samples, 6.30%)</title><rect x="52.7479%" y="597" width="6.2995%" height="15" fill="rgb(241,163,25)" fg:x="144910" fg:w="17306"/><text x="52.9979%" y="607.50">std::io:..</text></g><g><title>&lt;std::io::buffered::linewritershim::LineWriterShim&lt;W&gt; as std::io::Write&gt;::write_all (37,182 samples, 13.53%)</title><rect x="45.5697%" y="613" width="13.5344%" height="15" fill="rgb(217,214,3)" fg:x="125190" fg:w="37182"/><text x="45.8197%" y="623.50">&lt;std::io::buffered::..</text></g><g><title>std::sys_common::memchr::memrchr (149 samples, 0.05%)</title><rect x="59.0499%" y="597" width="0.0542%" height="15" fill="rgb(240,86,28)" fg:x="162223" fg:w="149"/><text x="59.2999%" y="607.50"></text></g><g><title>std::sys::unix::memchr::memrchr (149 samples, 0.05%)</title><rect x="59.0499%" y="581" width="0.0542%" height="15" fill="rgb(215,47,9)" fg:x="162223" fg:w="149"/><text x="59.2999%" y="591.50"></text></g><g><title>std::sys::unix::memchr::memrchr::memrchr_specific (149 samples, 0.05%)</title><rect x="59.0499%" y="565" width="0.0542%" height="15" fill="rgb(252,25,45)" fg:x="162223" fg:w="149"/><text x="59.2999%" y="575.50"></text></g><g><title>__memrchr_avx2 (116 samples, 0.04%)</title><rect x="59.0619%" y="549" width="0.0422%" height="15" fill="rgb(251,164,9)" fg:x="162256" fg:w="116"/><text x="59.3119%" y="559.50"></text></g><g><title>&lt;std::io::buffered::linewriter::LineWriter&lt;W&gt; as std::io::Write&gt;::write_all (37,237 samples, 13.55%)</title><rect x="45.5697%" y="629" width="13.5544%" height="15" fill="rgb(233,194,0)" fg:x="125190" fg:w="37237"/><text x="45.8197%" y="639.50">&lt;std::io::buffered::..</text></g><g><title>&lt;std::io::stdio::StdoutLock as std::io::Write&gt;::write_all (55 samples, 0.02%)</title><rect x="59.1041%" y="613" width="0.0200%" height="15" fill="rgb(249,111,24)" fg:x="162372" fg:w="55"/><text x="59.3541%" y="623.50"></text></g><g><title>&lt;std::io::Write::write_fmt::Adapter&lt;T&gt; as core::fmt::Write&gt;::write_str (37,345 samples, 13.59%)</title><rect x="45.5533%" y="661" width="13.5937%" height="15" fill="rgb(250,223,3)" fg:x="125145" fg:w="37345"/><text x="45.8033%" y="671.50">&lt;std::io::Write::writ..</text></g><g><title>&lt;std::io::stdio::StdoutLock as std::io::Write&gt;::write_all (37,313 samples, 13.58%)</title><rect x="45.5650%" y="645" width="13.5821%" height="15" fill="rgb(236,178,37)" fg:x="125177" fg:w="37313"/><text x="45.8150%" y="655.50">&lt;std::io::stdio::Stdo..</text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefMut&lt;std::io::buffered::linewriter::LineWriter&lt;std::io::stdio::StdoutRaw&gt;&gt;&gt; (42 samples, 0.02%)</title><rect x="59.1318%" y="629" width="0.0153%" height="15" fill="rgb(241,158,50)" fg:x="162448" fg:w="42"/><text x="59.3818%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::BorrowRefMut&gt; (42 samples, 0.02%)</title><rect x="59.1318%" y="613" width="0.0153%" height="15" fill="rgb(213,121,41)" fg:x="162448" fg:w="42"/><text x="59.3818%" y="623.50"></text></g><g><title>&lt;core::cell::BorrowRefMut as core::ops::drop::Drop&gt;::drop (42 samples, 0.02%)</title><rect x="59.1318%" y="597" width="0.0153%" height="15" fill="rgb(240,92,3)" fg:x="162448" fg:w="42"/><text x="59.3818%" y="607.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::set (42 samples, 0.02%)</title><rect x="59.1318%" y="581" width="0.0153%" height="15" fill="rgb(205,123,3)" fg:x="162448" fg:w="42"/><text x="59.3818%" y="591.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::replace (42 samples, 0.02%)</title><rect x="59.1318%" y="565" width="0.0153%" height="15" fill="rgb(205,97,47)" fg:x="162448" fg:w="42"/><text x="59.3818%" y="575.50"></text></g><g><title>core::mem::replace (42 samples, 0.02%)</title><rect x="59.1318%" y="549" width="0.0153%" height="15" fill="rgb(247,152,14)" fg:x="162448" fg:w="42"/><text x="59.3818%" y="559.50"></text></g><g><title>core::ptr::write (42 samples, 0.02%)</title><rect x="59.1318%" y="533" width="0.0153%" height="15" fill="rgb(248,195,53)" fg:x="162448" fg:w="42"/><text x="59.3818%" y="543.50"></text></g><g><title>core::fmt::Formatter::new (33 samples, 0.01%)</title><rect x="59.1471%" y="661" width="0.0120%" height="15" fill="rgb(226,201,16)" fg:x="162490" fg:w="33"/><text x="59.3971%" y="671.50"></text></g><g><title>&lt;std::io::buffered::linewriter::LineWriter&lt;W&gt; as std::io::Write&gt;::write_all (47 samples, 0.02%)</title><rect x="59.1671%" y="597" width="0.0171%" height="15" fill="rgb(205,98,0)" fg:x="162545" fg:w="47"/><text x="59.4171%" y="607.50"></text></g><g><title>&lt;std::io::buffered::linewritershim::LineWriterShim&lt;W&gt; as std::io::Write&gt;::write_all (47 samples, 0.02%)</title><rect x="59.1671%" y="581" width="0.0171%" height="15" fill="rgb(214,191,48)" fg:x="162545" fg:w="47"/><text x="59.4171%" y="591.50"></text></g><g><title>std::sys_common::memchr::memrchr (29 samples, 0.01%)</title><rect x="59.1736%" y="565" width="0.0106%" height="15" fill="rgb(237,112,39)" fg:x="162563" fg:w="29"/><text x="59.4236%" y="575.50"></text></g><g><title>std::sys::unix::memchr::memrchr (29 samples, 0.01%)</title><rect x="59.1736%" y="549" width="0.0106%" height="15" fill="rgb(247,203,27)" fg:x="162563" fg:w="29"/><text x="59.4236%" y="559.50"></text></g><g><title>std::sys::unix::memchr::memrchr::memrchr_specific (29 samples, 0.01%)</title><rect x="59.1736%" y="533" width="0.0106%" height="15" fill="rgb(235,124,28)" fg:x="162563" fg:w="29"/><text x="59.4236%" y="543.50"></text></g><g><title>&lt;std::io::Write::write_fmt::Adapter&lt;T&gt; as core::fmt::Write&gt;::write_str (58 samples, 0.02%)</title><rect x="59.1653%" y="629" width="0.0211%" height="15" fill="rgb(208,207,46)" fg:x="162540" fg:w="58"/><text x="59.4153%" y="639.50"></text></g><g><title>&lt;std::io::stdio::StdoutLock as std::io::Write&gt;::write_all (54 samples, 0.02%)</title><rect x="59.1667%" y="613" width="0.0197%" height="15" fill="rgb(234,176,4)" fg:x="162544" fg:w="54"/><text x="59.4167%" y="623.50"></text></g><g><title>&lt;coldbrew::jit::Register as core::fmt::Debug&gt;::fmt (79 samples, 0.03%)</title><rect x="59.1591%" y="645" width="0.0288%" height="15" fill="rgb(230,133,28)" fg:x="162523" fg:w="79"/><text x="59.4091%" y="655.50"></text></g><g><title>core::fmt::Arguments::new_v1 (32 samples, 0.01%)</title><rect x="59.1918%" y="629" width="0.0116%" height="15" fill="rgb(211,137,40)" fg:x="162613" fg:w="32"/><text x="59.4418%" y="639.50"></text></g><g><title>&lt;std::io::buffered::linewriter::LineWriter&lt;W&gt; as std::io::Write&gt;::write_all (30 samples, 0.01%)</title><rect x="59.2206%" y="581" width="0.0109%" height="15" fill="rgb(254,35,13)" fg:x="162692" fg:w="30"/><text x="59.4706%" y="591.50"></text></g><g><title>&lt;std::io::buffered::linewritershim::LineWriterShim&lt;W&gt; as std::io::Write&gt;::write_all (30 samples, 0.01%)</title><rect x="59.2206%" y="565" width="0.0109%" height="15" fill="rgb(225,49,51)" fg:x="162692" fg:w="30"/><text x="59.4706%" y="575.50"></text></g><g><title>&lt;std::io::Write::write_fmt::Adapter&lt;T&gt; as core::fmt::Write&gt;::write_str (35 samples, 0.01%)</title><rect x="59.2199%" y="613" width="0.0127%" height="15" fill="rgb(251,10,15)" fg:x="162690" fg:w="35"/><text x="59.4699%" y="623.50"></text></g><g><title>&lt;std::io::stdio::StdoutLock as std::io::Write&gt;::write_all (34 samples, 0.01%)</title><rect x="59.2202%" y="597" width="0.0124%" height="15" fill="rgb(228,207,15)" fg:x="162691" fg:w="34"/><text x="59.4702%" y="607.50"></text></g><g><title>&lt;std::io::buffered::bufwriter::BufWriter&lt;W&gt; as std::io::Write&gt;::write_all (36 samples, 0.01%)</title><rect x="59.2552%" y="501" width="0.0131%" height="15" fill="rgb(241,99,19)" fg:x="162787" fg:w="36"/><text x="59.5052%" y="511.50"></text></g><g><title>std::io::buffered::bufwriter::BufWriter&lt;W&gt;::write_to_buffer_unchecked (28 samples, 0.01%)</title><rect x="59.2581%" y="485" width="0.0102%" height="15" fill="rgb(207,104,49)" fg:x="162795" fg:w="28"/><text x="59.5081%" y="495.50"></text></g><g><title>&lt;std::io::buffered::linewriter::LineWriter&lt;W&gt; as std::io::Write&gt;::write_all (89 samples, 0.03%)</title><rect x="59.2552%" y="533" width="0.0324%" height="15" fill="rgb(234,99,18)" fg:x="162787" fg:w="89"/><text x="59.5052%" y="543.50"></text></g><g><title>&lt;std::io::buffered::linewritershim::LineWriterShim&lt;W&gt; as std::io::Write&gt;::write_all (89 samples, 0.03%)</title><rect x="59.2552%" y="517" width="0.0324%" height="15" fill="rgb(213,191,49)" fg:x="162787" fg:w="89"/><text x="59.5052%" y="527.50"></text></g><g><title>std::sys_common::memchr::memrchr (42 samples, 0.02%)</title><rect x="59.2723%" y="501" width="0.0153%" height="15" fill="rgb(210,226,19)" fg:x="162834" fg:w="42"/><text x="59.5223%" y="511.50"></text></g><g><title>std::sys::unix::memchr::memrchr (42 samples, 0.02%)</title><rect x="59.2723%" y="485" width="0.0153%" height="15" fill="rgb(229,97,18)" fg:x="162834" fg:w="42"/><text x="59.5223%" y="495.50"></text></g><g><title>std::sys::unix::memchr::memrchr::memrchr_specific (42 samples, 0.02%)</title><rect x="59.2723%" y="469" width="0.0153%" height="15" fill="rgb(211,167,15)" fg:x="162834" fg:w="42"/><text x="59.5223%" y="479.50"></text></g><g><title>__memrchr_avx2 (34 samples, 0.01%)</title><rect x="59.2752%" y="453" width="0.0124%" height="15" fill="rgb(210,169,34)" fg:x="162842" fg:w="34"/><text x="59.5252%" y="463.50"></text></g><g><title>&lt;std::io::Write::write_fmt::Adapter&lt;T&gt; as core::fmt::Write&gt;::write_str (121 samples, 0.04%)</title><rect x="59.2453%" y="565" width="0.0440%" height="15" fill="rgb(241,121,31)" fg:x="162760" fg:w="121"/><text x="59.4953%" y="575.50"></text></g><g><title>&lt;std::io::stdio::StdoutLock as std::io::Write&gt;::write_all (103 samples, 0.04%)</title><rect x="59.2519%" y="549" width="0.0375%" height="15" fill="rgb(232,40,11)" fg:x="162778" fg:w="103"/><text x="59.5019%" y="559.50"></text></g><g><title>core::fmt::Formatter::pad_integral (68 samples, 0.02%)</title><rect x="59.2894%" y="565" width="0.0248%" height="15" fill="rgb(205,86,26)" fg:x="162881" fg:w="68"/><text x="59.5394%" y="575.50"></text></g><g><title>core::fmt::write (37,915 samples, 13.80%)</title><rect x="45.5136%" y="677" width="13.8012%" height="15" fill="rgb(231,126,28)" fg:x="125036" fg:w="37915"/><text x="45.7636%" y="687.50">core::fmt::write</text></g><g><title>core::fmt::rt::Argument::fmt (428 samples, 0.16%)</title><rect x="59.1591%" y="661" width="0.1558%" height="15" fill="rgb(219,221,18)" fg:x="162523" fg:w="428"/><text x="59.4091%" y="671.50"></text></g><g><title>&lt;coldbrew::runtime::ProgramCounter as core::fmt::Display&gt;::fmt (349 samples, 0.13%)</title><rect x="59.1878%" y="645" width="0.1270%" height="15" fill="rgb(211,40,0)" fg:x="162602" fg:w="349"/><text x="59.4378%" y="655.50"></text></g><g><title>core::fmt::write (292 samples, 0.11%)</title><rect x="59.2086%" y="629" width="0.1063%" height="15" fill="rgb(239,85,43)" fg:x="162659" fg:w="292"/><text x="59.4586%" y="639.50"></text></g><g><title>core::fmt::rt::Argument::fmt (221 samples, 0.08%)</title><rect x="59.2344%" y="613" width="0.0804%" height="15" fill="rgb(231,55,21)" fg:x="162730" fg:w="221"/><text x="59.4844%" y="623.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u64&gt;::fmt (221 samples, 0.08%)</title><rect x="59.2344%" y="597" width="0.0804%" height="15" fill="rgb(225,184,43)" fg:x="162730" fg:w="221"/><text x="59.4844%" y="607.50"></text></g><g><title>core::fmt::num::imp::fmt_u64 (216 samples, 0.08%)</title><rect x="59.2362%" y="581" width="0.0786%" height="15" fill="rgb(251,158,41)" fg:x="162735" fg:w="216"/><text x="59.4862%" y="591.50"></text></g><g><title>std::io::Write::write_fmt (37,942 samples, 13.81%)</title><rect x="45.5064%" y="693" width="13.8111%" height="15" fill="rgb(234,159,37)" fg:x="125016" fg:w="37942"/><text x="45.7564%" y="703.50">std::io::Write::write..</text></g><g><title>&lt;std::io::stdio::Stdout as std::io::Write&gt;::write_fmt (38,560 samples, 14.04%)</title><rect x="45.4012%" y="725" width="14.0360%" height="15" fill="rgb(216,204,22)" fg:x="124727" fg:w="38560"/><text x="45.6512%" y="735.50">&lt;std::io::stdio::Stdo..</text></g><g><title>&lt;&amp;std::io::stdio::Stdout as std::io::Write&gt;::write_fmt (38,549 samples, 14.03%)</title><rect x="45.4052%" y="709" width="14.0320%" height="15" fill="rgb(214,17,3)" fg:x="124738" fg:w="38549"/><text x="45.6552%" y="719.50">&lt;&amp;std::io::stdio::Std..</text></g><g><title>std::io::stdio::Stdout::lock (329 samples, 0.12%)</title><rect x="59.3174%" y="693" width="0.1198%" height="15" fill="rgb(212,111,17)" fg:x="162958" fg:w="329"/><text x="59.5674%" y="703.50"></text></g><g><title>std::sync::remutex::ReentrantMutex&lt;T&gt;::lock (319 samples, 0.12%)</title><rect x="59.3211%" y="677" width="0.1161%" height="15" fill="rgb(221,157,24)" fg:x="162968" fg:w="319"/><text x="59.5711%" y="687.50"></text></g><g><title>std::sys::unix::locks::futex_mutex::Mutex::lock (277 samples, 0.10%)</title><rect x="59.3363%" y="661" width="0.1008%" height="15" fill="rgb(252,16,13)" fg:x="163010" fg:w="277"/><text x="59.5863%" y="671.50"></text></g><g><title>core::sync::atomic::AtomicU32::compare_exchange (265 samples, 0.10%)</title><rect x="59.3407%" y="645" width="0.0965%" height="15" fill="rgb(221,62,2)" fg:x="163022" fg:w="265"/><text x="59.5907%" y="655.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (265 samples, 0.10%)</title><rect x="59.3407%" y="629" width="0.0965%" height="15" fill="rgb(247,87,22)" fg:x="163022" fg:w="265"/><text x="59.5907%" y="639.50"></text></g><g><title>coldbrew::jit::JitCache::compile (135,372 samples, 49.28%)</title><rect x="10.1714%" y="773" width="49.2760%" height="15" fill="rgb(215,73,9)" fg:x="27943" fg:w="135372"/><text x="10.4214%" y="783.50">coldbrew::jit::JitCache::compile</text></g><g><title>std::io::stdio::_print (38,612 samples, 14.05%)</title><rect x="45.3924%" y="757" width="14.0549%" height="15" fill="rgb(207,175,33)" fg:x="124703" fg:w="38612"/><text x="45.6424%" y="767.50">std::io::stdio::_print</text></g><g><title>std::io::stdio::print_to (38,599 samples, 14.05%)</title><rect x="45.3972%" y="741" width="14.0502%" height="15" fill="rgb(243,129,54)" fg:x="124716" fg:w="38599"/><text x="45.6472%" y="751.50">std::io::stdio::print..</text></g><g><title>std::io::stdio::print_to_buffer_if_capture_used (28 samples, 0.01%)</title><rect x="59.4372%" y="725" width="0.0102%" height="15" fill="rgb(227,119,45)" fg:x="163287" fg:w="28"/><text x="59.6872%" y="735.50"></text></g><g><title>__memcpy_avx_unaligned_erms (29 samples, 0.01%)</title><rect x="59.6206%" y="741" width="0.0106%" height="15" fill="rgb(205,109,36)" fg:x="163791" fg:w="29"/><text x="59.8706%" y="751.50"></text></g><g><title>&lt;I as core::iter::traits::collect::IntoIterator&gt;::into_iter (34 samples, 0.01%)</title><rect x="59.6195%" y="757" width="0.0124%" height="15" fill="rgb(205,6,39)" fg:x="163788" fg:w="34"/><text x="59.8695%" y="767.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::IndexMut&lt;I&gt;&gt;::index_mut (62 samples, 0.02%)</title><rect x="59.6319%" y="757" width="0.0226%" height="15" fill="rgb(221,32,16)" fg:x="163822" fg:w="62"/><text x="59.8819%" y="767.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (46 samples, 0.02%)</title><rect x="59.7611%" y="677" width="0.0167%" height="15" fill="rgb(228,144,50)" fg:x="164177" fg:w="46"/><text x="60.0111%" y="687.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (114 samples, 0.04%)</title><rect x="59.7386%" y="693" width="0.0415%" height="15" fill="rgb(229,201,53)" fg:x="164115" fg:w="114"/><text x="59.9886%" y="703.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::next_n (109 samples, 0.04%)</title><rect x="59.7801%" y="693" width="0.0397%" height="15" fill="rgb(249,153,27)" fg:x="164229" fg:w="109"/><text x="60.0301%" y="703.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (33 samples, 0.01%)</title><rect x="59.8077%" y="677" width="0.0120%" height="15" fill="rgb(227,106,25)" fg:x="164305" fg:w="33"/><text x="60.0577%" y="687.50"></text></g><g><title>&lt;hashbrown::raw::RawIter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (343 samples, 0.12%)</title><rect x="59.6967%" y="725" width="0.1249%" height="15" fill="rgb(230,65,29)" fg:x="164000" fg:w="343"/><text x="59.9467%" y="735.50"></text></g><g><title>hashbrown::raw::RawIterRange&lt;T&gt;::next_impl (286 samples, 0.10%)</title><rect x="59.7175%" y="709" width="0.1041%" height="15" fill="rgb(221,57,46)" fg:x="164057" fg:w="286"/><text x="59.9675%" y="719.50"></text></g><g><title>&lt;std::collections::hash::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (528 samples, 0.19%)</title><rect x="59.6545%" y="757" width="0.1922%" height="15" fill="rgb(229,161,17)" fg:x="163884" fg:w="528"/><text x="59.9045%" y="767.50"></text></g><g><title>&lt;hashbrown::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (528 samples, 0.19%)</title><rect x="59.6545%" y="741" width="0.1922%" height="15" fill="rgb(222,213,11)" fg:x="163884" fg:w="528"/><text x="59.9045%" y="751.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ref (69 samples, 0.03%)</title><rect x="59.8216%" y="725" width="0.0251%" height="15" fill="rgb(235,35,13)" fg:x="164343" fg:w="69"/><text x="60.0716%" y="735.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ptr (44 samples, 0.02%)</title><rect x="59.8307%" y="709" width="0.0160%" height="15" fill="rgb(233,158,34)" fg:x="164368" fg:w="44"/><text x="60.0807%" y="719.50"></text></g><g><title>__memcpy_avx_unaligned_erms (38 samples, 0.01%)</title><rect x="59.8485%" y="757" width="0.0138%" height="15" fill="rgb(215,151,48)" fg:x="164417" fg:w="38"/><text x="60.0985%" y="767.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (47 samples, 0.02%)</title><rect x="60.0786%" y="661" width="0.0171%" height="15" fill="rgb(229,84,14)" fg:x="165049" fg:w="47"/><text x="60.3286%" y="671.50"></text></g><g><title>malloc_consolidate (616 samples, 0.22%)</title><rect x="60.2413%" y="613" width="0.2242%" height="15" fill="rgb(229,68,14)" fg:x="165496" fg:w="616"/><text x="60.4913%" y="623.50"></text></g><g><title>_int_malloc (883 samples, 0.32%)</title><rect x="60.1466%" y="629" width="0.3214%" height="15" fill="rgb(243,106,26)" fg:x="165236" fg:w="883"/><text x="60.3966%" y="639.50"></text></g><g><title>__libc_calloc (978 samples, 0.36%)</title><rect x="60.1139%" y="645" width="0.3560%" height="15" fill="rgb(206,45,38)" fg:x="165146" fg:w="978"/><text x="60.3639%" y="655.50"></text></g><g><title>__memset_avx2_unaligned_erms (1,953 samples, 0.71%)</title><rect x="60.4699%" y="645" width="0.7109%" height="15" fill="rgb(226,6,15)" fg:x="166124" fg:w="1953"/><text x="60.7199%" y="655.50"></text></g><g><title>alloc::alloc::alloc_zeroed (2,989 samples, 1.09%)</title><rect x="60.1080%" y="661" width="1.0880%" height="15" fill="rgb(232,22,54)" fg:x="165130" fg:w="2989"/><text x="60.3580%" y="671.50"></text></g><g><title>core::option::Option&lt;T&gt;::ok_or (41 samples, 0.01%)</title><rect x="61.1982%" y="661" width="0.0149%" height="15" fill="rgb(229,222,32)" fg:x="168125" fg:w="41"/><text x="61.4482%" y="671.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::new (64 samples, 0.02%)</title><rect x="61.2132%" y="661" width="0.0233%" height="15" fill="rgb(228,62,29)" fg:x="168166" fg:w="64"/><text x="61.4632%" y="671.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate_zeroed (3,499 samples, 1.27%)</title><rect x="59.9945%" y="693" width="1.2737%" height="15" fill="rgb(251,103,34)" fg:x="164818" fg:w="3499"/><text x="60.2445%" y="703.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (3,495 samples, 1.27%)</title><rect x="59.9959%" y="677" width="1.2722%" height="15" fill="rgb(233,12,30)" fg:x="164822" fg:w="3495"/><text x="60.2459%" y="687.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;[T]&gt;::slice_from_raw_parts (87 samples, 0.03%)</title><rect x="61.2364%" y="661" width="0.0317%" height="15" fill="rgb(238,52,0)" fg:x="168230" fg:w="87"/><text x="61.4864%" y="671.50"></text></g><g><title>core::ptr::slice_from_raw_parts_mut (73 samples, 0.03%)</title><rect x="61.2415%" y="645" width="0.0266%" height="15" fill="rgb(223,98,5)" fg:x="168244" fg:w="73"/><text x="61.4915%" y="655.50"></text></g><g><title>core::ptr::metadata::from_raw_parts_mut (73 samples, 0.03%)</title><rect x="61.2415%" y="629" width="0.0266%" height="15" fill="rgb(228,75,37)" fg:x="168244" fg:w="73"/><text x="61.4915%" y="639.50"></text></g><g><title>core::alloc::layout::Layout::max_size_for_align (28 samples, 0.01%)</title><rect x="61.3227%" y="661" width="0.0102%" height="15" fill="rgb(205,115,49)" fg:x="168467" fg:w="28"/><text x="61.5727%" y="671.50"></text></g><g><title>core::alloc::layout::Layout::array::inner (175 samples, 0.06%)</title><rect x="61.2721%" y="677" width="0.0637%" height="15" fill="rgb(250,154,43)" fg:x="168328" fg:w="175"/><text x="61.5221%" y="687.50"></text></g><g><title>core::alloc::layout::Layout::array (186 samples, 0.07%)</title><rect x="61.2685%" y="693" width="0.0677%" height="15" fill="rgb(226,43,29)" fg:x="168318" fg:w="186"/><text x="61.5185%" y="703.50"></text></g><g><title>alloc::vec::from_elem (4,086 samples, 1.49%)</title><rect x="59.8700%" y="757" width="1.4873%" height="15" fill="rgb(249,228,39)" fg:x="164476" fg:w="4086"/><text x="60.1200%" y="767.50"></text></g><g><title>&lt;T as alloc::vec::spec_from_elem::SpecFromElem&gt;::from_elem (4,081 samples, 1.49%)</title><rect x="59.8718%" y="741" width="1.4855%" height="15" fill="rgb(216,79,43)" fg:x="164481" fg:w="4081"/><text x="60.1218%" y="751.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_zeroed_in (4,017 samples, 1.46%)</title><rect x="59.8951%" y="725" width="1.4622%" height="15" fill="rgb(228,95,12)" fg:x="164545" fg:w="4017"/><text x="60.1451%" y="735.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (4,001 samples, 1.46%)</title><rect x="59.9009%" y="709" width="1.4564%" height="15" fill="rgb(249,221,15)" fg:x="164561" fg:w="4001"/><text x="60.1509%" y="719.50"></text></g><g><title>core::ptr::unique::Unique&lt;T&gt;::new_unchecked (36 samples, 0.01%)</title><rect x="61.3442%" y="693" width="0.0131%" height="15" fill="rgb(233,34,13)" fg:x="168526" fg:w="36"/><text x="61.5942%" y="703.50"></text></g><g><title>core::fmt::Arguments::new_const (48 samples, 0.02%)</title><rect x="61.3573%" y="757" width="0.0175%" height="15" fill="rgb(214,103,39)" fg:x="168562" fg:w="48"/><text x="61.6073%" y="767.50"></text></g><g><title>core::fmt::Arguments::new_v1 (35 samples, 0.01%)</title><rect x="61.3748%" y="757" width="0.0127%" height="15" fill="rgb(251,126,39)" fg:x="168610" fg:w="35"/><text x="61.6248%" y="767.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (72 samples, 0.03%)</title><rect x="61.3955%" y="741" width="0.0262%" height="15" fill="rgb(214,216,36)" fg:x="168667" fg:w="72"/><text x="61.6455%" y="751.50"></text></g><g><title>core::ptr::slice_from_raw_parts_mut (52 samples, 0.02%)</title><rect x="61.4028%" y="725" width="0.0189%" height="15" fill="rgb(220,221,8)" fg:x="168687" fg:w="52"/><text x="61.6528%" y="735.50"></text></g><g><title>core::ptr::metadata::from_raw_parts_mut (52 samples, 0.02%)</title><rect x="61.4028%" y="709" width="0.0189%" height="15" fill="rgb(240,216,3)" fg:x="168687" fg:w="52"/><text x="61.6528%" y="719.50"></text></g><g><title>_int_free (168 samples, 0.06%)</title><rect x="61.4538%" y="661" width="0.0612%" height="15" fill="rgb(232,218,17)" fg:x="168827" fg:w="168"/><text x="61.7038%" y="671.50"></text></g><g><title>__GI___libc_free (222 samples, 0.08%)</title><rect x="61.4367%" y="677" width="0.0808%" height="15" fill="rgb(229,163,45)" fg:x="168780" fg:w="222"/><text x="61.6867%" y="687.50"></text></g><g><title>alloc::alloc::dealloc (239 samples, 0.09%)</title><rect x="61.4367%" y="693" width="0.0870%" height="15" fill="rgb(231,110,42)" fg:x="168780" fg:w="239"/><text x="61.6867%" y="703.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (270 samples, 0.10%)</title><rect x="61.4294%" y="709" width="0.0983%" height="15" fill="rgb(208,170,48)" fg:x="168760" fg:w="270"/><text x="61.6794%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;i32&gt;&gt; (525 samples, 0.19%)</title><rect x="61.3922%" y="757" width="0.1911%" height="15" fill="rgb(239,116,25)" fg:x="168658" fg:w="525"/><text x="61.6422%" y="767.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;i32&gt;&gt; (444 samples, 0.16%)</title><rect x="61.4217%" y="741" width="0.1616%" height="15" fill="rgb(219,200,50)" fg:x="168739" fg:w="444"/><text x="61.6717%" y="751.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (444 samples, 0.16%)</title><rect x="61.4217%" y="725" width="0.1616%" height="15" fill="rgb(245,200,0)" fg:x="168739" fg:w="444"/><text x="61.6717%" y="735.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::current_memory (153 samples, 0.06%)</title><rect x="61.5277%" y="709" width="0.0557%" height="15" fill="rgb(245,119,33)" fg:x="169030" fg:w="153"/><text x="61.7777%" y="719.50"></text></g><g><title>&lt;memmap2::Mmap as core::ops::deref::Deref&gt;::deref (29 samples, 0.01%)</title><rect x="61.5954%" y="725" width="0.0106%" height="15" fill="rgb(231,125,12)" fg:x="169216" fg:w="29"/><text x="61.8454%" y="735.50"></text></g><g><title>dynasmrt::mmap::ExecutableBuffer::ptr (114 samples, 0.04%)</title><rect x="61.5833%" y="757" width="0.0415%" height="15" fill="rgb(216,96,41)" fg:x="169183" fg:w="114"/><text x="61.8333%" y="767.50"></text></g><g><title>&lt;dynasmrt::mmap::ExecutableBuffer as core::ops::deref::Deref&gt;::deref (101 samples, 0.04%)</title><rect x="61.5881%" y="741" width="0.0368%" height="15" fill="rgb(248,43,45)" fg:x="169196" fg:w="101"/><text x="61.8381%" y="751.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (52 samples, 0.02%)</title><rect x="61.6059%" y="725" width="0.0189%" height="15" fill="rgb(217,222,7)" fg:x="169245" fg:w="52"/><text x="61.8559%" y="735.50"></text></g><g><title>&lt;core::ops::range::RangeTo&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (48 samples, 0.02%)</title><rect x="61.6074%" y="709" width="0.0175%" height="15" fill="rgb(233,28,6)" fg:x="169249" fg:w="48"/><text x="61.8574%" y="719.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (39 samples, 0.01%)</title><rect x="61.6106%" y="693" width="0.0142%" height="15" fill="rgb(231,218,15)" fg:x="169258" fg:w="39"/><text x="61.8606%" y="703.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (84 samples, 0.03%)</title><rect x="61.6474%" y="629" width="0.0306%" height="15" fill="rgb(226,171,48)" fg:x="169359" fg:w="84"/><text x="61.8974%" y="639.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::finish (492 samples, 0.18%)</title><rect x="61.6372%" y="677" width="0.1791%" height="15" fill="rgb(235,201,9)" fg:x="169331" fg:w="492"/><text x="61.8872%" y="687.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (492 samples, 0.18%)</title><rect x="61.6372%" y="661" width="0.1791%" height="15" fill="rgb(217,80,15)" fg:x="169331" fg:w="492"/><text x="61.8872%" y="671.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (492 samples, 0.18%)</title><rect x="61.6372%" y="645" width="0.1791%" height="15" fill="rgb(219,152,8)" fg:x="169331" fg:w="492"/><text x="61.8872%" y="655.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (380 samples, 0.14%)</title><rect x="61.6780%" y="629" width="0.1383%" height="15" fill="rgb(243,107,38)" fg:x="169443" fg:w="380"/><text x="61.9280%" y="639.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (105 samples, 0.04%)</title><rect x="61.7781%" y="613" width="0.0382%" height="15" fill="rgb(231,17,5)" fg:x="169718" fg:w="105"/><text x="62.0281%" y="623.50"></text></g><g><title>__memcpy_avx_unaligned_erms (47 samples, 0.02%)</title><rect x="61.8178%" y="661" width="0.0171%" height="15" fill="rgb(209,25,54)" fg:x="169827" fg:w="47"/><text x="62.0678%" y="671.50"></text></g><g><title>__memcpy_avx_unaligned_erms (51 samples, 0.02%)</title><rect x="61.8356%" y="645" width="0.0186%" height="15" fill="rgb(219,0,2)" fg:x="169876" fg:w="51"/><text x="62.0856%" y="655.50"></text></g><g><title>__memcpy_avx_unaligned_erms (96 samples, 0.03%)</title><rect x="61.8622%" y="629" width="0.0349%" height="15" fill="rgb(246,9,5)" fg:x="169949" fg:w="96"/><text x="62.1122%" y="639.50"></text></g><g><title>&lt;std::collections::hash::map::RandomState as core::hash::BuildHasher&gt;::build_hasher (237 samples, 0.09%)</title><rect x="61.8163%" y="677" width="0.0863%" height="15" fill="rgb(226,159,4)" fg:x="169823" fg:w="237"/><text x="62.0663%" y="687.50"></text></g><g><title>core::hash::sip::SipHasher13::new_with_keys (184 samples, 0.07%)</title><rect x="61.8356%" y="661" width="0.0670%" height="15" fill="rgb(219,175,34)" fg:x="169876" fg:w="184"/><text x="62.0856%" y="671.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::new_with_keys (132 samples, 0.05%)</title><rect x="61.8545%" y="645" width="0.0480%" height="15" fill="rgb(236,10,46)" fg:x="169928" fg:w="132"/><text x="62.1045%" y="655.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (121 samples, 0.04%)</title><rect x="61.9361%" y="565" width="0.0440%" height="15" fill="rgb(240,211,16)" fg:x="170152" fg:w="121"/><text x="62.1861%" y="575.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (255 samples, 0.09%)</title><rect x="61.9062%" y="613" width="0.0928%" height="15" fill="rgb(205,3,43)" fg:x="170070" fg:w="255"/><text x="62.1562%" y="623.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (252 samples, 0.09%)</title><rect x="61.9073%" y="597" width="0.0917%" height="15" fill="rgb(245,7,22)" fg:x="170073" fg:w="252"/><text x="62.1573%" y="607.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (252 samples, 0.09%)</title><rect x="61.9073%" y="581" width="0.0917%" height="15" fill="rgb(239,132,32)" fg:x="170073" fg:w="252"/><text x="62.1573%" y="591.50"></text></g><g><title>hashbrown::map::make_hash (1,020 samples, 0.37%)</title><rect x="61.6292%" y="709" width="0.3713%" height="15" fill="rgb(228,202,34)" fg:x="169309" fg:w="1020"/><text x="61.8792%" y="719.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1,016 samples, 0.37%)</title><rect x="61.6307%" y="693" width="0.3698%" height="15" fill="rgb(254,200,22)" fg:x="169313" fg:w="1016"/><text x="61.8807%" y="703.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (269 samples, 0.10%)</title><rect x="61.9026%" y="677" width="0.0979%" height="15" fill="rgb(219,10,39)" fg:x="170060" fg:w="269"/><text x="62.1526%" y="687.50"></text></g><g><title>&lt;coldbrew::runtime::ProgramCounter as core::hash::Hash&gt;::hash (266 samples, 0.10%)</title><rect x="61.9037%" y="661" width="0.0968%" height="15" fill="rgb(226,210,39)" fg:x="170063" fg:w="266"/><text x="62.1537%" y="671.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for usize&gt;::hash (263 samples, 0.10%)</title><rect x="61.9048%" y="645" width="0.0957%" height="15" fill="rgb(208,219,16)" fg:x="170066" fg:w="263"/><text x="62.1548%" y="655.50"></text></g><g><title>core::hash::Hasher::write_usize (259 samples, 0.09%)</title><rect x="61.9062%" y="629" width="0.0943%" height="15" fill="rgb(216,158,51)" fg:x="170070" fg:w="259"/><text x="62.1562%" y="639.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ref (28 samples, 0.01%)</title><rect x="62.0030%" y="693" width="0.0102%" height="15" fill="rgb(233,14,44)" fg:x="170336" fg:w="28"/><text x="62.2530%" y="703.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ptr (28 samples, 0.01%)</title><rect x="62.0030%" y="677" width="0.0102%" height="15" fill="rgb(237,97,39)" fg:x="170336" fg:w="28"/><text x="62.2530%" y="687.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::bucket (38 samples, 0.01%)</title><rect x="62.0180%" y="677" width="0.0138%" height="15" fill="rgb(218,198,43)" fg:x="170377" fg:w="38"/><text x="62.2680%" y="687.50"></text></g><g><title>core::num::nonzero::NonZeroU16::new (32 samples, 0.01%)</title><rect x="62.1246%" y="629" width="0.0116%" height="15" fill="rgb(231,104,20)" fg:x="170670" fg:w="32"/><text x="62.3746%" y="639.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (92 samples, 0.03%)</title><rect x="62.1130%" y="645" width="0.0335%" height="15" fill="rgb(254,36,13)" fg:x="170638" fg:w="92"/><text x="62.3630%" y="655.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::nonzero_trailing_zeros (28 samples, 0.01%)</title><rect x="62.1363%" y="629" width="0.0102%" height="15" fill="rgb(248,14,50)" fg:x="170702" fg:w="28"/><text x="62.3863%" y="639.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (155 samples, 0.06%)</title><rect x="62.0919%" y="661" width="0.0564%" height="15" fill="rgb(217,107,29)" fg:x="170580" fg:w="155"/><text x="62.3419%" y="671.50"></text></g><g><title>hashbrown::map::equivalent_key::{{closure}} (89 samples, 0.03%)</title><rect x="62.1577%" y="645" width="0.0324%" height="15" fill="rgb(251,169,33)" fg:x="170761" fg:w="89"/><text x="62.4077%" y="655.50"></text></g><g><title>&lt;Q as hashbrown::Equivalent&lt;K&gt;&gt;::equivalent (87 samples, 0.03%)</title><rect x="62.1585%" y="629" width="0.0317%" height="15" fill="rgb(217,108,32)" fg:x="170763" fg:w="87"/><text x="62.4085%" y="639.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (68 samples, 0.02%)</title><rect x="62.1654%" y="613" width="0.0248%" height="15" fill="rgb(219,66,42)" fg:x="170782" fg:w="68"/><text x="62.4154%" y="623.50"></text></g><g><title>&lt;coldbrew::runtime::ProgramCounter as core::cmp::PartialEq&gt;::eq (66 samples, 0.02%)</title><rect x="62.1661%" y="597" width="0.0240%" height="15" fill="rgb(206,180,7)" fg:x="170784" fg:w="66"/><text x="62.4161%" y="607.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ref (30 samples, 0.01%)</title><rect x="62.1901%" y="645" width="0.0109%" height="15" fill="rgb(208,226,31)" fg:x="170850" fg:w="30"/><text x="62.4401%" y="655.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::{{closure}} (193 samples, 0.07%)</title><rect x="62.1486%" y="661" width="0.0703%" height="15" fill="rgb(218,26,49)" fg:x="170736" fg:w="193"/><text x="62.3986%" y="671.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::bucket (49 samples, 0.02%)</title><rect x="62.2011%" y="645" width="0.0178%" height="15" fill="rgb(233,197,48)" fg:x="170880" fg:w="49"/><text x="62.4511%" y="655.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::from_base_index (46 samples, 0.02%)</title><rect x="62.2022%" y="629" width="0.0167%" height="15" fill="rgb(252,181,51)" fg:x="170883" fg:w="46"/><text x="62.4522%" y="639.50"></text></g><g><title>hashbrown::raw::sse2::Group::load (109 samples, 0.04%)</title><rect x="62.2214%" y="661" width="0.0397%" height="15" fill="rgb(253,90,19)" fg:x="170936" fg:w="109"/><text x="62.4714%" y="671.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (94 samples, 0.03%)</title><rect x="62.2269%" y="645" width="0.0342%" height="15" fill="rgb(215,171,30)" fg:x="170951" fg:w="94"/><text x="62.4769%" y="655.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_cmpeq_epi8 (41 samples, 0.01%)</title><rect x="62.2808%" y="645" width="0.0149%" height="15" fill="rgb(214,222,9)" fg:x="171099" fg:w="41"/><text x="62.5308%" y="655.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (109 samples, 0.04%)</title><rect x="62.2957%" y="645" width="0.0397%" height="15" fill="rgb(223,3,22)" fg:x="171140" fg:w="109"/><text x="62.5457%" y="655.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::contains_key (2,036 samples, 0.74%)</title><rect x="61.6248%" y="757" width="0.7411%" height="15" fill="rgb(225,196,46)" fg:x="169297" fg:w="2036"/><text x="61.8748%" y="767.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::contains_key (2,036 samples, 0.74%)</title><rect x="61.6248%" y="741" width="0.7411%" height="15" fill="rgb(209,110,37)" fg:x="169297" fg:w="2036"/><text x="61.8748%" y="751.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (2,029 samples, 0.74%)</title><rect x="61.6274%" y="725" width="0.7386%" height="15" fill="rgb(249,89,12)" fg:x="169304" fg:w="2029"/><text x="61.8774%" y="735.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get (1,004 samples, 0.37%)</title><rect x="62.0005%" y="709" width="0.3655%" height="15" fill="rgb(226,27,33)" fg:x="170329" fg:w="1004"/><text x="62.2505%" y="719.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (969 samples, 0.35%)</title><rect x="62.0132%" y="693" width="0.3527%" height="15" fill="rgb(213,82,22)" fg:x="170364" fg:w="969"/><text x="62.2632%" y="703.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::find_inner (892 samples, 0.32%)</title><rect x="62.0413%" y="677" width="0.3247%" height="15" fill="rgb(248,140,0)" fg:x="170441" fg:w="892"/><text x="62.2913%" y="687.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (288 samples, 0.10%)</title><rect x="62.2611%" y="661" width="0.1048%" height="15" fill="rgb(228,106,3)" fg:x="171045" fg:w="288"/><text x="62.5111%" y="671.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_set1_epi8 (84 samples, 0.03%)</title><rect x="62.3354%" y="645" width="0.0306%" height="15" fill="rgb(209,23,37)" fg:x="171249" fg:w="84"/><text x="62.5854%" y="655.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_set_epi8 (84 samples, 0.03%)</title><rect x="62.3354%" y="629" width="0.0306%" height="15" fill="rgb(241,93,50)" fg:x="171249" fg:w="84"/><text x="62.5854%" y="639.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (86 samples, 0.03%)</title><rect x="62.3849%" y="629" width="0.0313%" height="15" fill="rgb(253,46,43)" fg:x="171385" fg:w="86"/><text x="62.6349%" y="639.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::finish (473 samples, 0.17%)</title><rect x="62.3765%" y="677" width="0.1722%" height="15" fill="rgb(226,206,43)" fg:x="171362" fg:w="473"/><text x="62.6265%" y="687.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (473 samples, 0.17%)</title><rect x="62.3765%" y="661" width="0.1722%" height="15" fill="rgb(217,54,7)" fg:x="171362" fg:w="473"/><text x="62.6265%" y="671.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (473 samples, 0.17%)</title><rect x="62.3765%" y="645" width="0.1722%" height="15" fill="rgb(223,5,52)" fg:x="171362" fg:w="473"/><text x="62.6265%" y="655.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (364 samples, 0.13%)</title><rect x="62.4162%" y="629" width="0.1325%" height="15" fill="rgb(206,52,46)" fg:x="171471" fg:w="364"/><text x="62.6662%" y="639.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (88 samples, 0.03%)</title><rect x="62.5167%" y="613" width="0.0320%" height="15" fill="rgb(253,136,11)" fg:x="171747" fg:w="88"/><text x="62.7667%" y="623.50"></text></g><g><title>__memcpy_avx_unaligned_erms (39 samples, 0.01%)</title><rect x="62.5520%" y="661" width="0.0142%" height="15" fill="rgb(208,106,33)" fg:x="171844" fg:w="39"/><text x="62.8020%" y="671.50"></text></g><g><title>__memcpy_avx_unaligned_erms (58 samples, 0.02%)</title><rect x="62.5676%" y="645" width="0.0211%" height="15" fill="rgb(206,54,4)" fg:x="171887" fg:w="58"/><text x="62.8176%" y="655.50"></text></g><g><title>__memcpy_avx_unaligned_erms (90 samples, 0.03%)</title><rect x="62.5946%" y="629" width="0.0328%" height="15" fill="rgb(213,3,15)" fg:x="171961" fg:w="90"/><text x="62.8446%" y="639.50"></text></g><g><title>&lt;std::collections::hash::map::RandomState as core::hash::BuildHasher&gt;::build_hasher (236 samples, 0.09%)</title><rect x="62.5487%" y="677" width="0.0859%" height="15" fill="rgb(252,211,39)" fg:x="171835" fg:w="236"/><text x="62.7987%" y="687.50"></text></g><g><title>core::hash::sip::SipHasher13::new_with_keys (184 samples, 0.07%)</title><rect x="62.5676%" y="661" width="0.0670%" height="15" fill="rgb(223,6,36)" fg:x="171887" fg:w="184"/><text x="62.8176%" y="671.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::new_with_keys (124 samples, 0.05%)</title><rect x="62.5895%" y="645" width="0.0451%" height="15" fill="rgb(252,169,45)" fg:x="171947" fg:w="124"/><text x="62.8395%" y="655.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (35 samples, 0.01%)</title><rect x="62.6954%" y="549" width="0.0127%" height="15" fill="rgb(212,48,26)" fg:x="172238" fg:w="35"/><text x="62.9454%" y="559.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (113 samples, 0.04%)</title><rect x="62.6681%" y="565" width="0.0411%" height="15" fill="rgb(251,102,48)" fg:x="172163" fg:w="113"/><text x="62.9181%" y="575.50"></text></g><g><title>core::hash::sip::u8to64_le (38 samples, 0.01%)</title><rect x="62.7092%" y="565" width="0.0138%" height="15" fill="rgb(243,208,16)" fg:x="172276" fg:w="38"/><text x="62.9592%" y="575.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (252 samples, 0.09%)</title><rect x="62.6371%" y="613" width="0.0917%" height="15" fill="rgb(219,96,24)" fg:x="172078" fg:w="252"/><text x="62.8871%" y="623.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (248 samples, 0.09%)</title><rect x="62.6386%" y="597" width="0.0903%" height="15" fill="rgb(219,33,29)" fg:x="172082" fg:w="248"/><text x="62.8886%" y="607.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (248 samples, 0.09%)</title><rect x="62.6386%" y="581" width="0.0903%" height="15" fill="rgb(223,176,5)" fg:x="172082" fg:w="248"/><text x="62.8886%" y="591.50"></text></g><g><title>hashbrown::map::make_hash (988 samples, 0.36%)</title><rect x="62.3703%" y="709" width="0.3596%" height="15" fill="rgb(228,140,14)" fg:x="171345" fg:w="988"/><text x="62.6203%" y="719.50"></text></g><g><title>core::hash::BuildHasher::hash_one (983 samples, 0.36%)</title><rect x="62.3721%" y="693" width="0.3578%" height="15" fill="rgb(217,179,31)" fg:x="171350" fg:w="983"/><text x="62.6221%" y="703.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (262 samples, 0.10%)</title><rect x="62.6346%" y="677" width="0.0954%" height="15" fill="rgb(230,9,30)" fg:x="172071" fg:w="262"/><text x="62.8846%" y="687.50"></text></g><g><title>&lt;coldbrew::runtime::ProgramCounter as core::hash::Hash&gt;::hash (262 samples, 0.10%)</title><rect x="62.6346%" y="661" width="0.0954%" height="15" fill="rgb(230,136,20)" fg:x="172071" fg:w="262"/><text x="62.8846%" y="671.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for usize&gt;::hash (260 samples, 0.09%)</title><rect x="62.6353%" y="645" width="0.0946%" height="15" fill="rgb(215,210,22)" fg:x="172073" fg:w="260"/><text x="62.8853%" y="655.50"></text></g><g><title>core::hash::Hasher::write_usize (255 samples, 0.09%)</title><rect x="62.6371%" y="629" width="0.0928%" height="15" fill="rgb(218,43,5)" fg:x="172078" fg:w="255"/><text x="62.8871%" y="639.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::bucket (38 samples, 0.01%)</title><rect x="62.7478%" y="677" width="0.0138%" height="15" fill="rgb(216,11,5)" fg:x="172382" fg:w="38"/><text x="62.9978%" y="687.50"></text></g><g><title>core::num::nonzero::NonZeroU16::new (33 samples, 0.01%)</title><rect x="62.8555%" y="629" width="0.0120%" height="15" fill="rgb(209,82,29)" fg:x="172678" fg:w="33"/><text x="63.1055%" y="639.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (100 samples, 0.04%)</title><rect x="62.8435%" y="645" width="0.0364%" height="15" fill="rgb(244,115,12)" fg:x="172645" fg:w="100"/><text x="63.0935%" y="655.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::nonzero_trailing_zeros (34 samples, 0.01%)</title><rect x="62.8676%" y="629" width="0.0124%" height="15" fill="rgb(222,82,18)" fg:x="172711" fg:w="34"/><text x="63.1176%" y="639.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (152 samples, 0.06%)</title><rect x="62.8264%" y="661" width="0.0553%" height="15" fill="rgb(249,227,8)" fg:x="172598" fg:w="152"/><text x="63.0764%" y="671.50"></text></g><g><title>&lt;Q as hashbrown::Equivalent&lt;K&gt;&gt;::equivalent (87 samples, 0.03%)</title><rect x="62.8952%" y="629" width="0.0317%" height="15" fill="rgb(253,141,45)" fg:x="172787" fg:w="87"/><text x="63.1452%" y="639.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (70 samples, 0.03%)</title><rect x="62.9014%" y="613" width="0.0255%" height="15" fill="rgb(234,184,4)" fg:x="172804" fg:w="70"/><text x="63.1514%" y="623.50"></text></g><g><title>&lt;coldbrew::runtime::ProgramCounter as core::cmp::PartialEq&gt;::eq (69 samples, 0.03%)</title><rect x="62.9018%" y="597" width="0.0251%" height="15" fill="rgb(218,194,23)" fg:x="172805" fg:w="69"/><text x="63.1518%" y="607.50"></text></g><g><title>hashbrown::map::equivalent_key::{{closure}} (97 samples, 0.04%)</title><rect x="62.8919%" y="645" width="0.0353%" height="15" fill="rgb(235,66,41)" fg:x="172778" fg:w="97"/><text x="63.1419%" y="655.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ref (34 samples, 0.01%)</title><rect x="62.9273%" y="645" width="0.0124%" height="15" fill="rgb(245,217,1)" fg:x="172875" fg:w="34"/><text x="63.1773%" y="655.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::from_base_index (60 samples, 0.02%)</title><rect x="62.9407%" y="629" width="0.0218%" height="15" fill="rgb(229,91,1)" fg:x="172912" fg:w="60"/><text x="63.1907%" y="639.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::{{closure}} (224 samples, 0.08%)</title><rect x="62.8817%" y="661" width="0.0815%" height="15" fill="rgb(207,101,30)" fg:x="172750" fg:w="224"/><text x="63.1317%" y="671.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::bucket (65 samples, 0.02%)</title><rect x="62.9396%" y="645" width="0.0237%" height="15" fill="rgb(223,82,49)" fg:x="172909" fg:w="65"/><text x="63.1896%" y="655.50"></text></g><g><title>hashbrown::raw::sse2::Group::load (90 samples, 0.03%)</title><rect x="62.9666%" y="661" width="0.0328%" height="15" fill="rgb(218,167,17)" fg:x="172983" fg:w="90"/><text x="63.2166%" y="671.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (75 samples, 0.03%)</title><rect x="62.9720%" y="645" width="0.0273%" height="15" fill="rgb(208,103,14)" fg:x="172998" fg:w="75"/><text x="63.2220%" y="655.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_cmpeq_epi8 (33 samples, 0.01%)</title><rect x="63.0201%" y="645" width="0.0120%" height="15" fill="rgb(238,20,8)" fg:x="173130" fg:w="33"/><text x="63.2701%" y="655.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (118 samples, 0.04%)</title><rect x="63.0321%" y="645" width="0.0430%" height="15" fill="rgb(218,80,54)" fg:x="173163" fg:w="118"/><text x="63.2821%" y="655.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get_mut (2,023 samples, 0.74%)</title><rect x="62.3660%" y="757" width="0.7364%" height="15" fill="rgb(240,144,17)" fg:x="171333" fg:w="2023"/><text x="62.6160%" y="767.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_mut (2,023 samples, 0.74%)</title><rect x="62.3660%" y="741" width="0.7364%" height="15" fill="rgb(245,27,50)" fg:x="171333" fg:w="2023"/><text x="62.6160%" y="751.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner_mut (2,017 samples, 0.73%)</title><rect x="62.3681%" y="725" width="0.7342%" height="15" fill="rgb(251,51,7)" fg:x="171339" fg:w="2017"/><text x="62.6181%" y="735.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get_mut (1,023 samples, 0.37%)</title><rect x="62.7300%" y="709" width="0.3724%" height="15" fill="rgb(245,217,29)" fg:x="172333" fg:w="1023"/><text x="62.9800%" y="719.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (993 samples, 0.36%)</title><rect x="62.7409%" y="693" width="0.3615%" height="15" fill="rgb(221,176,29)" fg:x="172363" fg:w="993"/><text x="62.9909%" y="703.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::find_inner (916 samples, 0.33%)</title><rect x="62.7689%" y="677" width="0.3334%" height="15" fill="rgb(212,180,24)" fg:x="172440" fg:w="916"/><text x="63.0189%" y="687.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (283 samples, 0.10%)</title><rect x="62.9993%" y="661" width="0.1030%" height="15" fill="rgb(254,24,2)" fg:x="173073" fg:w="283"/><text x="63.2493%" y="671.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_set1_epi8 (75 samples, 0.03%)</title><rect x="63.0750%" y="645" width="0.0273%" height="15" fill="rgb(230,100,2)" fg:x="173281" fg:w="75"/><text x="63.3250%" y="655.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_set_epi8 (75 samples, 0.03%)</title><rect x="63.0750%" y="629" width="0.0273%" height="15" fill="rgb(219,142,25)" fg:x="173281" fg:w="75"/><text x="63.3250%" y="639.50"></text></g><g><title>__memcpy_avx_unaligned_erms (52 samples, 0.02%)</title><rect x="63.1031%" y="741" width="0.0189%" height="15" fill="rgb(240,73,43)" fg:x="173358" fg:w="52"/><text x="63.3531%" y="751.50"></text></g><g><title>__memcpy_avx_unaligned_erms (62 samples, 0.02%)</title><rect x="63.1227%" y="725" width="0.0226%" height="15" fill="rgb(214,114,15)" fg:x="173412" fg:w="62"/><text x="63.3727%" y="735.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::from_base_index (71 samples, 0.03%)</title><rect x="63.1744%" y="709" width="0.0258%" height="15" fill="rgb(207,130,4)" fg:x="173554" fg:w="71"/><text x="63.4244%" y="719.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMask as core::iter::traits::collect::IntoIterator&gt;::into_iter (30 samples, 0.01%)</title><rect x="63.2228%" y="693" width="0.0109%" height="15" fill="rgb(221,25,40)" fg:x="173687" fg:w="30"/><text x="63.4728%" y="703.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::add (52 samples, 0.02%)</title><rect x="63.2337%" y="693" width="0.0189%" height="15" fill="rgb(241,184,7)" fg:x="173717" fg:w="52"/><text x="63.4837%" y="703.50"></text></g><g><title>hashbrown::raw::sse2::Group::load_aligned (42 samples, 0.02%)</title><rect x="63.2527%" y="693" width="0.0153%" height="15" fill="rgb(235,159,4)" fg:x="173769" fg:w="42"/><text x="63.5027%" y="703.50"></text></g><g><title>core::core_arch::simd::i8x16::splat (136 samples, 0.05%)</title><rect x="63.3994%" y="645" width="0.0495%" height="15" fill="rgb(214,87,48)" fg:x="174172" fg:w="136"/><text x="63.6494%" y="655.50"></text></g><g><title>hashbrown::raw::RawIterRange&lt;T&gt;::new (688 samples, 0.25%)</title><rect x="63.2003%" y="709" width="0.2504%" height="15" fill="rgb(246,198,24)" fg:x="173625" fg:w="688"/><text x="63.4503%" y="719.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_full (502 samples, 0.18%)</title><rect x="63.2680%" y="693" width="0.1827%" height="15" fill="rgb(209,66,40)" fg:x="173811" fg:w="502"/><text x="63.5180%" y="703.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_empty_or_deleted (473 samples, 0.17%)</title><rect x="63.2785%" y="677" width="0.1722%" height="15" fill="rgb(233,147,39)" fg:x="173840" fg:w="473"/><text x="63.5285%" y="687.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (466 samples, 0.17%)</title><rect x="63.2811%" y="661" width="0.1696%" height="15" fill="rgb(231,145,52)" fg:x="173847" fg:w="466"/><text x="63.5311%" y="671.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::iter (966 samples, 0.35%)</title><rect x="63.1023%" y="757" width="0.3516%" height="15" fill="rgb(206,20,26)" fg:x="173356" fg:w="966"/><text x="63.3523%" y="767.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::iter (910 samples, 0.33%)</title><rect x="63.1227%" y="741" width="0.3312%" height="15" fill="rgb(238,220,4)" fg:x="173412" fg:w="910"/><text x="63.3727%" y="751.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::iter (845 samples, 0.31%)</title><rect x="63.1464%" y="725" width="0.3076%" height="15" fill="rgb(252,195,42)" fg:x="173477" fg:w="845"/><text x="63.3964%" y="735.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::io::stdio::StdoutLock&gt; (209 samples, 0.08%)</title><rect x="63.4696%" y="693" width="0.0761%" height="15" fill="rgb(209,10,6)" fg:x="174365" fg:w="209"/><text x="63.7196%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::remutex::ReentrantMutexGuard&lt;core::cell::RefCell&lt;std::io::buffered::linewriter::LineWriter&lt;std::io::stdio::StdoutRaw&gt;&gt;&gt;&gt; (209 samples, 0.08%)</title><rect x="63.4696%" y="677" width="0.0761%" height="15" fill="rgb(229,3,52)" fg:x="174365" fg:w="209"/><text x="63.7196%" y="687.50"></text></g><g><title>&lt;std::sync::remutex::ReentrantMutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (209 samples, 0.08%)</title><rect x="63.4696%" y="661" width="0.0761%" height="15" fill="rgb(253,49,37)" fg:x="174365" fg:w="209"/><text x="63.7196%" y="671.50"></text></g><g><title>std::sys::unix::locks::futex_mutex::Mutex::unlock (179 samples, 0.07%)</title><rect x="63.4805%" y="645" width="0.0652%" height="15" fill="rgb(240,103,49)" fg:x="174395" fg:w="179"/><text x="63.7305%" y="655.50"></text></g><g><title>core::sync::atomic::AtomicU32::swap (167 samples, 0.06%)</title><rect x="63.4849%" y="629" width="0.0608%" height="15" fill="rgb(250,182,30)" fg:x="174407" fg:w="167"/><text x="63.7349%" y="639.50"></text></g><g><title>core::sync::atomic::atomic_swap (167 samples, 0.06%)</title><rect x="63.4849%" y="613" width="0.0608%" height="15" fill="rgb(248,8,30)" fg:x="174407" fg:w="167"/><text x="63.7349%" y="623.50"></text></g><g><title>std::io::buffered::bufwriter::BufWriter&lt;W&gt;::spare_capacity (34 samples, 0.01%)</title><rect x="63.5945%" y="581" width="0.0124%" height="15" fill="rgb(237,120,30)" fg:x="174708" fg:w="34"/><text x="63.8445%" y="591.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::capacity (28 samples, 0.01%)</title><rect x="63.5967%" y="565" width="0.0102%" height="15" fill="rgb(221,146,34)" fg:x="174714" fg:w="28"/><text x="63.8467%" y="575.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::capacity (28 samples, 0.01%)</title><rect x="63.5967%" y="549" width="0.0102%" height="15" fill="rgb(242,55,13)" fg:x="174714" fg:w="28"/><text x="63.8467%" y="559.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::set_len (56 samples, 0.02%)</title><rect x="63.6083%" y="565" width="0.0204%" height="15" fill="rgb(242,112,31)" fg:x="174746" fg:w="56"/><text x="63.8583%" y="575.50"></text></g><g><title>&lt;std::io::buffered::bufwriter::BufWriter&lt;W&gt; as std::io::Write&gt;::write_all (153 samples, 0.06%)</title><rect x="63.5912%" y="597" width="0.0557%" height="15" fill="rgb(249,192,27)" fg:x="174699" fg:w="153"/><text x="63.8412%" y="607.50"></text></g><g><title>std::io::buffered::bufwriter::BufWriter&lt;W&gt;::write_to_buffer_unchecked (110 samples, 0.04%)</title><rect x="63.6068%" y="581" width="0.0400%" height="15" fill="rgb(208,204,44)" fg:x="174742" fg:w="110"/><text x="63.8568%" y="591.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (50 samples, 0.02%)</title><rect x="63.6287%" y="565" width="0.0182%" height="15" fill="rgb(208,93,54)" fg:x="174802" fg:w="50"/><text x="63.8787%" y="575.50"></text></g><g><title>__memcpy_avx_unaligned_erms (38 samples, 0.01%)</title><rect x="63.6331%" y="549" width="0.0138%" height="15" fill="rgb(242,1,31)" fg:x="174814" fg:w="38"/><text x="63.8831%" y="559.50"></text></g><g><title>__GI___libc_write (12,433 samples, 4.53%)</title><rect x="63.6494%" y="533" width="4.5257%" height="15" fill="rgb(241,83,25)" fg:x="174859" fg:w="12433"/><text x="63.8994%" y="543.50">__GI_..</text></g><g><title>[unknown] (12,188 samples, 4.44%)</title><rect x="63.7386%" y="517" width="4.4365%" height="15" fill="rgb(205,169,50)" fg:x="175104" fg:w="12188"/><text x="63.9886%" y="527.50">[unkn..</text></g><g><title>[unknown] (11,737 samples, 4.27%)</title><rect x="63.9028%" y="501" width="4.2723%" height="15" fill="rgb(239,186,37)" fg:x="175555" fg:w="11737"/><text x="64.1528%" y="511.50">[unkn..</text></g><g><title>[unknown] (11,649 samples, 4.24%)</title><rect x="63.9348%" y="485" width="4.2403%" height="15" fill="rgb(205,221,10)" fg:x="175643" fg:w="11649"/><text x="64.1848%" y="495.50">[unkn..</text></g><g><title>[unknown] (11,512 samples, 4.19%)</title><rect x="63.9847%" y="469" width="4.1904%" height="15" fill="rgb(218,196,15)" fg:x="175780" fg:w="11512"/><text x="64.2347%" y="479.50">[unkn..</text></g><g><title>[unknown] (11,248 samples, 4.09%)</title><rect x="64.0808%" y="453" width="4.0943%" height="15" fill="rgb(218,196,35)" fg:x="176044" fg:w="11248"/><text x="64.3308%" y="463.50">[unk..</text></g><g><title>[unknown] (10,969 samples, 3.99%)</title><rect x="64.1823%" y="437" width="3.9928%" height="15" fill="rgb(233,63,24)" fg:x="176323" fg:w="10969"/><text x="64.4323%" y="447.50">[unk..</text></g><g><title>[unknown] (10,791 samples, 3.93%)</title><rect x="64.2471%" y="421" width="3.9280%" height="15" fill="rgb(225,8,4)" fg:x="176501" fg:w="10791"/><text x="64.4971%" y="431.50">[unk..</text></g><g><title>[unknown] (10,623 samples, 3.87%)</title><rect x="64.3083%" y="405" width="3.8668%" height="15" fill="rgb(234,105,35)" fg:x="176669" fg:w="10623"/><text x="64.5583%" y="415.50">[unk..</text></g><g><title>[unknown] (10,020 samples, 3.65%)</title><rect x="64.5278%" y="389" width="3.6473%" height="15" fill="rgb(236,21,32)" fg:x="177272" fg:w="10020"/><text x="64.7778%" y="399.50">[unk..</text></g><g><title>[unknown] (8,803 samples, 3.20%)</title><rect x="64.9708%" y="373" width="3.2043%" height="15" fill="rgb(228,109,6)" fg:x="178489" fg:w="8803"/><text x="65.2208%" y="383.50">[un..</text></g><g><title>[unknown] (6,991 samples, 2.54%)</title><rect x="65.6303%" y="357" width="2.5448%" height="15" fill="rgb(229,215,31)" fg:x="180301" fg:w="6991"/><text x="65.8803%" y="367.50">[u..</text></g><g><title>[unknown] (6,330 samples, 2.30%)</title><rect x="65.8710%" y="341" width="2.3041%" height="15" fill="rgb(221,52,54)" fg:x="180962" fg:w="6330"/><text x="66.1210%" y="351.50">[..</text></g><g><title>[unknown] (5,155 samples, 1.88%)</title><rect x="66.2987%" y="325" width="1.8764%" height="15" fill="rgb(252,129,43)" fg:x="182137" fg:w="5155"/><text x="66.5487%" y="335.50">[..</text></g><g><title>[unknown] (3,587 samples, 1.31%)</title><rect x="66.8694%" y="309" width="1.3057%" height="15" fill="rgb(248,183,27)" fg:x="183705" fg:w="3587"/><text x="67.1194%" y="319.50"></text></g><g><title>[unknown] (1,718 samples, 0.63%)</title><rect x="67.5497%" y="293" width="0.6254%" height="15" fill="rgb(250,0,22)" fg:x="185574" fg:w="1718"/><text x="67.7997%" y="303.50"></text></g><g><title>[unknown] (1,673 samples, 0.61%)</title><rect x="67.5661%" y="277" width="0.6090%" height="15" fill="rgb(213,166,10)" fg:x="185619" fg:w="1673"/><text x="67.8161%" y="287.50"></text></g><g><title>[unknown] (979 samples, 0.36%)</title><rect x="67.8187%" y="261" width="0.3564%" height="15" fill="rgb(207,163,36)" fg:x="186313" fg:w="979"/><text x="68.0687%" y="271.50"></text></g><g><title>[unknown] (726 samples, 0.26%)</title><rect x="67.9108%" y="245" width="0.2643%" height="15" fill="rgb(208,122,22)" fg:x="186566" fg:w="726"/><text x="68.1608%" y="255.50"></text></g><g><title>[unknown] (365 samples, 0.13%)</title><rect x="68.0422%" y="229" width="0.1329%" height="15" fill="rgb(207,104,49)" fg:x="186927" fg:w="365"/><text x="68.2922%" y="239.50"></text></g><g><title>[unknown] (199 samples, 0.07%)</title><rect x="68.1027%" y="213" width="0.0724%" height="15" fill="rgb(248,211,50)" fg:x="187093" fg:w="199"/><text x="68.3527%" y="223.50"></text></g><g><title>[unknown] (172 samples, 0.06%)</title><rect x="68.1125%" y="197" width="0.0626%" height="15" fill="rgb(217,13,45)" fg:x="187120" fg:w="172"/><text x="68.3625%" y="207.50"></text></g><g><title>[unknown] (120 samples, 0.04%)</title><rect x="68.1314%" y="181" width="0.0437%" height="15" fill="rgb(211,216,49)" fg:x="187172" fg:w="120"/><text x="68.3814%" y="191.50"></text></g><g><title>&lt;std::sys::unix::stdio::Stdout as std::io::Write&gt;::write (12,500 samples, 4.55%)</title><rect x="63.6494%" y="565" width="4.5501%" height="15" fill="rgb(221,58,53)" fg:x="174859" fg:w="12500"/><text x="63.8994%" y="575.50">&lt;std:..</text></g><g><title>std::sys::unix::fd::FileDesc::write (12,500 samples, 4.55%)</title><rect x="63.6494%" y="549" width="4.5501%" height="15" fill="rgb(220,112,41)" fg:x="174859" fg:w="12500"/><text x="63.8994%" y="559.50">std::..</text></g><g><title>std::sys::unix::cvt (62 samples, 0.02%)</title><rect x="68.1769%" y="533" width="0.0226%" height="15" fill="rgb(236,38,28)" fg:x="187297" fg:w="62"/><text x="68.4269%" y="543.50"></text></g><g><title>&lt;std::io::stdio::StdoutRaw as std::io::Write&gt;::write_all (12,532 samples, 4.56%)</title><rect x="63.6469%" y="597" width="4.5617%" height="15" fill="rgb(227,195,22)" fg:x="174852" fg:w="12532"/><text x="63.8969%" y="607.50">&lt;std:..</text></g><g><title>std::io::Write::write_all (12,525 samples, 4.56%)</title><rect x="63.6494%" y="581" width="4.5592%" height="15" fill="rgb(214,55,33)" fg:x="174859" fg:w="12525"/><text x="63.8994%" y="591.50">std::..</text></g><g><title>__GI___libc_write (9,675 samples, 3.52%)</title><rect x="68.2213%" y="533" width="3.5217%" height="15" fill="rgb(248,80,13)" fg:x="187419" fg:w="9675"/><text x="68.4713%" y="543.50">__G..</text></g><g><title>[unknown] (9,541 samples, 3.47%)</title><rect x="68.2701%" y="517" width="3.4730%" height="15" fill="rgb(238,52,6)" fg:x="187553" fg:w="9541"/><text x="68.5201%" y="527.50">[un..</text></g><g><title>[unknown] (9,300 samples, 3.39%)</title><rect x="68.3578%" y="501" width="3.3852%" height="15" fill="rgb(224,198,47)" fg:x="187794" fg:w="9300"/><text x="68.6078%" y="511.50">[un..</text></g><g><title>[unknown] (9,252 samples, 3.37%)</title><rect x="68.3753%" y="485" width="3.3678%" height="15" fill="rgb(233,171,20)" fg:x="187842" fg:w="9252"/><text x="68.6253%" y="495.50">[un..</text></g><g><title>[unknown] (9,185 samples, 3.34%)</title><rect x="68.3997%" y="469" width="3.3434%" height="15" fill="rgb(241,30,25)" fg:x="187909" fg:w="9185"/><text x="68.6497%" y="479.50">[un..</text></g><g><title>[unknown] (9,036 samples, 3.29%)</title><rect x="68.4539%" y="453" width="3.2891%" height="15" fill="rgb(207,171,38)" fg:x="188058" fg:w="9036"/><text x="68.7039%" y="463.50">[un..</text></g><g><title>[unknown] (8,891 samples, 3.24%)</title><rect x="68.5067%" y="437" width="3.2364%" height="15" fill="rgb(234,70,1)" fg:x="188203" fg:w="8891"/><text x="68.7567%" y="447.50">[un..</text></g><g><title>[unknown] (8,768 samples, 3.19%)</title><rect x="68.5515%" y="421" width="3.1916%" height="15" fill="rgb(232,178,18)" fg:x="188326" fg:w="8768"/><text x="68.8015%" y="431.50">[un..</text></g><g><title>[unknown] (8,668 samples, 3.16%)</title><rect x="68.5879%" y="405" width="3.1552%" height="15" fill="rgb(241,78,40)" fg:x="188426" fg:w="8668"/><text x="68.8379%" y="415.50">[un..</text></g><g><title>[unknown] (8,307 samples, 3.02%)</title><rect x="68.7193%" y="389" width="3.0238%" height="15" fill="rgb(222,35,25)" fg:x="188787" fg:w="8307"/><text x="68.9693%" y="399.50">[un..</text></g><g><title>[unknown] (7,651 samples, 2.78%)</title><rect x="68.9581%" y="373" width="2.7850%" height="15" fill="rgb(207,92,16)" fg:x="189443" fg:w="7651"/><text x="69.2081%" y="383.50">[u..</text></g><g><title>[unknown] (6,534 samples, 2.38%)</title><rect x="69.3647%" y="357" width="2.3784%" height="15" fill="rgb(216,59,51)" fg:x="190560" fg:w="6534"/><text x="69.6147%" y="367.50">[u..</text></g><g><title>[unknown] (6,197 samples, 2.26%)</title><rect x="69.4873%" y="341" width="2.2557%" height="15" fill="rgb(213,80,28)" fg:x="190897" fg:w="6197"/><text x="69.7373%" y="351.50">[..</text></g><g><title>[unknown] (5,515 samples, 2.01%)</title><rect x="69.7356%" y="325" width="2.0075%" height="15" fill="rgb(220,93,7)" fg:x="191579" fg:w="5515"/><text x="69.9856%" y="335.50">[..</text></g><g><title>[unknown] (4,512 samples, 1.64%)</title><rect x="70.1007%" y="309" width="1.6424%" height="15" fill="rgb(225,24,44)" fg:x="192582" fg:w="4512"/><text x="70.3507%" y="319.50"></text></g><g><title>[unknown] (2,343 samples, 0.85%)</title><rect x="70.8902%" y="293" width="0.8529%" height="15" fill="rgb(243,74,40)" fg:x="194751" fg:w="2343"/><text x="71.1402%" y="303.50"></text></g><g><title>[unknown] (2,285 samples, 0.83%)</title><rect x="70.9113%" y="277" width="0.8317%" height="15" fill="rgb(228,39,7)" fg:x="194809" fg:w="2285"/><text x="71.1613%" y="287.50"></text></g><g><title>[unknown] (1,494 samples, 0.54%)</title><rect x="71.1992%" y="261" width="0.5438%" height="15" fill="rgb(227,79,8)" fg:x="195600" fg:w="1494"/><text x="71.4492%" y="271.50"></text></g><g><title>[unknown] (1,180 samples, 0.43%)</title><rect x="71.3135%" y="245" width="0.4295%" height="15" fill="rgb(236,58,11)" fg:x="195914" fg:w="1180"/><text x="71.5635%" y="255.50"></text></g><g><title>[unknown] (611 samples, 0.22%)</title><rect x="71.5207%" y="229" width="0.2224%" height="15" fill="rgb(249,63,35)" fg:x="196483" fg:w="611"/><text x="71.7707%" y="239.50"></text></g><g><title>[unknown] (199 samples, 0.07%)</title><rect x="71.6706%" y="213" width="0.0724%" height="15" fill="rgb(252,114,16)" fg:x="196895" fg:w="199"/><text x="71.9206%" y="223.50"></text></g><g><title>[unknown] (137 samples, 0.05%)</title><rect x="71.6932%" y="197" width="0.0499%" height="15" fill="rgb(254,151,24)" fg:x="196957" fg:w="137"/><text x="71.9432%" y="207.50"></text></g><g><title>[unknown] (97 samples, 0.04%)</title><rect x="71.7078%" y="181" width="0.0353%" height="15" fill="rgb(253,54,39)" fg:x="196997" fg:w="97"/><text x="71.9578%" y="191.50"></text></g><g><title>&lt;std::io::stdio::StdoutRaw as std::io::Write&gt;::write (9,740 samples, 3.55%)</title><rect x="68.2213%" y="581" width="3.5454%" height="15" fill="rgb(243,25,45)" fg:x="187419" fg:w="9740"/><text x="68.4713%" y="591.50">&lt;std..</text></g><g><title>&lt;std::sys::unix::stdio::Stdout as std::io::Write&gt;::write (9,740 samples, 3.55%)</title><rect x="68.2213%" y="565" width="3.5454%" height="15" fill="rgb(234,134,9)" fg:x="187419" fg:w="9740"/><text x="68.4713%" y="575.50">&lt;std..</text></g><g><title>std::sys::unix::fd::FileDesc::write (9,740 samples, 3.55%)</title><rect x="68.2213%" y="549" width="3.5454%" height="15" fill="rgb(227,166,31)" fg:x="187419" fg:w="9740"/><text x="68.4713%" y="559.50">std:..</text></g><g><title>std::sys::unix::cvt (63 samples, 0.02%)</title><rect x="71.7438%" y="533" width="0.0229%" height="15" fill="rgb(245,143,41)" fg:x="197096" fg:w="63"/><text x="71.9938%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::io::buffered::bufwriter::BufWriter&lt;W&gt;::flush_buf::BufGuard&gt; (36 samples, 0.01%)</title><rect x="71.7667%" y="581" width="0.0131%" height="15" fill="rgb(238,181,32)" fg:x="197159" fg:w="36"/><text x="72.0167%" y="591.50"></text></g><g><title>std::io::buffered::bufwriter::BufWriter&lt;W&gt;::flush_buf (9,819 samples, 3.57%)</title><rect x="68.2086%" y="597" width="3.5742%" height="15" fill="rgb(224,113,18)" fg:x="187384" fg:w="9819"/><text x="68.4586%" y="607.50">std:..</text></g><g><title>&lt;std::io::buffered::linewritershim::LineWriterShim&lt;W&gt; as std::io::Write&gt;::write_all (22,628 samples, 8.24%)</title><rect x="63.5850%" y="613" width="8.2367%" height="15" fill="rgb(240,229,28)" fg:x="174682" fg:w="22628"/><text x="63.8350%" y="623.50">&lt;std::io::b..</text></g><g><title>std::sys_common::memchr::memrchr (99 samples, 0.04%)</title><rect x="71.7857%" y="597" width="0.0360%" height="15" fill="rgb(250,185,3)" fg:x="197211" fg:w="99"/><text x="72.0357%" y="607.50"></text></g><g><title>std::sys::unix::memchr::memrchr (99 samples, 0.04%)</title><rect x="71.7857%" y="581" width="0.0360%" height="15" fill="rgb(212,59,25)" fg:x="197211" fg:w="99"/><text x="72.0357%" y="591.50"></text></g><g><title>std::sys::unix::memchr::memrchr::memrchr_specific (99 samples, 0.04%)</title><rect x="71.7857%" y="565" width="0.0360%" height="15" fill="rgb(221,87,20)" fg:x="197211" fg:w="99"/><text x="72.0357%" y="575.50"></text></g><g><title>__memrchr_avx2 (87 samples, 0.03%)</title><rect x="71.7900%" y="549" width="0.0317%" height="15" fill="rgb(213,74,28)" fg:x="197223" fg:w="87"/><text x="72.0400%" y="559.50"></text></g><g><title>&lt;std::io::buffered::linewriter::LineWriter&lt;W&gt; as std::io::Write&gt;::write_all (22,642 samples, 8.24%)</title><rect x="63.5850%" y="629" width="8.2418%" height="15" fill="rgb(224,132,34)" fg:x="174682" fg:w="22642"/><text x="63.8350%" y="639.50">&lt;std::io::b..</text></g><g><title>&lt;std::io::Write::write_fmt::Adapter&lt;T&gt; as core::fmt::Write&gt;::write_str (22,728 samples, 8.27%)</title><rect x="63.5741%" y="661" width="8.2731%" height="15" fill="rgb(222,101,24)" fg:x="174652" fg:w="22728"/><text x="63.8241%" y="671.50">&lt;std::io::Wr..</text></g><g><title>&lt;std::io::stdio::StdoutLock as std::io::Write&gt;::write_all (22,703 samples, 8.26%)</title><rect x="63.5832%" y="645" width="8.2640%" height="15" fill="rgb(254,142,4)" fg:x="174677" fg:w="22703"/><text x="63.8332%" y="655.50">&lt;std::io::st..</text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefMut&lt;std::io::buffered::linewriter::LineWriter&lt;std::io::stdio::StdoutRaw&gt;&gt;&gt; (41 samples, 0.01%)</title><rect x="71.8323%" y="629" width="0.0149%" height="15" fill="rgb(230,229,49)" fg:x="197339" fg:w="41"/><text x="72.0823%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::BorrowRefMut&gt; (41 samples, 0.01%)</title><rect x="71.8323%" y="613" width="0.0149%" height="15" fill="rgb(238,70,47)" fg:x="197339" fg:w="41"/><text x="72.0823%" y="623.50"></text></g><g><title>&lt;core::cell::BorrowRefMut as core::ops::drop::Drop&gt;::drop (41 samples, 0.01%)</title><rect x="71.8323%" y="597" width="0.0149%" height="15" fill="rgb(231,160,17)" fg:x="197339" fg:w="41"/><text x="72.0823%" y="607.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::set (41 samples, 0.01%)</title><rect x="71.8323%" y="581" width="0.0149%" height="15" fill="rgb(218,68,53)" fg:x="197339" fg:w="41"/><text x="72.0823%" y="591.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::replace (41 samples, 0.01%)</title><rect x="71.8323%" y="565" width="0.0149%" height="15" fill="rgb(236,111,10)" fg:x="197339" fg:w="41"/><text x="72.0823%" y="575.50"></text></g><g><title>core::mem::replace (41 samples, 0.01%)</title><rect x="71.8323%" y="549" width="0.0149%" height="15" fill="rgb(224,34,41)" fg:x="197339" fg:w="41"/><text x="72.0823%" y="559.50"></text></g><g><title>core::ptr::write (41 samples, 0.01%)</title><rect x="71.8323%" y="533" width="0.0149%" height="15" fill="rgb(241,118,19)" fg:x="197339" fg:w="41"/><text x="72.0823%" y="543.50"></text></g><g><title>&lt;std::io::buffered::linewriter::LineWriter&lt;W&gt; as std::io::Write&gt;::write_all (84 samples, 0.03%)</title><rect x="71.9080%" y="533" width="0.0306%" height="15" fill="rgb(238,129,25)" fg:x="197547" fg:w="84"/><text x="72.1580%" y="543.50"></text></g><g><title>&lt;std::io::buffered::linewritershim::LineWriterShim&lt;W&gt; as std::io::Write&gt;::write_all (84 samples, 0.03%)</title><rect x="71.9080%" y="517" width="0.0306%" height="15" fill="rgb(238,22,31)" fg:x="197547" fg:w="84"/><text x="72.1580%" y="527.50"></text></g><g><title>std::sys_common::memchr::memrchr (47 samples, 0.02%)</title><rect x="71.9214%" y="501" width="0.0171%" height="15" fill="rgb(222,174,48)" fg:x="197584" fg:w="47"/><text x="72.1714%" y="511.50"></text></g><g><title>std::sys::unix::memchr::memrchr (47 samples, 0.02%)</title><rect x="71.9214%" y="485" width="0.0171%" height="15" fill="rgb(206,152,40)" fg:x="197584" fg:w="47"/><text x="72.1714%" y="495.50"></text></g><g><title>std::sys::unix::memchr::memrchr::memrchr_specific (47 samples, 0.02%)</title><rect x="71.9214%" y="469" width="0.0171%" height="15" fill="rgb(218,99,54)" fg:x="197584" fg:w="47"/><text x="72.1714%" y="479.50"></text></g><g><title>__memrchr_avx2 (35 samples, 0.01%)</title><rect x="71.9258%" y="453" width="0.0127%" height="15" fill="rgb(220,174,26)" fg:x="197596" fg:w="35"/><text x="72.1758%" y="463.50"></text></g><g><title>&lt;std::io::Write::write_fmt::Adapter&lt;T&gt; as core::fmt::Write&gt;::write_str (112 samples, 0.04%)</title><rect x="71.9007%" y="565" width="0.0408%" height="15" fill="rgb(245,116,9)" fg:x="197527" fg:w="112"/><text x="72.1507%" y="575.50"></text></g><g><title>&lt;std::io::stdio::StdoutLock as std::io::Write&gt;::write_all (102 samples, 0.04%)</title><rect x="71.9043%" y="549" width="0.0371%" height="15" fill="rgb(209,72,35)" fg:x="197537" fg:w="102"/><text x="72.1543%" y="559.50"></text></g><g><title>core::fmt::Formatter::pad_integral (46 samples, 0.02%)</title><rect x="71.9415%" y="565" width="0.0167%" height="15" fill="rgb(226,126,21)" fg:x="197639" fg:w="46"/><text x="72.1915%" y="575.50"></text></g><g><title>core::fmt::write (23,099 samples, 8.41%)</title><rect x="63.5515%" y="677" width="8.4081%" height="15" fill="rgb(227,192,1)" fg:x="174590" fg:w="23099"/><text x="63.8015%" y="687.50">core::fmt::w..</text></g><g><title>core::fmt::rt::Argument::fmt (288 samples, 0.10%)</title><rect x="71.8548%" y="661" width="0.1048%" height="15" fill="rgb(237,180,29)" fg:x="197401" fg:w="288"/><text x="72.1048%" y="671.50"></text></g><g><title>&lt;coldbrew::runtime::ProgramCounter as core::fmt::Display&gt;::fmt (288 samples, 0.10%)</title><rect x="71.8548%" y="645" width="0.1048%" height="15" fill="rgb(230,197,35)" fg:x="197401" fg:w="288"/><text x="72.1048%" y="655.50"></text></g><g><title>core::fmt::write (247 samples, 0.09%)</title><rect x="71.8697%" y="629" width="0.0899%" height="15" fill="rgb(246,193,31)" fg:x="197442" fg:w="247"/><text x="72.1197%" y="639.50"></text></g><g><title>core::fmt::rt::Argument::fmt (197 samples, 0.07%)</title><rect x="71.8879%" y="613" width="0.0717%" height="15" fill="rgb(241,36,4)" fg:x="197492" fg:w="197"/><text x="72.1379%" y="623.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u64&gt;::fmt (197 samples, 0.07%)</title><rect x="71.8879%" y="597" width="0.0717%" height="15" fill="rgb(241,130,17)" fg:x="197492" fg:w="197"/><text x="72.1379%" y="607.50"></text></g><g><title>core::fmt::num::imp::fmt_u64 (194 samples, 0.07%)</title><rect x="71.8890%" y="581" width="0.0706%" height="15" fill="rgb(206,137,32)" fg:x="197495" fg:w="194"/><text x="72.1390%" y="591.50"></text></g><g><title>std::io::Write::write_fmt (23,121 samples, 8.42%)</title><rect x="63.5457%" y="693" width="8.4161%" height="15" fill="rgb(237,228,51)" fg:x="174574" fg:w="23121"/><text x="63.7957%" y="703.50">std::io::Wri..</text></g><g><title>&lt;std::io::stdio::Stdout as std::io::Write&gt;::write_fmt (23,606 samples, 8.59%)</title><rect x="63.4649%" y="725" width="8.5927%" height="15" fill="rgb(243,6,42)" fg:x="174352" fg:w="23606"/><text x="63.7149%" y="735.50">&lt;std::io::st..</text></g><g><title>&lt;&amp;std::io::stdio::Stdout as std::io::Write&gt;::write_fmt (23,595 samples, 8.59%)</title><rect x="63.4689%" y="709" width="8.5887%" height="15" fill="rgb(251,74,28)" fg:x="174363" fg:w="23595"/><text x="63.7189%" y="719.50">&lt;&amp;std::io::s..</text></g><g><title>std::io::stdio::Stdout::lock (263 samples, 0.10%)</title><rect x="71.9618%" y="693" width="0.0957%" height="15" fill="rgb(218,20,49)" fg:x="197695" fg:w="263"/><text x="72.2118%" y="703.50"></text></g><g><title>std::sync::remutex::ReentrantMutex&lt;T&gt;::lock (252 samples, 0.09%)</title><rect x="71.9658%" y="677" width="0.0917%" height="15" fill="rgb(238,28,14)" fg:x="197706" fg:w="252"/><text x="72.2158%" y="687.50"></text></g><g><title>std::sys::unix::locks::futex_mutex::Mutex::lock (230 samples, 0.08%)</title><rect x="71.9738%" y="661" width="0.0837%" height="15" fill="rgb(229,40,46)" fg:x="197728" fg:w="230"/><text x="72.2238%" y="671.50"></text></g><g><title>core::sync::atomic::AtomicU32::compare_exchange (220 samples, 0.08%)</title><rect x="71.9775%" y="645" width="0.0801%" height="15" fill="rgb(244,195,20)" fg:x="197738" fg:w="220"/><text x="72.2275%" y="655.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (220 samples, 0.08%)</title><rect x="71.9775%" y="629" width="0.0801%" height="15" fill="rgb(253,56,35)" fg:x="197738" fg:w="220"/><text x="72.2275%" y="639.50"></text></g><g><title>coldbrew::jit::JitCache::execute (34,656 samples, 12.61%)</title><rect x="59.4474%" y="773" width="12.6149%" height="15" fill="rgb(210,149,44)" fg:x="163315" fg:w="34656"/><text x="59.6974%" y="783.50">coldbrew::jit::JitC..</text></g><g><title>std::io::stdio::_print (23,649 samples, 8.61%)</title><rect x="63.4540%" y="757" width="8.6083%" height="15" fill="rgb(240,135,12)" fg:x="174322" fg:w="23649"/><text x="63.7040%" y="767.50">std::io::std..</text></g><g><title>std::io::stdio::print_to (23,632 samples, 8.60%)</title><rect x="63.4602%" y="741" width="8.6022%" height="15" fill="rgb(251,24,50)" fg:x="174339" fg:w="23632"/><text x="63.7102%" y="751.50">std::io::std..</text></g><g><title>core::option::Option&lt;T&gt;::is_some (64 samples, 0.02%)</title><rect x="72.0841%" y="725" width="0.0233%" height="15" fill="rgb(243,200,47)" fg:x="198031" fg:w="64"/><text x="72.3341%" y="735.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (432 samples, 0.16%)</title><rect x="72.2530%" y="629" width="0.1572%" height="15" fill="rgb(224,166,26)" fg:x="198495" fg:w="432"/><text x="72.5030%" y="639.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (117 samples, 0.04%)</title><rect x="72.3677%" y="613" width="0.0426%" height="15" fill="rgb(233,0,47)" fg:x="198810" fg:w="117"/><text x="72.6177%" y="623.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (711 samples, 0.26%)</title><rect x="73.1259%" y="613" width="0.2588%" height="15" fill="rgb(253,80,5)" fg:x="200893" fg:w="711"/><text x="73.3759%" y="623.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (2,695 samples, 0.98%)</title><rect x="72.4103%" y="629" width="0.9810%" height="15" fill="rgb(214,133,25)" fg:x="198927" fg:w="2695"/><text x="72.6603%" y="639.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::finish (3,284 samples, 1.20%)</title><rect x="72.1963%" y="677" width="1.1954%" height="15" fill="rgb(209,27,14)" fg:x="198339" fg:w="3284"/><text x="72.4463%" y="687.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (3,284 samples, 1.20%)</title><rect x="72.1963%" y="661" width="1.1954%" height="15" fill="rgb(219,102,51)" fg:x="198339" fg:w="3284"/><text x="72.4463%" y="671.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (3,284 samples, 1.20%)</title><rect x="72.1963%" y="645" width="1.1954%" height="15" fill="rgb(237,18,16)" fg:x="198339" fg:w="3284"/><text x="72.4463%" y="655.50"></text></g><g><title>__memcpy_avx_unaligned_erms (533 samples, 0.19%)</title><rect x="73.4135%" y="661" width="0.1940%" height="15" fill="rgb(241,85,17)" fg:x="201683" fg:w="533"/><text x="73.6635%" y="671.50"></text></g><g><title>_init (33 samples, 0.01%)</title><rect x="73.6075%" y="661" width="0.0120%" height="15" fill="rgb(236,90,42)" fg:x="202216" fg:w="33"/><text x="73.8575%" y="671.50"></text></g><g><title>__memcpy_avx_unaligned_erms (595 samples, 0.22%)</title><rect x="73.6195%" y="645" width="0.2166%" height="15" fill="rgb(249,57,21)" fg:x="202249" fg:w="595"/><text x="73.8695%" y="655.50"></text></g><g><title>_init (32 samples, 0.01%)</title><rect x="73.8361%" y="645" width="0.0116%" height="15" fill="rgb(243,12,36)" fg:x="202844" fg:w="32"/><text x="74.0861%" y="655.50"></text></g><g><title>__memcpy_avx_unaligned_erms (736 samples, 0.27%)</title><rect x="73.8991%" y="629" width="0.2679%" height="15" fill="rgb(253,128,47)" fg:x="203017" fg:w="736"/><text x="74.1491%" y="639.50"></text></g><g><title>_init (31 samples, 0.01%)</title><rect x="74.1670%" y="629" width="0.0113%" height="15" fill="rgb(207,33,20)" fg:x="203753" fg:w="31"/><text x="74.4170%" y="639.50"></text></g><g><title>&lt;std::collections::hash::map::RandomState as core::hash::BuildHasher&gt;::build_hasher (2,238 samples, 0.81%)</title><rect x="73.3916%" y="677" width="0.8146%" height="15" fill="rgb(233,215,35)" fg:x="201623" fg:w="2238"/><text x="73.6416%" y="687.50"></text></g><g><title>core::hash::sip::SipHasher13::new_with_keys (1,612 samples, 0.59%)</title><rect x="73.6195%" y="661" width="0.5868%" height="15" fill="rgb(249,188,52)" fg:x="202249" fg:w="1612"/><text x="73.8695%" y="671.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::new_with_keys (985 samples, 0.36%)</title><rect x="73.8477%" y="645" width="0.3585%" height="15" fill="rgb(225,12,32)" fg:x="202876" fg:w="985"/><text x="74.0977%" y="655.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::reset (77 samples, 0.03%)</title><rect x="74.1783%" y="629" width="0.0280%" height="15" fill="rgb(247,98,14)" fg:x="203784" fg:w="77"/><text x="74.4283%" y="639.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (299 samples, 0.11%)</title><rect x="74.8145%" y="549" width="0.1088%" height="15" fill="rgb(247,219,48)" fg:x="205532" fg:w="299"/><text x="75.0645%" y="559.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (1,239 samples, 0.45%)</title><rect x="74.4949%" y="565" width="0.4510%" height="15" fill="rgb(253,60,48)" fg:x="204654" fg:w="1239"/><text x="74.7449%" y="575.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (62 samples, 0.02%)</title><rect x="74.9234%" y="549" width="0.0226%" height="15" fill="rgb(245,15,52)" fg:x="205831" fg:w="62"/><text x="75.1734%" y="559.50"></text></g><g><title>core::hash::sip::u8to64_le (369 samples, 0.13%)</title><rect x="74.9459%" y="565" width="0.1343%" height="15" fill="rgb(220,133,28)" fg:x="205893" fg:w="369"/><text x="75.1959%" y="575.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (68 samples, 0.02%)</title><rect x="75.0555%" y="549" width="0.0248%" height="15" fill="rgb(217,180,4)" fg:x="206194" fg:w="68"/><text x="75.3055%" y="559.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (113 samples, 0.04%)</title><rect x="75.0803%" y="565" width="0.0411%" height="15" fill="rgb(251,24,1)" fg:x="206262" fg:w="113"/><text x="75.3303%" y="575.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::add (52 samples, 0.02%)</title><rect x="75.1214%" y="565" width="0.0189%" height="15" fill="rgb(212,185,49)" fg:x="206375" fg:w="52"/><text x="75.3714%" y="575.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (2,533 samples, 0.92%)</title><rect x="74.2369%" y="613" width="0.9220%" height="15" fill="rgb(215,175,22)" fg:x="203945" fg:w="2533"/><text x="74.4869%" y="623.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (2,488 samples, 0.91%)</title><rect x="74.2532%" y="597" width="0.9056%" height="15" fill="rgb(250,205,14)" fg:x="203990" fg:w="2488"/><text x="74.5032%" y="607.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (2,488 samples, 0.91%)</title><rect x="74.2532%" y="581" width="0.9056%" height="15" fill="rgb(225,211,22)" fg:x="203990" fg:w="2488"/><text x="74.5032%" y="591.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::as_ptr (51 samples, 0.02%)</title><rect x="75.1403%" y="565" width="0.0186%" height="15" fill="rgb(251,179,42)" fg:x="206427" fg:w="51"/><text x="75.3903%" y="575.50"></text></g><g><title>hashbrown::map::make_hash (8,368 samples, 3.05%)</title><rect x="72.1333%" y="709" width="3.0460%" height="15" fill="rgb(208,216,51)" fg:x="198166" fg:w="8368"/><text x="72.3833%" y="719.50">has..</text></g><g><title>core::hash::BuildHasher::hash_one (8,340 samples, 3.04%)</title><rect x="72.1435%" y="693" width="3.0358%" height="15" fill="rgb(235,36,11)" fg:x="198194" fg:w="8340"/><text x="72.3935%" y="703.50">cor..</text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (2,673 samples, 0.97%)</title><rect x="74.2063%" y="677" width="0.9730%" height="15" fill="rgb(213,189,28)" fg:x="203861" fg:w="2673"/><text x="74.4563%" y="687.50"></text></g><g><title>&lt;coldbrew::runtime::ProgramCounter as core::hash::Hash&gt;::hash (2,663 samples, 0.97%)</title><rect x="74.2099%" y="661" width="0.9693%" height="15" fill="rgb(227,203,42)" fg:x="203871" fg:w="2663"/><text x="74.4599%" y="671.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for usize&gt;::hash (2,646 samples, 0.96%)</title><rect x="74.2161%" y="645" width="0.9632%" height="15" fill="rgb(244,72,36)" fg:x="203888" fg:w="2646"/><text x="74.4661%" y="655.50"></text></g><g><title>core::hash::Hasher::write_usize (2,589 samples, 0.94%)</title><rect x="74.2369%" y="629" width="0.9424%" height="15" fill="rgb(213,53,17)" fg:x="203945" fg:w="2589"/><text x="74.4869%" y="639.50"></text></g><g><title>core::num::&lt;impl usize&gt;::to_ne_bytes (56 samples, 0.02%)</title><rect x="75.1589%" y="613" width="0.0204%" height="15" fill="rgb(207,167,3)" fg:x="206478" fg:w="56"/><text x="75.4089%" y="623.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ref (35 samples, 0.01%)</title><rect x="75.2055%" y="693" width="0.0127%" height="15" fill="rgb(216,98,30)" fg:x="206606" fg:w="35"/><text x="75.4555%" y="703.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ptr (35 samples, 0.01%)</title><rect x="75.2055%" y="677" width="0.0127%" height="15" fill="rgb(236,123,15)" fg:x="206606" fg:w="35"/><text x="75.4555%" y="687.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (31 samples, 0.01%)</title><rect x="75.2069%" y="661" width="0.0113%" height="15" fill="rgb(248,81,50)" fg:x="206610" fg:w="31"/><text x="75.4569%" y="671.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::from_base_index (32 samples, 0.01%)</title><rect x="75.2790%" y="661" width="0.0116%" height="15" fill="rgb(214,120,4)" fg:x="206808" fg:w="32"/><text x="75.5290%" y="671.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::bucket (102 samples, 0.04%)</title><rect x="75.2564%" y="677" width="0.0371%" height="15" fill="rgb(208,179,34)" fg:x="206746" fg:w="102"/><text x="75.5064%" y="687.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (124 samples, 0.05%)</title><rect x="75.2936%" y="677" width="0.0451%" height="15" fill="rgb(227,140,7)" fg:x="206848" fg:w="124"/><text x="75.5436%" y="687.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMask as core::iter::traits::collect::IntoIterator&gt;::into_iter (173 samples, 0.06%)</title><rect x="75.6576%" y="661" width="0.0630%" height="15" fill="rgb(214,22,6)" fg:x="207848" fg:w="173"/><text x="75.9076%" y="671.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::ops::try_trait::Try&gt;::branch (89 samples, 0.03%)</title><rect x="75.7908%" y="645" width="0.0324%" height="15" fill="rgb(207,137,27)" fg:x="208214" fg:w="89"/><text x="76.0408%" y="655.50"></text></g><g><title>core::num::nonzero::NonZeroU16::new (70 samples, 0.03%)</title><rect x="75.8669%" y="629" width="0.0255%" height="15" fill="rgb(210,8,46)" fg:x="208423" fg:w="70"/><text x="76.1169%" y="639.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (218 samples, 0.08%)</title><rect x="75.8232%" y="645" width="0.0794%" height="15" fill="rgb(240,16,54)" fg:x="208303" fg:w="218"/><text x="76.0732%" y="655.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::nonzero_trailing_zeros (28 samples, 0.01%)</title><rect x="75.8924%" y="629" width="0.0102%" height="15" fill="rgb(211,209,29)" fg:x="208493" fg:w="28"/><text x="76.1424%" y="639.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (503 samples, 0.18%)</title><rect x="75.7205%" y="661" width="0.1831%" height="15" fill="rgb(226,228,24)" fg:x="208021" fg:w="503"/><text x="75.9705%" y="671.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (48 samples, 0.02%)</title><rect x="75.9036%" y="661" width="0.0175%" height="15" fill="rgb(222,84,9)" fg:x="208524" fg:w="48"/><text x="76.1536%" y="671.50"></text></g><g><title>hashbrown::map::equivalent_key::{{closure}} (85 samples, 0.03%)</title><rect x="75.9295%" y="645" width="0.0309%" height="15" fill="rgb(234,203,30)" fg:x="208595" fg:w="85"/><text x="76.1795%" y="655.50"></text></g><g><title>&lt;Q as hashbrown::Equivalent&lt;K&gt;&gt;::equivalent (81 samples, 0.03%)</title><rect x="75.9309%" y="629" width="0.0295%" height="15" fill="rgb(238,109,14)" fg:x="208599" fg:w="81"/><text x="76.1809%" y="639.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (62 samples, 0.02%)</title><rect x="75.9379%" y="613" width="0.0226%" height="15" fill="rgb(233,206,34)" fg:x="208618" fg:w="62"/><text x="76.1879%" y="623.50"></text></g><g><title>&lt;coldbrew::runtime::ProgramCounter as core::cmp::PartialEq&gt;::eq (61 samples, 0.02%)</title><rect x="75.9382%" y="597" width="0.0222%" height="15" fill="rgb(220,167,47)" fg:x="208619" fg:w="61"/><text x="76.1882%" y="607.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::from_base_index (50 samples, 0.02%)</title><rect x="75.9710%" y="629" width="0.0182%" height="15" fill="rgb(238,105,10)" fg:x="208709" fg:w="50"/><text x="76.2210%" y="639.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::{{closure}} (191 samples, 0.07%)</title><rect x="75.9211%" y="661" width="0.0695%" height="15" fill="rgb(213,227,17)" fg:x="208572" fg:w="191"/><text x="76.1711%" y="671.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::bucket (58 samples, 0.02%)</title><rect x="75.9695%" y="645" width="0.0211%" height="15" fill="rgb(217,132,38)" fg:x="208705" fg:w="58"/><text x="76.2195%" y="655.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::probe_seq (36 samples, 0.01%)</title><rect x="76.0001%" y="661" width="0.0131%" height="15" fill="rgb(242,146,4)" fg:x="208789" fg:w="36"/><text x="76.2501%" y="671.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_undefined_si128 (30 samples, 0.01%)</title><rect x="76.5210%" y="629" width="0.0109%" height="15" fill="rgb(212,61,9)" fg:x="210220" fg:w="30"/><text x="76.7710%" y="639.50"></text></g><g><title>hashbrown::raw::sse2::Group::load (1,482 samples, 0.54%)</title><rect x="76.0230%" y="661" width="0.5395%" height="15" fill="rgb(247,126,22)" fg:x="208852" fg:w="1482"/><text x="76.2730%" y="671.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (1,337 samples, 0.49%)</title><rect x="76.0758%" y="645" width="0.4867%" height="15" fill="rgb(220,196,2)" fg:x="208997" fg:w="1337"/><text x="76.3258%" y="655.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (84 samples, 0.03%)</title><rect x="76.5319%" y="629" width="0.0306%" height="15" fill="rgb(208,46,4)" fg:x="210250" fg:w="84"/><text x="76.7819%" y="639.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_cmpeq_epi8 (490 samples, 0.18%)</title><rect x="76.7907%" y="645" width="0.1784%" height="15" fill="rgb(252,104,46)" fg:x="210961" fg:w="490"/><text x="77.0407%" y="655.50"></text></g><g><title>core::core_arch::x86::m128iExt::as_i8x16 (132 samples, 0.05%)</title><rect x="76.9210%" y="629" width="0.0480%" height="15" fill="rgb(237,152,48)" fg:x="211319" fg:w="132"/><text x="77.1710%" y="639.50"></text></g><g><title>core::core_arch::simd::i8x16::splat (130 samples, 0.05%)</title><rect x="77.3331%" y="629" width="0.0473%" height="15" fill="rgb(221,59,37)" fg:x="212451" fg:w="130"/><text x="77.5831%" y="639.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (1,168 samples, 0.43%)</title><rect x="76.9691%" y="645" width="0.4252%" height="15" fill="rgb(209,202,51)" fg:x="211451" fg:w="1168"/><text x="77.2191%" y="655.50"></text></g><g><title>core::core_arch::x86::m128iExt::as_i8x16 (38 samples, 0.01%)</title><rect x="77.3804%" y="629" width="0.0138%" height="15" fill="rgb(228,81,30)" fg:x="212581" fg:w="38"/><text x="77.6304%" y="639.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (3,104 samples, 1.13%)</title><rect x="76.5625%" y="661" width="1.1299%" height="15" fill="rgb(227,42,39)" fg:x="210334" fg:w="3104"/><text x="76.8125%" y="671.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_set1_epi8 (819 samples, 0.30%)</title><rect x="77.3942%" y="645" width="0.2981%" height="15" fill="rgb(221,26,2)" fg:x="212619" fg:w="819"/><text x="77.6442%" y="655.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_set_epi8 (818 samples, 0.30%)</title><rect x="77.3946%" y="629" width="0.2978%" height="15" fill="rgb(254,61,31)" fg:x="212620" fg:w="818"/><text x="77.6446%" y="639.50"></text></g><g><title>core::core_arch::simd::i8x16::new (107 samples, 0.04%)</title><rect x="77.6534%" y="613" width="0.0389%" height="15" fill="rgb(222,173,38)" fg:x="213331" fg:w="107"/><text x="77.9034%" y="623.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_cmpeq_epi8 (409 samples, 0.15%)</title><rect x="77.8758%" y="629" width="0.1489%" height="15" fill="rgb(218,50,12)" fg:x="213942" fg:w="409"/><text x="78.1258%" y="639.50"></text></g><g><title>core::core_arch::x86::m128iExt::as_i8x16 (104 samples, 0.04%)</title><rect x="77.9868%" y="613" width="0.0379%" height="15" fill="rgb(223,88,40)" fg:x="214247" fg:w="104"/><text x="78.2368%" y="623.50"></text></g><g><title>core::core_arch::simd::i8x16::splat (112 samples, 0.04%)</title><rect x="78.3749%" y="613" width="0.0408%" height="15" fill="rgb(237,54,19)" fg:x="215313" fg:w="112"/><text x="78.6249%" y="623.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (1,100 samples, 0.40%)</title><rect x="78.0247%" y="629" width="0.4004%" height="15" fill="rgb(251,129,25)" fg:x="214351" fg:w="1100"/><text x="78.2747%" y="639.50"></text></g><g><title>coldbrew::jit::JitCache::has_native_trace (18,262 samples, 6.65%)</title><rect x="72.0623%" y="773" width="6.6474%" height="15" fill="rgb(238,97,19)" fg:x="197971" fg:w="18262"/><text x="72.3123%" y="783.50">coldbrew:..</text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::contains_key (18,235 samples, 6.64%)</title><rect x="72.0721%" y="757" width="6.6376%" height="15" fill="rgb(240,169,18)" fg:x="197998" fg:w="18235"/><text x="72.3221%" y="767.50">std::coll..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::contains_key (18,235 samples, 6.64%)</title><rect x="72.0721%" y="741" width="6.6376%" height="15" fill="rgb(230,187,49)" fg:x="197998" fg:w="18235"/><text x="72.3221%" y="751.50">hashbrown..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (18,135 samples, 6.60%)</title><rect x="72.1085%" y="725" width="6.6012%" height="15" fill="rgb(209,44,26)" fg:x="198098" fg:w="18135"/><text x="72.3585%" y="735.50">hashbrown..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get (9,699 samples, 3.53%)</title><rect x="75.1793%" y="709" width="3.5305%" height="15" fill="rgb(244,0,6)" fg:x="206534" fg:w="9699"/><text x="75.4293%" y="719.50">has..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (9,592 samples, 3.49%)</title><rect x="75.2182%" y="693" width="3.4915%" height="15" fill="rgb(248,18,21)" fg:x="206641" fg:w="9592"/><text x="75.4682%" y="703.50">has..</text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::find_inner (9,261 samples, 3.37%)</title><rect x="75.3387%" y="677" width="3.3710%" height="15" fill="rgb(245,180,19)" fg:x="206972" fg:w="9261"/><text x="75.5887%" y="687.50">has..</text></g><g><title>hashbrown::raw::sse2::Group::match_empty (2,795 samples, 1.02%)</title><rect x="77.6924%" y="661" width="1.0174%" height="15" fill="rgb(252,118,36)" fg:x="213438" fg:w="2795"/><text x="77.9424%" y="671.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (2,710 samples, 0.99%)</title><rect x="77.7233%" y="645" width="0.9865%" height="15" fill="rgb(210,224,19)" fg:x="213523" fg:w="2710"/><text x="77.9733%" y="655.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_set1_epi8 (782 samples, 0.28%)</title><rect x="78.4251%" y="629" width="0.2847%" height="15" fill="rgb(218,30,24)" fg:x="215451" fg:w="782"/><text x="78.6751%" y="639.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_set_epi8 (782 samples, 0.28%)</title><rect x="78.4251%" y="613" width="0.2847%" height="15" fill="rgb(219,75,50)" fg:x="215451" fg:w="782"/><text x="78.6751%" y="623.50"></text></g><g><title>core::core_arch::simd::i8x16::new (131 samples, 0.05%)</title><rect x="78.6621%" y="597" width="0.0477%" height="15" fill="rgb(234,72,50)" fg:x="216102" fg:w="131"/><text x="78.9121%" y="607.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (30 samples, 0.01%)</title><rect x="78.8055%" y="629" width="0.0109%" height="15" fill="rgb(219,100,48)" fg:x="216496" fg:w="30"/><text x="79.0555%" y="639.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (87 samples, 0.03%)</title><rect x="78.8663%" y="613" width="0.0317%" height="15" fill="rgb(253,5,41)" fg:x="216663" fg:w="87"/><text x="79.1163%" y="623.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::finish (270 samples, 0.10%)</title><rect x="78.8011%" y="677" width="0.0983%" height="15" fill="rgb(247,181,11)" fg:x="216484" fg:w="270"/><text x="79.0511%" y="687.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (270 samples, 0.10%)</title><rect x="78.8011%" y="661" width="0.0983%" height="15" fill="rgb(222,223,25)" fg:x="216484" fg:w="270"/><text x="79.0511%" y="671.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (270 samples, 0.10%)</title><rect x="78.8011%" y="645" width="0.0983%" height="15" fill="rgb(214,198,28)" fg:x="216484" fg:w="270"/><text x="79.0511%" y="655.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (228 samples, 0.08%)</title><rect x="78.8164%" y="629" width="0.0830%" height="15" fill="rgb(230,46,43)" fg:x="216526" fg:w="228"/><text x="79.0664%" y="639.50"></text></g><g><title>__memcpy_avx_unaligned_erms (37 samples, 0.01%)</title><rect x="78.9023%" y="661" width="0.0135%" height="15" fill="rgb(233,65,53)" fg:x="216762" fg:w="37"/><text x="79.1523%" y="671.50"></text></g><g><title>__memcpy_avx_unaligned_erms (84 samples, 0.03%)</title><rect x="78.9161%" y="645" width="0.0306%" height="15" fill="rgb(221,121,27)" fg:x="216800" fg:w="84"/><text x="79.1661%" y="655.50"></text></g><g><title>__memcpy_avx_unaligned_erms (63 samples, 0.02%)</title><rect x="78.9525%" y="629" width="0.0229%" height="15" fill="rgb(247,70,47)" fg:x="216900" fg:w="63"/><text x="79.2025%" y="639.50"></text></g><g><title>&lt;std::collections::hash::map::RandomState as core::hash::BuildHasher&gt;::build_hasher (229 samples, 0.08%)</title><rect x="78.8994%" y="677" width="0.0834%" height="15" fill="rgb(228,85,35)" fg:x="216754" fg:w="229"/><text x="79.1494%" y="687.50"></text></g><g><title>core::hash::sip::SipHasher13::new_with_keys (183 samples, 0.07%)</title><rect x="78.9161%" y="661" width="0.0666%" height="15" fill="rgb(209,50,18)" fg:x="216800" fg:w="183"/><text x="79.1661%" y="671.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::new_with_keys (97 samples, 0.04%)</title><rect x="78.9474%" y="645" width="0.0353%" height="15" fill="rgb(250,19,35)" fg:x="216886" fg:w="97"/><text x="79.1974%" y="655.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (28 samples, 0.01%)</title><rect x="79.0457%" y="549" width="0.0102%" height="15" fill="rgb(253,107,29)" fg:x="217156" fg:w="28"/><text x="79.2957%" y="559.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (121 samples, 0.04%)</title><rect x="79.0141%" y="565" width="0.0440%" height="15" fill="rgb(252,179,29)" fg:x="217069" fg:w="121"/><text x="79.2641%" y="575.50"></text></g><g><title>core::hash::sip::u8to64_le (38 samples, 0.01%)</title><rect x="79.0581%" y="565" width="0.0138%" height="15" fill="rgb(238,194,6)" fg:x="217190" fg:w="38"/><text x="79.3081%" y="575.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (253 samples, 0.09%)</title><rect x="78.9871%" y="613" width="0.0921%" height="15" fill="rgb(238,164,29)" fg:x="216995" fg:w="253"/><text x="79.2371%" y="623.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (248 samples, 0.09%)</title><rect x="78.9889%" y="597" width="0.0903%" height="15" fill="rgb(224,25,9)" fg:x="217000" fg:w="248"/><text x="79.2389%" y="607.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (248 samples, 0.09%)</title><rect x="78.9889%" y="581" width="0.0903%" height="15" fill="rgb(244,153,23)" fg:x="217000" fg:w="248"/><text x="79.2389%" y="591.50"></text></g><g><title>hashbrown::map::make_hash (779 samples, 0.28%)</title><rect x="78.7975%" y="709" width="0.2836%" height="15" fill="rgb(212,203,14)" fg:x="216474" fg:w="779"/><text x="79.0475%" y="719.50"></text></g><g><title>core::hash::BuildHasher::hash_one (778 samples, 0.28%)</title><rect x="78.7978%" y="693" width="0.2832%" height="15" fill="rgb(220,164,20)" fg:x="216475" fg:w="778"/><text x="79.0478%" y="703.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (270 samples, 0.10%)</title><rect x="78.9828%" y="677" width="0.0983%" height="15" fill="rgb(222,203,48)" fg:x="216983" fg:w="270"/><text x="79.2328%" y="687.50"></text></g><g><title>&lt;coldbrew::runtime::ProgramCounter as core::hash::Hash&gt;::hash (268 samples, 0.10%)</title><rect x="78.9835%" y="661" width="0.0976%" height="15" fill="rgb(215,159,22)" fg:x="216985" fg:w="268"/><text x="79.2335%" y="671.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for usize&gt;::hash (263 samples, 0.10%)</title><rect x="78.9853%" y="645" width="0.0957%" height="15" fill="rgb(216,183,47)" fg:x="216990" fg:w="263"/><text x="79.2353%" y="655.50"></text></g><g><title>core::hash::Hasher::write_usize (258 samples, 0.09%)</title><rect x="78.9871%" y="629" width="0.0939%" height="15" fill="rgb(229,195,25)" fg:x="216995" fg:w="258"/><text x="79.2371%" y="639.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::bucket (34 samples, 0.01%)</title><rect x="79.0960%" y="677" width="0.0124%" height="15" fill="rgb(224,132,51)" fg:x="217294" fg:w="34"/><text x="79.3460%" y="687.50"></text></g><g><title>core::num::nonzero::NonZeroU16::new (38 samples, 0.01%)</title><rect x="79.2015%" y="629" width="0.0138%" height="15" fill="rgb(240,63,7)" fg:x="217584" fg:w="38"/><text x="79.4515%" y="639.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (109 samples, 0.04%)</title><rect x="79.1859%" y="645" width="0.0397%" height="15" fill="rgb(249,182,41)" fg:x="217541" fg:w="109"/><text x="79.4359%" y="655.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::nonzero_trailing_zeros (28 samples, 0.01%)</title><rect x="79.2154%" y="629" width="0.0102%" height="15" fill="rgb(243,47,26)" fg:x="217622" fg:w="28"/><text x="79.4654%" y="639.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (160 samples, 0.06%)</title><rect x="79.1680%" y="661" width="0.0582%" height="15" fill="rgb(233,48,2)" fg:x="217492" fg:w="160"/><text x="79.4180%" y="671.50"></text></g><g><title>hashbrown::map::equivalent_key::{{closure}} (109 samples, 0.04%)</title><rect x="79.2394%" y="645" width="0.0397%" height="15" fill="rgb(244,165,34)" fg:x="217688" fg:w="109"/><text x="79.4894%" y="655.50"></text></g><g><title>&lt;Q as hashbrown::Equivalent&lt;K&gt;&gt;::equivalent (102 samples, 0.04%)</title><rect x="79.2419%" y="629" width="0.0371%" height="15" fill="rgb(207,89,7)" fg:x="217695" fg:w="102"/><text x="79.4919%" y="639.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (83 samples, 0.03%)</title><rect x="79.2488%" y="613" width="0.0302%" height="15" fill="rgb(244,117,36)" fg:x="217714" fg:w="83"/><text x="79.4988%" y="623.50"></text></g><g><title>&lt;coldbrew::runtime::ProgramCounter as core::cmp::PartialEq&gt;::eq (82 samples, 0.03%)</title><rect x="79.2492%" y="597" width="0.0298%" height="15" fill="rgb(226,144,34)" fg:x="217715" fg:w="82"/><text x="79.4992%" y="607.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ref (36 samples, 0.01%)</title><rect x="79.2791%" y="645" width="0.0131%" height="15" fill="rgb(213,23,19)" fg:x="217797" fg:w="36"/><text x="79.5291%" y="655.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::from_base_index (56 samples, 0.02%)</title><rect x="79.2936%" y="629" width="0.0204%" height="15" fill="rgb(217,75,12)" fg:x="217837" fg:w="56"/><text x="79.5436%" y="639.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::{{closure}} (242 samples, 0.09%)</title><rect x="79.2263%" y="661" width="0.0881%" height="15" fill="rgb(224,159,17)" fg:x="217652" fg:w="242"/><text x="79.4763%" y="671.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::bucket (61 samples, 0.02%)</title><rect x="79.2922%" y="645" width="0.0222%" height="15" fill="rgb(217,118,1)" fg:x="217833" fg:w="61"/><text x="79.5422%" y="655.50"></text></g><g><title>hashbrown::raw::sse2::Group::load (202 samples, 0.07%)</title><rect x="79.3165%" y="661" width="0.0735%" height="15" fill="rgb(232,180,48)" fg:x="217900" fg:w="202"/><text x="79.5665%" y="671.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (180 samples, 0.07%)</title><rect x="79.3246%" y="645" width="0.0655%" height="15" fill="rgb(230,27,33)" fg:x="217922" fg:w="180"/><text x="79.5746%" y="655.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_cmpeq_epi8 (51 samples, 0.02%)</title><rect x="79.4137%" y="645" width="0.0186%" height="15" fill="rgb(205,31,21)" fg:x="218167" fg:w="51"/><text x="79.6637%" y="655.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (135 samples, 0.05%)</title><rect x="79.4323%" y="645" width="0.0491%" height="15" fill="rgb(253,59,4)" fg:x="218218" fg:w="135"/><text x="79.6823%" y="655.50"></text></g><g><title>coldbrew::profiler::Profiler::count_entry (2,204 samples, 0.80%)</title><rect x="78.7098%" y="773" width="0.8023%" height="15" fill="rgb(224,201,9)" fg:x="216233" fg:w="2204"/><text x="78.9598%" y="783.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get_mut (1,975 samples, 0.72%)</title><rect x="78.7931%" y="757" width="0.7189%" height="15" fill="rgb(229,206,30)" fg:x="216462" fg:w="1975"/><text x="79.0431%" y="767.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_mut (1,975 samples, 0.72%)</title><rect x="78.7931%" y="741" width="0.7189%" height="15" fill="rgb(212,67,47)" fg:x="216462" fg:w="1975"/><text x="79.0431%" y="751.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner_mut (1,967 samples, 0.72%)</title><rect x="78.7960%" y="725" width="0.7160%" height="15" fill="rgb(211,96,50)" fg:x="216470" fg:w="1967"/><text x="79.0460%" y="735.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get_mut (1,184 samples, 0.43%)</title><rect x="79.0810%" y="709" width="0.4310%" height="15" fill="rgb(252,114,18)" fg:x="217253" fg:w="1184"/><text x="79.3310%" y="719.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (1,158 samples, 0.42%)</title><rect x="79.0905%" y="693" width="0.4215%" height="15" fill="rgb(223,58,37)" fg:x="217279" fg:w="1158"/><text x="79.3405%" y="703.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::find_inner (1,099 samples, 0.40%)</title><rect x="79.1120%" y="677" width="0.4000%" height="15" fill="rgb(237,70,4)" fg:x="217338" fg:w="1099"/><text x="79.3620%" y="687.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (335 samples, 0.12%)</title><rect x="79.3901%" y="661" width="0.1219%" height="15" fill="rgb(244,85,46)" fg:x="218102" fg:w="335"/><text x="79.6401%" y="671.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_set1_epi8 (84 samples, 0.03%)</title><rect x="79.4814%" y="645" width="0.0306%" height="15" fill="rgb(223,39,52)" fg:x="218353" fg:w="84"/><text x="79.7314%" y="655.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_set_epi8 (84 samples, 0.03%)</title><rect x="79.4814%" y="629" width="0.0306%" height="15" fill="rgb(218,200,14)" fg:x="218353" fg:w="84"/><text x="79.7314%" y="639.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (124 samples, 0.05%)</title><rect x="79.8444%" y="613" width="0.0451%" height="15" fill="rgb(208,171,16)" fg:x="219350" fg:w="124"/><text x="80.0944%" y="623.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (398 samples, 0.14%)</title><rect x="79.7457%" y="629" width="0.1449%" height="15" fill="rgb(234,200,18)" fg:x="219079" fg:w="398"/><text x="79.9957%" y="639.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (778 samples, 0.28%)</title><rect x="80.5887%" y="613" width="0.2832%" height="15" fill="rgb(228,45,11)" fg:x="221395" fg:w="778"/><text x="80.8387%" y="623.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (2,721 samples, 0.99%)</title><rect x="79.8906%" y="629" width="0.9905%" height="15" fill="rgb(237,182,11)" fg:x="219477" fg:w="2721"/><text x="80.1406%" y="639.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::finish (3,257 samples, 1.19%)</title><rect x="79.6958%" y="677" width="1.1856%" height="15" fill="rgb(241,175,49)" fg:x="218942" fg:w="3257"/><text x="79.9458%" y="687.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (3,257 samples, 1.19%)</title><rect x="79.6958%" y="661" width="1.1856%" height="15" fill="rgb(247,38,35)" fg:x="218942" fg:w="3257"/><text x="79.9458%" y="671.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (3,257 samples, 1.19%)</title><rect x="79.6958%" y="645" width="1.1856%" height="15" fill="rgb(228,39,49)" fg:x="218942" fg:w="3257"/><text x="79.9458%" y="655.50"></text></g><g><title>__memcpy_avx_unaligned_erms (410 samples, 0.15%)</title><rect x="80.9069%" y="661" width="0.1492%" height="15" fill="rgb(226,101,26)" fg:x="222269" fg:w="410"/><text x="81.1569%" y="671.50"></text></g><g><title>__memcpy_avx_unaligned_erms (547 samples, 0.20%)</title><rect x="81.0641%" y="645" width="0.1991%" height="15" fill="rgb(206,141,19)" fg:x="222701" fg:w="547"/><text x="81.3141%" y="655.50"></text></g><g><title>_init (42 samples, 0.02%)</title><rect x="81.2632%" y="645" width="0.0153%" height="15" fill="rgb(211,200,13)" fg:x="223248" fg:w="42"/><text x="81.5132%" y="655.50"></text></g><g><title>__memcpy_avx_unaligned_erms (707 samples, 0.26%)</title><rect x="81.3288%" y="629" width="0.2574%" height="15" fill="rgb(241,121,6)" fg:x="223428" fg:w="707"/><text x="81.5788%" y="639.50"></text></g><g><title>_init (36 samples, 0.01%)</title><rect x="81.5861%" y="629" width="0.0131%" height="15" fill="rgb(234,221,29)" fg:x="224135" fg:w="36"/><text x="81.8361%" y="639.50"></text></g><g><title>&lt;std::collections::hash::map::RandomState as core::hash::BuildHasher&gt;::build_hasher (2,051 samples, 0.75%)</title><rect x="80.8814%" y="677" width="0.7466%" height="15" fill="rgb(229,136,5)" fg:x="222199" fg:w="2051"/><text x="81.1314%" y="687.50"></text></g><g><title>core::hash::sip::SipHasher13::new_with_keys (1,549 samples, 0.56%)</title><rect x="81.0641%" y="661" width="0.5638%" height="15" fill="rgb(238,36,11)" fg:x="222701" fg:w="1549"/><text x="81.3141%" y="671.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::new_with_keys (960 samples, 0.35%)</title><rect x="81.2785%" y="645" width="0.3494%" height="15" fill="rgb(251,55,41)" fg:x="223290" fg:w="960"/><text x="81.5285%" y="655.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::reset (79 samples, 0.03%)</title><rect x="81.5992%" y="629" width="0.0288%" height="15" fill="rgb(242,34,40)" fg:x="224171" fg:w="79"/><text x="81.8492%" y="639.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (327 samples, 0.12%)</title><rect x="82.3141%" y="549" width="0.1190%" height="15" fill="rgb(215,42,17)" fg:x="226135" fg:w="327"/><text x="82.5641%" y="559.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (1,244 samples, 0.45%)</title><rect x="82.0014%" y="565" width="0.4528%" height="15" fill="rgb(207,44,46)" fg:x="225276" fg:w="1244"/><text x="82.2514%" y="575.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (58 samples, 0.02%)</title><rect x="82.4332%" y="549" width="0.0211%" height="15" fill="rgb(211,206,28)" fg:x="226462" fg:w="58"/><text x="82.6832%" y="559.50"></text></g><g><title>core::hash::sip::u8to64_le (305 samples, 0.11%)</title><rect x="82.4543%" y="565" width="0.1110%" height="15" fill="rgb(237,167,16)" fg:x="226520" fg:w="305"/><text x="82.7043%" y="575.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (53 samples, 0.02%)</title><rect x="82.5460%" y="549" width="0.0193%" height="15" fill="rgb(233,66,6)" fg:x="226772" fg:w="53"/><text x="82.7960%" y="559.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (113 samples, 0.04%)</title><rect x="82.5653%" y="565" width="0.0411%" height="15" fill="rgb(246,123,29)" fg:x="226825" fg:w="113"/><text x="82.8153%" y="575.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::add (48 samples, 0.02%)</title><rect x="82.6064%" y="565" width="0.0175%" height="15" fill="rgb(209,62,40)" fg:x="226938" fg:w="48"/><text x="82.8564%" y="575.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (2,661 samples, 0.97%)</title><rect x="81.6742%" y="613" width="0.9686%" height="15" fill="rgb(218,4,25)" fg:x="224377" fg:w="2661"/><text x="81.9242%" y="623.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (2,605 samples, 0.95%)</title><rect x="81.6946%" y="597" width="0.9482%" height="15" fill="rgb(253,91,49)" fg:x="224433" fg:w="2605"/><text x="81.9446%" y="607.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (2,605 samples, 0.95%)</title><rect x="81.6946%" y="581" width="0.9482%" height="15" fill="rgb(228,155,29)" fg:x="224433" fg:w="2605"/><text x="81.9446%" y="591.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::as_ptr (52 samples, 0.02%)</title><rect x="82.6239%" y="565" width="0.0189%" height="15" fill="rgb(243,57,37)" fg:x="226986" fg:w="52"/><text x="82.8739%" y="575.50"></text></g><g><title>hashbrown::map::make_hash (8,309 samples, 3.02%)</title><rect x="79.6405%" y="709" width="3.0245%" height="15" fill="rgb(244,167,17)" fg:x="218790" fg:w="8309"/><text x="79.8905%" y="719.50">has..</text></g><g><title>core::hash::BuildHasher::hash_one (8,271 samples, 3.01%)</title><rect x="79.6543%" y="693" width="3.0107%" height="15" fill="rgb(207,181,38)" fg:x="218828" fg:w="8271"/><text x="79.9043%" y="703.50">cor..</text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (2,849 samples, 1.04%)</title><rect x="81.6280%" y="677" width="1.0370%" height="15" fill="rgb(211,8,23)" fg:x="224250" fg:w="2849"/><text x="81.8780%" y="687.50"></text></g><g><title>&lt;coldbrew::runtime::ProgramCounter as core::hash::Hash&gt;::hash (2,814 samples, 1.02%)</title><rect x="81.6407%" y="661" width="1.0243%" height="15" fill="rgb(235,11,44)" fg:x="224285" fg:w="2814"/><text x="81.8907%" y="671.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for usize&gt;::hash (2,784 samples, 1.01%)</title><rect x="81.6516%" y="645" width="1.0134%" height="15" fill="rgb(248,18,52)" fg:x="224315" fg:w="2784"/><text x="81.9016%" y="655.50"></text></g><g><title>core::hash::Hasher::write_usize (2,722 samples, 0.99%)</title><rect x="81.6742%" y="629" width="0.9908%" height="15" fill="rgb(208,4,7)" fg:x="224377" fg:w="2722"/><text x="81.9242%" y="639.50"></text></g><g><title>core::num::&lt;impl usize&gt;::to_ne_bytes (61 samples, 0.02%)</title><rect x="82.6428%" y="613" width="0.0222%" height="15" fill="rgb(240,17,39)" fg:x="227038" fg:w="61"/><text x="82.8928%" y="623.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ref (54 samples, 0.02%)</title><rect x="82.6996%" y="693" width="0.0197%" height="15" fill="rgb(207,170,3)" fg:x="227194" fg:w="54"/><text x="82.9496%" y="703.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ptr (54 samples, 0.02%)</title><rect x="82.6996%" y="677" width="0.0197%" height="15" fill="rgb(236,100,52)" fg:x="227194" fg:w="54"/><text x="82.9496%" y="687.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (42 samples, 0.02%)</title><rect x="82.7040%" y="661" width="0.0153%" height="15" fill="rgb(246,78,51)" fg:x="227206" fg:w="42"/><text x="82.9540%" y="671.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (28 samples, 0.01%)</title><rect x="82.7091%" y="645" width="0.0102%" height="15" fill="rgb(211,17,15)" fg:x="227220" fg:w="28"/><text x="82.9591%" y="655.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::bucket (94 samples, 0.03%)</title><rect x="82.7651%" y="677" width="0.0342%" height="15" fill="rgb(209,59,46)" fg:x="227374" fg:w="94"/><text x="83.0151%" y="687.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (97 samples, 0.04%)</title><rect x="82.7993%" y="677" width="0.0353%" height="15" fill="rgb(210,92,25)" fg:x="227468" fg:w="97"/><text x="83.0493%" y="687.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMask as core::iter::traits::collect::IntoIterator&gt;::into_iter (180 samples, 0.07%)</title><rect x="83.0971%" y="661" width="0.0655%" height="15" fill="rgb(238,174,52)" fg:x="228286" fg:w="180"/><text x="83.3471%" y="671.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::ops::try_trait::Try&gt;::branch (60 samples, 0.02%)</title><rect x="83.2241%" y="645" width="0.0218%" height="15" fill="rgb(230,73,7)" fg:x="228635" fg:w="60"/><text x="83.4741%" y="655.50"></text></g><g><title>core::num::nonzero::NonZeroU16::new (46 samples, 0.02%)</title><rect x="83.2853%" y="629" width="0.0167%" height="15" fill="rgb(243,124,40)" fg:x="228803" fg:w="46"/><text x="83.5353%" y="639.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (184 samples, 0.07%)</title><rect x="83.2460%" y="645" width="0.0670%" height="15" fill="rgb(244,170,11)" fg:x="228695" fg:w="184"/><text x="83.4960%" y="655.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::nonzero_trailing_zeros (30 samples, 0.01%)</title><rect x="83.3020%" y="629" width="0.0109%" height="15" fill="rgb(207,114,54)" fg:x="228849" fg:w="30"/><text x="83.5520%" y="639.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (420 samples, 0.15%)</title><rect x="83.1626%" y="661" width="0.1529%" height="15" fill="rgb(205,42,20)" fg:x="228466" fg:w="420"/><text x="83.4126%" y="671.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (71 samples, 0.03%)</title><rect x="83.3166%" y="661" width="0.0258%" height="15" fill="rgb(230,30,28)" fg:x="228889" fg:w="71"/><text x="83.5666%" y="671.50"></text></g><g><title>hashbrown::map::equivalent_key::{{closure}} (83 samples, 0.03%)</title><rect x="83.3490%" y="645" width="0.0302%" height="15" fill="rgb(205,73,54)" fg:x="228978" fg:w="83"/><text x="83.5990%" y="655.50"></text></g><g><title>&lt;Q as hashbrown::Equivalent&lt;K&gt;&gt;::equivalent (77 samples, 0.03%)</title><rect x="83.3512%" y="629" width="0.0280%" height="15" fill="rgb(254,227,23)" fg:x="228984" fg:w="77"/><text x="83.6012%" y="639.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (61 samples, 0.02%)</title><rect x="83.3570%" y="613" width="0.0222%" height="15" fill="rgb(228,202,34)" fg:x="229000" fg:w="61"/><text x="83.6070%" y="623.50"></text></g><g><title>&lt;coldbrew::runtime::ProgramCounter as core::cmp::PartialEq&gt;::eq (55 samples, 0.02%)</title><rect x="83.3592%" y="597" width="0.0200%" height="15" fill="rgb(222,225,37)" fg:x="229006" fg:w="55"/><text x="83.6092%" y="607.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::from_base_index (47 samples, 0.02%)</title><rect x="83.3901%" y="629" width="0.0171%" height="15" fill="rgb(221,14,54)" fg:x="229091" fg:w="47"/><text x="83.6401%" y="639.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::{{closure}} (179 samples, 0.07%)</title><rect x="83.3424%" y="661" width="0.0652%" height="15" fill="rgb(254,102,2)" fg:x="228960" fg:w="179"/><text x="83.5924%" y="671.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::bucket (57 samples, 0.02%)</title><rect x="83.3868%" y="645" width="0.0207%" height="15" fill="rgb(232,104,17)" fg:x="229082" fg:w="57"/><text x="83.6368%" y="655.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (32 samples, 0.01%)</title><rect x="83.4080%" y="645" width="0.0116%" height="15" fill="rgb(250,220,14)" fg:x="229140" fg:w="32"/><text x="83.6580%" y="655.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::ctrl (35 samples, 0.01%)</title><rect x="83.4076%" y="661" width="0.0127%" height="15" fill="rgb(241,158,9)" fg:x="229139" fg:w="35"/><text x="83.6576%" y="671.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::probe_seq (32 samples, 0.01%)</title><rect x="83.4203%" y="661" width="0.0116%" height="15" fill="rgb(246,9,43)" fg:x="229174" fg:w="32"/><text x="83.6703%" y="671.50"></text></g><g><title>hashbrown::raw::h2 (33 samples, 0.01%)</title><rect x="83.4320%" y="661" width="0.0120%" height="15" fill="rgb(206,73,33)" fg:x="229206" fg:w="33"/><text x="83.6820%" y="671.50"></text></g><g><title>hashbrown::raw::sse2::Group::load (1,555 samples, 0.57%)</title><rect x="83.4440%" y="661" width="0.5660%" height="15" fill="rgb(222,79,8)" fg:x="229239" fg:w="1555"/><text x="83.6940%" y="671.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (1,426 samples, 0.52%)</title><rect x="83.4909%" y="645" width="0.5191%" height="15" fill="rgb(234,8,54)" fg:x="229368" fg:w="1426"/><text x="83.7409%" y="655.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (87 samples, 0.03%)</title><rect x="83.9783%" y="629" width="0.0317%" height="15" fill="rgb(209,134,38)" fg:x="230707" fg:w="87"/><text x="84.2283%" y="639.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_cmpeq_epi8 (459 samples, 0.17%)</title><rect x="84.2284%" y="645" width="0.1671%" height="15" fill="rgb(230,127,29)" fg:x="231394" fg:w="459"/><text x="84.4784%" y="655.50"></text></g><g><title>core::core_arch::x86::m128iExt::as_i8x16 (119 samples, 0.04%)</title><rect x="84.3522%" y="629" width="0.0433%" height="15" fill="rgb(242,44,41)" fg:x="231734" fg:w="119"/><text x="84.6022%" y="639.50"></text></g><g><title>core::core_arch::simd::i8x16::splat (114 samples, 0.04%)</title><rect x="84.7803%" y="629" width="0.0415%" height="15" fill="rgb(222,56,43)" fg:x="232910" fg:w="114"/><text x="85.0303%" y="639.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (1,191 samples, 0.43%)</title><rect x="84.3955%" y="645" width="0.4335%" height="15" fill="rgb(238,39,47)" fg:x="231853" fg:w="1191"/><text x="84.6455%" y="655.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (3,083 samples, 1.12%)</title><rect x="84.0100%" y="661" width="1.1222%" height="15" fill="rgb(226,79,43)" fg:x="230794" fg:w="3083"/><text x="84.2600%" y="671.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_set1_epi8 (833 samples, 0.30%)</title><rect x="84.8290%" y="645" width="0.3032%" height="15" fill="rgb(242,105,53)" fg:x="233044" fg:w="833"/><text x="85.0790%" y="655.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_set_epi8 (833 samples, 0.30%)</title><rect x="84.8290%" y="629" width="0.3032%" height="15" fill="rgb(251,132,46)" fg:x="233044" fg:w="833"/><text x="85.0790%" y="639.50"></text></g><g><title>core::core_arch::simd::i8x16::new (115 samples, 0.04%)</title><rect x="85.0904%" y="613" width="0.0419%" height="15" fill="rgb(231,77,14)" fg:x="233762" fg:w="115"/><text x="85.3404%" y="623.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_cmpeq_epi8 (415 samples, 0.15%)</title><rect x="85.3463%" y="629" width="0.1511%" height="15" fill="rgb(240,135,9)" fg:x="234465" fg:w="415"/><text x="85.5963%" y="639.50"></text></g><g><title>core::core_arch::x86::m128iExt::as_i8x16 (110 samples, 0.04%)</title><rect x="85.4573%" y="613" width="0.0400%" height="15" fill="rgb(248,109,14)" fg:x="234770" fg:w="110"/><text x="85.7073%" y="623.50"></text></g><g><title>core::core_arch::simd::i8x16::splat (107 samples, 0.04%)</title><rect x="85.8315%" y="613" width="0.0389%" height="15" fill="rgb(227,146,52)" fg:x="235798" fg:w="107"/><text x="86.0815%" y="623.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (1,049 samples, 0.38%)</title><rect x="85.4973%" y="629" width="0.3818%" height="15" fill="rgb(232,54,3)" fg:x="234880" fg:w="1049"/><text x="85.7473%" y="639.50"></text></g><g><title>coldbrew::profiler::Profiler::is_hot (18,231 samples, 6.64%)</title><rect x="79.5120%" y="773" width="6.6362%" height="15" fill="rgb(229,201,43)" fg:x="218437" fg:w="18231"/><text x="79.7620%" y="783.50">coldbrew:..</text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (18,094 samples, 6.59%)</title><rect x="79.5619%" y="757" width="6.5863%" height="15" fill="rgb(252,161,33)" fg:x="218574" fg:w="18094"/><text x="79.8119%" y="767.50">std::coll..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (18,094 samples, 6.59%)</title><rect x="79.5619%" y="741" width="6.5863%" height="15" fill="rgb(226,146,40)" fg:x="218574" fg:w="18094"/><text x="79.8119%" y="751.50">hashbrown..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (17,947 samples, 6.53%)</title><rect x="79.6154%" y="725" width="6.5328%" height="15" fill="rgb(219,47,25)" fg:x="218721" fg:w="17947"/><text x="79.8654%" y="735.50">hashbrown..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get (9,569 samples, 3.48%)</title><rect x="82.6650%" y="709" width="3.4832%" height="15" fill="rgb(250,135,13)" fg:x="227099" fg:w="9569"/><text x="82.9150%" y="719.50">has..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (9,420 samples, 3.43%)</title><rect x="82.7193%" y="693" width="3.4289%" height="15" fill="rgb(219,229,18)" fg:x="227248" fg:w="9420"/><text x="82.9693%" y="703.50">has..</text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::find_inner (9,103 samples, 3.31%)</title><rect x="82.8346%" y="677" width="3.3135%" height="15" fill="rgb(217,152,27)" fg:x="227565" fg:w="9103"/><text x="83.0846%" y="687.50">has..</text></g><g><title>hashbrown::raw::sse2::Group::match_empty (2,791 samples, 1.02%)</title><rect x="85.1322%" y="661" width="1.0159%" height="15" fill="rgb(225,71,47)" fg:x="233877" fg:w="2791"/><text x="85.3822%" y="671.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (2,658 samples, 0.97%)</title><rect x="85.1807%" y="645" width="0.9675%" height="15" fill="rgb(220,139,14)" fg:x="234010" fg:w="2658"/><text x="85.4307%" y="655.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_set1_epi8 (739 samples, 0.27%)</title><rect x="85.8792%" y="629" width="0.2690%" height="15" fill="rgb(247,54,32)" fg:x="235929" fg:w="739"/><text x="86.1292%" y="639.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_set_epi8 (739 samples, 0.27%)</title><rect x="85.8792%" y="613" width="0.2690%" height="15" fill="rgb(252,131,39)" fg:x="235929" fg:w="739"/><text x="86.1292%" y="623.50"></text></g><g><title>core::core_arch::simd::i8x16::new (108 samples, 0.04%)</title><rect x="86.1089%" y="597" width="0.0393%" height="15" fill="rgb(210,108,39)" fg:x="236560" fg:w="108"/><text x="86.3589%" y="607.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_mut_ptr (32 samples, 0.01%)</title><rect x="86.3229%" y="741" width="0.0116%" height="15" fill="rgb(205,23,29)" fg:x="237148" fg:w="32"/><text x="86.5729%" y="751.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (32 samples, 0.01%)</title><rect x="86.3229%" y="725" width="0.0116%" height="15" fill="rgb(246,139,46)" fg:x="237148" fg:w="32"/><text x="86.5729%" y="735.50"></text></g><g><title>core::ptr::unique::Unique&lt;T&gt;::as_ptr (29 samples, 0.01%)</title><rect x="86.3240%" y="709" width="0.0106%" height="15" fill="rgb(250,81,26)" fg:x="237151" fg:w="29"/><text x="86.5740%" y="719.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::as_ptr (29 samples, 0.01%)</title><rect x="86.3240%" y="693" width="0.0106%" height="15" fill="rgb(214,104,7)" fg:x="237151" fg:w="29"/><text x="86.5740%" y="703.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::DerefMut&gt;::deref_mut (120 samples, 0.04%)</title><rect x="86.3218%" y="757" width="0.0437%" height="15" fill="rgb(233,189,8)" fg:x="237145" fg:w="120"/><text x="86.5718%" y="767.50"></text></g><g><title>core::slice::raw::from_raw_parts_mut (85 samples, 0.03%)</title><rect x="86.3345%" y="741" width="0.0309%" height="15" fill="rgb(228,141,17)" fg:x="237180" fg:w="85"/><text x="86.5845%" y="751.50"></text></g><g><title>core::ptr::slice_from_raw_parts_mut (85 samples, 0.03%)</title><rect x="86.3345%" y="725" width="0.0309%" height="15" fill="rgb(247,157,1)" fg:x="237180" fg:w="85"/><text x="86.5845%" y="735.50"></text></g><g><title>core::ptr::metadata::from_raw_parts_mut (85 samples, 0.03%)</title><rect x="86.3345%" y="709" width="0.0309%" height="15" fill="rgb(249,225,5)" fg:x="237180" fg:w="85"/><text x="86.5845%" y="719.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (82 samples, 0.03%)</title><rect x="86.3771%" y="741" width="0.0298%" height="15" fill="rgb(242,55,13)" fg:x="237297" fg:w="82"/><text x="86.6271%" y="751.50"></text></g><g><title>core::slice::raw::from_raw_parts (41 samples, 0.01%)</title><rect x="86.3921%" y="725" width="0.0149%" height="15" fill="rgb(230,49,50)" fg:x="237338" fg:w="41"/><text x="86.6421%" y="735.50"></text></g><g><title>core::ptr::slice_from_raw_parts (41 samples, 0.01%)</title><rect x="86.3921%" y="709" width="0.0149%" height="15" fill="rgb(241,111,38)" fg:x="237338" fg:w="41"/><text x="86.6421%" y="719.50"></text></g><g><title>core::ptr::metadata::from_raw_parts (41 samples, 0.01%)</title><rect x="86.3921%" y="693" width="0.0149%" height="15" fill="rgb(252,155,4)" fg:x="237338" fg:w="41"/><text x="86.6421%" y="703.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (215 samples, 0.08%)</title><rect x="86.3655%" y="757" width="0.0783%" height="15" fill="rgb(212,69,32)" fg:x="237265" fg:w="215"/><text x="86.6155%" y="767.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (101 samples, 0.04%)</title><rect x="86.4070%" y="741" width="0.0368%" height="15" fill="rgb(243,107,47)" fg:x="237379" fg:w="101"/><text x="86.6570%" y="751.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (76 samples, 0.03%)</title><rect x="86.4161%" y="725" width="0.0277%" height="15" fill="rgb(247,130,12)" fg:x="237404" fg:w="76"/><text x="86.6661%" y="735.50"></text></g><g><title>coldbrew::runtime::Runtime::jump (63 samples, 0.02%)</title><rect x="86.4467%" y="757" width="0.0229%" height="15" fill="rgb(233,74,16)" fg:x="237488" fg:w="63"/><text x="86.6967%" y="767.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (46 samples, 0.02%)</title><rect x="86.4973%" y="741" width="0.0167%" height="15" fill="rgb(208,58,18)" fg:x="237627" fg:w="46"/><text x="86.7473%" y="751.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (40 samples, 0.01%)</title><rect x="86.5988%" y="597" width="0.0146%" height="15" fill="rgb(242,225,1)" fg:x="237906" fg:w="40"/><text x="86.8488%" y="607.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (122 samples, 0.04%)</title><rect x="86.5704%" y="613" width="0.0444%" height="15" fill="rgb(249,39,40)" fg:x="237828" fg:w="122"/><text x="86.8204%" y="623.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (179 samples, 0.07%)</title><rect x="86.8019%" y="597" width="0.0652%" height="15" fill="rgb(207,72,44)" fg:x="238464" fg:w="179"/><text x="87.0519%" y="607.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::finish (862 samples, 0.31%)</title><rect x="86.5537%" y="661" width="0.3138%" height="15" fill="rgb(215,193,12)" fg:x="237782" fg:w="862"/><text x="86.8037%" y="671.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (862 samples, 0.31%)</title><rect x="86.5537%" y="645" width="0.3138%" height="15" fill="rgb(248,41,39)" fg:x="237782" fg:w="862"/><text x="86.8037%" y="655.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (862 samples, 0.31%)</title><rect x="86.5537%" y="629" width="0.3138%" height="15" fill="rgb(253,85,4)" fg:x="237782" fg:w="862"/><text x="86.8037%" y="639.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (694 samples, 0.25%)</title><rect x="86.6148%" y="613" width="0.2526%" height="15" fill="rgb(243,70,31)" fg:x="237950" fg:w="694"/><text x="86.8648%" y="623.50"></text></g><g><title>__memcpy_avx_unaligned_erms (108 samples, 0.04%)</title><rect x="86.8711%" y="645" width="0.0393%" height="15" fill="rgb(253,195,26)" fg:x="238654" fg:w="108"/><text x="87.1211%" y="655.50"></text></g><g><title>__memcpy_avx_unaligned_erms (118 samples, 0.04%)</title><rect x="86.9130%" y="629" width="0.0430%" height="15" fill="rgb(243,42,11)" fg:x="238769" fg:w="118"/><text x="87.1630%" y="639.50"></text></g><g><title>__memcpy_avx_unaligned_erms (213 samples, 0.08%)</title><rect x="86.9708%" y="613" width="0.0775%" height="15" fill="rgb(239,66,17)" fg:x="238928" fg:w="213"/><text x="87.2208%" y="623.50"></text></g><g><title>&lt;std::collections::hash::map::RandomState as core::hash::BuildHasher&gt;::build_hasher (520 samples, 0.19%)</title><rect x="86.8675%" y="661" width="0.1893%" height="15" fill="rgb(217,132,21)" fg:x="238644" fg:w="520"/><text x="87.1175%" y="671.50"></text></g><g><title>core::hash::sip::SipHasher13::new_with_keys (395 samples, 0.14%)</title><rect x="86.9130%" y="645" width="0.1438%" height="15" fill="rgb(252,202,21)" fg:x="238769" fg:w="395"/><text x="87.1630%" y="655.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::new_with_keys (268 samples, 0.10%)</title><rect x="86.9592%" y="629" width="0.0976%" height="15" fill="rgb(233,98,36)" fg:x="238896" fg:w="268"/><text x="87.2092%" y="639.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (127 samples, 0.05%)</title><rect x="87.1015%" y="565" width="0.0462%" height="15" fill="rgb(216,153,54)" fg:x="239287" fg:w="127"/><text x="87.3515%" y="575.50"></text></g><g><title>core::hash::sip::u8to64_le (51 samples, 0.02%)</title><rect x="87.1477%" y="565" width="0.0186%" height="15" fill="rgb(250,99,7)" fg:x="239414" fg:w="51"/><text x="87.3977%" y="575.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (312 samples, 0.11%)</title><rect x="87.0615%" y="613" width="0.1136%" height="15" fill="rgb(207,56,50)" fg:x="239177" fg:w="312"/><text x="87.3115%" y="623.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (305 samples, 0.11%)</title><rect x="87.0640%" y="597" width="0.1110%" height="15" fill="rgb(244,61,34)" fg:x="239184" fg:w="305"/><text x="87.3140%" y="607.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (305 samples, 0.11%)</title><rect x="87.0640%" y="581" width="0.1110%" height="15" fill="rgb(241,50,38)" fg:x="239184" fg:w="305"/><text x="87.3140%" y="591.50"></text></g><g><title>hashbrown::map::make_hash (1,752 samples, 0.64%)</title><rect x="86.5377%" y="693" width="0.6377%" height="15" fill="rgb(212,166,30)" fg:x="237738" fg:w="1752"/><text x="86.7877%" y="703.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1,747 samples, 0.64%)</title><rect x="86.5395%" y="677" width="0.6359%" height="15" fill="rgb(249,127,32)" fg:x="237743" fg:w="1747"/><text x="86.7895%" y="687.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (326 samples, 0.12%)</title><rect x="87.0567%" y="661" width="0.1187%" height="15" fill="rgb(209,103,0)" fg:x="239164" fg:w="326"/><text x="87.3067%" y="671.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for usize&gt;::hash (320 samples, 0.12%)</title><rect x="87.0589%" y="645" width="0.1165%" height="15" fill="rgb(238,209,51)" fg:x="239170" fg:w="320"/><text x="87.3089%" y="655.50"></text></g><g><title>core::hash::Hasher::write_usize (313 samples, 0.11%)</title><rect x="87.0615%" y="629" width="0.1139%" height="15" fill="rgb(237,56,23)" fg:x="239177" fg:w="313"/><text x="87.3115%" y="639.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ref (44 samples, 0.02%)</title><rect x="87.1816%" y="677" width="0.0160%" height="15" fill="rgb(215,153,46)" fg:x="239507" fg:w="44"/><text x="87.4316%" y="687.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ptr (44 samples, 0.02%)</title><rect x="87.1816%" y="661" width="0.0160%" height="15" fill="rgb(224,49,31)" fg:x="239507" fg:w="44"/><text x="87.4316%" y="671.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (30 samples, 0.01%)</title><rect x="87.2253%" y="629" width="0.0109%" height="15" fill="rgb(250,18,42)" fg:x="239627" fg:w="30"/><text x="87.4753%" y="639.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::from_base_index (55 samples, 0.02%)</title><rect x="87.2180%" y="645" width="0.0200%" height="15" fill="rgb(215,176,39)" fg:x="239607" fg:w="55"/><text x="87.4680%" y="655.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::bucket (86 samples, 0.03%)</title><rect x="87.2100%" y="661" width="0.0313%" height="15" fill="rgb(223,77,29)" fg:x="239585" fg:w="86"/><text x="87.4600%" y="671.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (48 samples, 0.02%)</title><rect x="87.2413%" y="661" width="0.0175%" height="15" fill="rgb(234,94,52)" fg:x="239671" fg:w="48"/><text x="87.4913%" y="671.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMask as core::iter::traits::collect::IntoIterator&gt;::into_iter (38 samples, 0.01%)</title><rect x="87.3621%" y="645" width="0.0138%" height="15" fill="rgb(220,154,50)" fg:x="240003" fg:w="38"/><text x="87.6121%" y="655.50"></text></g><g><title>core::num::nonzero::NonZeroU16::new (62 samples, 0.02%)</title><rect x="87.4448%" y="613" width="0.0226%" height="15" fill="rgb(212,11,10)" fg:x="240230" fg:w="62"/><text x="87.6948%" y="623.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (203 samples, 0.07%)</title><rect x="87.4145%" y="629" width="0.0739%" height="15" fill="rgb(205,166,19)" fg:x="240147" fg:w="203"/><text x="87.6645%" y="639.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::nonzero_trailing_zeros (58 samples, 0.02%)</title><rect x="87.4673%" y="613" width="0.0211%" height="15" fill="rgb(244,198,16)" fg:x="240292" fg:w="58"/><text x="87.7173%" y="623.50"></text></g><g><title>core::num::nonzero::NonZeroU16::trailing_zeros (47 samples, 0.02%)</title><rect x="87.4713%" y="597" width="0.0171%" height="15" fill="rgb(219,69,12)" fg:x="240303" fg:w="47"/><text x="87.7213%" y="607.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (315 samples, 0.11%)</title><rect x="87.3760%" y="645" width="0.1147%" height="15" fill="rgb(245,30,7)" fg:x="240041" fg:w="315"/><text x="87.6260%" y="655.50"></text></g><g><title>hashbrown::map::equivalent_key::{{closure}} (182 samples, 0.07%)</title><rect x="87.5074%" y="629" width="0.0662%" height="15" fill="rgb(218,221,48)" fg:x="240402" fg:w="182"/><text x="87.7574%" y="639.50"></text></g><g><title>&lt;Q as hashbrown::Equivalent&lt;K&gt;&gt;::equivalent (168 samples, 0.06%)</title><rect x="87.5125%" y="613" width="0.0612%" height="15" fill="rgb(216,66,15)" fg:x="240416" fg:w="168"/><text x="87.7625%" y="623.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (132 samples, 0.05%)</title><rect x="87.5256%" y="597" width="0.0480%" height="15" fill="rgb(226,122,50)" fg:x="240452" fg:w="132"/><text x="87.7756%" y="607.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq for usize&gt;::eq (125 samples, 0.05%)</title><rect x="87.5281%" y="581" width="0.0455%" height="15" fill="rgb(239,156,16)" fg:x="240459" fg:w="125"/><text x="87.7781%" y="591.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ptr (34 samples, 0.01%)</title><rect x="87.5743%" y="613" width="0.0124%" height="15" fill="rgb(224,27,38)" fg:x="240586" fg:w="34"/><text x="87.8243%" y="623.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ref (55 samples, 0.02%)</title><rect x="87.5736%" y="629" width="0.0200%" height="15" fill="rgb(224,39,27)" fg:x="240584" fg:w="55"/><text x="87.8236%" y="639.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (34 samples, 0.01%)</title><rect x="87.6282%" y="597" width="0.0124%" height="15" fill="rgb(215,92,29)" fg:x="240734" fg:w="34"/><text x="87.8782%" y="607.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::from_base_index (124 samples, 0.05%)</title><rect x="87.5995%" y="613" width="0.0451%" height="15" fill="rgb(207,159,16)" fg:x="240655" fg:w="124"/><text x="87.8495%" y="623.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::{{closure}} (427 samples, 0.16%)</title><rect x="87.4906%" y="645" width="0.1554%" height="15" fill="rgb(238,163,47)" fg:x="240356" fg:w="427"/><text x="87.7406%" y="655.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::bucket (144 samples, 0.05%)</title><rect x="87.5936%" y="629" width="0.0524%" height="15" fill="rgb(219,91,49)" fg:x="240639" fg:w="144"/><text x="87.8436%" y="639.50"></text></g><g><title>hashbrown::raw::sse2::Group::load (284 samples, 0.10%)</title><rect x="87.6530%" y="645" width="0.1034%" height="15" fill="rgb(227,167,31)" fg:x="240802" fg:w="284"/><text x="87.9030%" y="655.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (254 samples, 0.09%)</title><rect x="87.6639%" y="629" width="0.0925%" height="15" fill="rgb(234,80,54)" fg:x="240832" fg:w="254"/><text x="87.9139%" y="639.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_cmpeq_epi8 (109 samples, 0.04%)</title><rect x="87.7993%" y="629" width="0.0397%" height="15" fill="rgb(212,114,2)" fg:x="241204" fg:w="109"/><text x="88.0493%" y="639.50"></text></g><g><title>core::core_arch::simd::i8x16::splat (30 samples, 0.01%)</title><rect x="87.9282%" y="613" width="0.0109%" height="15" fill="rgb(234,50,24)" fg:x="241558" fg:w="30"/><text x="88.1782%" y="623.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (277 samples, 0.10%)</title><rect x="87.8390%" y="629" width="0.1008%" height="15" fill="rgb(221,68,8)" fg:x="241313" fg:w="277"/><text x="88.0890%" y="639.50"></text></g><g><title>coldbrew::runtime::Runtime::load (4,231 samples, 1.54%)</title><rect x="86.4696%" y="757" width="1.5401%" height="15" fill="rgb(254,180,31)" fg:x="237551" fg:w="4231"/><text x="86.7196%" y="767.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (4,086 samples, 1.49%)</title><rect x="86.5224%" y="741" width="1.4873%" height="15" fill="rgb(247,130,50)" fg:x="237696" fg:w="4086"/><text x="86.7724%" y="751.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (4,086 samples, 1.49%)</title><rect x="86.5224%" y="725" width="1.4873%" height="15" fill="rgb(211,109,4)" fg:x="237696" fg:w="4086"/><text x="86.7724%" y="735.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (4,066 samples, 1.48%)</title><rect x="86.5297%" y="709" width="1.4800%" height="15" fill="rgb(238,50,21)" fg:x="237716" fg:w="4066"/><text x="86.7797%" y="719.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get (2,292 samples, 0.83%)</title><rect x="87.1754%" y="693" width="0.8343%" height="15" fill="rgb(225,57,45)" fg:x="239490" fg:w="2292"/><text x="87.4254%" y="703.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (2,231 samples, 0.81%)</title><rect x="87.1976%" y="677" width="0.8121%" height="15" fill="rgb(209,196,50)" fg:x="239551" fg:w="2231"/><text x="87.4476%" y="687.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::find_inner (2,063 samples, 0.75%)</title><rect x="87.2588%" y="661" width="0.7509%" height="15" fill="rgb(242,140,13)" fg:x="239719" fg:w="2063"/><text x="87.5088%" y="671.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (696 samples, 0.25%)</title><rect x="87.7564%" y="645" width="0.2533%" height="15" fill="rgb(217,111,7)" fg:x="241086" fg:w="696"/><text x="88.0064%" y="655.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_set1_epi8 (192 samples, 0.07%)</title><rect x="87.9398%" y="629" width="0.0699%" height="15" fill="rgb(253,193,51)" fg:x="241590" fg:w="192"/><text x="88.1898%" y="639.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_set_epi8 (192 samples, 0.07%)</title><rect x="87.9398%" y="613" width="0.0699%" height="15" fill="rgb(252,70,29)" fg:x="241590" fg:w="192"/><text x="88.1898%" y="623.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::DerefMut&gt;::deref_mut (47 samples, 0.02%)</title><rect x="88.0323%" y="741" width="0.0171%" height="15" fill="rgb(232,127,12)" fg:x="241844" fg:w="47"/><text x="88.2823%" y="751.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::pop (108 samples, 0.04%)</title><rect x="88.0494%" y="741" width="0.0393%" height="15" fill="rgb(211,180,21)" fg:x="241891" fg:w="108"/><text x="88.2994%" y="751.50"></text></g><g><title>coldbrew::runtime::Runtime::pop (270 samples, 0.10%)</title><rect x="88.0097%" y="757" width="0.0983%" height="15" fill="rgb(229,72,13)" fg:x="241782" fg:w="270"/><text x="88.2597%" y="767.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::last_mut (53 samples, 0.02%)</title><rect x="88.0887%" y="741" width="0.0193%" height="15" fill="rgb(240,211,49)" fg:x="241999" fg:w="53"/><text x="88.3387%" y="751.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (68 samples, 0.02%)</title><rect x="88.1265%" y="741" width="0.0248%" height="15" fill="rgb(219,149,40)" fg:x="242103" fg:w="68"/><text x="88.3765%" y="751.50"></text></g><g><title>coldbrew::runtime::Runtime::push (143 samples, 0.05%)</title><rect x="88.1080%" y="757" width="0.0521%" height="15" fill="rgb(210,127,46)" fg:x="242052" fg:w="143"/><text x="88.3580%" y="767.50"></text></g><g><title>hashbrown::map::make_hash (53 samples, 0.02%)</title><rect x="88.1640%" y="709" width="0.0193%" height="15" fill="rgb(220,106,7)" fg:x="242206" fg:w="53"/><text x="88.4140%" y="719.50"></text></g><g><title>core::hash::BuildHasher::hash_one (52 samples, 0.02%)</title><rect x="88.1644%" y="693" width="0.0189%" height="15" fill="rgb(249,31,22)" fg:x="242207" fg:w="52"/><text x="88.4144%" y="703.50"></text></g><g><title>coldbrew::runtime::Runtime::store (173 samples, 0.06%)</title><rect x="88.1600%" y="757" width="0.0630%" height="15" fill="rgb(253,1,49)" fg:x="242195" fg:w="173"/><text x="88.4100%" y="767.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::insert (166 samples, 0.06%)</title><rect x="88.1626%" y="741" width="0.0604%" height="15" fill="rgb(227,144,33)" fg:x="242202" fg:w="166"/><text x="88.4126%" y="751.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (166 samples, 0.06%)</title><rect x="88.1626%" y="725" width="0.0604%" height="15" fill="rgb(249,163,44)" fg:x="242202" fg:w="166"/><text x="88.4126%" y="735.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find_or_find_insert_slot (106 samples, 0.04%)</title><rect x="88.1844%" y="709" width="0.0386%" height="15" fill="rgb(234,15,39)" fg:x="242262" fg:w="106"/><text x="88.4344%" y="719.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::find_or_find_insert_slot_inner (98 samples, 0.04%)</title><rect x="88.1873%" y="693" width="0.0357%" height="15" fill="rgb(207,66,16)" fg:x="242270" fg:w="98"/><text x="88.4373%" y="703.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (33 samples, 0.01%)</title><rect x="88.2110%" y="677" width="0.0120%" height="15" fill="rgb(233,112,24)" fg:x="242335" fg:w="33"/><text x="88.4610%" y="687.50"></text></g><g><title>coldbrew::runtime::Value::rem (53 samples, 0.02%)</title><rect x="88.2234%" y="757" width="0.0193%" height="15" fill="rgb(230,90,22)" fg:x="242369" fg:w="53"/><text x="88.4734%" y="767.50"></text></g><g><title>core::cmp::PartialOrd::ge (50 samples, 0.02%)</title><rect x="88.2427%" y="757" width="0.0182%" height="15" fill="rgb(229,61,13)" fg:x="242422" fg:w="50"/><text x="88.4927%" y="767.50"></text></g><g><title>&lt;coldbrew::runtime::Value as core::cmp::PartialOrd&gt;::partial_cmp (38 samples, 0.01%)</title><rect x="88.2470%" y="741" width="0.0138%" height="15" fill="rgb(225,57,24)" fg:x="242434" fg:w="38"/><text x="88.4970%" y="751.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (40 samples, 0.01%)</title><rect x="88.3049%" y="725" width="0.0146%" height="15" fill="rgb(208,169,48)" fg:x="242593" fg:w="40"/><text x="88.5549%" y="735.50"></text></g><g><title>core::option::Option&lt;T&gt;::map_or_else (298 samples, 0.11%)</title><rect x="88.2674%" y="757" width="0.1085%" height="15" fill="rgb(244,218,51)" fg:x="242490" fg:w="298"/><text x="88.5174%" y="767.50"></text></g><g><title>coldbrew::runtime::Runtime::eval::{{closure}} (196 samples, 0.07%)</title><rect x="88.3045%" y="741" width="0.0713%" height="15" fill="rgb(214,148,10)" fg:x="242592" fg:w="196"/><text x="88.5545%" y="751.50"></text></g><g><title>coldbrew::runtime::Runtime::get_relative_offset (155 samples, 0.06%)</title><rect x="88.3195%" y="725" width="0.0564%" height="15" fill="rgb(225,174,27)" fg:x="242633" fg:w="155"/><text x="88.5695%" y="735.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get (54 samples, 0.02%)</title><rect x="88.3562%" y="709" width="0.0197%" height="15" fill="rgb(230,96,26)" fg:x="242734" fg:w="54"/><text x="88.6062%" y="719.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get (37 samples, 0.01%)</title><rect x="88.3624%" y="693" width="0.0135%" height="15" fill="rgb(232,10,30)" fg:x="242751" fg:w="37"/><text x="88.6124%" y="703.50"></text></g><g><title>core::option::Option&lt;T&gt;::unwrap (32 samples, 0.01%)</title><rect x="88.3759%" y="757" width="0.0116%" height="15" fill="rgb(222,8,50)" fg:x="242788" fg:w="32"/><text x="88.6259%" y="767.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::last_mut (111 samples, 0.04%)</title><rect x="88.3875%" y="757" width="0.0404%" height="15" fill="rgb(213,81,27)" fg:x="242820" fg:w="111"/><text x="88.6375%" y="767.50"></text></g><g><title>coldbrew::runtime::Runtime::eval::{{closure}} (279 samples, 0.10%)</title><rect x="88.4829%" y="741" width="0.1016%" height="15" fill="rgb(245,50,10)" fg:x="243082" fg:w="279"/><text x="88.7329%" y="751.50"></text></g><g><title>coldbrew::runtime::Value::add (198 samples, 0.07%)</title><rect x="88.5124%" y="725" width="0.0721%" height="15" fill="rgb(216,100,18)" fg:x="243163" fg:w="198"/><text x="88.7624%" y="735.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (30 samples, 0.01%)</title><rect x="88.6001%" y="677" width="0.0109%" height="15" fill="rgb(236,147,54)" fg:x="243404" fg:w="30"/><text x="88.8501%" y="687.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ptr (53 samples, 0.02%)</title><rect x="88.5939%" y="693" width="0.0193%" height="15" fill="rgb(205,143,26)" fg:x="243387" fg:w="53"/><text x="88.8439%" y="703.50"></text></g><g><title>std::collections::hash::map::Entry&lt;K,V&gt;::and_modify (515 samples, 0.19%)</title><rect x="88.4279%" y="757" width="0.1875%" height="15" fill="rgb(236,26,9)" fg:x="242931" fg:w="515"/><text x="88.6779%" y="767.50"></text></g><g><title>std::collections::hash::map::OccupiedEntry&lt;K,V&gt;::get_mut (85 samples, 0.03%)</title><rect x="88.5845%" y="741" width="0.0309%" height="15" fill="rgb(221,165,53)" fg:x="243361" fg:w="85"/><text x="88.8345%" y="751.50"></text></g><g><title>hashbrown::rustc_entry::RustcOccupiedEntry&lt;K,V,A&gt;::get_mut (70 samples, 0.03%)</title><rect x="88.5899%" y="725" width="0.0255%" height="15" fill="rgb(214,110,17)" fg:x="243376" fg:w="70"/><text x="88.8399%" y="735.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_mut (63 samples, 0.02%)</title><rect x="88.5925%" y="709" width="0.0229%" height="15" fill="rgb(237,197,12)" fg:x="243383" fg:w="63"/><text x="88.8425%" y="719.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (29 samples, 0.01%)</title><rect x="88.6955%" y="677" width="0.0106%" height="15" fill="rgb(205,84,17)" fg:x="243666" fg:w="29"/><text x="88.9455%" y="687.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ptr (55 samples, 0.02%)</title><rect x="88.6864%" y="693" width="0.0200%" height="15" fill="rgb(237,18,45)" fg:x="243641" fg:w="55"/><text x="88.9364%" y="703.50"></text></g><g><title>std::collections::hash::map::Entry&lt;K,V&gt;::or_insert (254 samples, 0.09%)</title><rect x="88.6154%" y="757" width="0.0925%" height="15" fill="rgb(221,87,14)" fg:x="243446" fg:w="254"/><text x="88.8654%" y="767.50"></text></g><g><title>std::collections::hash::map::OccupiedEntry&lt;K,V&gt;::into_mut (125 samples, 0.05%)</title><rect x="88.6624%" y="741" width="0.0455%" height="15" fill="rgb(238,186,15)" fg:x="243575" fg:w="125"/><text x="88.9124%" y="751.50"></text></g><g><title>hashbrown::rustc_entry::RustcOccupiedEntry&lt;K,V,A&gt;::into_mut (73 samples, 0.03%)</title><rect x="88.6813%" y="725" width="0.0266%" height="15" fill="rgb(208,115,11)" fg:x="243627" fg:w="73"/><text x="88.9313%" y="735.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_mut (63 samples, 0.02%)</title><rect x="88.6849%" y="709" width="0.0229%" height="15" fill="rgb(254,175,0)" fg:x="243637" fg:w="63"/><text x="88.9349%" y="719.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (35 samples, 0.01%)</title><rect x="88.8050%" y="629" width="0.0127%" height="15" fill="rgb(227,24,42)" fg:x="243967" fg:w="35"/><text x="89.0550%" y="639.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (123 samples, 0.04%)</title><rect x="88.7756%" y="645" width="0.0448%" height="15" fill="rgb(223,211,37)" fg:x="243886" fg:w="123"/><text x="89.0256%" y="655.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (76 samples, 0.03%)</title><rect x="88.8924%" y="629" width="0.0277%" height="15" fill="rgb(235,49,27)" fg:x="244207" fg:w="76"/><text x="89.1424%" y="639.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::finish (436 samples, 0.16%)</title><rect x="88.7621%" y="693" width="0.1587%" height="15" fill="rgb(254,97,51)" fg:x="243849" fg:w="436"/><text x="89.0121%" y="703.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (436 samples, 0.16%)</title><rect x="88.7621%" y="677" width="0.1587%" height="15" fill="rgb(249,51,40)" fg:x="243849" fg:w="436"/><text x="89.0121%" y="687.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (436 samples, 0.16%)</title><rect x="88.7621%" y="661" width="0.1587%" height="15" fill="rgb(210,128,45)" fg:x="243849" fg:w="436"/><text x="89.0121%" y="671.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (276 samples, 0.10%)</title><rect x="88.8203%" y="645" width="0.1005%" height="15" fill="rgb(224,137,50)" fg:x="244009" fg:w="276"/><text x="89.0703%" y="655.50"></text></g><g><title>__memcpy_avx_unaligned_erms (87 samples, 0.03%)</title><rect x="88.9241%" y="677" width="0.0317%" height="15" fill="rgb(242,15,9)" fg:x="244294" fg:w="87"/><text x="89.1741%" y="687.50"></text></g><g><title>__memcpy_avx_unaligned_erms (48 samples, 0.02%)</title><rect x="88.9565%" y="661" width="0.0175%" height="15" fill="rgb(233,187,41)" fg:x="244383" fg:w="48"/><text x="89.2065%" y="671.50"></text></g><g><title>__memcpy_avx_unaligned_erms (91 samples, 0.03%)</title><rect x="88.9852%" y="645" width="0.0331%" height="15" fill="rgb(227,2,29)" fg:x="244462" fg:w="91"/><text x="89.2352%" y="655.50"></text></g><g><title>&lt;std::collections::hash::map::RandomState as core::hash::BuildHasher&gt;::build_hasher (290 samples, 0.11%)</title><rect x="88.9208%" y="693" width="0.1056%" height="15" fill="rgb(222,70,3)" fg:x="244285" fg:w="290"/><text x="89.1708%" y="703.50"></text></g><g><title>core::hash::sip::SipHasher13::new_with_keys (192 samples, 0.07%)</title><rect x="88.9565%" y="677" width="0.0699%" height="15" fill="rgb(213,11,42)" fg:x="244383" fg:w="192"/><text x="89.2065%" y="687.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::new_with_keys (140 samples, 0.05%)</title><rect x="88.9754%" y="661" width="0.0510%" height="15" fill="rgb(225,150,9)" fg:x="244435" fg:w="140"/><text x="89.2254%" y="671.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (35 samples, 0.01%)</title><rect x="89.1075%" y="581" width="0.0127%" height="15" fill="rgb(230,162,45)" fg:x="244798" fg:w="35"/><text x="89.3575%" y="591.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (137 samples, 0.05%)</title><rect x="89.0730%" y="597" width="0.0499%" height="15" fill="rgb(222,14,52)" fg:x="244703" fg:w="137"/><text x="89.3230%" y="607.50"></text></g><g><title>core::hash::sip::u8to64_le (32 samples, 0.01%)</title><rect x="89.1228%" y="597" width="0.0116%" height="15" fill="rgb(254,198,14)" fg:x="244840" fg:w="32"/><text x="89.3728%" y="607.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (276 samples, 0.10%)</title><rect x="89.0406%" y="645" width="0.1005%" height="15" fill="rgb(220,217,30)" fg:x="244614" fg:w="276"/><text x="89.2906%" y="655.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (271 samples, 0.10%)</title><rect x="89.0424%" y="629" width="0.0986%" height="15" fill="rgb(215,146,41)" fg:x="244619" fg:w="271"/><text x="89.2924%" y="639.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (271 samples, 0.10%)</title><rect x="89.0424%" y="613" width="0.0986%" height="15" fill="rgb(217,27,36)" fg:x="244619" fg:w="271"/><text x="89.2924%" y="623.50"></text></g><g><title>hashbrown::map::make_hash (1,108 samples, 0.40%)</title><rect x="88.7413%" y="725" width="0.4033%" height="15" fill="rgb(219,218,39)" fg:x="243792" fg:w="1108"/><text x="88.9913%" y="735.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1,091 samples, 0.40%)</title><rect x="88.7475%" y="709" width="0.3971%" height="15" fill="rgb(219,4,42)" fg:x="243809" fg:w="1091"/><text x="88.9975%" y="719.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (325 samples, 0.12%)</title><rect x="89.0264%" y="693" width="0.1183%" height="15" fill="rgb(249,119,36)" fg:x="244575" fg:w="325"/><text x="89.2764%" y="703.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for usize&gt;::hash (294 samples, 0.11%)</title><rect x="89.0376%" y="677" width="0.1070%" height="15" fill="rgb(209,23,33)" fg:x="244606" fg:w="294"/><text x="89.2876%" y="687.50"></text></g><g><title>core::hash::Hasher::write_usize (286 samples, 0.10%)</title><rect x="89.0406%" y="661" width="0.1041%" height="15" fill="rgb(211,10,0)" fg:x="244614" fg:w="286"/><text x="89.2906%" y="671.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (31 samples, 0.01%)</title><rect x="89.1709%" y="677" width="0.0113%" height="15" fill="rgb(208,99,37)" fg:x="244972" fg:w="31"/><text x="89.4209%" y="687.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::from_base_index (56 samples, 0.02%)</title><rect x="89.1625%" y="693" width="0.0204%" height="15" fill="rgb(213,132,31)" fg:x="244949" fg:w="56"/><text x="89.4125%" y="703.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::bucket (85 samples, 0.03%)</title><rect x="89.1559%" y="709" width="0.0309%" height="15" fill="rgb(243,129,40)" fg:x="244931" fg:w="85"/><text x="89.4059%" y="719.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (54 samples, 0.02%)</title><rect x="89.1869%" y="709" width="0.0197%" height="15" fill="rgb(210,66,33)" fg:x="245016" fg:w="54"/><text x="89.4369%" y="719.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMask as core::iter::traits::collect::IntoIterator&gt;::into_iter (43 samples, 0.02%)</title><rect x="89.2939%" y="693" width="0.0157%" height="15" fill="rgb(209,189,4)" fg:x="245310" fg:w="43"/><text x="89.5439%" y="703.50"></text></g><g><title>core::num::nonzero::NonZeroU16::new (50 samples, 0.02%)</title><rect x="89.3678%" y="661" width="0.0182%" height="15" fill="rgb(214,107,37)" fg:x="245513" fg:w="50"/><text x="89.6178%" y="671.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (165 samples, 0.06%)</title><rect x="89.3463%" y="677" width="0.0601%" height="15" fill="rgb(245,88,54)" fg:x="245454" fg:w="165"/><text x="89.5963%" y="687.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::nonzero_trailing_zeros (56 samples, 0.02%)</title><rect x="89.3860%" y="661" width="0.0204%" height="15" fill="rgb(205,146,20)" fg:x="245563" fg:w="56"/><text x="89.6360%" y="671.50"></text></g><g><title>core::num::nonzero::NonZeroU16::trailing_zeros (47 samples, 0.02%)</title><rect x="89.3893%" y="645" width="0.0171%" height="15" fill="rgb(220,161,25)" fg:x="245572" fg:w="47"/><text x="89.6393%" y="655.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (276 samples, 0.10%)</title><rect x="89.3096%" y="693" width="0.1005%" height="15" fill="rgb(215,152,15)" fg:x="245353" fg:w="276"/><text x="89.5596%" y="703.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ref (42 samples, 0.02%)</title><rect x="89.4275%" y="677" width="0.0153%" height="15" fill="rgb(233,192,44)" fg:x="245677" fg:w="42"/><text x="89.6775%" y="687.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::from_base_index (113 samples, 0.04%)</title><rect x="89.4475%" y="661" width="0.0411%" height="15" fill="rgb(240,170,46)" fg:x="245732" fg:w="113"/><text x="89.6975%" y="671.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::bucket (131 samples, 0.05%)</title><rect x="89.4428%" y="677" width="0.0477%" height="15" fill="rgb(207,104,33)" fg:x="245719" fg:w="131"/><text x="89.6928%" y="687.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::{{closure}} (306 samples, 0.11%)</title><rect x="89.4104%" y="693" width="0.1114%" height="15" fill="rgb(219,21,39)" fg:x="245630" fg:w="306"/><text x="89.6604%" y="703.50"></text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry::{{closure}} (86 samples, 0.03%)</title><rect x="89.4905%" y="677" width="0.0313%" height="15" fill="rgb(214,133,29)" fg:x="245850" fg:w="86"/><text x="89.7405%" y="687.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq for usize&gt;::eq (44 samples, 0.02%)</title><rect x="89.5058%" y="661" width="0.0160%" height="15" fill="rgb(226,93,6)" fg:x="245892" fg:w="44"/><text x="89.7558%" y="671.50"></text></g><g><title>hashbrown::raw::sse2::Group::load (356 samples, 0.13%)</title><rect x="89.5294%" y="693" width="0.1296%" height="15" fill="rgb(252,222,34)" fg:x="245957" fg:w="356"/><text x="89.7794%" y="703.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (320 samples, 0.12%)</title><rect x="89.5425%" y="677" width="0.1165%" height="15" fill="rgb(252,92,48)" fg:x="245993" fg:w="320"/><text x="89.7925%" y="687.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_cmpeq_epi8 (98 samples, 0.04%)</title><rect x="89.6998%" y="677" width="0.0357%" height="15" fill="rgb(245,223,24)" fg:x="246425" fg:w="98"/><text x="89.9498%" y="687.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (237 samples, 0.09%)</title><rect x="89.7354%" y="677" width="0.0863%" height="15" fill="rgb(205,176,3)" fg:x="246523" fg:w="237"/><text x="89.9854%" y="687.50"></text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (3,204 samples, 1.17%)</title><rect x="88.7104%" y="741" width="1.1663%" height="15" fill="rgb(235,151,15)" fg:x="243707" fg:w="3204"/><text x="88.9604%" y="751.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (2,011 samples, 0.73%)</title><rect x="89.1447%" y="725" width="0.7320%" height="15" fill="rgb(237,209,11)" fg:x="244900" fg:w="2011"/><text x="89.3947%" y="735.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::find_inner (1,841 samples, 0.67%)</title><rect x="89.2065%" y="709" width="0.6701%" height="15" fill="rgb(243,227,24)" fg:x="245070" fg:w="1841"/><text x="89.4565%" y="719.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (598 samples, 0.22%)</title><rect x="89.6590%" y="693" width="0.2177%" height="15" fill="rgb(239,193,16)" fg:x="246313" fg:w="598"/><text x="89.9090%" y="703.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_set1_epi8 (151 samples, 0.05%)</title><rect x="89.8217%" y="677" width="0.0550%" height="15" fill="rgb(231,27,9)" fg:x="246760" fg:w="151"/><text x="90.0717%" y="687.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_set_epi8 (151 samples, 0.05%)</title><rect x="89.8217%" y="661" width="0.0550%" height="15" fill="rgb(219,169,10)" fg:x="246760" fg:w="151"/><text x="90.0717%" y="671.50"></text></g><g><title>coldbrew::runtime::Runtime::eval (10,286 samples, 3.74%)</title><rect x="86.1482%" y="773" width="3.7441%" height="15" fill="rgb(244,229,43)" fg:x="236668" fg:w="10286"/><text x="86.3982%" y="783.50">cold..</text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::entry (3,254 samples, 1.18%)</title><rect x="88.7079%" y="757" width="1.1845%" height="15" fill="rgb(254,38,20)" fg:x="243700" fg:w="3254"/><text x="88.9579%" y="767.50"></text></g><g><title>std::collections::hash::map::map_entry (43 samples, 0.02%)</title><rect x="89.8767%" y="741" width="0.0157%" height="15" fill="rgb(250,47,30)" fg:x="246911" fg:w="43"/><text x="90.1267%" y="751.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (38 samples, 0.01%)</title><rect x="90.7070%" y="757" width="0.0138%" height="15" fill="rgb(224,124,36)" fg:x="249192" fg:w="38"/><text x="90.9570%" y="767.50"></text></g><g><title>&lt;coldbrew::bytecode::OPCode as core::convert::From&lt;u8&gt;&gt;::from (566 samples, 0.21%)</title><rect x="90.7208%" y="757" width="0.2060%" height="15" fill="rgb(246,68,51)" fg:x="249230" fg:w="566"/><text x="90.9708%" y="767.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (80 samples, 0.03%)</title><rect x="91.0568%" y="709" width="0.0291%" height="15" fill="rgb(253,43,49)" fg:x="250153" fg:w="80"/><text x="91.3068%" y="719.50"></text></g><g><title>checked_request2size (48 samples, 0.02%)</title><rect x="91.1256%" y="677" width="0.0175%" height="15" fill="rgb(219,54,36)" fg:x="250342" fg:w="48"/><text x="91.3756%" y="687.50"></text></g><g><title>__GI___libc_malloc (220 samples, 0.08%)</title><rect x="91.0928%" y="693" width="0.0801%" height="15" fill="rgb(227,133,34)" fg:x="250252" fg:w="220"/><text x="91.3428%" y="703.50"></text></g><g><title>tcache_get (82 samples, 0.03%)</title><rect x="91.1430%" y="677" width="0.0298%" height="15" fill="rgb(247,227,15)" fg:x="250390" fg:w="82"/><text x="91.3930%" y="687.50"></text></g><g><title>__rdl_alloc (35 samples, 0.01%)</title><rect x="91.1729%" y="693" width="0.0127%" height="15" fill="rgb(229,96,14)" fg:x="250472" fg:w="35"/><text x="91.4229%" y="703.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (35 samples, 0.01%)</title><rect x="91.1729%" y="677" width="0.0127%" height="15" fill="rgb(220,79,17)" fg:x="250472" fg:w="35"/><text x="91.4229%" y="687.50"></text></g><g><title>alloc::alloc::alloc (291 samples, 0.11%)</title><rect x="91.0928%" y="709" width="0.1059%" height="15" fill="rgb(205,131,53)" fg:x="250252" fg:w="291"/><text x="91.3428%" y="719.50"></text></g><g><title>core::option::Option&lt;T&gt;::ok_or (68 samples, 0.02%)</title><rect x="91.2042%" y="709" width="0.0248%" height="15" fill="rgb(209,50,29)" fg:x="250558" fg:w="68"/><text x="91.4542%" y="719.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::new (76 samples, 0.03%)</title><rect x="91.2290%" y="709" width="0.0277%" height="15" fill="rgb(245,86,46)" fg:x="250626" fg:w="76"/><text x="91.4790%" y="719.50"></text></g><g><title>core::ptr::metadata::from_raw_parts_mut (126 samples, 0.05%)</title><rect x="91.2603%" y="677" width="0.0459%" height="15" fill="rgb(235,66,46)" fg:x="250712" fg:w="126"/><text x="91.5103%" y="687.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (940 samples, 0.34%)</title><rect x="90.9643%" y="741" width="0.3422%" height="15" fill="rgb(232,148,31)" fg:x="249899" fg:w="940"/><text x="91.2143%" y="751.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (911 samples, 0.33%)</title><rect x="90.9749%" y="725" width="0.3316%" height="15" fill="rgb(217,149,8)" fg:x="249928" fg:w="911"/><text x="91.2249%" y="735.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;[T]&gt;::slice_from_raw_parts (137 samples, 0.05%)</title><rect x="91.2566%" y="709" width="0.0499%" height="15" fill="rgb(209,183,11)" fg:x="250702" fg:w="137"/><text x="91.5066%" y="719.50"></text></g><g><title>core::ptr::slice_from_raw_parts_mut (127 samples, 0.05%)</title><rect x="91.2603%" y="693" width="0.0462%" height="15" fill="rgb(208,55,20)" fg:x="250712" fg:w="127"/><text x="91.5103%" y="703.50"></text></g><g><title>alloc::alloc::exchange_malloc (1,075 samples, 0.39%)</title><rect x="90.9283%" y="757" width="0.3913%" height="15" fill="rgb(218,39,14)" fg:x="249800" fg:w="1075"/><text x="91.1783%" y="767.50"></text></g><g><title>alloc::boxed::Box&lt;T,A&gt;::into_unique (51 samples, 0.02%)</title><rect x="91.3436%" y="709" width="0.0186%" height="15" fill="rgb(216,169,33)" fg:x="250941" fg:w="51"/><text x="91.5936%" y="719.50"></text></g><g><title>alloc::boxed::Box&lt;T,A&gt;::leak (51 samples, 0.02%)</title><rect x="91.3436%" y="693" width="0.0186%" height="15" fill="rgb(233,80,24)" fg:x="250941" fg:w="51"/><text x="91.5936%" y="703.50"></text></g><g><title>alloc::boxed::Box&lt;T,A&gt;::into_raw_with_allocator (71 samples, 0.03%)</title><rect x="91.3436%" y="725" width="0.0258%" height="15" fill="rgb(213,179,31)" fg:x="250941" fg:w="71"/><text x="91.5936%" y="735.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::into_vec (199 samples, 0.07%)</title><rect x="91.3196%" y="757" width="0.0724%" height="15" fill="rgb(209,19,5)" fg:x="250875" fg:w="199"/><text x="91.5696%" y="767.50"></text></g><g><title>alloc::slice::hack::into_vec (181 samples, 0.07%)</title><rect x="91.3261%" y="741" width="0.0659%" height="15" fill="rgb(219,18,35)" fg:x="250893" fg:w="181"/><text x="91.5761%" y="751.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::from_raw_parts_in (62 samples, 0.02%)</title><rect x="91.3695%" y="725" width="0.0226%" height="15" fill="rgb(209,169,16)" fg:x="251012" fg:w="62"/><text x="91.6195%" y="735.50"></text></g><g><title>__memcpy_avx_unaligned_erms (592 samples, 0.22%)</title><rect x="91.4168%" y="741" width="0.2155%" height="15" fill="rgb(245,90,51)" fg:x="251142" fg:w="592"/><text x="91.6668%" y="751.50"></text></g><g><title>_init (42 samples, 0.02%)</title><rect x="91.6323%" y="741" width="0.0153%" height="15" fill="rgb(220,99,45)" fg:x="251734" fg:w="42"/><text x="91.8823%" y="751.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::len (36 samples, 0.01%)</title><rect x="91.6476%" y="741" width="0.0131%" height="15" fill="rgb(249,89,25)" fg:x="251776" fg:w="36"/><text x="91.8976%" y="751.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::add (42 samples, 0.02%)</title><rect x="91.6607%" y="741" width="0.0153%" height="15" fill="rgb(239,193,0)" fg:x="251812" fg:w="42"/><text x="91.9107%" y="751.50"></text></g><g><title>__memcpy_avx_unaligned_erms (197 samples, 0.07%)</title><rect x="91.6759%" y="725" width="0.0717%" height="15" fill="rgb(231,126,1)" fg:x="251854" fg:w="197"/><text x="91.9259%" y="735.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::pop (1,010 samples, 0.37%)</title><rect x="91.3920%" y="757" width="0.3676%" height="15" fill="rgb(243,166,3)" fg:x="251074" fg:w="1010"/><text x="91.6420%" y="767.50"></text></g><g><title>core::ptr::read (230 samples, 0.08%)</title><rect x="91.6759%" y="741" width="0.0837%" height="15" fill="rgb(223,22,34)" fg:x="251854" fg:w="230"/><text x="91.9259%" y="751.50"></text></g><g><title>_init (33 samples, 0.01%)</title><rect x="91.7477%" y="725" width="0.0120%" height="15" fill="rgb(251,52,51)" fg:x="252051" fg:w="33"/><text x="91.9977%" y="735.50"></text></g><g><title>__memcpy_avx_unaligned_erms (357 samples, 0.13%)</title><rect x="91.8012%" y="741" width="0.1299%" height="15" fill="rgb(221,165,28)" fg:x="252198" fg:w="357"/><text x="92.0512%" y="751.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::capacity (56 samples, 0.02%)</title><rect x="91.9395%" y="741" width="0.0204%" height="15" fill="rgb(218,121,47)" fg:x="252578" fg:w="56"/><text x="92.1895%" y="751.50"></text></g><g><title>__memcpy_avx_unaligned_erms (552 samples, 0.20%)</title><rect x="91.9701%" y="725" width="0.2009%" height="15" fill="rgb(209,120,9)" fg:x="252662" fg:w="552"/><text x="92.2201%" y="735.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (1,159 samples, 0.42%)</title><rect x="91.7597%" y="757" width="0.4219%" height="15" fill="rgb(236,68,12)" fg:x="252084" fg:w="1159"/><text x="92.0097%" y="767.50"></text></g><g><title>core::ptr::write (581 samples, 0.21%)</title><rect x="91.9701%" y="741" width="0.2115%" height="15" fill="rgb(225,194,26)" fg:x="252662" fg:w="581"/><text x="92.2201%" y="751.50"></text></g><g><title>_init (29 samples, 0.01%)</title><rect x="92.1710%" y="725" width="0.0106%" height="15" fill="rgb(231,84,39)" fg:x="253214" fg:w="29"/><text x="92.4210%" y="735.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_ptr (59 samples, 0.02%)</title><rect x="92.3363%" y="709" width="0.0215%" height="15" fill="rgb(210,11,45)" fg:x="253668" fg:w="59"/><text x="92.5863%" y="719.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (177 samples, 0.06%)</title><rect x="92.3363%" y="725" width="0.0644%" height="15" fill="rgb(224,54,52)" fg:x="253668" fg:w="177"/><text x="92.5863%" y="735.50"></text></g><g><title>core::slice::raw::from_raw_parts (118 samples, 0.04%)</title><rect x="92.3577%" y="709" width="0.0430%" height="15" fill="rgb(238,102,14)" fg:x="253727" fg:w="118"/><text x="92.6077%" y="719.50"></text></g><g><title>core::ptr::slice_from_raw_parts (118 samples, 0.04%)</title><rect x="92.3577%" y="693" width="0.0430%" height="15" fill="rgb(243,160,52)" fg:x="253727" fg:w="118"/><text x="92.6077%" y="703.50"></text></g><g><title>core::ptr::metadata::from_raw_parts (116 samples, 0.04%)</title><rect x="92.3585%" y="677" width="0.0422%" height="15" fill="rgb(216,114,19)" fg:x="253729" fg:w="116"/><text x="92.6085%" y="687.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_ptr (69 samples, 0.03%)</title><rect x="92.4691%" y="693" width="0.0251%" height="15" fill="rgb(244,166,37)" fg:x="254033" fg:w="69"/><text x="92.7191%" y="703.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (69 samples, 0.03%)</title><rect x="92.4691%" y="677" width="0.0251%" height="15" fill="rgb(246,29,44)" fg:x="254033" fg:w="69"/><text x="92.7191%" y="687.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (256 samples, 0.09%)</title><rect x="92.4498%" y="709" width="0.0932%" height="15" fill="rgb(215,56,53)" fg:x="253980" fg:w="256"/><text x="92.6998%" y="719.50"></text></g><g><title>core::slice::raw::from_raw_parts (134 samples, 0.05%)</title><rect x="92.4942%" y="693" width="0.0488%" height="15" fill="rgb(217,60,2)" fg:x="254102" fg:w="134"/><text x="92.7442%" y="703.50"></text></g><g><title>core::ptr::slice_from_raw_parts (134 samples, 0.05%)</title><rect x="92.4942%" y="677" width="0.0488%" height="15" fill="rgb(207,26,24)" fg:x="254102" fg:w="134"/><text x="92.7442%" y="687.50"></text></g><g><title>core::ptr::metadata::from_raw_parts (133 samples, 0.05%)</title><rect x="92.4946%" y="661" width="0.0484%" height="15" fill="rgb(252,210,15)" fg:x="254103" fg:w="133"/><text x="92.7446%" y="671.50"></text></g><g><title>coldbrew::program::Program::code (967 samples, 0.35%)</title><rect x="92.3137%" y="741" width="0.3520%" height="15" fill="rgb(253,209,26)" fg:x="253606" fg:w="967"/><text x="92.5637%" y="751.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (728 samples, 0.26%)</title><rect x="92.4007%" y="725" width="0.2650%" height="15" fill="rgb(238,170,14)" fg:x="253845" fg:w="728"/><text x="92.6507%" y="735.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (336 samples, 0.12%)</title><rect x="92.5434%" y="709" width="0.1223%" height="15" fill="rgb(216,178,15)" fg:x="254237" fg:w="336"/><text x="92.7934%" y="719.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (270 samples, 0.10%)</title><rect x="92.5674%" y="693" width="0.0983%" height="15" fill="rgb(250,197,2)" fg:x="254303" fg:w="270"/><text x="92.8174%" y="703.50"></text></g><g><title>coldbrew::runtime::Frame::inc_instruction_index (134 samples, 0.05%)</title><rect x="92.6657%" y="741" width="0.0488%" height="15" fill="rgb(212,70,42)" fg:x="254573" fg:w="134"/><text x="92.9157%" y="751.50"></text></g><g><title>coldbrew::runtime::Runtime::next (1,441 samples, 0.52%)</title><rect x="92.1903%" y="757" width="0.5245%" height="15" fill="rgb(227,213,9)" fg:x="253267" fg:w="1441"/><text x="92.4403%" y="767.50"></text></g><g><title>coldbrew::runtime::Runtime::fetch (7,772 samples, 2.83%)</title><rect x="89.8923%" y="773" width="2.8290%" height="15" fill="rgb(245,99,25)" fg:x="246954" fg:w="7772"/><text x="90.1423%" y="783.50">co..</text></g><g><title>__GI___libc_free (32 samples, 0.01%)</title><rect x="92.7610%" y="597" width="0.0116%" height="15" fill="rgb(250,82,29)" fg:x="254835" fg:w="32"/><text x="93.0110%" y="607.50"></text></g><g><title>alloc::alloc::dealloc (43 samples, 0.02%)</title><rect x="92.7610%" y="613" width="0.0157%" height="15" fill="rgb(241,226,54)" fg:x="254835" fg:w="43"/><text x="93.0110%" y="623.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (57 samples, 0.02%)</title><rect x="92.7563%" y="629" width="0.0207%" height="15" fill="rgb(221,99,41)" fg:x="254822" fg:w="57"/><text x="93.0063%" y="639.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::clear (168 samples, 0.06%)</title><rect x="92.7290%" y="757" width="0.0612%" height="15" fill="rgb(213,90,21)" fg:x="254747" fg:w="168"/><text x="92.9790%" y="767.50"></text></g><g><title>core::ptr::drop_in_place&lt;[coldbrew::trace::RecordEntry]&gt; (152 samples, 0.06%)</title><rect x="92.7348%" y="741" width="0.0553%" height="15" fill="rgb(205,208,24)" fg:x="254763" fg:w="152"/><text x="92.9848%" y="751.50"></text></g><g><title>core::ptr::drop_in_place&lt;coldbrew::trace::RecordEntry&gt; (135 samples, 0.05%)</title><rect x="92.7410%" y="725" width="0.0491%" height="15" fill="rgb(246,31,12)" fg:x="254780" fg:w="135"/><text x="92.9910%" y="735.50"></text></g><g><title>core::ptr::drop_in_place&lt;coldbrew::runtime::Instruction&gt; (135 samples, 0.05%)</title><rect x="92.7410%" y="709" width="0.0491%" height="15" fill="rgb(213,154,6)" fg:x="254780" fg:w="135"/><text x="92.9910%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;alloc::vec::Vec&lt;coldbrew::runtime::Value&gt;&gt;&gt; (135 samples, 0.05%)</title><rect x="92.7410%" y="693" width="0.0491%" height="15" fill="rgb(222,163,29)" fg:x="254780" fg:w="135"/><text x="92.9910%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;coldbrew::runtime::Value&gt;&gt; (127 samples, 0.05%)</title><rect x="92.7439%" y="677" width="0.0462%" height="15" fill="rgb(227,201,8)" fg:x="254788" fg:w="127"/><text x="92.9939%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;coldbrew::runtime::Value&gt;&gt; (104 samples, 0.04%)</title><rect x="92.7523%" y="661" width="0.0379%" height="15" fill="rgb(233,9,32)" fg:x="254811" fg:w="104"/><text x="93.0023%" y="671.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (104 samples, 0.04%)</title><rect x="92.7523%" y="645" width="0.0379%" height="15" fill="rgb(217,54,24)" fg:x="254811" fg:w="104"/><text x="93.0023%" y="655.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::current_memory (36 samples, 0.01%)</title><rect x="92.7771%" y="629" width="0.0131%" height="15" fill="rgb(235,192,0)" fg:x="254879" fg:w="36"/><text x="93.0271%" y="639.50"></text></g><g><title>coldbrew::trace::Recorder::init (194 samples, 0.07%)</title><rect x="92.7214%" y="773" width="0.0706%" height="15" fill="rgb(235,45,9)" fg:x="254726" fg:w="194"/><text x="92.9714%" y="783.50"></text></g><g><title>__GI___libc_malloc (34 samples, 0.01%)</title><rect x="92.9270%" y="693" width="0.0124%" height="15" fill="rgb(246,42,40)" fg:x="255291" fg:w="34"/><text x="93.1770%" y="703.50"></text></g><g><title>alloc::alloc::alloc (46 samples, 0.02%)</title><rect x="92.9270%" y="709" width="0.0167%" height="15" fill="rgb(248,111,24)" fg:x="255291" fg:w="46"/><text x="93.1770%" y="719.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (130 samples, 0.05%)</title><rect x="92.9081%" y="741" width="0.0473%" height="15" fill="rgb(249,65,22)" fg:x="255239" fg:w="130"/><text x="93.1581%" y="751.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (126 samples, 0.05%)</title><rect x="92.9096%" y="725" width="0.0459%" height="15" fill="rgb(238,111,51)" fg:x="255243" fg:w="126"/><text x="93.1596%" y="735.50"></text></g><g><title>alloc::alloc::exchange_malloc (152 samples, 0.06%)</title><rect x="92.9034%" y="757" width="0.0553%" height="15" fill="rgb(250,118,22)" fg:x="255226" fg:w="152"/><text x="93.1534%" y="767.50"></text></g><g><title>__memcpy_avx_unaligned_erms (40 samples, 0.01%)</title><rect x="92.9827%" y="725" width="0.0146%" height="15" fill="rgb(234,84,26)" fg:x="255444" fg:w="40"/><text x="93.2327%" y="735.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (89 samples, 0.03%)</title><rect x="92.9667%" y="757" width="0.0324%" height="15" fill="rgb(243,172,12)" fg:x="255400" fg:w="89"/><text x="93.2167%" y="767.50"></text></g><g><title>core::ptr::write (45 samples, 0.02%)</title><rect x="92.9827%" y="741" width="0.0164%" height="15" fill="rgb(236,150,49)" fg:x="255444" fg:w="45"/><text x="93.2327%" y="751.50"></text></g><g><title>coldbrew::trace::Recorder::get_params (70 samples, 0.03%)</title><rect x="93.0027%" y="757" width="0.0255%" height="15" fill="rgb(225,197,26)" fg:x="255499" fg:w="70"/><text x="93.2527%" y="767.50"></text></g><g><title>coldbrew::trace::Recorder::record (628 samples, 0.23%)</title><rect x="92.8015%" y="773" width="0.2286%" height="15" fill="rgb(214,17,42)" fg:x="254946" fg:w="628"/><text x="93.0515%" y="783.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (57 samples, 0.02%)</title><rect x="93.1221%" y="629" width="0.0207%" height="15" fill="rgb(224,165,40)" fg:x="255827" fg:w="57"/><text x="93.3721%" y="639.50"></text></g><g><title>core::slice::raw::from_raw_parts (44 samples, 0.02%)</title><rect x="93.1269%" y="613" width="0.0160%" height="15" fill="rgb(246,100,4)" fg:x="255840" fg:w="44"/><text x="93.3769%" y="623.50"></text></g><g><title>core::ptr::slice_from_raw_parts (44 samples, 0.02%)</title><rect x="93.1269%" y="597" width="0.0160%" height="15" fill="rgb(222,103,0)" fg:x="255840" fg:w="44"/><text x="93.3769%" y="607.50"></text></g><g><title>core::ptr::metadata::from_raw_parts (41 samples, 0.01%)</title><rect x="93.1280%" y="581" width="0.0149%" height="15" fill="rgb(227,189,26)" fg:x="255843" fg:w="41"/><text x="93.3780%" y="591.50"></text></g><g><title>__GI___libc_malloc (32 samples, 0.01%)</title><rect x="93.2215%" y="485" width="0.0116%" height="15" fill="rgb(214,202,17)" fg:x="256100" fg:w="32"/><text x="93.4715%" y="495.50"></text></g><g><title>alloc::alloc::alloc (42 samples, 0.02%)</title><rect x="93.2215%" y="501" width="0.0153%" height="15" fill="rgb(229,111,3)" fg:x="256100" fg:w="42"/><text x="93.4715%" y="511.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (149 samples, 0.05%)</title><rect x="93.1989%" y="533" width="0.0542%" height="15" fill="rgb(229,172,15)" fg:x="256038" fg:w="149"/><text x="93.4489%" y="543.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (146 samples, 0.05%)</title><rect x="93.2000%" y="517" width="0.0531%" height="15" fill="rgb(230,224,35)" fg:x="256041" fg:w="146"/><text x="93.4500%" y="527.50"></text></g><g><title>core::alloc::layout::Layout::array::inner (44 samples, 0.02%)</title><rect x="93.2561%" y="517" width="0.0160%" height="15" fill="rgb(251,141,6)" fg:x="256195" fg:w="44"/><text x="93.5061%" y="527.50"></text></g><g><title>core::alloc::layout::Layout::array (56 samples, 0.02%)</title><rect x="93.2535%" y="533" width="0.0204%" height="15" fill="rgb(225,208,6)" fg:x="256188" fg:w="56"/><text x="93.5035%" y="543.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (327 samples, 0.12%)</title><rect x="93.1622%" y="581" width="0.1190%" height="15" fill="rgb(246,181,16)" fg:x="255937" fg:w="327"/><text x="93.4122%" y="591.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (325 samples, 0.12%)</title><rect x="93.1629%" y="565" width="0.1183%" height="15" fill="rgb(227,129,36)" fg:x="255939" fg:w="325"/><text x="93.4129%" y="575.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (319 samples, 0.12%)</title><rect x="93.1651%" y="549" width="0.1161%" height="15" fill="rgb(248,117,24)" fg:x="255945" fg:w="319"/><text x="93.4151%" y="559.50"></text></g><g><title>&lt;coldbrew::runtime::Instruction as core::clone::Clone&gt;::clone (516 samples, 0.19%)</title><rect x="93.0970%" y="677" width="0.1878%" height="15" fill="rgb(214,185,35)" fg:x="255758" fg:w="516"/><text x="93.3470%" y="687.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::clone::Clone&gt;::clone (495 samples, 0.18%)</title><rect x="93.1047%" y="661" width="0.1802%" height="15" fill="rgb(236,150,34)" fg:x="255779" fg:w="495"/><text x="93.3547%" y="671.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (453 samples, 0.16%)</title><rect x="93.1200%" y="645" width="0.1649%" height="15" fill="rgb(243,228,27)" fg:x="255821" fg:w="453"/><text x="93.3700%" y="655.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (390 samples, 0.14%)</title><rect x="93.1429%" y="629" width="0.1420%" height="15" fill="rgb(245,77,44)" fg:x="255884" fg:w="390"/><text x="93.3929%" y="639.50"></text></g><g><title>alloc::slice::hack::to_vec (390 samples, 0.14%)</title><rect x="93.1429%" y="613" width="0.1420%" height="15" fill="rgb(235,214,42)" fg:x="255884" fg:w="390"/><text x="93.3929%" y="623.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (390 samples, 0.14%)</title><rect x="93.1429%" y="597" width="0.1420%" height="15" fill="rgb(221,74,3)" fg:x="255884" fg:w="390"/><text x="93.3929%" y="607.50"></text></g><g><title>&lt;coldbrew::trace::RecordEntry as core::clone::Clone&gt;::clone (569 samples, 0.21%)</title><rect x="93.0817%" y="693" width="0.2071%" height="15" fill="rgb(206,121,29)" fg:x="255716" fg:w="569"/><text x="93.3317%" y="703.50"></text></g><g><title>&lt;core::iter::adapters::take::Take&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (154 samples, 0.06%)</title><rect x="93.2889%" y="693" width="0.0561%" height="15" fill="rgb(249,131,53)" fg:x="256285" fg:w="154"/><text x="93.5389%" y="703.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (134 samples, 0.05%)</title><rect x="93.2961%" y="677" width="0.0488%" height="15" fill="rgb(236,170,29)" fg:x="256305" fg:w="134"/><text x="93.5461%" y="687.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (66 samples, 0.02%)</title><rect x="93.3209%" y="661" width="0.0240%" height="15" fill="rgb(247,96,15)" fg:x="256373" fg:w="66"/><text x="93.5709%" y="671.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::spare_capacity_mut (31 samples, 0.01%)</title><rect x="93.3449%" y="693" width="0.0113%" height="15" fill="rgb(211,210,7)" fg:x="256439" fg:w="31"/><text x="93.5949%" y="703.50"></text></g><g><title>__GI___libc_malloc (39 samples, 0.01%)</title><rect x="93.3911%" y="597" width="0.0142%" height="15" fill="rgb(240,88,50)" fg:x="256566" fg:w="39"/><text x="93.6411%" y="607.50"></text></g><g><title>alloc::alloc::alloc (49 samples, 0.02%)</title><rect x="93.3911%" y="613" width="0.0178%" height="15" fill="rgb(209,229,26)" fg:x="256566" fg:w="49"/><text x="93.6411%" y="623.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (130 samples, 0.05%)</title><rect x="93.3748%" y="645" width="0.0473%" height="15" fill="rgb(210,68,23)" fg:x="256521" fg:w="130"/><text x="93.6248%" y="655.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (128 samples, 0.05%)</title><rect x="93.3755%" y="629" width="0.0466%" height="15" fill="rgb(229,180,13)" fg:x="256523" fg:w="128"/><text x="93.6255%" y="639.50"></text></g><g><title>core::alloc::layout::Layout::array::inner (55 samples, 0.02%)</title><rect x="93.4224%" y="629" width="0.0200%" height="15" fill="rgb(236,53,44)" fg:x="256652" fg:w="55"/><text x="93.6724%" y="639.50"></text></g><g><title>core::alloc::layout::Layout::array (57 samples, 0.02%)</title><rect x="93.4221%" y="645" width="0.0207%" height="15" fill="rgb(244,214,29)" fg:x="256651" fg:w="57"/><text x="93.6721%" y="655.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (249 samples, 0.09%)</title><rect x="93.3562%" y="693" width="0.0906%" height="15" fill="rgb(220,75,29)" fg:x="256470" fg:w="249"/><text x="93.6062%" y="703.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (246 samples, 0.09%)</title><rect x="93.3573%" y="677" width="0.0895%" height="15" fill="rgb(214,183,37)" fg:x="256473" fg:w="246"/><text x="93.6073%" y="687.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (240 samples, 0.09%)</title><rect x="93.3595%" y="661" width="0.0874%" height="15" fill="rgb(239,117,29)" fg:x="256479" fg:w="240"/><text x="93.6095%" y="671.50"></text></g><g><title>__memcpy_avx_unaligned_erms (63 samples, 0.02%)</title><rect x="93.4472%" y="677" width="0.0229%" height="15" fill="rgb(237,171,35)" fg:x="256720" fg:w="63"/><text x="93.6972%" y="687.50"></text></g><g><title>__memcpy_avx_unaligned_erms (39 samples, 0.01%)</title><rect x="93.4712%" y="661" width="0.0142%" height="15" fill="rgb(229,178,53)" fg:x="256786" fg:w="39"/><text x="93.7212%" y="671.50"></text></g><g><title>__memcpy_avx_unaligned_erms (65 samples, 0.02%)</title><rect x="93.4858%" y="645" width="0.0237%" height="15" fill="rgb(210,102,19)" fg:x="256826" fg:w="65"/><text x="93.7358%" y="655.50"></text></g><g><title>core::mem::maybe_uninit::MaybeUninit&lt;T&gt;::write (174 samples, 0.06%)</title><rect x="93.4472%" y="693" width="0.0633%" height="15" fill="rgb(235,127,22)" fg:x="256720" fg:w="174"/><text x="93.6972%" y="703.50"></text></g><g><title>core::mem::maybe_uninit::MaybeUninit&lt;T&gt;::new (108 samples, 0.04%)</title><rect x="93.4712%" y="677" width="0.0393%" height="15" fill="rgb(244,31,31)" fg:x="256786" fg:w="108"/><text x="93.7212%" y="687.50"></text></g><g><title>core::mem::manually_drop::ManuallyDrop&lt;T&gt;::new (68 samples, 0.02%)</title><rect x="93.4858%" y="661" width="0.0248%" height="15" fill="rgb(231,43,21)" fg:x="256826" fg:w="68"/><text x="93.7358%" y="671.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1,298 samples, 0.47%)</title><rect x="93.0406%" y="757" width="0.4725%" height="15" fill="rgb(217,131,35)" fg:x="255603" fg:w="1298"/><text x="93.2906%" y="767.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1,279 samples, 0.47%)</title><rect x="93.0475%" y="741" width="0.4656%" height="15" fill="rgb(221,149,4)" fg:x="255622" fg:w="1279"/><text x="93.2975%" y="751.50"></text></g><g><title>alloc::slice::hack::to_vec (1,279 samples, 0.47%)</title><rect x="93.0475%" y="725" width="0.4656%" height="15" fill="rgb(232,170,28)" fg:x="255622" fg:w="1279"/><text x="93.2975%" y="735.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1,278 samples, 0.47%)</title><rect x="93.0479%" y="709" width="0.4652%" height="15" fill="rgb(238,56,10)" fg:x="255623" fg:w="1278"/><text x="93.2979%" y="719.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (46 samples, 0.02%)</title><rect x="93.5338%" y="709" width="0.0167%" height="15" fill="rgb(235,196,14)" fg:x="256958" fg:w="46"/><text x="93.7838%" y="719.50"></text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::clone::Clone&gt;::clone (103 samples, 0.04%)</title><rect x="93.5142%" y="725" width="0.0375%" height="15" fill="rgb(216,45,48)" fg:x="256904" fg:w="103"/><text x="93.7642%" y="735.50"></text></g><g><title>__memcpy_avx_unaligned_erms (133 samples, 0.05%)</title><rect x="93.5517%" y="725" width="0.0484%" height="15" fill="rgb(238,213,17)" fg:x="257007" fg:w="133"/><text x="93.8017%" y="735.50"></text></g><g><title>&lt;hashbrown::set::HashSet&lt;T,S,A&gt; as core::clone::Clone&gt;::clone (245 samples, 0.09%)</title><rect x="93.5142%" y="741" width="0.0892%" height="15" fill="rgb(212,13,2)" fg:x="256904" fg:w="245"/><text x="93.7642%" y="751.50"></text></g><g><title>__memcpy_avx_unaligned_erms (83 samples, 0.03%)</title><rect x="93.6034%" y="741" width="0.0302%" height="15" fill="rgb(240,114,20)" fg:x="257149" fg:w="83"/><text x="93.8534%" y="751.50"></text></g><g><title>&lt;std::collections::hash::set::HashSet&lt;T,S&gt; as core::clone::Clone&gt;::clone (337 samples, 0.12%)</title><rect x="93.5131%" y="757" width="0.1227%" height="15" fill="rgb(228,41,40)" fg:x="256901" fg:w="337"/><text x="93.7631%" y="767.50"></text></g><g><title>__memcpy_avx_unaligned_erms (43 samples, 0.02%)</title><rect x="93.6357%" y="757" width="0.0157%" height="15" fill="rgb(244,132,35)" fg:x="257238" fg:w="43"/><text x="93.8857%" y="767.50"></text></g><g><title>coldbrew::trace::Recorder::recording (1,714 samples, 0.62%)</title><rect x="93.0300%" y="773" width="0.6239%" height="15" fill="rgb(253,189,4)" fg:x="255574" fg:w="1714"/><text x="93.2800%" y="783.50"></text></g><g><title>core::fmt::Arguments::new_v1 (49 samples, 0.02%)</title><rect x="93.6539%" y="773" width="0.0178%" height="15" fill="rgb(224,37,19)" fg:x="257288" fg:w="49"/><text x="93.9039%" y="783.50"></text></g><g><title>core::option::Option&lt;T&gt;::unwrap (119 samples, 0.04%)</title><rect x="93.6747%" y="773" width="0.0433%" height="15" fill="rgb(235,223,18)" fg:x="257345" fg:w="119"/><text x="93.9247%" y="783.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_mut_ptr (28 samples, 0.01%)</title><rect x="93.7267%" y="725" width="0.0102%" height="15" fill="rgb(235,163,25)" fg:x="257488" fg:w="28"/><text x="93.9767%" y="735.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (28 samples, 0.01%)</title><rect x="93.7267%" y="709" width="0.0102%" height="15" fill="rgb(217,145,28)" fg:x="257488" fg:w="28"/><text x="93.9767%" y="719.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (48 samples, 0.02%)</title><rect x="93.7238%" y="741" width="0.0175%" height="15" fill="rgb(223,223,32)" fg:x="257480" fg:w="48"/><text x="93.9738%" y="751.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;coldbrew::runtime::Value&gt;&gt; (91 samples, 0.03%)</title><rect x="93.7213%" y="757" width="0.0331%" height="15" fill="rgb(227,189,39)" fg:x="257473" fg:w="91"/><text x="93.9713%" y="767.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;coldbrew::runtime::Value&gt;&gt; (36 samples, 0.01%)</title><rect x="93.7413%" y="741" width="0.0131%" height="15" fill="rgb(248,10,22)" fg:x="257528" fg:w="36"/><text x="93.9913%" y="751.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (36 samples, 0.01%)</title><rect x="93.7413%" y="725" width="0.0131%" height="15" fill="rgb(248,46,39)" fg:x="257528" fg:w="36"/><text x="93.9913%" y="735.50"></text></g><g><title>_int_free (35 samples, 0.01%)</title><rect x="93.7821%" y="613" width="0.0127%" height="15" fill="rgb(248,113,48)" fg:x="257640" fg:w="35"/><text x="94.0321%" y="623.50"></text></g><g><title>__GI___libc_free (50 samples, 0.02%)</title><rect x="93.7788%" y="629" width="0.0182%" height="15" fill="rgb(245,16,25)" fg:x="257631" fg:w="50"/><text x="94.0288%" y="639.50"></text></g><g><title>alloc::alloc::dealloc (63 samples, 0.02%)</title><rect x="93.7788%" y="645" width="0.0229%" height="15" fill="rgb(249,152,16)" fg:x="257631" fg:w="63"/><text x="94.0288%" y="655.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (76 samples, 0.03%)</title><rect x="93.7755%" y="661" width="0.0277%" height="15" fill="rgb(250,16,1)" fg:x="257622" fg:w="76"/><text x="94.0255%" y="671.50"></text></g><g><title>core::num::&lt;impl usize&gt;::checked_add (73 samples, 0.03%)</title><rect x="93.8669%" y="629" width="0.0266%" height="15" fill="rgb(249,138,3)" fg:x="257873" fg:w="73"/><text x="94.1169%" y="639.50"></text></g><g><title>core::num::&lt;impl usize&gt;::checked_mul (30 samples, 0.01%)</title><rect x="93.8935%" y="629" width="0.0109%" height="15" fill="rgb(227,71,41)" fg:x="257946" fg:w="30"/><text x="94.1435%" y="639.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::free_buckets (393 samples, 0.14%)</title><rect x="93.7624%" y="693" width="0.1431%" height="15" fill="rgb(209,184,23)" fg:x="257586" fg:w="393"/><text x="94.0124%" y="703.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::free_buckets (381 samples, 0.14%)</title><rect x="93.7668%" y="677" width="0.1387%" height="15" fill="rgb(223,215,31)" fg:x="257598" fg:w="381"/><text x="94.0168%" y="687.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::allocation_info (281 samples, 0.10%)</title><rect x="93.8032%" y="661" width="0.1023%" height="15" fill="rgb(210,146,28)" fg:x="257698" fg:w="281"/><text x="94.0532%" y="671.50"></text></g><g><title>hashbrown::raw::TableLayout::calculate_layout_for (238 samples, 0.09%)</title><rect x="93.8188%" y="645" width="0.0866%" height="15" fill="rgb(209,183,41)" fg:x="257741" fg:w="238"/><text x="94.0688%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;coldbrew::runtime::Frame&gt; (519 samples, 0.19%)</title><rect x="93.7180%" y="773" width="0.1889%" height="15" fill="rgb(209,224,45)" fg:x="257464" fg:w="519"/><text x="93.9680%" y="783.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::collections::hash::map::HashMap&lt;usize,coldbrew::runtime::Value&gt;&gt; (419 samples, 0.15%)</title><rect x="93.7544%" y="757" width="0.1525%" height="15" fill="rgb(224,209,51)" fg:x="257564" fg:w="419"/><text x="94.0044%" y="767.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::map::HashMap&lt;usize,coldbrew::runtime::Value,std::collections::hash::map::RandomState&gt;&gt; (419 samples, 0.15%)</title><rect x="93.7544%" y="741" width="0.1525%" height="15" fill="rgb(223,17,39)" fg:x="257564" fg:w="419"/><text x="94.0044%" y="751.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::raw::RawTable&lt;(usize,coldbrew::runtime::Value)&gt;&gt; (419 samples, 0.15%)</title><rect x="93.7544%" y="725" width="0.1525%" height="15" fill="rgb(234,204,37)" fg:x="257564" fg:w="419"/><text x="94.0044%" y="735.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (419 samples, 0.15%)</title><rect x="93.7544%" y="709" width="0.1525%" height="15" fill="rgb(236,120,5)" fg:x="257564" fg:w="419"/><text x="94.0044%" y="719.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (45 samples, 0.02%)</title><rect x="93.9564%" y="725" width="0.0164%" height="15" fill="rgb(248,97,27)" fg:x="258119" fg:w="45"/><text x="94.2064%" y="735.50"></text></g><g><title>core::ptr::slice_from_raw_parts_mut (29 samples, 0.01%)</title><rect x="93.9623%" y="709" width="0.0106%" height="15" fill="rgb(240,66,17)" fg:x="258135" fg:w="29"/><text x="94.2123%" y="719.50"></text></g><g><title>core::ptr::metadata::from_raw_parts_mut (29 samples, 0.01%)</title><rect x="93.9623%" y="693" width="0.0106%" height="15" fill="rgb(210,79,3)" fg:x="258135" fg:w="29"/><text x="94.2123%" y="703.50"></text></g><g><title>_int_free (208 samples, 0.08%)</title><rect x="94.0423%" y="645" width="0.0757%" height="15" fill="rgb(214,176,27)" fg:x="258355" fg:w="208"/><text x="94.2923%" y="655.50"></text></g><g><title>tcache_put (30 samples, 0.01%)</title><rect x="94.1071%" y="629" width="0.0109%" height="15" fill="rgb(235,185,3)" fg:x="258533" fg:w="30"/><text x="94.3571%" y="639.50"></text></g><g><title>__GI___libc_free (288 samples, 0.10%)</title><rect x="94.0205%" y="661" width="0.1048%" height="15" fill="rgb(227,24,12)" fg:x="258295" fg:w="288"/><text x="94.2705%" y="671.50"></text></g><g><title>alloc::alloc::dealloc (333 samples, 0.12%)</title><rect x="94.0205%" y="677" width="0.1212%" height="15" fill="rgb(252,169,48)" fg:x="258295" fg:w="333"/><text x="94.2705%" y="687.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (413 samples, 0.15%)</title><rect x="93.9965%" y="693" width="0.1503%" height="15" fill="rgb(212,65,1)" fg:x="258229" fg:w="413"/><text x="94.2465%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;coldbrew::runtime::Instruction&gt; (914 samples, 0.33%)</title><rect x="93.9069%" y="773" width="0.3327%" height="15" fill="rgb(242,39,24)" fg:x="257983" fg:w="914"/><text x="94.1569%" y="783.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;alloc::vec::Vec&lt;coldbrew::runtime::Value&gt;&gt;&gt; (914 samples, 0.33%)</title><rect x="93.9069%" y="757" width="0.3327%" height="15" fill="rgb(249,32,23)" fg:x="257983" fg:w="914"/><text x="94.1569%" y="767.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;coldbrew::runtime::Value&gt;&gt; (804 samples, 0.29%)</title><rect x="93.9470%" y="741" width="0.2927%" height="15" fill="rgb(251,195,23)" fg:x="258093" fg:w="804"/><text x="94.1970%" y="751.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;coldbrew::runtime::Value&gt;&gt; (733 samples, 0.27%)</title><rect x="93.9728%" y="725" width="0.2668%" height="15" fill="rgb(236,174,8)" fg:x="258164" fg:w="733"/><text x="94.2228%" y="735.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (733 samples, 0.27%)</title><rect x="93.9728%" y="709" width="0.2668%" height="15" fill="rgb(220,197,8)" fg:x="258164" fg:w="733"/><text x="94.2228%" y="719.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::current_memory (255 samples, 0.09%)</title><rect x="94.1468%" y="693" width="0.0928%" height="15" fill="rgb(240,108,37)" fg:x="258642" fg:w="255"/><text x="94.3968%" y="703.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (32 samples, 0.01%)</title><rect x="94.2735%" y="645" width="0.0116%" height="15" fill="rgb(232,176,24)" fg:x="258990" fg:w="32"/><text x="94.5235%" y="655.50"></text></g><g><title>_int_free (54 samples, 0.02%)</title><rect x="94.3001%" y="565" width="0.0197%" height="15" fill="rgb(243,35,29)" fg:x="259063" fg:w="54"/><text x="94.5501%" y="575.50"></text></g><g><title>__GI___libc_free (83 samples, 0.03%)</title><rect x="94.2913%" y="581" width="0.0302%" height="15" fill="rgb(210,37,18)" fg:x="259039" fg:w="83"/><text x="94.5413%" y="591.50"></text></g><g><title>alloc::alloc::dealloc (93 samples, 0.03%)</title><rect x="94.2913%" y="597" width="0.0339%" height="15" fill="rgb(224,184,40)" fg:x="259039" fg:w="93"/><text x="94.5413%" y="607.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (105 samples, 0.04%)</title><rect x="94.2884%" y="613" width="0.0382%" height="15" fill="rgb(236,39,29)" fg:x="259031" fg:w="105"/><text x="94.5384%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;[coldbrew::trace::RecordEntry]&gt; (307 samples, 0.11%)</title><rect x="94.2458%" y="725" width="0.1117%" height="15" fill="rgb(232,48,39)" fg:x="258914" fg:w="307"/><text x="94.4958%" y="735.50"></text></g><g><title>core::ptr::drop_in_place&lt;coldbrew::trace::RecordEntry&gt; (273 samples, 0.10%)</title><rect x="94.2582%" y="709" width="0.0994%" height="15" fill="rgb(236,34,42)" fg:x="258948" fg:w="273"/><text x="94.5082%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;coldbrew::runtime::Instruction&gt; (273 samples, 0.10%)</title><rect x="94.2582%" y="693" width="0.0994%" height="15" fill="rgb(243,106,37)" fg:x="258948" fg:w="273"/><text x="94.5082%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;alloc::vec::Vec&lt;coldbrew::runtime::Value&gt;&gt;&gt; (273 samples, 0.10%)</title><rect x="94.2582%" y="677" width="0.0994%" height="15" fill="rgb(218,96,6)" fg:x="258948" fg:w="273"/><text x="94.5082%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;coldbrew::runtime::Value&gt;&gt; (233 samples, 0.08%)</title><rect x="94.2728%" y="661" width="0.0848%" height="15" fill="rgb(235,130,12)" fg:x="258988" fg:w="233"/><text x="94.5228%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;coldbrew::runtime::Value&gt;&gt; (199 samples, 0.07%)</title><rect x="94.2851%" y="645" width="0.0724%" height="15" fill="rgb(231,95,0)" fg:x="259022" fg:w="199"/><text x="94.5351%" y="655.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (199 samples, 0.07%)</title><rect x="94.2851%" y="629" width="0.0724%" height="15" fill="rgb(228,12,23)" fg:x="259022" fg:w="199"/><text x="94.5351%" y="639.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::current_memory (85 samples, 0.03%)</title><rect x="94.3266%" y="613" width="0.0309%" height="15" fill="rgb(216,12,1)" fg:x="259136" fg:w="85"/><text x="94.5766%" y="623.50"></text></g><g><title>core::ptr::metadata::from_raw_parts_mut (72 samples, 0.03%)</title><rect x="94.3576%" y="709" width="0.0262%" height="15" fill="rgb(219,59,3)" fg:x="259221" fg:w="72"/><text x="94.6076%" y="719.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (388 samples, 0.14%)</title><rect x="94.2440%" y="741" width="0.1412%" height="15" fill="rgb(215,208,46)" fg:x="258909" fg:w="388"/><text x="94.4940%" y="751.50"></text></g><g><title>core::ptr::slice_from_raw_parts_mut (76 samples, 0.03%)</title><rect x="94.3576%" y="725" width="0.0277%" height="15" fill="rgb(254,224,29)" fg:x="259221" fg:w="76"/><text x="94.6076%" y="735.50"></text></g><g><title>_int_free (39 samples, 0.01%)</title><rect x="94.4049%" y="661" width="0.0142%" height="15" fill="rgb(232,14,29)" fg:x="259351" fg:w="39"/><text x="94.6549%" y="671.50"></text></g><g><title>__GI___libc_free (69 samples, 0.03%)</title><rect x="94.3951%" y="677" width="0.0251%" height="15" fill="rgb(208,45,52)" fg:x="259324" fg:w="69"/><text x="94.6451%" y="687.50"></text></g><g><title>alloc::alloc::dealloc (81 samples, 0.03%)</title><rect x="94.3951%" y="693" width="0.0295%" height="15" fill="rgb(234,191,28)" fg:x="259324" fg:w="81"/><text x="94.6451%" y="703.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (97 samples, 0.04%)</title><rect x="94.3903%" y="709" width="0.0353%" height="15" fill="rgb(244,67,43)" fg:x="259311" fg:w="97"/><text x="94.6403%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;coldbrew::trace::RecordEntry&gt;&gt; (635 samples, 0.23%)</title><rect x="94.2429%" y="757" width="0.2311%" height="15" fill="rgb(236,189,24)" fg:x="258906" fg:w="635"/><text x="94.4929%" y="767.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;coldbrew::trace::RecordEntry&gt;&gt; (244 samples, 0.09%)</title><rect x="94.3852%" y="741" width="0.0888%" height="15" fill="rgb(239,214,33)" fg:x="259297" fg:w="244"/><text x="94.6352%" y="751.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (244 samples, 0.09%)</title><rect x="94.3852%" y="725" width="0.0888%" height="15" fill="rgb(226,176,41)" fg:x="259297" fg:w="244"/><text x="94.6352%" y="735.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::current_memory (133 samples, 0.05%)</title><rect x="94.4256%" y="709" width="0.0484%" height="15" fill="rgb(248,47,8)" fg:x="259408" fg:w="133"/><text x="94.6756%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;coldbrew::trace::Recording&gt; (658 samples, 0.24%)</title><rect x="94.2396%" y="773" width="0.2395%" height="15" fill="rgb(218,81,44)" fg:x="258897" fg:w="658"/><text x="94.4896%" y="783.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::last (145 samples, 0.05%)</title><rect x="94.4791%" y="773" width="0.0528%" height="15" fill="rgb(213,98,6)" fg:x="259555" fg:w="145"/><text x="94.7291%" y="783.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::io::stdio::StdoutLock&gt; (166 samples, 0.06%)</title><rect x="94.5399%" y="709" width="0.0604%" height="15" fill="rgb(222,85,22)" fg:x="259722" fg:w="166"/><text x="94.7899%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::remutex::ReentrantMutexGuard&lt;core::cell::RefCell&lt;std::io::buffered::linewriter::LineWriter&lt;std::io::stdio::StdoutRaw&gt;&gt;&gt;&gt; (166 samples, 0.06%)</title><rect x="94.5399%" y="693" width="0.0604%" height="15" fill="rgb(239,46,39)" fg:x="259722" fg:w="166"/><text x="94.7899%" y="703.50"></text></g><g><title>&lt;std::sync::remutex::ReentrantMutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (166 samples, 0.06%)</title><rect x="94.5399%" y="677" width="0.0604%" height="15" fill="rgb(237,12,29)" fg:x="259722" fg:w="166"/><text x="94.7899%" y="687.50"></text></g><g><title>std::sys::unix::locks::futex_mutex::Mutex::unlock (135 samples, 0.05%)</title><rect x="94.5512%" y="661" width="0.0491%" height="15" fill="rgb(214,77,8)" fg:x="259753" fg:w="135"/><text x="94.8012%" y="671.50"></text></g><g><title>core::sync::atomic::AtomicU32::swap (131 samples, 0.05%)</title><rect x="94.5527%" y="645" width="0.0477%" height="15" fill="rgb(217,168,37)" fg:x="259757" fg:w="131"/><text x="94.8027%" y="655.50"></text></g><g><title>core::sync::atomic::atomic_swap (131 samples, 0.05%)</title><rect x="94.5527%" y="629" width="0.0477%" height="15" fill="rgb(221,217,23)" fg:x="259757" fg:w="131"/><text x="94.8027%" y="639.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (44 samples, 0.02%)</title><rect x="94.6630%" y="581" width="0.0160%" height="15" fill="rgb(243,229,36)" fg:x="260060" fg:w="44"/><text x="94.9130%" y="591.50"></text></g><g><title>__memcpy_avx_unaligned_erms (33 samples, 0.01%)</title><rect x="94.6670%" y="565" width="0.0120%" height="15" fill="rgb(251,163,40)" fg:x="260071" fg:w="33"/><text x="94.9170%" y="575.50"></text></g><g><title>&lt;std::io::buffered::bufwriter::BufWriter&lt;W&gt; as std::io::Write&gt;::write_all (104 samples, 0.04%)</title><rect x="94.6415%" y="613" width="0.0379%" height="15" fill="rgb(237,222,12)" fg:x="260001" fg:w="104"/><text x="94.8915%" y="623.50"></text></g><g><title>std::io::buffered::bufwriter::BufWriter&lt;W&gt;::write_to_buffer_unchecked (72 samples, 0.03%)</title><rect x="94.6531%" y="597" width="0.0262%" height="15" fill="rgb(248,132,6)" fg:x="260033" fg:w="72"/><text x="94.9031%" y="607.50"></text></g><g><title>__GI___libc_write (12,938 samples, 4.71%)</title><rect x="94.7059%" y="549" width="4.7095%" height="15" fill="rgb(227,167,50)" fg:x="260178" fg:w="12938"/><text x="94.9559%" y="559.50">__GI_..</text></g><g><title>[unknown] (12,688 samples, 4.62%)</title><rect x="94.7969%" y="533" width="4.6185%" height="15" fill="rgb(242,84,37)" fg:x="260428" fg:w="12688"/><text x="95.0469%" y="543.50">[unkn..</text></g><g><title>[unknown] (12,385 samples, 4.51%)</title><rect x="94.9072%" y="517" width="4.5082%" height="15" fill="rgb(212,4,50)" fg:x="260731" fg:w="12385"/><text x="95.1572%" y="527.50">[unkn..</text></g><g><title>[unknown] (12,277 samples, 4.47%)</title><rect x="94.9465%" y="501" width="4.4689%" height="15" fill="rgb(230,228,32)" fg:x="260839" fg:w="12277"/><text x="95.1965%" y="511.50">[unkn..</text></g><g><title>[unknown] (12,146 samples, 4.42%)</title><rect x="94.9942%" y="485" width="4.4212%" height="15" fill="rgb(248,217,23)" fg:x="260970" fg:w="12146"/><text x="95.2442%" y="495.50">[unkn..</text></g><g><title>[unknown] (11,894 samples, 4.33%)</title><rect x="95.0859%" y="469" width="4.3295%" height="15" fill="rgb(238,197,32)" fg:x="261222" fg:w="11894"/><text x="95.3359%" y="479.50">[unkn..</text></g><g><title>[unknown] (11,580 samples, 4.22%)</title><rect x="95.2002%" y="453" width="4.2152%" height="15" fill="rgb(236,106,1)" fg:x="261536" fg:w="11580"/><text x="95.4502%" y="463.50">[unkn..</text></g><g><title>[unknown] (11,356 samples, 4.13%)</title><rect x="95.2818%" y="437" width="4.1336%" height="15" fill="rgb(219,228,13)" fg:x="261760" fg:w="11356"/><text x="95.5318%" y="447.50">[unkn..</text></g><g><title>[unknown] (11,160 samples, 4.06%)</title><rect x="95.3531%" y="421" width="4.0623%" height="15" fill="rgb(238,30,35)" fg:x="261956" fg:w="11160"/><text x="95.6031%" y="431.50">[unk..</text></g><g><title>[unknown] (10,597 samples, 3.86%)</title><rect x="95.5581%" y="405" width="3.8574%" height="15" fill="rgb(236,70,23)" fg:x="262519" fg:w="10597"/><text x="95.8081%" y="415.50">[unk..</text></g><g><title>[unknown] (9,402 samples, 3.42%)</title><rect x="95.9930%" y="389" width="3.4224%" height="15" fill="rgb(249,104,48)" fg:x="263714" fg:w="9402"/><text x="96.2430%" y="399.50">[un..</text></g><g><title>[unknown] (7,415 samples, 2.70%)</title><rect x="96.7163%" y="373" width="2.6991%" height="15" fill="rgb(254,117,50)" fg:x="265701" fg:w="7415"/><text x="96.9663%" y="383.50">[u..</text></g><g><title>[unknown] (6,759 samples, 2.46%)</title><rect x="96.9551%" y="357" width="2.4603%" height="15" fill="rgb(223,152,4)" fg:x="266357" fg:w="6759"/><text x="97.2051%" y="367.50">[u..</text></g><g><title>[unknown] (5,578 samples, 2.03%)</title><rect x="97.3850%" y="341" width="2.0304%" height="15" fill="rgb(245,6,2)" fg:x="267538" fg:w="5578"/><text x="97.6350%" y="351.50">[..</text></g><g><title>[unknown] (3,908 samples, 1.42%)</title><rect x="97.9929%" y="325" width="1.4225%" height="15" fill="rgb(249,150,24)" fg:x="269208" fg:w="3908"/><text x="98.2429%" y="335.50"></text></g><g><title>[unknown] (1,807 samples, 0.66%)</title><rect x="98.7577%" y="309" width="0.6578%" height="15" fill="rgb(228,185,42)" fg:x="271309" fg:w="1807"/><text x="99.0077%" y="319.50"></text></g><g><title>[unknown] (1,762 samples, 0.64%)</title><rect x="98.7740%" y="293" width="0.6414%" height="15" fill="rgb(226,39,33)" fg:x="271354" fg:w="1762"/><text x="99.0240%" y="303.50"></text></g><g><title>[unknown] (1,016 samples, 0.37%)</title><rect x="99.0456%" y="277" width="0.3698%" height="15" fill="rgb(221,166,19)" fg:x="272100" fg:w="1016"/><text x="99.2956%" y="287.50"></text></g><g><title>[unknown] (790 samples, 0.29%)</title><rect x="99.1278%" y="261" width="0.2876%" height="15" fill="rgb(209,109,2)" fg:x="272326" fg:w="790"/><text x="99.3778%" y="271.50"></text></g><g><title>[unknown] (413 samples, 0.15%)</title><rect x="99.2651%" y="245" width="0.1503%" height="15" fill="rgb(252,216,26)" fg:x="272703" fg:w="413"/><text x="99.5151%" y="255.50"></text></g><g><title>[unknown] (194 samples, 0.07%)</title><rect x="99.3448%" y="229" width="0.0706%" height="15" fill="rgb(227,173,36)" fg:x="272922" fg:w="194"/><text x="99.5948%" y="239.50"></text></g><g><title>[unknown] (167 samples, 0.06%)</title><rect x="99.3546%" y="213" width="0.0608%" height="15" fill="rgb(209,90,7)" fg:x="272949" fg:w="167"/><text x="99.6046%" y="223.50"></text></g><g><title>[unknown] (132 samples, 0.05%)</title><rect x="99.3674%" y="197" width="0.0480%" height="15" fill="rgb(250,194,11)" fg:x="272984" fg:w="132"/><text x="99.6174%" y="207.50"></text></g><g><title>&lt;std::io::stdio::StdoutRaw as std::io::Write&gt;::write (12,992 samples, 4.73%)</title><rect x="94.7059%" y="597" width="4.7291%" height="15" fill="rgb(220,72,50)" fg:x="260178" fg:w="12992"/><text x="94.9559%" y="607.50">&lt;std::..</text></g><g><title>&lt;std::sys::unix::stdio::Stdout as std::io::Write&gt;::write (12,992 samples, 4.73%)</title><rect x="94.7059%" y="581" width="4.7291%" height="15" fill="rgb(222,106,48)" fg:x="260178" fg:w="12992"/><text x="94.9559%" y="591.50">&lt;std::..</text></g><g><title>std::sys::unix::fd::FileDesc::write (12,992 samples, 4.73%)</title><rect x="94.7059%" y="565" width="4.7291%" height="15" fill="rgb(216,220,45)" fg:x="260178" fg:w="12992"/><text x="94.9559%" y="575.50">std::s..</text></g><g><title>std::sys::unix::cvt (46 samples, 0.02%)</title><rect x="99.4183%" y="549" width="0.0167%" height="15" fill="rgb(234,112,18)" fg:x="273124" fg:w="46"/><text x="99.6683%" y="559.50"></text></g><g><title>&lt;std::io::buffered::bufwriter::BufWriter&lt;W&gt;::flush_buf::BufGuard as core::ops::drop::Drop&gt;::drop (32 samples, 0.01%)</title><rect x="99.4351%" y="581" width="0.0116%" height="15" fill="rgb(206,179,9)" fg:x="273170" fg:w="32"/><text x="99.6851%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::io::buffered::bufwriter::BufWriter&lt;W&gt;::flush_buf::BufGuard&gt; (47 samples, 0.02%)</title><rect x="99.4351%" y="597" width="0.0171%" height="15" fill="rgb(215,115,40)" fg:x="273170" fg:w="47"/><text x="99.6851%" y="607.50"></text></g><g><title>std::io::buffered::bufwriter::BufWriter&lt;W&gt;::flush_buf (13,124 samples, 4.78%)</title><rect x="94.6801%" y="613" width="4.7772%" height="15" fill="rgb(222,69,34)" fg:x="260107" fg:w="13124"/><text x="94.9301%" y="623.50">std::i..</text></g><g><title>&lt;std::io::buffered::linewritershim::LineWriterShim&lt;W&gt; as std::io::Write&gt;::write_all (13,308 samples, 4.84%)</title><rect x="94.6386%" y="629" width="4.8442%" height="15" fill="rgb(209,161,10)" fg:x="259993" fg:w="13308"/><text x="94.8886%" y="639.50">&lt;std::..</text></g><g><title>std::sys_common::memchr::memrchr (64 samples, 0.02%)</title><rect x="99.4595%" y="613" width="0.0233%" height="15" fill="rgb(217,6,38)" fg:x="273237" fg:w="64"/><text x="99.7095%" y="623.50"></text></g><g><title>std::sys::unix::memchr::memrchr (64 samples, 0.02%)</title><rect x="99.4595%" y="597" width="0.0233%" height="15" fill="rgb(229,229,48)" fg:x="273237" fg:w="64"/><text x="99.7095%" y="607.50"></text></g><g><title>std::sys::unix::memchr::memrchr::memrchr_specific (64 samples, 0.02%)</title><rect x="99.4595%" y="581" width="0.0233%" height="15" fill="rgb(225,21,28)" fg:x="273237" fg:w="64"/><text x="99.7095%" y="591.50"></text></g><g><title>__memrchr_avx2 (57 samples, 0.02%)</title><rect x="99.4620%" y="565" width="0.0207%" height="15" fill="rgb(206,33,13)" fg:x="273244" fg:w="57"/><text x="99.7120%" y="575.50"></text></g><g><title>&lt;std::io::buffered::linewriter::LineWriter&lt;W&gt; as std::io::Write&gt;::write_all (13,309 samples, 4.84%)</title><rect x="94.6386%" y="645" width="4.8445%" height="15" fill="rgb(242,178,17)" fg:x="259993" fg:w="13309"/><text x="94.8886%" y="655.50">&lt;std::..</text></g><g><title>&lt;std::io::Write::write_fmt::Adapter&lt;T&gt; as core::fmt::Write&gt;::write_str (13,386 samples, 4.87%)</title><rect x="94.6269%" y="677" width="4.8726%" height="15" fill="rgb(220,162,5)" fg:x="259961" fg:w="13386"/><text x="94.8769%" y="687.50">&lt;std::..</text></g><g><title>&lt;std::io::stdio::StdoutLock as std::io::Write&gt;::write_all (13,362 samples, 4.86%)</title><rect x="94.6357%" y="661" width="4.8638%" height="15" fill="rgb(210,33,43)" fg:x="259985" fg:w="13362"/><text x="94.8857%" y="671.50">&lt;std::..</text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefMut&lt;std::io::buffered::linewriter::LineWriter&lt;std::io::stdio::StdoutRaw&gt;&gt;&gt; (29 samples, 0.01%)</title><rect x="99.4889%" y="645" width="0.0106%" height="15" fill="rgb(216,116,54)" fg:x="273318" fg:w="29"/><text x="99.7389%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::BorrowRefMut&gt; (29 samples, 0.01%)</title><rect x="99.4889%" y="629" width="0.0106%" height="15" fill="rgb(249,92,24)" fg:x="273318" fg:w="29"/><text x="99.7389%" y="639.50"></text></g><g><title>&lt;core::cell::BorrowRefMut as core::ops::drop::Drop&gt;::drop (29 samples, 0.01%)</title><rect x="99.4889%" y="613" width="0.0106%" height="15" fill="rgb(231,189,14)" fg:x="273318" fg:w="29"/><text x="99.7389%" y="623.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::set (29 samples, 0.01%)</title><rect x="99.4889%" y="597" width="0.0106%" height="15" fill="rgb(230,8,41)" fg:x="273318" fg:w="29"/><text x="99.7389%" y="607.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::replace (29 samples, 0.01%)</title><rect x="99.4889%" y="581" width="0.0106%" height="15" fill="rgb(249,7,27)" fg:x="273318" fg:w="29"/><text x="99.7389%" y="591.50"></text></g><g><title>core::mem::replace (29 samples, 0.01%)</title><rect x="99.4889%" y="565" width="0.0106%" height="15" fill="rgb(232,86,5)" fg:x="273318" fg:w="29"/><text x="99.7389%" y="575.50"></text></g><g><title>core::ptr::write (29 samples, 0.01%)</title><rect x="99.4889%" y="549" width="0.0106%" height="15" fill="rgb(224,175,18)" fg:x="273318" fg:w="29"/><text x="99.7389%" y="559.50"></text></g><g><title>core::fmt::Arguments::new_v1 (53 samples, 0.02%)</title><rect x="99.5148%" y="645" width="0.0193%" height="15" fill="rgb(220,129,12)" fg:x="273389" fg:w="53"/><text x="99.7648%" y="655.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (29 samples, 0.01%)</title><rect x="99.5559%" y="629" width="0.0106%" height="15" fill="rgb(210,19,36)" fg:x="273502" fg:w="29"/><text x="99.8059%" y="639.50"></text></g><g><title>&lt;std::io::buffered::linewriter::LineWriter&lt;W&gt; as std::io::Write&gt;::write_all (59 samples, 0.02%)</title><rect x="99.5708%" y="597" width="0.0215%" height="15" fill="rgb(219,96,14)" fg:x="273543" fg:w="59"/><text x="99.8208%" y="607.50"></text></g><g><title>&lt;std::io::buffered::linewritershim::LineWriterShim&lt;W&gt; as std::io::Write&gt;::write_all (59 samples, 0.02%)</title><rect x="99.5708%" y="581" width="0.0215%" height="15" fill="rgb(249,106,1)" fg:x="273543" fg:w="59"/><text x="99.8208%" y="591.50"></text></g><g><title>&lt;std::io::Write::write_fmt::Adapter&lt;T&gt; as core::fmt::Write&gt;::write_str (74 samples, 0.03%)</title><rect x="99.5665%" y="629" width="0.0269%" height="15" fill="rgb(249,155,20)" fg:x="273531" fg:w="74"/><text x="99.8165%" y="639.50"></text></g><g><title>&lt;std::io::stdio::StdoutLock as std::io::Write&gt;::write_all (66 samples, 0.02%)</title><rect x="99.5694%" y="613" width="0.0240%" height="15" fill="rgb(244,168,9)" fg:x="273539" fg:w="66"/><text x="99.8194%" y="623.50"></text></g><g><title>&lt;std::io::buffered::bufwriter::BufWriter&lt;W&gt; as std::io::Write&gt;::write_all (51 samples, 0.02%)</title><rect x="99.6324%" y="517" width="0.0186%" height="15" fill="rgb(216,23,50)" fg:x="273712" fg:w="51"/><text x="99.8824%" y="527.50"></text></g><g><title>std::io::buffered::bufwriter::BufWriter&lt;W&gt;::write_to_buffer_unchecked (45 samples, 0.02%)</title><rect x="99.6345%" y="501" width="0.0164%" height="15" fill="rgb(224,219,20)" fg:x="273718" fg:w="45"/><text x="99.8845%" y="511.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (36 samples, 0.01%)</title><rect x="99.6378%" y="485" width="0.0131%" height="15" fill="rgb(222,156,15)" fg:x="273727" fg:w="36"/><text x="99.8878%" y="495.50"></text></g><g><title>__memcpy_avx_unaligned_erms (29 samples, 0.01%)</title><rect x="99.6404%" y="469" width="0.0106%" height="15" fill="rgb(231,97,17)" fg:x="273734" fg:w="29"/><text x="99.8904%" y="479.50"></text></g><g><title>&lt;std::io::buffered::linewriter::LineWriter&lt;W&gt; as std::io::Write&gt;::write_all (165 samples, 0.06%)</title><rect x="99.6324%" y="549" width="0.0601%" height="15" fill="rgb(218,70,48)" fg:x="273712" fg:w="165"/><text x="99.8824%" y="559.50"></text></g><g><title>&lt;std::io::buffered::linewritershim::LineWriterShim&lt;W&gt; as std::io::Write&gt;::write_all (165 samples, 0.06%)</title><rect x="99.6324%" y="533" width="0.0601%" height="15" fill="rgb(212,196,52)" fg:x="273712" fg:w="165"/><text x="99.8824%" y="543.50"></text></g><g><title>std::sys_common::memchr::memrchr (91 samples, 0.03%)</title><rect x="99.6593%" y="517" width="0.0331%" height="15" fill="rgb(243,203,18)" fg:x="273786" fg:w="91"/><text x="99.9093%" y="527.50"></text></g><g><title>std::sys::unix::memchr::memrchr (91 samples, 0.03%)</title><rect x="99.6593%" y="501" width="0.0331%" height="15" fill="rgb(252,125,41)" fg:x="273786" fg:w="91"/><text x="99.9093%" y="511.50"></text></g><g><title>std::sys::unix::memchr::memrchr::memrchr_specific (91 samples, 0.03%)</title><rect x="99.6593%" y="485" width="0.0331%" height="15" fill="rgb(223,180,33)" fg:x="273786" fg:w="91"/><text x="99.9093%" y="495.50"></text></g><g><title>__memrchr_avx2 (74 samples, 0.03%)</title><rect x="99.6655%" y="469" width="0.0269%" height="15" fill="rgb(254,159,46)" fg:x="273803" fg:w="74"/><text x="99.9155%" y="479.50"></text></g><g><title>&lt;std::io::Write::write_fmt::Adapter&lt;T&gt; as core::fmt::Write&gt;::write_str (219 samples, 0.08%)</title><rect x="99.6193%" y="581" width="0.0797%" height="15" fill="rgb(254,38,10)" fg:x="273676" fg:w="219"/><text x="99.8693%" y="591.50"></text></g><g><title>&lt;std::io::stdio::StdoutLock as std::io::Write&gt;::write_all (199 samples, 0.07%)</title><rect x="99.6265%" y="565" width="0.0724%" height="15" fill="rgb(208,217,32)" fg:x="273696" fg:w="199"/><text x="99.8765%" y="575.50"></text></g><g><title>core::fmt::Formatter::pad_integral::write_prefix (40 samples, 0.01%)</title><rect x="99.7350%" y="565" width="0.0146%" height="15" fill="rgb(221,120,13)" fg:x="273994" fg:w="40"/><text x="99.9850%" y="575.50"></text></g><g><title>core::fmt::Formatter::pad_integral (154 samples, 0.06%)</title><rect x="99.6990%" y="581" width="0.0561%" height="15" fill="rgb(246,54,52)" fg:x="273895" fg:w="154"/><text x="99.9490%" y="591.50"></text></g><g><title>core::fmt::write (14,144 samples, 5.15%)</title><rect x="94.6076%" y="693" width="5.1485%" height="15" fill="rgb(242,34,25)" fg:x="259908" fg:w="14144"/><text x="94.8576%" y="703.50">core::..</text></g><g><title>core::fmt::rt::Argument::fmt (690 samples, 0.25%)</title><rect x="99.5050%" y="677" width="0.2512%" height="15" fill="rgb(247,209,9)" fg:x="273362" fg:w="690"/><text x="99.7550%" y="687.50"></text></g><g><title>&lt;coldbrew::runtime::ProgramCounter as core::fmt::Display&gt;::fmt (690 samples, 0.25%)</title><rect x="99.5050%" y="661" width="0.2512%" height="15" fill="rgb(228,71,26)" fg:x="273362" fg:w="690"/><text x="99.7550%" y="671.50"></text></g><g><title>core::fmt::write (584 samples, 0.21%)</title><rect x="99.5435%" y="645" width="0.2126%" height="15" fill="rgb(222,145,49)" fg:x="273468" fg:w="584"/><text x="99.7935%" y="655.50"></text></g><g><title>core::fmt::rt::Argument::fmt (429 samples, 0.16%)</title><rect x="99.6000%" y="629" width="0.1562%" height="15" fill="rgb(218,121,17)" fg:x="273623" fg:w="429"/><text x="99.8500%" y="639.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u64&gt;::fmt (429 samples, 0.16%)</title><rect x="99.6000%" y="613" width="0.1562%" height="15" fill="rgb(244,50,7)" fg:x="273623" fg:w="429"/><text x="99.8500%" y="623.50"></text></g><g><title>core::fmt::num::imp::fmt_u64 (413 samples, 0.15%)</title><rect x="99.6058%" y="597" width="0.1503%" height="15" fill="rgb(246,229,37)" fg:x="273639" fg:w="413"/><text x="99.8558%" y="607.50"></text></g><g><title>std::io::Write::write_fmt (14,170 samples, 5.16%)</title><rect x="94.6004%" y="709" width="5.1579%" height="15" fill="rgb(225,18,5)" fg:x="259888" fg:w="14170"/><text x="94.8504%" y="719.50">std::i..</text></g><g><title>&lt;std::io::stdio::Stdout as std::io::Write&gt;::write_fmt (14,522 samples, 5.29%)</title><rect x="94.5367%" y="741" width="5.2861%" height="15" fill="rgb(213,204,8)" fg:x="259713" fg:w="14522"/><text x="94.7867%" y="751.50">&lt;std::..</text></g><g><title>&lt;&amp;std::io::stdio::Stdout as std::io::Write&gt;::write_fmt (14,513 samples, 5.28%)</title><rect x="94.5399%" y="725" width="5.2828%" height="15" fill="rgb(238,103,6)" fg:x="259722" fg:w="14513"/><text x="94.7899%" y="735.50">&lt;&amp;std:..</text></g><g><title>std::io::stdio::Stdout::lock (177 samples, 0.06%)</title><rect x="99.7583%" y="709" width="0.0644%" height="15" fill="rgb(222,25,35)" fg:x="274058" fg:w="177"/><text x="100.0083%" y="719.50"></text></g><g><title>std::sync::remutex::ReentrantMutex&lt;T&gt;::lock (171 samples, 0.06%)</title><rect x="99.7605%" y="693" width="0.0622%" height="15" fill="rgb(213,203,35)" fg:x="274064" fg:w="171"/><text x="100.0105%" y="703.50"></text></g><g><title>std::sys::unix::locks::futex_mutex::Mutex::lock (154 samples, 0.06%)</title><rect x="99.7667%" y="677" width="0.0561%" height="15" fill="rgb(221,79,53)" fg:x="274081" fg:w="154"/><text x="100.0167%" y="687.50"></text></g><g><title>core::sync::atomic::AtomicU32::compare_exchange (146 samples, 0.05%)</title><rect x="99.7696%" y="661" width="0.0531%" height="15" fill="rgb(243,200,35)" fg:x="274089" fg:w="146"/><text x="100.0196%" y="671.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (146 samples, 0.05%)</title><rect x="99.7696%" y="645" width="0.0531%" height="15" fill="rgb(248,60,25)" fg:x="274089" fg:w="146"/><text x="100.0196%" y="655.50"></text></g><g><title>coldbrew::runtime::Runtime::run (248,888 samples, 90.60%)</title><rect x="9.2290%" y="789" width="90.5963%" height="15" fill="rgb(227,53,46)" fg:x="25354" fg:w="248888"/><text x="9.4790%" y="799.50">coldbrew::runtime::Runtime::run</text></g><g><title>std::io::stdio::_print (14,542 samples, 5.29%)</title><rect x="94.5319%" y="773" width="5.2934%" height="15" fill="rgb(216,120,32)" fg:x="259700" fg:w="14542"/><text x="94.7819%" y="783.50">std::i..</text></g><g><title>std::io::stdio::print_to (14,536 samples, 5.29%)</title><rect x="94.5341%" y="757" width="5.2912%" height="15" fill="rgb(220,134,1)" fg:x="259706" fg:w="14536"/><text x="94.7841%" y="767.50">std::i..</text></g><g><title>__libc_start_main_impl (248,898 samples, 90.60%)</title><rect x="9.2257%" y="1061" width="90.6000%" height="15" fill="rgb(237,168,5)" fg:x="25345" fg:w="248898"/><text x="9.4757%" y="1071.50">__libc_start_main_impl</text></g><g><title>__libc_start_call_main (248,898 samples, 90.60%)</title><rect x="9.2257%" y="1045" width="90.6000%" height="15" fill="rgb(231,100,33)" fg:x="25345" fg:w="248898"/><text x="9.4757%" y="1055.50">__libc_start_call_main</text></g><g><title>main (248,898 samples, 90.60%)</title><rect x="9.2257%" y="1029" width="90.6000%" height="15" fill="rgb(236,177,47)" fg:x="25345" fg:w="248898"/><text x="9.4757%" y="1039.50">main</text></g><g><title>std::rt::lang_start (248,898 samples, 90.60%)</title><rect x="9.2257%" y="1013" width="90.6000%" height="15" fill="rgb(235,7,49)" fg:x="25345" fg:w="248898"/><text x="9.4757%" y="1023.50">std::rt::lang_start</text></g><g><title>std::rt::lang_start_internal (248,898 samples, 90.60%)</title><rect x="9.2257%" y="997" width="90.6000%" height="15" fill="rgb(232,119,22)" fg:x="25345" fg:w="248898"/><text x="9.4757%" y="1007.50">std::rt::lang_start_internal</text></g><g><title>std::panic::catch_unwind (248,898 samples, 90.60%)</title><rect x="9.2257%" y="981" width="90.6000%" height="15" fill="rgb(254,73,53)" fg:x="25345" fg:w="248898"/><text x="9.4757%" y="991.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (248,898 samples, 90.60%)</title><rect x="9.2257%" y="965" width="90.6000%" height="15" fill="rgb(251,35,20)" fg:x="25345" fg:w="248898"/><text x="9.4757%" y="975.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (248,898 samples, 90.60%)</title><rect x="9.2257%" y="949" width="90.6000%" height="15" fill="rgb(241,119,20)" fg:x="25345" fg:w="248898"/><text x="9.4757%" y="959.50">std::panicking::try::do_call</text></g><g><title>std::rt::lang_start_internal::{{closure}} (248,898 samples, 90.60%)</title><rect x="9.2257%" y="933" width="90.6000%" height="15" fill="rgb(207,102,14)" fg:x="25345" fg:w="248898"/><text x="9.4757%" y="943.50">std::rt::lang_start_internal::{{closure}}</text></g><g><title>std::panic::catch_unwind (248,898 samples, 90.60%)</title><rect x="9.2257%" y="917" width="90.6000%" height="15" fill="rgb(248,201,50)" fg:x="25345" fg:w="248898"/><text x="9.4757%" y="927.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (248,898 samples, 90.60%)</title><rect x="9.2257%" y="901" width="90.6000%" height="15" fill="rgb(222,185,44)" fg:x="25345" fg:w="248898"/><text x="9.4757%" y="911.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (248,898 samples, 90.60%)</title><rect x="9.2257%" y="885" width="90.6000%" height="15" fill="rgb(218,107,18)" fg:x="25345" fg:w="248898"/><text x="9.4757%" y="895.50">std::panicking::try::do_call</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (248,898 samples, 90.60%)</title><rect x="9.2257%" y="869" width="90.6000%" height="15" fill="rgb(237,177,39)" fg:x="25345" fg:w="248898"/><text x="9.4757%" y="879.50">core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once</text></g><g><title>std::rt::lang_start::{{closure}} (248,898 samples, 90.60%)</title><rect x="9.2257%" y="853" width="90.6000%" height="15" fill="rgb(246,69,6)" fg:x="25345" fg:w="248898"/><text x="9.4757%" y="863.50">std::rt::lang_start::{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (248,898 samples, 90.60%)</title><rect x="9.2257%" y="837" width="90.6000%" height="15" fill="rgb(234,208,37)" fg:x="25345" fg:w="248898"/><text x="9.4757%" y="847.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>core::ops::function::FnOnce::call_once (248,898 samples, 90.60%)</title><rect x="9.2257%" y="821" width="90.6000%" height="15" fill="rgb(225,4,6)" fg:x="25345" fg:w="248898"/><text x="9.4757%" y="831.50">core::ops::function::FnOnce::call_once</text></g><g><title>coldbrew::main (248,898 samples, 90.60%)</title><rect x="9.2257%" y="805" width="90.6000%" height="15" fill="rgb(233,45,0)" fg:x="25345" fg:w="248898"/><text x="9.4757%" y="815.50">coldbrew::main</text></g><g><title>_start (248,899 samples, 90.60%)</title><rect x="9.2257%" y="1077" width="90.6003%" height="15" fill="rgb(226,136,5)" fg:x="25345" fg:w="248899"/><text x="9.4757%" y="1087.50">_start</text></g><g><title>coldbrew::runtime::Runtime::load (29 samples, 0.01%)</title><rect x="99.8580%" y="1077" width="0.0106%" height="15" fill="rgb(211,91,47)" fg:x="274332" fg:w="29"/><text x="100.1080%" y="1087.50"></text></g><g><title>core::cmp::Ord::max (35 samples, 0.01%)</title><rect x="99.8857%" y="1077" width="0.0127%" height="15" fill="rgb(242,88,51)" fg:x="274408" fg:w="35"/><text x="100.1357%" y="1087.50"></text></g><g><title>dynasmrt::Assembler&lt;R&gt;::finalize (47 samples, 0.02%)</title><rect x="99.9272%" y="1077" width="0.0171%" height="15" fill="rgb(230,91,28)" fg:x="274522" fg:w="47"/><text x="100.1772%" y="1087.50"></text></g><g><title>std::io::stdio::STDOUT (30 samples, 0.01%)</title><rect x="99.9589%" y="1077" width="0.0109%" height="15" fill="rgb(254,186,29)" fg:x="274609" fg:w="30"/><text x="100.2089%" y="1087.50"></text></g><g><title>std::io::stdio::_print (67 samples, 0.02%)</title><rect x="99.9698%" y="1077" width="0.0244%" height="15" fill="rgb(238,6,4)" fg:x="274639" fg:w="67"/><text x="100.2198%" y="1087.50"></text></g><g><title>std::io::stdio::print_to (61 samples, 0.02%)</title><rect x="99.9720%" y="1061" width="0.0222%" height="15" fill="rgb(221,151,16)" fg:x="274645" fg:w="61"/><text x="100.2220%" y="1071.50"></text></g><g><title>coldbrew (274,716 samples, 100.00%)</title><rect x="0.0000%" y="1093" width="99.9978%" height="15" fill="rgb(251,143,52)" fg:x="0" fg:w="274716"/><text x="0.2500%" y="1103.50">coldbrew</text></g><g><title>all (274,722 samples, 100%)</title><rect x="0.0000%" y="1109" width="100.0000%" height="15" fill="rgb(206,90,15)" fg:x="0" fg:w="274722"/><text x="0.2500%" y="1119.50"></text></g></svg></svg>